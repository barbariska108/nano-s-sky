
bin/app.elf:     file format elf32-littlearm


Disassembly of section .text:

c0d00000 <main>:
    .flags = COIN_FLAGS,
#endif // COIN_FLAGS
    .kind = COIN_KIND,
};

__attribute__((section(".boot"))) int main(int arg0) {
c0d00000:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d00002:	b08b      	sub	sp, #44	; 0x2c
c0d00004:	4604      	mov	r4, r0
    }
    END_TRY;
// no return
#else
    // exit critical section
    __asm volatile("cpsie i");
c0d00006:	b662      	cpsie	i

    if (arg0) {
c0d00008:	2c00      	cmp	r4, #0
c0d0000a:	d009      	beq.n	c0d00020 <main+0x20>
        // is ID 1 ?
        if (((unsigned int *)arg0)[0] != 0x100) {
c0d0000c:	2001      	movs	r0, #1
c0d0000e:	0200      	lsls	r0, r0, #8
c0d00010:	6821      	ldr	r1, [r4, #0]
c0d00012:	4281      	cmp	r1, r0
c0d00014:	d002      	beq.n	c0d0001c <main+0x1c>
            os_lib_throw(INVALID_PARAMETER);
c0d00016:	2002      	movs	r0, #2
c0d00018:	f006 f84a 	bl	c0d060b0 <os_lib_throw>
        }
        // grab the coin config structure from the first parameter
        G_coin_config = (btchip_altcoin_config_t *)((unsigned int *)arg0)[1];
c0d0001c:	6860      	ldr	r0, [r4, #4]
c0d0001e:	e003      	b.n	c0d00028 <main+0x28>
    } else {
        G_coin_config = (btchip_altcoin_config_t *)PIC(&C_coin_config);
c0d00020:	4825      	ldr	r0, [pc, #148]	; (c0d000b8 <_nvram_data_size+0x78>)
c0d00022:	4478      	add	r0, pc
c0d00024:	f005 fd6a 	bl	c0d05afc <pic>
c0d00028:	4920      	ldr	r1, [pc, #128]	; (c0d000ac <_nvram_data_size+0x6c>)
c0d0002a:	6008      	str	r0, [r1, #0]
    }

    // ensure exception will work as planned
    os_boot();
c0d0002c:	f004 fa0a 	bl	c0d04444 <os_boot>
c0d00030:	4c1f      	ldr	r4, [pc, #124]	; (c0d000b0 <_nvram_data_size+0x70>)
c0d00032:	4d22      	ldr	r5, [pc, #136]	; (c0d000bc <_nvram_data_size+0x7c>)
c0d00034:	447d      	add	r5, pc
c0d00036:	2600      	movs	r6, #0

    for (;;) {
        UX_INIT();
c0d00038:	22b0      	movs	r2, #176	; 0xb0
c0d0003a:	4620      	mov	r0, r4
c0d0003c:	4631      	mov	r1, r6
c0d0003e:	Address 0xc0d0003e is out of bounds.


c0d00040 <_nvram_data_size>:
c0d00040:	faaf 466f 			; <UNDEFINED> instruction: 0xfaaf466f
        BEGIN_TRY {
            TRY {
c0d00044:	4638      	mov	r0, r7
c0d00046:	f007 fc35 	bl	c0d078b4 <setjmp>
c0d0004a:	8538      	strh	r0, [r7, #40]	; 0x28
c0d0004c:	b280      	uxth	r0, r0
c0d0004e:	2800      	cmp	r0, #0
c0d00050:	d002      	beq.n	c0d00058 <_nvram_data_size+0x18>
c0d00052:	2810      	cmp	r0, #16
c0d00054:	d0ef      	beq.n	c0d00036 <main+0x36>
c0d00056:	e024      	b.n	c0d000a2 <_nvram_data_size+0x62>
c0d00058:	466f      	mov	r7, sp
c0d0005a:	4638      	mov	r0, r7
c0d0005c:	f004 f9f5 	bl	c0d0444a <try_context_set>
                io_seproxyhal_init();
c0d00060:	f004 fc92 	bl	c0d04988 <io_seproxyhal_init>

                btchip_context_init();
c0d00064:	f001 fe12 	bl	c0d01c8c <btchip_context_init>

                USB_power(0);
c0d00068:	4630      	mov	r0, r6
c0d0006a:	f007 fa71 	bl	c0d07550 <USB_power>
                USB_power(1);
c0d0006e:	2001      	movs	r0, #1
c0d00070:	f007 fa6e 	bl	c0d07550 <USB_power>
}

#endif // #if defined(TARGET_NANOS)

void ui_idle(void) {
    ux_step_count = 0;
c0d00074:	480f      	ldr	r0, [pc, #60]	; (c0d000b4 <_nvram_data_size+0x74>)
c0d00076:	6006      	str	r6, [r0, #0]

#if defined(TARGET_BLUE)
    UX_DISPLAY(ui_idle_blue, NULL);
#elif defined(TARGET_NANOS)
    UX_MENU_DISPLAY(0, menu_main, NULL);
c0d00078:	4630      	mov	r0, r6
c0d0007a:	4629      	mov	r1, r5
c0d0007c:	4632      	mov	r2, r6
c0d0007e:	f005 f8ff 	bl	c0d05280 <ux_menu_display>
                UX_SET_STATUS_BAR_COLOR(0xFFFFFF, COLOR_APP);
#endif // TARGET_ID

                ui_idle();

                app_main();
c0d00082:	f000 f8a9 	bl	c0d001d8 <app_main>
                continue;
            }
            CATCH_ALL {
                break;
            }
            FINALLY {
c0d00086:	f004 fb4d 	bl	c0d04724 <try_context_get>
c0d0008a:	42b8      	cmp	r0, r7
c0d0008c:	d103      	bne.n	c0d00096 <_nvram_data_size+0x56>
c0d0008e:	f004 fb4b 	bl	c0d04728 <try_context_get_previous>
c0d00092:	f004 f9da 	bl	c0d0444a <try_context_set>
c0d00096:	4668      	mov	r0, sp
            }
        }
        END_TRY;
c0d00098:	8d00      	ldrh	r0, [r0, #40]	; 0x28
c0d0009a:	2800      	cmp	r0, #0
c0d0009c:	d0cb      	beq.n	c0d00036 <main+0x36>
c0d0009e:	f004 fb3c 	bl	c0d0471a <os_longjmp>
    }
    app_exit();
c0d000a2:	f004 f9ab 	bl	c0d043fc <app_exit>
#endif // USE_LIB_BITCOIN
    return 0;
c0d000a6:	2000      	movs	r0, #0
c0d000a8:	b00b      	add	sp, #44	; 0x2c
c0d000aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d000ac:	20001c24 	.word	0x20001c24
c0d000b0:	20001c2c 	.word	0x20001c2c
c0d000b4:	20001d30 	.word	0x20001d30
c0d000b8:	0000854e 	.word	0x0000854e
c0d000bc:	00007bd4 	.word	0x00007bd4

c0d000c0 <app_dispatch>:

#include "btchip_apdu_constants.h"

#define BTCHIP_TECHNICAL_NOT_IMPLEMENTED 0x99

void app_dispatch(void) {
c0d000c0:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d000c2:	b08b      	sub	sp, #44	; 0x2c
    unsigned char cla;
    unsigned char ins;
    unsigned char dispatched;

    // nothing to reply for now
    btchip_context_D.outLength = 0;
c0d000c4:	483b      	ldr	r0, [pc, #236]	; (c0d001b4 <app_dispatch+0xf4>)
c0d000c6:	4c3c      	ldr	r4, [pc, #240]	; (c0d001b8 <app_dispatch+0xf8>)
c0d000c8:	2600      	movs	r6, #0
c0d000ca:	5226      	strh	r6, [r4, r0]
    btchip_context_D.io_flags = 0;
c0d000cc:	2021      	movs	r0, #33	; 0x21
c0d000ce:	0100      	lsls	r0, r0, #4
c0d000d0:	5426      	strb	r6, [r4, r0]
c0d000d2:	466d      	mov	r5, sp

    BEGIN_TRY {
        TRY {
c0d000d4:	4628      	mov	r0, r5
c0d000d6:	f007 fbed 	bl	c0d078b4 <setjmp>
c0d000da:	8528      	strh	r0, [r5, #40]	; 0x28
c0d000dc:	b281      	uxth	r1, r0
c0d000de:	2900      	cmp	r1, #0
c0d000e0:	d00f      	beq.n	c0d00102 <app_dispatch+0x42>
c0d000e2:	2910      	cmp	r1, #16
c0d000e4:	d05f      	beq.n	c0d001a6 <app_dispatch+0xe6>
c0d000e6:	4669      	mov	r1, sp
            btchip_context_D.outLength += 2;
        }
        CATCH(EXCEPTION_IO_RESET) {
            THROW(EXCEPTION_IO_RESET);
        }
        CATCH_OTHER(e) {
c0d000e8:	850e      	strh	r6, [r1, #40]	; 0x28
            // uncaught exception detected
            G_io_apdu_buffer[0] = 0x6F;
c0d000ea:	4935      	ldr	r1, [pc, #212]	; (c0d001c0 <app_dispatch+0x100>)
c0d000ec:	226f      	movs	r2, #111	; 0x6f
c0d000ee:	700a      	strb	r2, [r1, #0]
            btchip_context_D.outLength = 2;
c0d000f0:	4a30      	ldr	r2, [pc, #192]	; (c0d001b4 <app_dispatch+0xf4>)
c0d000f2:	2302      	movs	r3, #2
c0d000f4:	52a3      	strh	r3, [r4, r2]
            G_io_apdu_buffer[1] = e;
c0d000f6:	7048      	strb	r0, [r1, #1]
c0d000f8:	2101      	movs	r1, #1
            // we caught something suspicious
            SB_SET(btchip_context_D.halted, 1);
c0d000fa:	4620      	mov	r0, r4
c0d000fc:	f002 f8a6 	bl	c0d0224c <sbSet>
c0d00100:	e042      	b.n	c0d00188 <app_dispatch+0xc8>
c0d00102:	4668      	mov	r0, sp
    // nothing to reply for now
    btchip_context_D.outLength = 0;
    btchip_context_D.io_flags = 0;

    BEGIN_TRY {
        TRY {
c0d00104:	f004 f9a1 	bl	c0d0444a <try_context_set>
            // If halted, then notify
            SB_CHECK(btchip_context_D.halted);
c0d00108:	8820      	ldrh	r0, [r4, #0]
c0d0010a:	f002 f8a6 	bl	c0d0225a <sbCheck>
            if (SB_GET(btchip_context_D.halted)) {
c0d0010e:	7821      	ldrb	r1, [r4, #0]
c0d00110:	482a      	ldr	r0, [pc, #168]	; (c0d001bc <app_dispatch+0xfc>)
c0d00112:	2900      	cmp	r1, #0
c0d00114:	d12d      	bne.n	c0d00172 <app_dispatch+0xb2>
                btchip_context_D.sw = BTCHIP_SW_HALTED;
                goto sendSW;
            }

            cla = G_io_apdu_buffer[ISO_OFFSET_CLA];
c0d00116:	492a      	ldr	r1, [pc, #168]	; (c0d001c0 <app_dispatch+0x100>)
            ins = G_io_apdu_buffer[ISO_OFFSET_INS];
c0d00118:	7848      	ldrb	r0, [r1, #1]
            if (SB_GET(btchip_context_D.halted)) {
                btchip_context_D.sw = BTCHIP_SW_HALTED;
                goto sendSW;
            }

            cla = G_io_apdu_buffer[ISO_OFFSET_CLA];
c0d0011a:	780a      	ldrb	r2, [r1, #0]
c0d0011c:	4d2a      	ldr	r5, [pc, #168]	; (c0d001c8 <app_dispatch+0x108>)
c0d0011e:	447d      	add	r5, pc
c0d00120:	4f2a      	ldr	r7, [pc, #168]	; (c0d001cc <app_dispatch+0x10c>)
c0d00122:	447f      	add	r7, pc
c0d00124:	4633      	mov	r3, r6
            ins = G_io_apdu_buffer[ISO_OFFSET_INS];
            for (dispatched = 0; dispatched < DISPATCHER_APDUS; dispatched++) {
                if ((cla == DISPATCHER_CLA[dispatched]) &&
c0d00126:	5da9      	ldrb	r1, [r5, r6]
c0d00128:	428a      	cmp	r2, r1
c0d0012a:	d102      	bne.n	c0d00132 <app_dispatch+0x72>
                    (ins == DISPATCHER_INS[dispatched])) {
c0d0012c:	5db9      	ldrb	r1, [r7, r6]
            }

            cla = G_io_apdu_buffer[ISO_OFFSET_CLA];
            ins = G_io_apdu_buffer[ISO_OFFSET_INS];
            for (dispatched = 0; dispatched < DISPATCHER_APDUS; dispatched++) {
                if ((cla == DISPATCHER_CLA[dispatched]) &&
c0d0012e:	4288      	cmp	r0, r1
c0d00130:	d008      	beq.n	c0d00144 <app_dispatch+0x84>
                goto sendSW;
            }

            cla = G_io_apdu_buffer[ISO_OFFSET_CLA];
            ins = G_io_apdu_buffer[ISO_OFFSET_INS];
            for (dispatched = 0; dispatched < DISPATCHER_APDUS; dispatched++) {
c0d00132:	1c5b      	adds	r3, r3, #1
c0d00134:	1c76      	adds	r6, r6, #1
c0d00136:	2e0e      	cmp	r6, #14
c0d00138:	d3f5      	bcc.n	c0d00126 <app_dispatch+0x66>
c0d0013a:	206d      	movs	r0, #109	; 0x6d
c0d0013c:	0200      	lsls	r0, r0, #8
                if ((cla == DISPATCHER_CLA[dispatched]) &&
                    (ins == DISPATCHER_INS[dispatched])) {
                    break;
                }
            }
            if (dispatched == DISPATCHER_APDUS) {
c0d0013e:	b2d9      	uxtb	r1, r3
c0d00140:	290e      	cmp	r1, #14
c0d00142:	d016      	beq.n	c0d00172 <app_dispatch+0xb2>
                btchip_context_D.sw = BTCHIP_SW_INS_NOT_SUPPORTED;
                goto sendSW;
            }
            if (DISPATCHER_DATA_IN[dispatched]) {
c0d00144:	4822      	ldr	r0, [pc, #136]	; (c0d001d0 <app_dispatch+0x110>)
c0d00146:	4478      	add	r0, pc
c0d00148:	5d80      	ldrb	r0, [r0, r6]
c0d0014a:	2800      	cmp	r0, #0
c0d0014c:	d00a      	beq.n	c0d00164 <app_dispatch+0xa4>
                if (G_io_apdu_buffer[ISO_OFFSET_LC] == 0x00 ||
                    btchip_context_D.inLength - 5 == 0) {
c0d0014e:	2083      	movs	r0, #131	; 0x83
c0d00150:	0082      	lsls	r2, r0, #2
c0d00152:	2067      	movs	r0, #103	; 0x67
c0d00154:	0200      	lsls	r0, r0, #8
            if (dispatched == DISPATCHER_APDUS) {
                btchip_context_D.sw = BTCHIP_SW_INS_NOT_SUPPORTED;
                goto sendSW;
            }
            if (DISPATCHER_DATA_IN[dispatched]) {
                if (G_io_apdu_buffer[ISO_OFFSET_LC] == 0x00 ||
c0d00156:	491a      	ldr	r1, [pc, #104]	; (c0d001c0 <app_dispatch+0x100>)
c0d00158:	7909      	ldrb	r1, [r1, #4]
c0d0015a:	2900      	cmp	r1, #0
c0d0015c:	d009      	beq.n	c0d00172 <app_dispatch+0xb2>
c0d0015e:	5aa1      	ldrh	r1, [r4, r2]
c0d00160:	2905      	cmp	r1, #5
c0d00162:	d006      	beq.n	c0d00172 <app_dispatch+0xb2>
                }
                // notify we need to receive data
                // io_exchange(CHANNEL_APDU | IO_RECEIVE_DATA, 0);
            }
            // call the apdu handler
            btchip_context_D.sw = ((apduProcessingFunction)PIC(
c0d00164:	00b0      	lsls	r0, r6, #2
c0d00166:	491b      	ldr	r1, [pc, #108]	; (c0d001d4 <app_dispatch+0x114>)
c0d00168:	4479      	add	r1, pc
c0d0016a:	5808      	ldr	r0, [r1, r0]
c0d0016c:	f005 fcc6 	bl	c0d05afc <pic>
c0d00170:	4780      	blx	r0
c0d00172:	4914      	ldr	r1, [pc, #80]	; (c0d001c4 <app_dispatch+0x104>)
c0d00174:	5260      	strh	r0, [r4, r1]
            IO_APP_ACTIVITY();
#endif // IO_APP_ACTIVITY

        sendSW:
            // prepare SW after replied data
            G_io_apdu_buffer[btchip_context_D.outLength] =
c0d00176:	490f      	ldr	r1, [pc, #60]	; (c0d001b4 <app_dispatch+0xf4>)
c0d00178:	5a62      	ldrh	r2, [r4, r1]
                (btchip_context_D.sw >> 8);
c0d0017a:	0a03      	lsrs	r3, r0, #8
            IO_APP_ACTIVITY();
#endif // IO_APP_ACTIVITY

        sendSW:
            // prepare SW after replied data
            G_io_apdu_buffer[btchip_context_D.outLength] =
c0d0017c:	4d10      	ldr	r5, [pc, #64]	; (c0d001c0 <app_dispatch+0x100>)
c0d0017e:	54ab      	strb	r3, [r5, r2]
c0d00180:	18ab      	adds	r3, r5, r2
                (btchip_context_D.sw >> 8);
            G_io_apdu_buffer[btchip_context_D.outLength + 1] =
c0d00182:	7058      	strb	r0, [r3, #1]
                (btchip_context_D.sw & 0xff);
            btchip_context_D.outLength += 2;
c0d00184:	1c90      	adds	r0, r2, #2
c0d00186:	5260      	strh	r0, [r4, r1]
            btchip_context_D.outLength = 2;
            G_io_apdu_buffer[1] = e;
            // we caught something suspicious
            SB_SET(btchip_context_D.halted, 1);
        }
        FINALLY;
c0d00188:	f004 facc 	bl	c0d04724 <try_context_get>
c0d0018c:	4669      	mov	r1, sp
c0d0018e:	4288      	cmp	r0, r1
c0d00190:	d103      	bne.n	c0d0019a <app_dispatch+0xda>
c0d00192:	f004 fac9 	bl	c0d04728 <try_context_get_previous>
c0d00196:	f004 f958 	bl	c0d0444a <try_context_set>
c0d0019a:	4668      	mov	r0, sp
    }
    END_TRY;
c0d0019c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
c0d0019e:	2800      	cmp	r0, #0
c0d001a0:	d106      	bne.n	c0d001b0 <app_dispatch+0xf0>
}
c0d001a2:	b00b      	add	sp, #44	; 0x2c
c0d001a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d001a6:	4668      	mov	r0, sp
                (btchip_context_D.sw >> 8);
            G_io_apdu_buffer[btchip_context_D.outLength + 1] =
                (btchip_context_D.sw & 0xff);
            btchip_context_D.outLength += 2;
        }
        CATCH(EXCEPTION_IO_RESET) {
c0d001a8:	8506      	strh	r6, [r0, #40]	; 0x28
            THROW(EXCEPTION_IO_RESET);
c0d001aa:	2010      	movs	r0, #16
c0d001ac:	f004 fab5 	bl	c0d0471a <os_longjmp>
            // we caught something suspicious
            SB_SET(btchip_context_D.halted, 1);
        }
        FINALLY;
    }
    END_TRY;
c0d001b0:	f004 fab3 	bl	c0d0471a <os_longjmp>
c0d001b4:	0000020e 	.word	0x0000020e
c0d001b8:	20001874 	.word	0x20001874
c0d001bc:	00006faa 	.word	0x00006faa
c0d001c0:	20001e6c 	.word	0x20001e6c
c0d001c4:	00000212 	.word	0x00000212
c0d001c8:	000078ef 	.word	0x000078ef
c0d001cc:	000078f9 	.word	0x000078f9
c0d001d0:	000078e3 	.word	0x000078e3
c0d001d4:	000078d0 	.word	0x000078d0

c0d001d8 <app_main>:
}

void app_main(void) {
c0d001d8:	b570      	push	{r4, r5, r6, lr}
    os_memset(G_io_apdu_buffer, 0, 255); // paranoia
c0d001da:	480d      	ldr	r0, [pc, #52]	; (c0d00210 <app_main+0x38>)
c0d001dc:	2400      	movs	r4, #0
c0d001de:	22ff      	movs	r2, #255	; 0xff
c0d001e0:	4621      	mov	r1, r4
c0d001e2:	f004 f9dd 	bl	c0d045a0 <os_memset>

    // Process the incoming APDUs

    // first exchange, no out length :) only wait the apdu
    btchip_context_D.outLength = 0;
c0d001e6:	480b      	ldr	r0, [pc, #44]	; (c0d00214 <app_main+0x3c>)
c0d001e8:	4d0b      	ldr	r5, [pc, #44]	; (c0d00218 <app_main+0x40>)
c0d001ea:	522c      	strh	r4, [r5, r0]
    btchip_context_D.io_flags = 0;
c0d001ec:	2021      	movs	r0, #33	; 0x21
c0d001ee:	0106      	lsls	r6, r0, #4
c0d001f0:	55ac      	strb	r4, [r5, r6]

        // os_memset(G_io_apdu_buffer, 0, 255); // paranoia

        // receive the whole apdu using the 7 bytes headers (ledger transport)
        btchip_context_D.inLength =
            io_exchange(CHANNEL_APDU | btchip_context_D.io_flags,
c0d001f2:	4620      	mov	r0, r4
c0d001f4:	b2c0      	uxtb	r0, r0
c0d001f6:	b2a1      	uxth	r1, r4
c0d001f8:	f004 fde0 	bl	c0d04dbc <io_exchange>
        L_DEBUG_APP(("Main Loop\n"));

        // os_memset(G_io_apdu_buffer, 0, 255); // paranoia

        // receive the whole apdu using the 7 bytes headers (ledger transport)
        btchip_context_D.inLength =
c0d001fc:	2183      	movs	r1, #131	; 0x83
c0d001fe:	0089      	lsls	r1, r1, #2
c0d00200:	5268      	strh	r0, [r5, r1]
            io_exchange(CHANNEL_APDU | btchip_context_D.io_flags,
                        // use the previous outlength as the reply
                        btchip_context_D.outLength);

        app_dispatch();
c0d00202:	f7ff ff5d 	bl	c0d000c0 <app_dispatch>
c0d00206:	4803      	ldr	r0, [pc, #12]	; (c0d00214 <app_main+0x3c>)
c0d00208:	5a2c      	ldrh	r4, [r5, r0]
c0d0020a:	5da8      	ldrb	r0, [r5, r6]
    // Process the incoming APDUs

    // first exchange, no out length :) only wait the apdu
    btchip_context_D.outLength = 0;
    btchip_context_D.io_flags = 0;
    for (;;) {
c0d0020c:	e7f2      	b.n	c0d001f4 <app_main+0x1c>
c0d0020e:	46c0      	nop			; (mov r8, r8)
c0d00210:	20001e6c 	.word	0x20001e6c
c0d00214:	0000020e 	.word	0x0000020e
c0d00218:	20001874 	.word	0x20001874

c0d0021c <btchip_apdu_get_coin_version>:
#include "btchip_apdu_constants.h"

#define P1_VERSION_ONLY 0x00
#define P1_VERSION_COINID 0x01

unsigned short btchip_apdu_get_coin_version() {
c0d0021c:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d0021e:	b081      	sub	sp, #4
    uint8_t offset = 0;

    SB_CHECK(N_btchip.bkp.config.operationMode);
c0d00220:	4c1f      	ldr	r4, [pc, #124]	; (c0d002a0 <btchip_apdu_get_coin_version+0x84>)
c0d00222:	4620      	mov	r0, r4
c0d00224:	f005 fc6a 	bl	c0d05afc <pic>
c0d00228:	8880      	ldrh	r0, [r0, #4]
c0d0022a:	f002 f816 	bl	c0d0225a <sbCheck>
    if ((SB_GET(N_btchip.bkp.config.operationMode) ==
c0d0022e:	4620      	mov	r0, r4
c0d00230:	f005 fc64 	bl	c0d05afc <pic>
c0d00234:	7900      	ldrb	r0, [r0, #4]
c0d00236:	4c1b      	ldr	r4, [pc, #108]	; (c0d002a4 <btchip_apdu_get_coin_version+0x88>)
         BTCHIP_MODE_SETUP_NEEDED) ||
c0d00238:	28ff      	cmp	r0, #255	; 0xff
c0d0023a:	d02e      	beq.n	c0d0029a <btchip_apdu_get_coin_version+0x7e>
        (SB_GET(N_btchip.bkp.config.operationMode) == BTCHIP_MODE_ISSUER)) {
c0d0023c:	4818      	ldr	r0, [pc, #96]	; (c0d002a0 <btchip_apdu_get_coin_version+0x84>)
c0d0023e:	f005 fc5d 	bl	c0d05afc <pic>
c0d00242:	7900      	ldrb	r0, [r0, #4]

unsigned short btchip_apdu_get_coin_version() {
    uint8_t offset = 0;

    SB_CHECK(N_btchip.bkp.config.operationMode);
    if ((SB_GET(N_btchip.bkp.config.operationMode) ==
c0d00244:	2800      	cmp	r0, #0
c0d00246:	d028      	beq.n	c0d0029a <btchip_apdu_get_coin_version+0x7e>
         BTCHIP_MODE_SETUP_NEEDED) ||
        (SB_GET(N_btchip.bkp.config.operationMode) == BTCHIP_MODE_ISSUER)) {
        return BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
    }

    G_io_apdu_buffer[offset++] = btchip_context_D.payToAddressVersion >> 8;
c0d00248:	4c17      	ldr	r4, [pc, #92]	; (c0d002a8 <btchip_apdu_get_coin_version+0x8c>)
c0d0024a:	8c20      	ldrh	r0, [r4, #32]
c0d0024c:	0a01      	lsrs	r1, r0, #8
c0d0024e:	4d17      	ldr	r5, [pc, #92]	; (c0d002ac <btchip_apdu_get_coin_version+0x90>)
c0d00250:	7029      	strb	r1, [r5, #0]
    G_io_apdu_buffer[offset++] = btchip_context_D.payToAddressVersion;
c0d00252:	7068      	strb	r0, [r5, #1]
    G_io_apdu_buffer[offset++] = btchip_context_D.payToScriptHashVersion >> 8;
c0d00254:	8c60      	ldrh	r0, [r4, #34]	; 0x22
c0d00256:	0a01      	lsrs	r1, r0, #8
c0d00258:	70a9      	strb	r1, [r5, #2]
    G_io_apdu_buffer[offset++] = btchip_context_D.payToScriptHashVersion;
c0d0025a:	70e8      	strb	r0, [r5, #3]
    G_io_apdu_buffer[offset++] = btchip_context_D.coinFamily;
c0d0025c:	2024      	movs	r0, #36	; 0x24
c0d0025e:	5c20      	ldrb	r0, [r4, r0]
c0d00260:	7128      	strb	r0, [r5, #4]
    G_io_apdu_buffer[offset++] = btchip_context_D.coinIdLength;
c0d00262:	2737      	movs	r7, #55	; 0x37
c0d00264:	5de2      	ldrb	r2, [r4, r7]
c0d00266:	716a      	strb	r2, [r5, #5]
    os_memmove(G_io_apdu_buffer + offset, btchip_context_D.coinId,
c0d00268:	1da8      	adds	r0, r5, #6
c0d0026a:	4621      	mov	r1, r4
c0d0026c:	3125      	adds	r1, #37	; 0x25
c0d0026e:	f004 f9a0 	bl	c0d045b2 <os_memmove>
               btchip_context_D.coinIdLength);
    offset += btchip_context_D.coinIdLength;
    G_io_apdu_buffer[offset++] = btchip_context_D.shortCoinIdLength;
c0d00272:	2638      	movs	r6, #56	; 0x38
c0d00274:	5da2      	ldrb	r2, [r4, r6]
    G_io_apdu_buffer[offset++] = btchip_context_D.payToScriptHashVersion;
    G_io_apdu_buffer[offset++] = btchip_context_D.coinFamily;
    G_io_apdu_buffer[offset++] = btchip_context_D.coinIdLength;
    os_memmove(G_io_apdu_buffer + offset, btchip_context_D.coinId,
               btchip_context_D.coinIdLength);
    offset += btchip_context_D.coinIdLength;
c0d00276:	5de0      	ldrb	r0, [r4, r7]
c0d00278:	1d81      	adds	r1, r0, #6
    G_io_apdu_buffer[offset++] = btchip_context_D.shortCoinIdLength;
c0d0027a:	b2c9      	uxtb	r1, r1
c0d0027c:	546a      	strb	r2, [r5, r1]
c0d0027e:	1dc7      	adds	r7, r0, #7
    os_memmove(G_io_apdu_buffer + offset, btchip_context_D.shortCoinId,
c0d00280:	b2f8      	uxtb	r0, r7
c0d00282:	1828      	adds	r0, r5, r0
c0d00284:	4621      	mov	r1, r4
c0d00286:	3132      	adds	r1, #50	; 0x32
c0d00288:	f004 f993 	bl	c0d045b2 <os_memmove>
               btchip_context_D.shortCoinIdLength);
    offset += btchip_context_D.shortCoinIdLength;
c0d0028c:	5da0      	ldrb	r0, [r4, r6]
c0d0028e:	19c0      	adds	r0, r0, r7
    btchip_context_D.outLength = offset;
c0d00290:	b2c0      	uxtb	r0, r0
c0d00292:	4907      	ldr	r1, [pc, #28]	; (c0d002b0 <btchip_apdu_get_coin_version+0x94>)
c0d00294:	5260      	strh	r0, [r4, r1]
c0d00296:	2009      	movs	r0, #9
c0d00298:	0304      	lsls	r4, r0, #12

    return BTCHIP_SW_OK;
}
c0d0029a:	4620      	mov	r0, r4
c0d0029c:	b001      	add	sp, #4
c0d0029e:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d002a0:	c0d08980 	.word	0xc0d08980
c0d002a4:	00006985 	.word	0x00006985
c0d002a8:	20001874 	.word	0x20001874
c0d002ac:	20001e6c 	.word	0x20001e6c
c0d002b0:	0000020e 	.word	0x0000020e

c0d002b4 <btchip_apdu_get_firmware_version>:
    buffer[3] = LEDGER_PATCH_VERSION;
    buffer[4] = 1;
    buffer[5] = TCS_LOADER_PATCH_VERSION;
}

unsigned short btchip_apdu_get_firmware_version() {
c0d002b4:	b580      	push	{r7, lr}
    G_io_apdu_buffer[0] =
        (((N_btchip.bkp.config.options & BTCHIP_OPTION_UNCOMPRESSED_KEYS) != 0)
c0d002b6:	480e      	ldr	r0, [pc, #56]	; (c0d002f0 <btchip_apdu_get_firmware_version+0x3c>)
c0d002b8:	f005 fc20 	bl	c0d05afc <pic>
c0d002bc:	7980      	ldrb	r0, [r0, #6]
c0d002be:	2101      	movs	r1, #1
c0d002c0:	4008      	ands	r0, r1
             : 0x01);

    G_io_apdu_buffer[0] |= FEATURES_NFC;
    G_io_apdu_buffer[0] |= FEATURES_BLE;

    G_io_apdu_buffer[0] |= FEATURES_SELF_SCREEN_BUTTONS;
c0d002c2:	221b      	movs	r2, #27
c0d002c4:	4042      	eors	r2, r0
c0d002c6:	480b      	ldr	r0, [pc, #44]	; (c0d002f4 <btchip_apdu_get_firmware_version+0x40>)
c0d002c8:	7002      	strb	r2, [r0, #0]
#define ARCH_ID 0x30

// Java Card is 0x60

void get_firmware_version(unsigned char *buffer) {
    buffer[0] = ARCH_ID;
c0d002ca:	2230      	movs	r2, #48	; 0x30
c0d002cc:	7042      	strb	r2, [r0, #1]
    buffer[1] = LEDGER_MAJOR_VERSION;
c0d002ce:	7081      	strb	r1, [r0, #2]
c0d002d0:	2202      	movs	r2, #2
    buffer[2] = LEDGER_MINOR_VERSION;
c0d002d2:	70c2      	strb	r2, [r0, #3]
c0d002d4:	2205      	movs	r2, #5
    buffer[3] = LEDGER_PATCH_VERSION;
c0d002d6:	7102      	strb	r2, [r0, #4]
    buffer[4] = 1;
c0d002d8:	7141      	strb	r1, [r0, #5]
    buffer[5] = TCS_LOADER_PATCH_VERSION;
c0d002da:	2100      	movs	r1, #0
c0d002dc:	7181      	strb	r1, [r0, #6]
c0d002de:	2103      	movs	r1, #3

    get_firmware_version(G_io_apdu_buffer + 1);

    G_io_apdu_buffer[7] = 0x00;
    G_io_apdu_buffer[7] |= MODE_SETUP;
    G_io_apdu_buffer[7] |= MODE_OPERATION;
c0d002e0:	71c1      	strb	r1, [r0, #7]

    btchip_context_D.outLength = 0x08;
c0d002e2:	4805      	ldr	r0, [pc, #20]	; (c0d002f8 <btchip_apdu_get_firmware_version+0x44>)
c0d002e4:	4905      	ldr	r1, [pc, #20]	; (c0d002fc <btchip_apdu_get_firmware_version+0x48>)
c0d002e6:	2208      	movs	r2, #8
c0d002e8:	520a      	strh	r2, [r1, r0]

    return BTCHIP_SW_OK;
c0d002ea:	2009      	movs	r0, #9
c0d002ec:	0300      	lsls	r0, r0, #12
c0d002ee:	bd80      	pop	{r7, pc}
c0d002f0:	c0d08980 	.word	0xc0d08980
c0d002f4:	20001e6c 	.word	0x20001e6c
c0d002f8:	0000020e 	.word	0x0000020e
c0d002fc:	20001874 	.word	0x20001874

c0d00300 <btchip_apdu_get_operation_mode>:
#include "btchip_apdu_constants.h"

#define P1_GET_OPERATION_MODE 0x00
#define P1_GET_SECOND_FACTOR_MODE 0x01

unsigned short btchip_apdu_get_operation_mode() {
c0d00300:	b5b0      	push	{r4, r5, r7, lr}
    SB_CHECK(N_btchip.bkp.config.operationMode);
c0d00302:	4c13      	ldr	r4, [pc, #76]	; (c0d00350 <btchip_apdu_get_operation_mode+0x50>)
c0d00304:	4620      	mov	r0, r4
c0d00306:	f005 fbf9 	bl	c0d05afc <pic>
c0d0030a:	8880      	ldrh	r0, [r0, #4]
c0d0030c:	f001 ffa5 	bl	c0d0225a <sbCheck>
    if ((SB_GET(N_btchip.bkp.config.operationMode) ==
c0d00310:	4620      	mov	r0, r4
c0d00312:	f005 fbf3 	bl	c0d05afc <pic>
c0d00316:	7900      	ldrb	r0, [r0, #4]
c0d00318:	4c0e      	ldr	r4, [pc, #56]	; (c0d00354 <btchip_apdu_get_operation_mode+0x54>)
         BTCHIP_MODE_SETUP_NEEDED) ||
c0d0031a:	28ff      	cmp	r0, #255	; 0xff
c0d0031c:	d016      	beq.n	c0d0034c <btchip_apdu_get_operation_mode+0x4c>
        (SB_GET(N_btchip.bkp.config.operationMode) == BTCHIP_MODE_ISSUER)) {
c0d0031e:	480c      	ldr	r0, [pc, #48]	; (c0d00350 <btchip_apdu_get_operation_mode+0x50>)
c0d00320:	f005 fbec 	bl	c0d05afc <pic>
c0d00324:	7900      	ldrb	r0, [r0, #4]
#define P1_GET_OPERATION_MODE 0x00
#define P1_GET_SECOND_FACTOR_MODE 0x01

unsigned short btchip_apdu_get_operation_mode() {
    SB_CHECK(N_btchip.bkp.config.operationMode);
    if ((SB_GET(N_btchip.bkp.config.operationMode) ==
c0d00326:	2800      	cmp	r0, #0
c0d00328:	d010      	beq.n	c0d0034c <btchip_apdu_get_operation_mode+0x4c>
c0d0032a:	206b      	movs	r0, #107	; 0x6b
c0d0032c:	0204      	lsls	r4, r0, #8
         BTCHIP_MODE_SETUP_NEEDED) ||
        (SB_GET(N_btchip.bkp.config.operationMode) == BTCHIP_MODE_ISSUER)) {
        return BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
    }

    switch (G_io_apdu_buffer[ISO_OFFSET_P1]) {
c0d0032e:	4d0a      	ldr	r5, [pc, #40]	; (c0d00358 <btchip_apdu_get_operation_mode+0x58>)
c0d00330:	78a8      	ldrb	r0, [r5, #2]
c0d00332:	2800      	cmp	r0, #0
c0d00334:	d10a      	bne.n	c0d0034c <btchip_apdu_get_operation_mode+0x4c>
    case P1_GET_OPERATION_MODE:
        G_io_apdu_buffer[0] = SB_GET(N_btchip.bkp.config.operationMode);
c0d00336:	4806      	ldr	r0, [pc, #24]	; (c0d00350 <btchip_apdu_get_operation_mode+0x50>)
c0d00338:	f005 fbe0 	bl	c0d05afc <pic>
c0d0033c:	7900      	ldrb	r0, [r0, #4]
c0d0033e:	7028      	strb	r0, [r5, #0]

    default:
        return BTCHIP_SW_INCORRECT_P1_P2;
    }

    btchip_context_D.outLength = 1;
c0d00340:	4806      	ldr	r0, [pc, #24]	; (c0d0035c <btchip_apdu_get_operation_mode+0x5c>)
c0d00342:	4907      	ldr	r1, [pc, #28]	; (c0d00360 <btchip_apdu_get_operation_mode+0x60>)
c0d00344:	2201      	movs	r2, #1
c0d00346:	520a      	strh	r2, [r1, r0]
c0d00348:	2009      	movs	r0, #9
c0d0034a:	0304      	lsls	r4, r0, #12

    return BTCHIP_SW_OK;
}
c0d0034c:	4620      	mov	r0, r4
c0d0034e:	bdb0      	pop	{r4, r5, r7, pc}
c0d00350:	c0d08980 	.word	0xc0d08980
c0d00354:	00006985 	.word	0x00006985
c0d00358:	20001e6c 	.word	0x20001e6c
c0d0035c:	0000020e 	.word	0x0000020e
c0d00360:	20001874 	.word	0x20001874

c0d00364 <btchip_apdu_get_random>:
#include "btchip_internal.h"
#include "btchip_apdu_constants.h"

#define MAX_LENGTH 248

unsigned short btchip_apdu_get_random() {
c0d00364:	b510      	push	{r4, lr}
    unsigned char length = G_io_apdu_buffer[ISO_OFFSET_LC];
    if (length == 0) {
        length = MAX_LENGTH;
    }

    if (length > MAX_LENGTH) {
c0d00366:	2007      	movs	r0, #7
c0d00368:	43c0      	mvns	r0, r0
#include "btchip_apdu_constants.h"

#define MAX_LENGTH 248

unsigned short btchip_apdu_get_random() {
    unsigned char length = G_io_apdu_buffer[ISO_OFFSET_LC];
c0d0036a:	490a      	ldr	r1, [pc, #40]	; (c0d00394 <btchip_apdu_get_random+0x30>)
c0d0036c:	7909      	ldrb	r1, [r1, #4]
    if (length == 0) {
c0d0036e:	2900      	cmp	r1, #0
c0d00370:	d000      	beq.n	c0d00374 <btchip_apdu_get_random+0x10>
c0d00372:	4608      	mov	r0, r1
c0d00374:	b2c4      	uxtb	r4, r0
c0d00376:	2067      	movs	r0, #103	; 0x67
c0d00378:	0200      	lsls	r0, r0, #8
        length = MAX_LENGTH;
    }

    if (length > MAX_LENGTH) {
c0d0037a:	2cf8      	cmp	r4, #248	; 0xf8
c0d0037c:	d808      	bhi.n	c0d00390 <btchip_apdu_get_random+0x2c>
        return BTCHIP_SW_INCORRECT_LENGTH;
    }

    cx_rng(G_io_apdu_buffer, length);
c0d0037e:	4805      	ldr	r0, [pc, #20]	; (c0d00394 <btchip_apdu_get_random+0x30>)
c0d00380:	4621      	mov	r1, r4
c0d00382:	f005 fd51 	bl	c0d05e28 <cx_rng>

    btchip_context_D.outLength = length;
c0d00386:	4804      	ldr	r0, [pc, #16]	; (c0d00398 <btchip_apdu_get_random+0x34>)
c0d00388:	4904      	ldr	r1, [pc, #16]	; (c0d0039c <btchip_apdu_get_random+0x38>)
c0d0038a:	520c      	strh	r4, [r1, r0]
c0d0038c:	2009      	movs	r0, #9
c0d0038e:	0300      	lsls	r0, r0, #12

    return BTCHIP_SW_OK;
}
c0d00390:	bd10      	pop	{r4, pc}
c0d00392:	46c0      	nop			; (mov r8, r8)
c0d00394:	20001e6c 	.word	0x20001e6c
c0d00398:	0000020e 	.word	0x0000020e
c0d0039c:	20001874 	.word	0x20001874

c0d003a0 <btchip_apdu_get_trusted_input>:
#define GET_TRUSTED_INPUT_P1_FIRST 0x00
#define GET_TRUSTED_INPUT_P1_NEXT 0x80

#define TRUSTEDINPUT_SIZE 48

unsigned short btchip_apdu_get_trusted_input() {
c0d003a0:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d003a2:	b0af      	sub	sp, #188	; 0xbc
    unsigned char apduLength;
    unsigned char dataOffset = 0;
    unsigned char trustedInputSignature[32];
    cx_sha256_t hash;
    apduLength = G_io_apdu_buffer[ISO_OFFSET_LC];
c0d003a4:	4c53      	ldr	r4, [pc, #332]	; (c0d004f4 <btchip_apdu_get_trusted_input+0x154>)
c0d003a6:	7926      	ldrb	r6, [r4, #4]

    SB_CHECK(N_btchip.bkp.config.operationMode);
c0d003a8:	4d53      	ldr	r5, [pc, #332]	; (c0d004f8 <btchip_apdu_get_trusted_input+0x158>)
c0d003aa:	4628      	mov	r0, r5
c0d003ac:	f005 fba6 	bl	c0d05afc <pic>
c0d003b0:	8880      	ldrh	r0, [r0, #4]
c0d003b2:	f001 ff52 	bl	c0d0225a <sbCheck>
    switch (SB_GET(N_btchip.bkp.config.operationMode)) {
c0d003b6:	4628      	mov	r0, r5
c0d003b8:	f005 fba0 	bl	c0d05afc <pic>
c0d003bc:	7900      	ldrb	r0, [r0, #4]
c0d003be:	4a4f      	ldr	r2, [pc, #316]	; (c0d004fc <btchip_apdu_get_trusted_input+0x15c>)
c0d003c0:	2804      	cmp	r0, #4
c0d003c2:	d900      	bls.n	c0d003c6 <btchip_apdu_get_trusted_input+0x26>
c0d003c4:	e08f      	b.n	c0d004e6 <btchip_apdu_get_trusted_input+0x146>
c0d003c6:	2501      	movs	r5, #1
c0d003c8:	4629      	mov	r1, r5
c0d003ca:	4081      	lsls	r1, r0
c0d003cc:	2016      	movs	r0, #22
c0d003ce:	4201      	tst	r1, r0
c0d003d0:	d100      	bne.n	c0d003d4 <btchip_apdu_get_trusted_input+0x34>
c0d003d2:	e088      	b.n	c0d004e6 <btchip_apdu_get_trusted_input+0x146>
        break;
    default:
        return BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
    }

    if (G_io_apdu_buffer[ISO_OFFSET_P1] == GET_TRUSTED_INPUT_P1_FIRST) {
c0d003d4:	78a1      	ldrb	r1, [r4, #2]
c0d003d6:	206b      	movs	r0, #107	; 0x6b
c0d003d8:	0207      	lsls	r7, r0, #8
c0d003da:	2000      	movs	r0, #0
c0d003dc:	2980      	cmp	r1, #128	; 0x80
c0d003de:	d01c      	beq.n	c0d0041a <btchip_apdu_get_trusted_input+0x7a>
c0d003e0:	2900      	cmp	r1, #0
c0d003e2:	d000      	beq.n	c0d003e6 <btchip_apdu_get_trusted_input+0x46>
c0d003e4:	e080      	b.n	c0d004e8 <btchip_apdu_get_trusted_input+0x148>
        // Initialize
        btchip_context_D.transactionTargetInput =
            btchip_read_u32(G_io_apdu_buffer + ISO_OFFSET_CDATA, 1, 0);
c0d003e6:	1d60      	adds	r0, r4, #5
c0d003e8:	9602      	str	r6, [sp, #8]
c0d003ea:	2600      	movs	r6, #0
c0d003ec:	4629      	mov	r1, r5
c0d003ee:	9203      	str	r2, [sp, #12]
c0d003f0:	4632      	mov	r2, r6
c0d003f2:	f001 fddf 	bl	c0d01fb4 <btchip_read_u32>
        return BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
    }

    if (G_io_apdu_buffer[ISO_OFFSET_P1] == GET_TRUSTED_INPUT_P1_FIRST) {
        // Initialize
        btchip_context_D.transactionTargetInput =
c0d003f6:	2141      	movs	r1, #65	; 0x41
c0d003f8:	00c9      	lsls	r1, r1, #3
c0d003fa:	4a41      	ldr	r2, [pc, #260]	; (c0d00500 <btchip_apdu_get_trusted_input+0x160>)
c0d003fc:	5050      	str	r0, [r2, r1]
            btchip_read_u32(G_io_apdu_buffer + ISO_OFFSET_CDATA, 1, 0);
        btchip_context_D.transactionContext.transactionState =
c0d003fe:	7516      	strb	r6, [r2, #20]
            BTCHIP_TRANSACTION_NONE;
        btchip_context_D.trustedInputProcessed = 0;
c0d00400:	2081      	movs	r0, #129	; 0x81
c0d00402:	0080      	lsls	r0, r0, #2
c0d00404:	5416      	strb	r6, [r2, r0]
        btchip_context_D.transactionContext.consumeP2SH = 0;
c0d00406:	77d6      	strb	r6, [r2, #31]
        btchip_set_check_internal_structure_integrity(1);
        dataOffset = 4;
        btchip_context_D.transactionHashOption = TRANSACTION_HASH_FULL;
c0d00408:	2045      	movs	r0, #69	; 0x45
c0d0040a:	0080      	lsls	r0, r0, #2
c0d0040c:	5415      	strb	r5, [r2, r0]
        btchip_context_D.usingSegwit = 0;
c0d0040e:	207f      	movs	r0, #127	; 0x7f
c0d00410:	0080      	lsls	r0, r0, #2
c0d00412:	5416      	strb	r6, [r2, r0]
c0d00414:	9e02      	ldr	r6, [sp, #8]
c0d00416:	9a03      	ldr	r2, [sp, #12]
c0d00418:	2004      	movs	r0, #4
    } else if (G_io_apdu_buffer[ISO_OFFSET_P1] != GET_TRUSTED_INPUT_P1_NEXT) {
        return BTCHIP_SW_INCORRECT_P1_P2;
    }

    if (G_io_apdu_buffer[ISO_OFFSET_P2] != 0x00) {
c0d0041a:	78e1      	ldrb	r1, [r4, #3]
c0d0041c:	2900      	cmp	r1, #0
c0d0041e:	d163      	bne.n	c0d004e8 <btchip_apdu_get_trusted_input+0x148>
c0d00420:	9203      	str	r2, [sp, #12]
        return BTCHIP_SW_INCORRECT_P1_P2;
    }
    btchip_context_D.transactionBufferPointer =
        G_io_apdu_buffer + ISO_OFFSET_CDATA + dataOffset;
c0d00422:	1821      	adds	r1, r4, r0
c0d00424:	1d49      	adds	r1, r1, #5
    }

    if (G_io_apdu_buffer[ISO_OFFSET_P2] != 0x00) {
        return BTCHIP_SW_INCORRECT_P1_P2;
    }
    btchip_context_D.transactionBufferPointer =
c0d00426:	026a      	lsls	r2, r5, #9
c0d00428:	4633      	mov	r3, r6
c0d0042a:	4e35      	ldr	r6, [pc, #212]	; (c0d00500 <btchip_apdu_get_trusted_input+0x160>)
c0d0042c:	50b1      	str	r1, [r6, r2]
        G_io_apdu_buffer + ISO_OFFSET_CDATA + dataOffset;
    btchip_context_D.transactionDataRemaining = apduLength - dataOffset;
c0d0042e:	1a18      	subs	r0, r3, r0
c0d00430:	4934      	ldr	r1, [pc, #208]	; (c0d00504 <btchip_apdu_get_trusted_input+0x164>)
c0d00432:	5470      	strb	r0, [r6, r1]

    transaction_parse(PARSE_MODE_TRUSTED_INPUT);
c0d00434:	4628      	mov	r0, r5
c0d00436:	f001 ffd7 	bl	c0d023e8 <transaction_parse>
c0d0043a:	4631      	mov	r1, r6
c0d0043c:	2009      	movs	r0, #9
c0d0043e:	0307      	lsls	r7, r0, #12

    if (btchip_context_D.transactionContext.transactionState ==
c0d00440:	7d08      	ldrb	r0, [r1, #20]
c0d00442:	2808      	cmp	r0, #8
c0d00444:	d150      	bne.n	c0d004e8 <btchip_apdu_get_trusted_input+0x148>
c0d00446:	2600      	movs	r6, #0
        BTCHIP_TRANSACTION_PARSED) {
        unsigned char targetHash[32];

        btchip_context_D.transactionContext.transactionState =
c0d00448:	750e      	strb	r6, [r1, #20]
            BTCHIP_TRANSACTION_NONE;
        btchip_set_check_internal_structure_integrity(1);
        if (!btchip_context_D.trustedInputProcessed) {
c0d0044a:	2081      	movs	r0, #129	; 0x81
c0d0044c:	0080      	lsls	r0, r0, #2
c0d0044e:	5c08      	ldrb	r0, [r1, r0]
c0d00450:	2800      	cmp	r0, #0
c0d00452:	d04c      	beq.n	c0d004ee <btchip_apdu_get_trusted_input+0x14e>
c0d00454:	aa04      	add	r2, sp, #16
            // Output was not found
            return BTCHIP_SW_INCORRECT_DATA;
        }

        cx_hash(&btchip_context_D.transactionHashFull.header, CX_LAST,
c0d00456:	9201      	str	r2, [sp, #4]
c0d00458:	4668      	mov	r0, sp
c0d0045a:	6002      	str	r2, [r0, #0]
c0d0045c:	4608      	mov	r0, r1
c0d0045e:	303c      	adds	r0, #60	; 0x3c
c0d00460:	2501      	movs	r5, #1
c0d00462:	4629      	mov	r1, r5
c0d00464:	4632      	mov	r2, r6
c0d00466:	4633      	mov	r3, r6
c0d00468:	f002 fcd4 	bl	c0d02e14 <cx_hash_X>
c0d0046c:	2108      	movs	r1, #8
                (unsigned char WIDE *)NULL, 0, targetHash);

        // Otherwise prepare
        cx_rng(G_io_apdu_buffer, 8);
c0d0046e:	9103      	str	r1, [sp, #12]
c0d00470:	4620      	mov	r0, r4
c0d00472:	f005 fcd9 	bl	c0d05e28 <cx_rng>
        G_io_apdu_buffer[0] = MAGIC_TRUSTED_INPUT;
c0d00476:	2032      	movs	r0, #50	; 0x32
c0d00478:	7020      	strb	r0, [r4, #0]
        G_io_apdu_buffer[1] = 0x00;
c0d0047a:	7066      	strb	r6, [r4, #1]
c0d0047c:	ae0c      	add	r6, sp, #48	; 0x30
        cx_sha256_init(&hash);
c0d0047e:	4630      	mov	r0, r6
c0d00480:	f005 fd1c 	bl	c0d05ebc <cx_sha256_init>
        cx_hash(&hash.header, CX_LAST, targetHash, 32, G_io_apdu_buffer + 4);
c0d00484:	1d20      	adds	r0, r4, #4
c0d00486:	4669      	mov	r1, sp
c0d00488:	6008      	str	r0, [r1, #0]
c0d0048a:	2320      	movs	r3, #32
c0d0048c:	9302      	str	r3, [sp, #8]
c0d0048e:	4630      	mov	r0, r6
c0d00490:	4629      	mov	r1, r5
c0d00492:	9a01      	ldr	r2, [sp, #4]
c0d00494:	f002 fcbe 	bl	c0d02e14 <cx_hash_X>

        btchip_write_u32_le(G_io_apdu_buffer + 4 + 32,
                            btchip_context_D.transactionTargetInput);
c0d00498:	2041      	movs	r0, #65	; 0x41
c0d0049a:	00c0      	lsls	r0, r0, #3
c0d0049c:	4d18      	ldr	r5, [pc, #96]	; (c0d00500 <btchip_apdu_get_trusted_input+0x160>)
c0d0049e:	5829      	ldr	r1, [r5, r0]
        G_io_apdu_buffer[0] = MAGIC_TRUSTED_INPUT;
        G_io_apdu_buffer[1] = 0x00;
        cx_sha256_init(&hash);
        cx_hash(&hash.header, CX_LAST, targetHash, 32, G_io_apdu_buffer + 4);

        btchip_write_u32_le(G_io_apdu_buffer + 4 + 32,
c0d004a0:	4620      	mov	r0, r4
c0d004a2:	3024      	adds	r0, #36	; 0x24
c0d004a4:	f001 fdaf 	bl	c0d02006 <btchip_write_u32_le>
                            btchip_context_D.transactionTargetInput);
        os_memmove(G_io_apdu_buffer + 4 + 32 + 4,
c0d004a8:	4620      	mov	r0, r4
c0d004aa:	3028      	adds	r0, #40	; 0x28
c0d004ac:	4629      	mov	r1, r5
c0d004ae:	3115      	adds	r1, #21
c0d004b0:	9e03      	ldr	r6, [sp, #12]
c0d004b2:	4632      	mov	r2, r6
c0d004b4:	f004 f87d 	bl	c0d045b2 <os_memmove>
                   btchip_context_D.transactionContext.transactionAmount, 8);

        cx_hmac_sha256(N_btchip.bkp.trustedinput_key,
c0d004b8:	480f      	ldr	r0, [pc, #60]	; (c0d004f8 <btchip_apdu_get_trusted_input+0x158>)
c0d004ba:	f005 fb1f 	bl	c0d05afc <pic>
c0d004be:	ad27      	add	r5, sp, #156	; 0x9c
c0d004c0:	4669      	mov	r1, sp
c0d004c2:	600d      	str	r5, [r1, #0]
c0d004c4:	3008      	adds	r0, #8
c0d004c6:	2330      	movs	r3, #48	; 0x30
c0d004c8:	9902      	ldr	r1, [sp, #8]
c0d004ca:	4622      	mov	r2, r4
c0d004cc:	f002 fcc9 	bl	c0d02e62 <cx_hmac_sha256_X>
                       sizeof(N_btchip.bkp.trustedinput_key), G_io_apdu_buffer,
                       TRUSTEDINPUT_SIZE, trustedInputSignature);
        os_memmove(G_io_apdu_buffer + TRUSTEDINPUT_SIZE, trustedInputSignature,
c0d004d0:	3430      	adds	r4, #48	; 0x30
c0d004d2:	4620      	mov	r0, r4
c0d004d4:	4629      	mov	r1, r5
c0d004d6:	4632      	mov	r2, r6
c0d004d8:	f004 f86b 	bl	c0d045b2 <os_memmove>
                   8);

        btchip_context_D.outLength = 0x38;
c0d004dc:	480a      	ldr	r0, [pc, #40]	; (c0d00508 <btchip_apdu_get_trusted_input+0x168>)
c0d004de:	2138      	movs	r1, #56	; 0x38
c0d004e0:	4a07      	ldr	r2, [pc, #28]	; (c0d00500 <btchip_apdu_get_trusted_input+0x160>)
c0d004e2:	5211      	strh	r1, [r2, r0]
c0d004e4:	e000      	b.n	c0d004e8 <btchip_apdu_get_trusted_input+0x148>
c0d004e6:	4617      	mov	r7, r2
    }
    return BTCHIP_SW_OK;
}
c0d004e8:	b2b8      	uxth	r0, r7
c0d004ea:	b02f      	add	sp, #188	; 0xbc
c0d004ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d004ee:	9f03      	ldr	r7, [sp, #12]
c0d004f0:	37fb      	adds	r7, #251	; 0xfb
c0d004f2:	e7f9      	b.n	c0d004e8 <btchip_apdu_get_trusted_input+0x148>
c0d004f4:	20001e6c 	.word	0x20001e6c
c0d004f8:	c0d08980 	.word	0xc0d08980
c0d004fc:	00006985 	.word	0x00006985
c0d00500:	20001874 	.word	0x20001874
c0d00504:	000001ff 	.word	0x000001ff
c0d00508:	0000020e 	.word	0x0000020e

c0d0050c <btchip_apdu_get_wallet_public_key>:
#define P2_LEGACY 0x04
#define P2_SEGWIT 0x00
#define P2_NATIVE_SEGWIT 0x02
#define P2_CASHADDR 0x03

unsigned short btchip_apdu_get_wallet_public_key() {
c0d0050c:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d0050e:	b0a1      	sub	sp, #132	; 0x84
    unsigned char keyLength;
    unsigned char uncompressedPublicKeys =
        ((N_btchip.bkp.config.options & BTCHIP_OPTION_UNCOMPRESSED_KEYS) != 0);
c0d00510:	4883      	ldr	r0, [pc, #524]	; (c0d00720 <btchip_apdu_get_wallet_public_key+0x214>)
c0d00512:	f005 faf3 	bl	c0d05afc <pic>
c0d00516:	7981      	ldrb	r1, [r0, #6]
c0d00518:	2601      	movs	r6, #1
c0d0051a:	4031      	ands	r1, r6
c0d0051c:	206b      	movs	r0, #107	; 0x6b
c0d0051e:	0205      	lsls	r5, r0, #8
    unsigned char keyPath[MAX_BIP32_PATH_LENGTH];
    unsigned char chainCode[32];
    bool display = (G_io_apdu_buffer[ISO_OFFSET_P1] == P1_DISPLAY);
c0d00520:	4c80      	ldr	r4, [pc, #512]	; (c0d00724 <btchip_apdu_get_wallet_public_key+0x218>)
c0d00522:	78a0      	ldrb	r0, [r4, #2]
    bool segwit = (G_io_apdu_buffer[ISO_OFFSET_P2] == P2_SEGWIT);
    bool nativeSegwit = (G_io_apdu_buffer[ISO_OFFSET_P2] == P2_NATIVE_SEGWIT);
    bool cashAddr = (G_io_apdu_buffer[ISO_OFFSET_P2] == P2_CASHADDR);

    switch (G_io_apdu_buffer[ISO_OFFSET_P1]) {
c0d00524:	2801      	cmp	r0, #1
c0d00526:	d900      	bls.n	c0d0052a <btchip_apdu_get_wallet_public_key+0x1e>
c0d00528:	e0f6      	b.n	c0d00718 <btchip_apdu_get_wallet_public_key+0x20c>
c0d0052a:	9107      	str	r1, [sp, #28]
    unsigned char uncompressedPublicKeys =
        ((N_btchip.bkp.config.options & BTCHIP_OPTION_UNCOMPRESSED_KEYS) != 0);
    unsigned char keyPath[MAX_BIP32_PATH_LENGTH];
    unsigned char chainCode[32];
    bool display = (G_io_apdu_buffer[ISO_OFFSET_P1] == P1_DISPLAY);
    bool segwit = (G_io_apdu_buffer[ISO_OFFSET_P2] == P2_SEGWIT);
c0d0052c:	78e7      	ldrb	r7, [r4, #3]
        break;
    default:
        return BTCHIP_SW_INCORRECT_P1_P2;
    }

    switch (G_io_apdu_buffer[ISO_OFFSET_P2]) {
c0d0052e:	2f02      	cmp	r7, #2
c0d00530:	9006      	str	r0, [sp, #24]
c0d00532:	dc0a      	bgt.n	c0d0054a <btchip_apdu_get_wallet_public_key+0x3e>
c0d00534:	2f00      	cmp	r7, #0
c0d00536:	d014      	beq.n	c0d00562 <btchip_apdu_get_wallet_public_key+0x56>
c0d00538:	2f02      	cmp	r7, #2
c0d0053a:	d000      	beq.n	c0d0053e <btchip_apdu_get_wallet_public_key+0x32>
c0d0053c:	e0ec      	b.n	c0d00718 <btchip_apdu_get_wallet_public_key+0x20c>
    case P2_NATIVE_SEGWIT:
        if (!(G_coin_config->native_segwit_prefix)) {
c0d0053e:	487a      	ldr	r0, [pc, #488]	; (c0d00728 <btchip_apdu_get_wallet_public_key+0x21c>)
c0d00540:	6800      	ldr	r0, [r0, #0]
c0d00542:	6a00      	ldr	r0, [r0, #32]
c0d00544:	2800      	cmp	r0, #0
c0d00546:	d10c      	bne.n	c0d00562 <btchip_apdu_get_wallet_public_key+0x56>
c0d00548:	e0e6      	b.n	c0d00718 <btchip_apdu_get_wallet_public_key+0x20c>
c0d0054a:	2f03      	cmp	r7, #3
c0d0054c:	d002      	beq.n	c0d00554 <btchip_apdu_get_wallet_public_key+0x48>
c0d0054e:	2f04      	cmp	r7, #4
c0d00550:	d007      	beq.n	c0d00562 <btchip_apdu_get_wallet_public_key+0x56>
c0d00552:	e0e1      	b.n	c0d00718 <btchip_apdu_get_wallet_public_key+0x20c>
        }
    case P2_LEGACY:
    case P2_SEGWIT:
        break;
    case P2_CASHADDR:
        if (G_coin_config->kind != COIN_KIND_BITCOIN_CASH) {
c0d00554:	4874      	ldr	r0, [pc, #464]	; (c0d00728 <btchip_apdu_get_wallet_public_key+0x21c>)
c0d00556:	6800      	ldr	r0, [r0, #0]
c0d00558:	2128      	movs	r1, #40	; 0x28
c0d0055a:	5c40      	ldrb	r0, [r0, r1]
c0d0055c:	2802      	cmp	r0, #2
c0d0055e:	d000      	beq.n	c0d00562 <btchip_apdu_get_wallet_public_key+0x56>
c0d00560:	e0da      	b.n	c0d00718 <btchip_apdu_get_wallet_public_key+0x20c>
c0d00562:	2067      	movs	r0, #103	; 0x67
c0d00564:	0205      	lsls	r5, r0, #8
        break;
    default:
        return BTCHIP_SW_INCORRECT_P1_P2;
    }

    if (G_io_apdu_buffer[ISO_OFFSET_LC] < 0x01) {
c0d00566:	7920      	ldrb	r0, [r4, #4]
c0d00568:	2800      	cmp	r0, #0
c0d0056a:	d100      	bne.n	c0d0056e <btchip_apdu_get_wallet_public_key+0x62>
c0d0056c:	e0d4      	b.n	c0d00718 <btchip_apdu_get_wallet_public_key+0x20c>
        return BTCHIP_SW_INCORRECT_LENGTH;
    }
    os_memmove(keyPath, G_io_apdu_buffer + ISO_OFFSET_CDATA,
c0d0056e:	1d61      	adds	r1, r4, #5
c0d00570:	a816      	add	r0, sp, #88	; 0x58
c0d00572:	2229      	movs	r2, #41	; 0x29
c0d00574:	f004 f81d 	bl	c0d045b2 <os_memmove>
               MAX_BIP32_PATH_LENGTH);

    SB_CHECK(N_btchip.bkp.config.operationMode);
c0d00578:	4d69      	ldr	r5, [pc, #420]	; (c0d00720 <btchip_apdu_get_wallet_public_key+0x214>)
c0d0057a:	4628      	mov	r0, r5
c0d0057c:	f005 fabe 	bl	c0d05afc <pic>
c0d00580:	8880      	ldrh	r0, [r0, #4]
c0d00582:	f001 fe6a 	bl	c0d0225a <sbCheck>
    switch (SB_GET(N_btchip.bkp.config.operationMode)) {
c0d00586:	4628      	mov	r0, r5
c0d00588:	f005 fab8 	bl	c0d05afc <pic>
c0d0058c:	4967      	ldr	r1, [pc, #412]	; (c0d0072c <btchip_apdu_get_wallet_public_key+0x220>)
c0d0058e:	1ccd      	adds	r5, r1, #3
c0d00590:	7900      	ldrb	r0, [r0, #4]
c0d00592:	2804      	cmp	r0, #4
c0d00594:	d900      	bls.n	c0d00598 <btchip_apdu_get_wallet_public_key+0x8c>
c0d00596:	e0bf      	b.n	c0d00718 <btchip_apdu_get_wallet_public_key+0x20c>
c0d00598:	4086      	lsls	r6, r0
c0d0059a:	2016      	movs	r0, #22
c0d0059c:	4206      	tst	r6, r0
c0d0059e:	d100      	bne.n	c0d005a2 <btchip_apdu_get_wallet_public_key+0x96>
c0d005a0:	e0ba      	b.n	c0d00718 <btchip_apdu_get_wallet_public_key+0x20c>
c0d005a2:	9105      	str	r1, [sp, #20]
        break;
    default:
        return BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
    }

    if (!os_global_pin_is_validated()) {
c0d005a4:	f005 fd42 	bl	c0d0602c <os_global_pin_is_validated>
c0d005a8:	2800      	cmp	r0, #0
c0d005aa:	d02d      	beq.n	c0d00608 <btchip_apdu_get_wallet_public_key+0xfc>
        return BTCHIP_SW_SECURITY_STATUS_NOT_SATISFIED;
    }

    PRINTF("pin ok\n");
c0d005ac:	a060      	add	r0, pc, #384	; (adr r0, c0d00730 <btchip_apdu_get_wallet_public_key+0x224>)
c0d005ae:	f004 feef 	bl	c0d05390 <screen_printf>
c0d005b2:	a816      	add	r0, sp, #88	; 0x58
c0d005b4:	2101      	movs	r1, #1
c0d005b6:	aa0e      	add	r2, sp, #56	; 0x38

    btchip_private_derive_keypair(keyPath, 1, chainCode);
c0d005b8:	f001 fde7 	bl	c0d0218a <btchip_private_derive_keypair>
c0d005bc:	2541      	movs	r5, #65	; 0x41

    G_io_apdu_buffer[0] = 65;
c0d005be:	7025      	strb	r5, [r4, #0]

    // Then encode it
    if (uncompressedPublicKeys) {
c0d005c0:	9807      	ldr	r0, [sp, #28]
c0d005c2:	2800      	cmp	r0, #0
c0d005c4:	d104      	bne.n	c0d005d0 <btchip_apdu_get_wallet_public_key+0xc4>
        keyLength = 65;
    } else {
        btchip_compress_public_key_value(btchip_public_key_D.W);
c0d005c6:	485c      	ldr	r0, [pc, #368]	; (c0d00738 <btchip_apdu_get_wallet_public_key+0x22c>)
c0d005c8:	3008      	adds	r0, #8
c0d005ca:	f001 fbdb 	bl	c0d01d84 <btchip_compress_public_key_value>
c0d005ce:	2521      	movs	r5, #33	; 0x21
        keyLength = 33;
    }

    os_memmove(G_io_apdu_buffer + 1, btchip_public_key_D.W,
c0d005d0:	1c66      	adds	r6, r4, #1
c0d005d2:	4959      	ldr	r1, [pc, #356]	; (c0d00738 <btchip_apdu_get_wallet_public_key+0x22c>)
c0d005d4:	3108      	adds	r1, #8
c0d005d6:	2241      	movs	r2, #65	; 0x41
c0d005d8:	4630      	mov	r0, r6
c0d005da:	f003 ffea 	bl	c0d045b2 <os_memmove>
               sizeof(btchip_public_key_D.W));
    if (cashAddr) {
c0d005de:	2f00      	cmp	r7, #0
c0d005e0:	d016      	beq.n	c0d00610 <btchip_apdu_get_wallet_public_key+0x104>
c0d005e2:	2f03      	cmp	r7, #3
c0d005e4:	d112      	bne.n	c0d0060c <btchip_apdu_get_wallet_public_key+0x100>
        uint8_t tmp[20];
        btchip_public_key_hash160(G_io_apdu_buffer + 1, // IN
c0d005e6:	b2e9      	uxtb	r1, r5
c0d005e8:	ad08      	add	r5, sp, #32
c0d005ea:	4630      	mov	r0, r6
c0d005ec:	462a      	mov	r2, r5
c0d005ee:	f001 fd47 	bl	c0d02080 <btchip_public_key_hash160>
                                  keyLength,            // INLEN
                                  tmp);
        keyLength =
            cashaddr_encode(tmp, 20, G_io_apdu_buffer + 67, 50, CASHADDR_P2PKH);
c0d005f2:	2000      	movs	r0, #0
c0d005f4:	4669      	mov	r1, sp
c0d005f6:	6008      	str	r0, [r1, #0]
c0d005f8:	4622      	mov	r2, r4
c0d005fa:	3243      	adds	r2, #67	; 0x43
c0d005fc:	2114      	movs	r1, #20
c0d005fe:	2332      	movs	r3, #50	; 0x32
c0d00600:	4628      	mov	r0, r5
c0d00602:	f002 fb7f 	bl	c0d02d04 <cashaddr_encode>
c0d00606:	e047      	b.n	c0d00698 <btchip_apdu_get_wallet_public_key+0x18c>
c0d00608:	9d05      	ldr	r5, [sp, #20]
c0d0060a:	e085      	b.n	c0d00718 <btchip_apdu_get_wallet_public_key+0x20c>
    } else if (!(segwit || nativeSegwit)) {
c0d0060c:	2f02      	cmp	r7, #2
c0d0060e:	d137      	bne.n	c0d00680 <btchip_apdu_get_wallet_public_key+0x174>
c0d00610:	aa08      	add	r2, sp, #32
c0d00612:	4630      	mov	r0, r6
c0d00614:	2100      	movs	r1, #0
c0d00616:	9104      	str	r1, [sp, #16]
            G_io_apdu_buffer + 67, // OUT
            150,                   // MAXOUTLEN
            btchip_context_D.payToAddressVersion, 0);
    } else {
        uint8_t tmp[22];
        tmp[0] = 0x00;
c0d00618:	7011      	strb	r1, [r2, #0]
        tmp[1] = 0x14;
c0d0061a:	2114      	movs	r1, #20
c0d0061c:	9103      	str	r1, [sp, #12]
c0d0061e:	7051      	strb	r1, [r2, #1]
        btchip_public_key_hash160(G_io_apdu_buffer + 1, // IN
c0d00620:	b2e9      	uxtb	r1, r5
                                  keyLength,            // INLEN
                                  tmp + 2               // OUT
c0d00622:	1c96      	adds	r6, r2, #2
            btchip_context_D.payToAddressVersion, 0);
    } else {
        uint8_t tmp[22];
        tmp[0] = 0x00;
        tmp[1] = 0x14;
        btchip_public_key_hash160(G_io_apdu_buffer + 1, // IN
c0d00624:	4632      	mov	r2, r6
c0d00626:	f001 fd2b 	bl	c0d02080 <btchip_public_key_hash160>
                                  keyLength,            // INLEN
                                  tmp + 2               // OUT
                                  );
        if (!nativeSegwit) {
c0d0062a:	2f02      	cmp	r7, #2
c0d0062c:	d11c      	bne.n	c0d00668 <btchip_apdu_get_wallet_public_key+0x15c>
c0d0062e:	9f03      	ldr	r7, [sp, #12]
c0d00630:	9604      	str	r6, [sp, #16]
                22,                    // INLEN
                G_io_apdu_buffer + 67, // OUT
                150,                   // MAXOUTLEN
                btchip_context_D.payToScriptHashVersion, 0);
        } else {
            if (G_coin_config->native_segwit_prefix) {
c0d00632:	483d      	ldr	r0, [pc, #244]	; (c0d00728 <btchip_apdu_get_wallet_public_key+0x21c>)
c0d00634:	6800      	ldr	r0, [r0, #0]
c0d00636:	6a00      	ldr	r0, [r0, #32]
c0d00638:	2800      	cmp	r0, #0
c0d0063a:	9e07      	ldr	r6, [sp, #28]
c0d0063c:	d02e      	beq.n	c0d0069c <btchip_apdu_get_wallet_public_key+0x190>
                keyLength = segwit_addr_encode(
                    (char *)(G_io_apdu_buffer + 67),
                    PIC(G_coin_config->native_segwit_prefix), 0, tmp + 2, 20);
c0d0063e:	f005 fa5d 	bl	c0d05afc <pic>
c0d00642:	4601      	mov	r1, r0
                G_io_apdu_buffer + 67, // OUT
                150,                   // MAXOUTLEN
                btchip_context_D.payToScriptHashVersion, 0);
        } else {
            if (G_coin_config->native_segwit_prefix) {
                keyLength = segwit_addr_encode(
c0d00644:	4668      	mov	r0, sp
c0d00646:	6007      	str	r7, [r0, #0]
c0d00648:	4627      	mov	r7, r4
c0d0064a:	3743      	adds	r7, #67	; 0x43
c0d0064c:	2200      	movs	r2, #0
c0d0064e:	4638      	mov	r0, r7
c0d00650:	9b04      	ldr	r3, [sp, #16]
c0d00652:	f005 fb29 	bl	c0d05ca8 <segwit_addr_encode>
c0d00656:	4605      	mov	r5, r0
                    (char *)(G_io_apdu_buffer + 67),
                    PIC(G_coin_config->native_segwit_prefix), 0, tmp + 2, 20);
                if (keyLength == 1) {
c0d00658:	b2e8      	uxtb	r0, r5
c0d0065a:	2801      	cmp	r0, #1
c0d0065c:	d11e      	bne.n	c0d0069c <btchip_apdu_get_wallet_public_key+0x190>
                    keyLength = strlen((char *)(G_io_apdu_buffer + 67));
c0d0065e:	4638      	mov	r0, r7
c0d00660:	f007 f94a 	bl	c0d078f8 <strlen>
c0d00664:	4605      	mov	r5, r0
c0d00666:	e019      	b.n	c0d0069c <btchip_apdu_get_wallet_public_key+0x190>
            keyLength = btchip_public_key_to_encoded_base58(
                tmp,                   // IN
                22,                    // INLEN
                G_io_apdu_buffer + 67, // OUT
                150,                   // MAXOUTLEN
                btchip_context_D.payToScriptHashVersion, 0);
c0d00668:	4834      	ldr	r0, [pc, #208]	; (c0d0073c <btchip_apdu_get_wallet_public_key+0x230>)
        btchip_public_key_hash160(G_io_apdu_buffer + 1, // IN
                                  keyLength,            // INLEN
                                  tmp + 2               // OUT
                                  );
        if (!nativeSegwit) {
            keyLength = btchip_public_key_to_encoded_base58(
c0d0066a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
c0d0066c:	4669      	mov	r1, sp
c0d0066e:	6008      	str	r0, [r1, #0]
c0d00670:	9804      	ldr	r0, [sp, #16]
c0d00672:	6048      	str	r0, [r1, #4]
c0d00674:	4622      	mov	r2, r4
c0d00676:	3243      	adds	r2, #67	; 0x43
c0d00678:	a808      	add	r0, sp, #32
c0d0067a:	2116      	movs	r1, #22
c0d0067c:	2396      	movs	r3, #150	; 0x96
c0d0067e:	e009      	b.n	c0d00694 <btchip_apdu_get_wallet_public_key+0x188>
        keyLength = btchip_public_key_to_encoded_base58(
            G_io_apdu_buffer + 1,  // IN
            keyLength,             // INLEN
            G_io_apdu_buffer + 67, // OUT
            150,                   // MAXOUTLEN
            btchip_context_D.payToAddressVersion, 0);
c0d00680:	482e      	ldr	r0, [pc, #184]	; (c0d0073c <btchip_apdu_get_wallet_public_key+0x230>)
                                  keyLength,            // INLEN
                                  tmp);
        keyLength =
            cashaddr_encode(tmp, 20, G_io_apdu_buffer + 67, 50, CASHADDR_P2PKH);
    } else if (!(segwit || nativeSegwit)) {
        keyLength = btchip_public_key_to_encoded_base58(
c0d00682:	8c00      	ldrh	r0, [r0, #32]
c0d00684:	2100      	movs	r1, #0
c0d00686:	466a      	mov	r2, sp
c0d00688:	c203      	stmia	r2!, {r0, r1}
c0d0068a:	b2e9      	uxtb	r1, r5
c0d0068c:	4622      	mov	r2, r4
c0d0068e:	3243      	adds	r2, #67	; 0x43
c0d00690:	2396      	movs	r3, #150	; 0x96
c0d00692:	4630      	mov	r0, r6
c0d00694:	f001 fd15 	bl	c0d020c2 <btchip_public_key_to_encoded_base58>
c0d00698:	4605      	mov	r5, r0
c0d0069a:	9e07      	ldr	r6, [sp, #28]
                    keyLength = strlen((char *)(G_io_apdu_buffer + 67));
                }
            }
        }
    }
    G_io_apdu_buffer[66] = keyLength;
c0d0069c:	2042      	movs	r0, #66	; 0x42
c0d0069e:	5425      	strb	r5, [r4, r0]
    L_DEBUG_APP(("Length %d\n", keyLength));
    if (!uncompressedPublicKeys) {
c0d006a0:	2e00      	cmp	r6, #0
c0d006a2:	d101      	bne.n	c0d006a8 <btchip_apdu_get_wallet_public_key+0x19c>
        // Restore for the full key component
        G_io_apdu_buffer[1] = 0x04;
c0d006a4:	2004      	movs	r0, #4
c0d006a6:	7060      	strb	r0, [r4, #1]
    }

    // output chain code
    os_memmove(G_io_apdu_buffer + 1 + 65 + 1 + keyLength, chainCode,
c0d006a8:	b2ee      	uxtb	r6, r5
c0d006aa:	19a7      	adds	r7, r4, r6
c0d006ac:	4638      	mov	r0, r7
c0d006ae:	3043      	adds	r0, #67	; 0x43
c0d006b0:	a90e      	add	r1, sp, #56	; 0x38
c0d006b2:	2220      	movs	r2, #32
c0d006b4:	f003 ff7d 	bl	c0d045b2 <os_memmove>
               sizeof(chainCode));
    btchip_context_D.outLength = 1 + 65 + 1 + keyLength + sizeof(chainCode);
c0d006b8:	4630      	mov	r0, r6
c0d006ba:	3063      	adds	r0, #99	; 0x63
c0d006bc:	4920      	ldr	r1, [pc, #128]	; (c0d00740 <btchip_apdu_get_wallet_public_key+0x234>)
c0d006be:	4b1f      	ldr	r3, [pc, #124]	; (c0d0073c <btchip_apdu_get_wallet_public_key+0x230>)
c0d006c0:	5258      	strh	r0, [r3, r1]
c0d006c2:	2009      	movs	r0, #9
c0d006c4:	0305      	lsls	r5, r0, #12

    if (display) {
c0d006c6:	9806      	ldr	r0, [sp, #24]
c0d006c8:	2801      	cmp	r0, #1
c0d006ca:	d125      	bne.n	c0d00718 <btchip_apdu_get_wallet_public_key+0x20c>
c0d006cc:	9a05      	ldr	r2, [sp, #20]
c0d006ce:	32fe      	adds	r2, #254	; 0xfe
        if (keyLength > 50) {
c0d006d0:	2e32      	cmp	r6, #50	; 0x32
c0d006d2:	d901      	bls.n	c0d006d8 <btchip_apdu_get_wallet_public_key+0x1cc>
c0d006d4:	4615      	mov	r5, r2
c0d006d6:	e01f      	b.n	c0d00718 <btchip_apdu_get_wallet_public_key+0x20c>
            return BTCHIP_SW_INCORRECT_DATA;
        }
        // Hax, avoid wasting space
        os_memmove(G_io_apdu_buffer + 200, G_io_apdu_buffer + 67, keyLength);
c0d006d8:	4620      	mov	r0, r4
c0d006da:	30c8      	adds	r0, #200	; 0xc8
c0d006dc:	3443      	adds	r4, #67	; 0x43
c0d006de:	4621      	mov	r1, r4
c0d006e0:	4614      	mov	r4, r2
c0d006e2:	4632      	mov	r2, r6
c0d006e4:	461e      	mov	r6, r3
c0d006e6:	f003 ff64 	bl	c0d045b2 <os_memmove>
c0d006ea:	20c8      	movs	r0, #200	; 0xc8
c0d006ec:	2100      	movs	r1, #0
c0d006ee:	9107      	str	r1, [sp, #28]
        G_io_apdu_buffer[200 + keyLength] = '\0';
c0d006f0:	5439      	strb	r1, [r7, r0]
c0d006f2:	4637      	mov	r7, r6
        btchip_context_D.io_flags |= IO_ASYNCH_REPLY;
c0d006f4:	2021      	movs	r0, #33	; 0x21
c0d006f6:	0106      	lsls	r6, r0, #4
c0d006f8:	5db8      	ldrb	r0, [r7, r6]
c0d006fa:	2110      	movs	r1, #16
c0d006fc:	4301      	orrs	r1, r0
c0d006fe:	55b9      	strb	r1, [r7, r6]
        if (!btchip_bagl_display_public_key()) {
c0d00700:	f003 fe12 	bl	c0d04328 <btchip_bagl_display_public_key>
c0d00704:	2800      	cmp	r0, #0
c0d00706:	d107      	bne.n	c0d00718 <btchip_apdu_get_wallet_public_key+0x20c>
            btchip_context_D.io_flags &= ~IO_ASYNCH_REPLY;
c0d00708:	5db8      	ldrb	r0, [r7, r6]
c0d0070a:	21ef      	movs	r1, #239	; 0xef
c0d0070c:	4001      	ands	r1, r0
c0d0070e:	55b9      	strb	r1, [r7, r6]
            btchip_context_D.outLength = 0;
c0d00710:	480b      	ldr	r0, [pc, #44]	; (c0d00740 <btchip_apdu_get_wallet_public_key+0x234>)
c0d00712:	9907      	ldr	r1, [sp, #28]
c0d00714:	5239      	strh	r1, [r7, r0]
c0d00716:	4625      	mov	r5, r4
            return BTCHIP_SW_INCORRECT_DATA;
        }
    }

    return BTCHIP_SW_OK;
}
c0d00718:	b2a8      	uxth	r0, r5
c0d0071a:	b021      	add	sp, #132	; 0x84
c0d0071c:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d0071e:	46c0      	nop			; (mov r8, r8)
c0d00720:	c0d08980 	.word	0xc0d08980
c0d00724:	20001e6c 	.word	0x20001e6c
c0d00728:	20001c24 	.word	0x20001c24
c0d0072c:	00006982 	.word	0x00006982
c0d00730:	206e6970 	.word	0x206e6970
c0d00734:	000a6b6f 	.word	0x000a6b6f
c0d00738:	20001800 	.word	0x20001800
c0d0073c:	20001874 	.word	0x20001874
c0d00740:	0000020e 	.word	0x0000020e

c0d00744 <btchip_bagl_user_action_display>:

void btchip_bagl_user_action_display(unsigned char confirming) {
c0d00744:	b5b0      	push	{r4, r5, r7, lr}
c0d00746:	2100      	movs	r1, #0
c0d00748:	2369      	movs	r3, #105	; 0x69
c0d0074a:	2285      	movs	r2, #133	; 0x85
    unsigned short sw = BTCHIP_SW_OK;
    // confirm and finish the apdu exchange //spaghetti
    if (confirming) {
c0d0074c:	2800      	cmp	r0, #0
c0d0074e:	d007      	beq.n	c0d00760 <btchip_bagl_user_action_display+0x1c>
        btchip_context_D.outLength -=
c0d00750:	480c      	ldr	r0, [pc, #48]	; (c0d00784 <btchip_bagl_user_action_display+0x40>)
c0d00752:	490d      	ldr	r1, [pc, #52]	; (c0d00788 <btchip_bagl_user_action_display+0x44>)
c0d00754:	5a08      	ldrh	r0, [r1, r0]
c0d00756:	490d      	ldr	r1, [pc, #52]	; (c0d0078c <btchip_bagl_user_action_display+0x48>)
c0d00758:	1841      	adds	r1, r0, r1
c0d0075a:	320b      	adds	r2, #11
c0d0075c:	2000      	movs	r0, #0
c0d0075e:	e001      	b.n	c0d00764 <btchip_bagl_user_action_display+0x20>
c0d00760:	4610      	mov	r0, r2
c0d00762:	461a      	mov	r2, r3

    } else {
        sw = BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
        btchip_context_D.outLength = 0;
    }
    G_io_apdu_buffer[btchip_context_D.outLength++] = sw >> 8;
c0d00764:	b28b      	uxth	r3, r1
c0d00766:	4c0a      	ldr	r4, [pc, #40]	; (c0d00790 <btchip_bagl_user_action_display+0x4c>)
c0d00768:	54e2      	strb	r2, [r4, r3]
    G_io_apdu_buffer[btchip_context_D.outLength++] = sw;
c0d0076a:	1c8a      	adds	r2, r1, #2
c0d0076c:	4b05      	ldr	r3, [pc, #20]	; (c0d00784 <btchip_bagl_user_action_display+0x40>)
c0d0076e:	4d06      	ldr	r5, [pc, #24]	; (c0d00788 <btchip_bagl_user_action_display+0x44>)
c0d00770:	52ea      	strh	r2, [r5, r3]

    } else {
        sw = BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
        btchip_context_D.outLength = 0;
    }
    G_io_apdu_buffer[btchip_context_D.outLength++] = sw >> 8;
c0d00772:	1c49      	adds	r1, r1, #1
    G_io_apdu_buffer[btchip_context_D.outLength++] = sw;
c0d00774:	b289      	uxth	r1, r1
c0d00776:	5460      	strb	r0, [r4, r1]

    io_exchange(CHANNEL_APDU | IO_RETURN_AFTER_TX, btchip_context_D.outLength);
c0d00778:	b291      	uxth	r1, r2
c0d0077a:	2020      	movs	r0, #32
c0d0077c:	f004 fb1e 	bl	c0d04dbc <io_exchange>
}
c0d00780:	bdb0      	pop	{r4, r5, r7, pc}
c0d00782:	46c0      	nop			; (mov r8, r8)
c0d00784:	0000020e 	.word	0x0000020e
c0d00788:	20001874 	.word	0x20001874
c0d0078c:	0000fffe 	.word	0x0000fffe
c0d00790:	20001e6c 	.word	0x20001e6c

c0d00794 <btchip_apdu_hash_input_finalize_full_internal>:

    return processed;
}

unsigned short btchip_apdu_hash_input_finalize_full_internal(
    btchip_transaction_summary_t *transactionSummary) {
c0d00794:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d00796:	b09f      	sub	sp, #124	; 0x7c
    unsigned short sw = BTCHIP_SW_OK;
    unsigned char *target = G_io_apdu_buffer;
    unsigned char keycardActivated = 0;
    unsigned char screenPaired = 0;
    unsigned char deepControl = 0;
    unsigned char p1 = G_io_apdu_buffer[ISO_OFFSET_P1];
c0d00798:	4bf1      	ldr	r3, [pc, #964]	; (c0d00b60 <btchip_apdu_hash_input_finalize_full_internal+0x3cc>)
c0d0079a:	789c      	ldrb	r4, [r3, #2]
c0d0079c:	216b      	movs	r1, #107	; 0x6b
c0d0079e:	020e      	lsls	r6, r1, #8
    unsigned char persistentCommit = 0;
    unsigned char hashOffset = 0;
    unsigned char numOutputs = 0;

    apduLength = G_io_apdu_buffer[ISO_OFFSET_LC];
c0d007a0:	7919      	ldrb	r1, [r3, #4]

    if ((p1 != FINALIZE_P1_MORE) && (p1 != FINALIZE_P1_LAST) &&
c0d007a2:	2c00      	cmp	r4, #0
c0d007a4:	d004      	beq.n	c0d007b0 <btchip_apdu_hash_input_finalize_full_internal+0x1c>
c0d007a6:	2cff      	cmp	r4, #255	; 0xff
c0d007a8:	d002      	beq.n	c0d007b0 <btchip_apdu_hash_input_finalize_full_internal+0x1c>
c0d007aa:	2c80      	cmp	r4, #128	; 0x80
c0d007ac:	d000      	beq.n	c0d007b0 <btchip_apdu_hash_input_finalize_full_internal+0x1c>
c0d007ae:	e0b5      	b.n	c0d0091c <btchip_apdu_hash_input_finalize_full_internal+0x188>
c0d007b0:	9107      	str	r1, [sp, #28]
c0d007b2:	900b      	str	r0, [sp, #44]	; 0x2c
        return BTCHIP_SW_INCORRECT_P1_P2;
    }

    // See if there is a hashing offset
    if (btchip_context_D.usingSegwit &&
        (btchip_context_D.tmpCtx.output.multipleOutput == 0)) {
c0d007b4:	48eb      	ldr	r0, [pc, #940]	; (c0d00b64 <btchip_apdu_hash_input_finalize_full_internal+0x3d0>)
        (p1 != FINALIZE_P1_CHANGEINFO)) {
        return BTCHIP_SW_INCORRECT_P1_P2;
    }

    // See if there is a hashing offset
    if (btchip_context_D.usingSegwit &&
c0d007b6:	4aec      	ldr	r2, [pc, #944]	; (c0d00b68 <btchip_apdu_hash_input_finalize_full_internal+0x3d4>)
c0d007b8:	217f      	movs	r1, #127	; 0x7f
c0d007ba:	0089      	lsls	r1, r1, #2
c0d007bc:	910a      	str	r1, [sp, #40]	; 0x28
c0d007be:	5c51      	ldrb	r1, [r2, r1]
c0d007c0:	2700      	movs	r7, #0
                if (!(G_coin_config->kind == COIN_KIND_QTUM) &&
                    (G_io_apdu_buffer[ISO_OFFSET_P1] == FINALIZE_P1_LAST) &&
                    !btchip_context_D.tmpCtx.output.multipleOutput &&
                    prepare_full_output(1)) {
                    btchip_context_D.io_flags |= IO_ASYNCH_REPLY;
                    btchip_context_D.outputParsingState =
c0d007c2:	2680      	movs	r6, #128	; 0x80
        (p1 != FINALIZE_P1_CHANGEINFO)) {
        return BTCHIP_SW_INCORRECT_P1_P2;
    }

    // See if there is a hashing offset
    if (btchip_context_D.usingSegwit &&
c0d007c4:	2900      	cmp	r1, #0
c0d007c6:	9606      	str	r6, [sp, #24]
c0d007c8:	d017      	beq.n	c0d007fa <btchip_apdu_hash_input_finalize_full_internal+0x66>
c0d007ca:	4615      	mov	r5, r2
c0d007cc:	5c10      	ldrb	r0, [r2, r0]
c0d007ce:	2800      	cmp	r0, #0
c0d007d0:	d114      	bne.n	c0d007fc <btchip_apdu_hash_input_finalize_full_internal+0x68>
        (btchip_context_D.tmpCtx.output.multipleOutput == 0)) {
        unsigned char firstByte = G_io_apdu_buffer[ISO_OFFSET_CDATA];
c0d007d2:	7958      	ldrb	r0, [r3, #5]
        if (firstByte < 0xfd) {
c0d007d4:	4631      	mov	r1, r6
c0d007d6:	317d      	adds	r1, #125	; 0x7d
c0d007d8:	b2c9      	uxtb	r1, r1
c0d007da:	2701      	movs	r7, #1
c0d007dc:	4288      	cmp	r0, r1
c0d007de:	d30d      	bcc.n	c0d007fc <btchip_apdu_hash_input_finalize_full_internal+0x68>
            hashOffset = 1;
        } else if (firstByte == 0xfd) {
c0d007e0:	4632      	mov	r2, r6
c0d007e2:	327e      	adds	r2, #126	; 0x7e
c0d007e4:	b2d6      	uxtb	r6, r2
c0d007e6:	2205      	movs	r2, #5
c0d007e8:	2300      	movs	r3, #0
c0d007ea:	42b0      	cmp	r0, r6
c0d007ec:	d000      	beq.n	c0d007f0 <btchip_apdu_hash_input_finalize_full_internal+0x5c>
c0d007ee:	461a      	mov	r2, r3
c0d007f0:	2703      	movs	r7, #3
c0d007f2:	4288      	cmp	r0, r1
c0d007f4:	d002      	beq.n	c0d007fc <btchip_apdu_hash_input_finalize_full_internal+0x68>
c0d007f6:	4617      	mov	r7, r2
c0d007f8:	e000      	b.n	c0d007fc <btchip_apdu_hash_input_finalize_full_internal+0x68>
c0d007fa:	4615      	mov	r5, r2
c0d007fc:	ae0c      	add	r6, sp, #48	; 0x30
        }
    }

    // Check state
    BEGIN_TRY {
        TRY {
c0d007fe:	4630      	mov	r0, r6
c0d00800:	f007 f858 	bl	c0d078b4 <setjmp>
c0d00804:	8530      	strh	r0, [r6, #40]	; 0x28
c0d00806:	49d9      	ldr	r1, [pc, #868]	; (c0d00b6c <btchip_apdu_hash_input_finalize_full_internal+0x3d8>)
c0d00808:	4208      	tst	r0, r1
c0d0080a:	d005      	beq.n	c0d00818 <btchip_apdu_hash_input_finalize_full_internal+0x84>
c0d0080c:	a80c      	add	r0, sp, #48	; 0x30
                btchip_context_D.transactionContext.transactionState =
                    BTCHIP_TRANSACTION_SIGN_READY;
            }
            sw = BTCHIP_SW_OK;
        }
        CATCH_ALL {
c0d0080e:	2100      	movs	r1, #0
c0d00810:	8501      	strh	r1, [r0, #40]	; 0x28
c0d00812:	206f      	movs	r0, #111	; 0x6f
c0d00814:	0204      	lsls	r4, r0, #8
c0d00816:	e058      	b.n	c0d008ca <btchip_apdu_hash_input_finalize_full_internal+0x136>
c0d00818:	a80c      	add	r0, sp, #48	; 0x30
        }
    }

    // Check state
    BEGIN_TRY {
        TRY {
c0d0081a:	f003 fe16 	bl	c0d0444a <try_context_set>
            btchip_set_check_internal_structure_integrity(0);
            if (btchip_context_D.transactionContext.transactionState !=
c0d0081e:	7d28      	ldrb	r0, [r5, #20]
c0d00820:	4ad3      	ldr	r2, [pc, #844]	; (c0d00b70 <btchip_apdu_hash_input_finalize_full_internal+0x3dc>)
c0d00822:	2809      	cmp	r0, #9
c0d00824:	d14c      	bne.n	c0d008c0 <btchip_apdu_hash_input_finalize_full_internal+0x12c>
c0d00826:	2009      	movs	r0, #9
c0d00828:	0306      	lsls	r6, r0, #12
                BTCHIP_TRANSACTION_PRESIGN_READY) {
                sw = BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
                goto discardTransaction;
            }

            if (p1 == FINALIZE_P1_CHANGEINFO) {
c0d0082a:	9b06      	ldr	r3, [sp, #24]
c0d0082c:	337f      	adds	r3, #127	; 0x7f
c0d0082e:	b2d8      	uxtb	r0, r3
c0d00830:	4284      	cmp	r4, r0
c0d00832:	d176      	bne.n	c0d00922 <btchip_apdu_hash_input_finalize_full_internal+0x18e>
c0d00834:	4629      	mov	r1, r5
                unsigned char keyLength;
                if (!btchip_context_D.transactionContext.firstSigned) {
c0d00836:	7f48      	ldrb	r0, [r1, #29]
c0d00838:	2800      	cmp	r0, #0
c0d0083a:	d100      	bne.n	c0d0083e <btchip_apdu_hash_input_finalize_full_internal+0xaa>
c0d0083c:	e169      	b.n	c0d00b12 <btchip_apdu_hash_input_finalize_full_internal+0x37e>
                // Already validated, should be prevented on the client side
                return_OK:
                    CLOSE_TRY;
                    return BTCHIP_SW_OK;
                }
                if (!btchip_context_D.tmpCtx.output.changeAccepted) {
c0d0083e:	48d1      	ldr	r0, [pc, #836]	; (c0d00b84 <btchip_apdu_hash_input_finalize_full_internal+0x3f0>)
c0d00840:	460d      	mov	r5, r1
c0d00842:	5c08      	ldrb	r0, [r1, r0]
c0d00844:	2800      	cmp	r0, #0
c0d00846:	4614      	mov	r4, r2
c0d00848:	d03b      	beq.n	c0d008c2 <btchip_apdu_hash_input_finalize_full_internal+0x12e>
c0d0084a:	2100      	movs	r1, #0
                    sw = BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
                    goto discardTransaction;
                }
                os_memset(transactionSummary, 0,
c0d0084c:	2298      	movs	r2, #152	; 0x98
c0d0084e:	980b      	ldr	r0, [sp, #44]	; 0x2c
c0d00850:	f003 fea6 	bl	c0d045a0 <os_memset>
c0d00854:	49c2      	ldr	r1, [pc, #776]	; (c0d00b60 <btchip_apdu_hash_input_finalize_full_internal+0x3cc>)
                          sizeof(btchip_transaction_summary_t));
                if (G_io_apdu_buffer[ISO_OFFSET_CDATA] == 0x00) {
c0d00856:	7948      	ldrb	r0, [r1, #5]
c0d00858:	2800      	cmp	r0, #0
c0d0085a:	462c      	mov	r4, r5
c0d0085c:	d100      	bne.n	c0d00860 <btchip_apdu_hash_input_finalize_full_internal+0xcc>
c0d0085e:	e158      	b.n	c0d00b12 <btchip_apdu_hash_input_finalize_full_internal+0x37e>
c0d00860:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
                    // Called with no change path, abort, should be prevented on
                    // the client side
                    goto return_OK;
                }
                os_memmove(transactionSummary->summarydata.keyPath,
c0d00862:	463d      	mov	r5, r7
c0d00864:	356d      	adds	r5, #109	; 0x6d
c0d00866:	1d49      	adds	r1, r1, #5
c0d00868:	2229      	movs	r2, #41	; 0x29
c0d0086a:	4628      	mov	r0, r5
c0d0086c:	f003 fea1 	bl	c0d045b2 <os_memmove>
c0d00870:	2101      	movs	r1, #1
c0d00872:	2200      	movs	r2, #0
                           G_io_apdu_buffer + ISO_OFFSET_CDATA,
                           MAX_BIP32_PATH_LENGTH);
                btchip_private_derive_keypair(
c0d00874:	4628      	mov	r0, r5
c0d00876:	4615      	mov	r5, r2
c0d00878:	9104      	str	r1, [sp, #16]
c0d0087a:	f001 fc86 	bl	c0d0218a <btchip_private_derive_keypair>
                    transactionSummary->summarydata.keyPath, 1, NULL);
                if (((N_btchip.bkp.config.options &
c0d0087e:	48c2      	ldr	r0, [pc, #776]	; (c0d00b88 <btchip_apdu_hash_input_finalize_full_internal+0x3f4>)
c0d00880:	f005 f93c 	bl	c0d05afc <pic>
c0d00884:	7980      	ldrb	r0, [r0, #6]
c0d00886:	07c0      	lsls	r0, r0, #31
c0d00888:	2141      	movs	r1, #65	; 0x41
c0d0088a:	2800      	cmp	r0, #0
c0d0088c:	d104      	bne.n	c0d00898 <btchip_apdu_hash_input_finalize_full_internal+0x104>
                      BTCHIP_OPTION_UNCOMPRESSED_KEYS) != 0)) {
                    keyLength = 65;
                } else {
                    btchip_compress_public_key_value(btchip_public_key_D.W);
c0d0088e:	48bf      	ldr	r0, [pc, #764]	; (c0d00b8c <btchip_apdu_hash_input_finalize_full_internal+0x3f8>)
c0d00890:	3008      	adds	r0, #8
c0d00892:	f001 fa77 	bl	c0d01d84 <btchip_compress_public_key_value>
c0d00896:	2121      	movs	r1, #33	; 0x21
                    keyLength = 33;
                }
                btchip_public_key_hash160(
c0d00898:	48bc      	ldr	r0, [pc, #752]	; (c0d00b8c <btchip_apdu_hash_input_finalize_full_internal+0x3f8>)
c0d0089a:	3008      	adds	r0, #8
c0d0089c:	b289      	uxth	r1, r1
                    btchip_public_key_D.W,                            // IN
                    keyLength,                                        // INLEN
                    transactionSummary->summarydata.changeAddress + 1 // OUT
c0d0089e:	463a      	mov	r2, r7
c0d008a0:	3259      	adds	r2, #89	; 0x59
                    keyLength = 65;
                } else {
                    btchip_compress_public_key_value(btchip_public_key_D.W);
                    keyLength = 33;
                }
                btchip_public_key_hash160(
c0d008a2:	f001 fbed 	bl	c0d02080 <btchip_public_key_hash160>
c0d008a6:	48ba      	ldr	r0, [pc, #744]	; (c0d00b90 <btchip_apdu_hash_input_finalize_full_internal+0x3fc>)
                    btchip_public_key_D.W,                            // IN
                    keyLength,                                        // INLEN
                    transactionSummary->summarydata.changeAddress + 1 // OUT
                    );
                os_memmove(
c0d008a8:	1820      	adds	r0, r4, r0
                    keyLength = 33;
                }
                btchip_public_key_hash160(
                    btchip_public_key_D.W,                            // IN
                    keyLength,                                        // INLEN
                    transactionSummary->summarydata.changeAddress + 1 // OUT
c0d008aa:	3758      	adds	r7, #88	; 0x58
c0d008ac:	2215      	movs	r2, #21
                    );
                os_memmove(
c0d008ae:	4639      	mov	r1, r7
c0d008b0:	f003 fe7f 	bl	c0d045b2 <os_memmove>
                    btchip_context_D.tmpCtx.output.changeAddress,
                    transactionSummary->summarydata.changeAddress,
                    sizeof(transactionSummary->summarydata.changeAddress));
                btchip_context_D.tmpCtx.output.changeInitialized = 1;
c0d008b4:	48b1      	ldr	r0, [pc, #708]	; (c0d00b7c <btchip_apdu_hash_input_finalize_full_internal+0x3e8>)
c0d008b6:	9904      	ldr	r1, [sp, #16]
c0d008b8:	5421      	strb	r1, [r4, r0]
                btchip_context_D.tmpCtx.output.changeAccepted = 0;
c0d008ba:	48b2      	ldr	r0, [pc, #712]	; (c0d00b84 <btchip_apdu_hash_input_finalize_full_internal+0x3f0>)
c0d008bc:	5425      	strb	r5, [r4, r0]
c0d008be:	e128      	b.n	c0d00b12 <btchip_apdu_hash_input_finalize_full_internal+0x37e>
c0d008c0:	4614      	mov	r4, r2
                        sizeof(transactionSummary->authorizationHash))) {
                    L_DEBUG_APP(
                        ("Authorization hash not matching, aborting\n"));
                    sw = BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
                discardTransaction:
                    CLOSE_TRY;
c0d008c2:	f003 ff31 	bl	c0d04728 <try_context_get_previous>
c0d008c6:	f003 fdc0 	bl	c0d0444a <try_context_set>
c0d008ca:	462f      	mov	r7, r5
c0d008cc:	2000      	movs	r0, #0
            sw = BTCHIP_SW_OK;
        }
        CATCH_ALL {
            sw = SW_TECHNICAL_DETAILS(0x0F);
        catch_discardTransaction:
            btchip_context_D.transactionContext.transactionState =
c0d008ce:	7538      	strb	r0, [r7, #20]
                BTCHIP_TRANSACTION_NONE;
            btchip_context_D.outLength = 0;
c0d008d0:	4dab      	ldr	r5, [pc, #684]	; (c0d00b80 <btchip_apdu_hash_input_finalize_full_internal+0x3ec>)
c0d008d2:	5378      	strh	r0, [r7, r5]

            os_memmove(G_io_apdu_buffer, btchip_context_D.currentOutput,
                       btchip_context_D.currentOutputOffset);
c0d008d4:	20e5      	movs	r0, #229	; 0xe5
c0d008d6:	0086      	lsls	r6, r0, #2
c0d008d8:	5bba      	ldrh	r2, [r7, r6]
        catch_discardTransaction:
            btchip_context_D.transactionContext.transactionState =
                BTCHIP_TRANSACTION_NONE;
            btchip_context_D.outLength = 0;

            os_memmove(G_io_apdu_buffer, btchip_context_D.currentOutput,
c0d008da:	48a6      	ldr	r0, [pc, #664]	; (c0d00b74 <btchip_apdu_hash_input_finalize_full_internal+0x3e0>)
c0d008dc:	1839      	adds	r1, r7, r0
c0d008de:	48a0      	ldr	r0, [pc, #640]	; (c0d00b60 <btchip_apdu_hash_input_finalize_full_internal+0x3cc>)
c0d008e0:	f003 fe67 	bl	c0d045b2 <os_memmove>
                       btchip_context_D.currentOutputOffset);
            btchip_context_D.outLength = btchip_context_D.currentOutputOffset;
c0d008e4:	5bb8      	ldrh	r0, [r7, r6]
c0d008e6:	5378      	strh	r0, [r7, r5]
c0d008e8:	4626      	mov	r6, r4
        }
        FINALLY {
c0d008ea:	f003 ff1b 	bl	c0d04724 <try_context_get>
c0d008ee:	a90c      	add	r1, sp, #48	; 0x30
c0d008f0:	4288      	cmp	r0, r1
c0d008f2:	d103      	bne.n	c0d008fc <btchip_apdu_hash_input_finalize_full_internal+0x168>
c0d008f4:	f003 ff18 	bl	c0d04728 <try_context_get_previous>
c0d008f8:	f003 fda7 	bl	c0d0444a <try_context_set>
#define FLAG_CHANGE_VALIDATED 0x80

extern uint8_t prepare_full_output(uint8_t checkOnly);

static void btchip_apdu_hash_input_finalize_full_reset(void) {
    btchip_context_D.currentOutputOffset = 0;
c0d008fc:	20e5      	movs	r0, #229	; 0xe5
c0d008fe:	0080      	lsls	r0, r0, #2
c0d00900:	2400      	movs	r4, #0
c0d00902:	523c      	strh	r4, [r7, r0]
    btchip_context_D.outputParsingState = BTCHIP_OUTPUT_PARSING_NUMBER_OUTPUTS;
c0d00904:	20e9      	movs	r0, #233	; 0xe9
c0d00906:	0080      	lsls	r0, r0, #2
c0d00908:	2101      	movs	r1, #1
c0d0090a:	5439      	strb	r1, [r7, r0]
    os_memset(btchip_context_D.totalOutputAmount, 0,
c0d0090c:	48a1      	ldr	r0, [pc, #644]	; (c0d00b94 <btchip_apdu_hash_input_finalize_full_internal+0x400>)
c0d0090e:	1838      	adds	r0, r7, r0
c0d00910:	2208      	movs	r2, #8
c0d00912:	4621      	mov	r1, r4
c0d00914:	f003 fe44 	bl	c0d045a0 <os_memset>
              sizeof(btchip_context_D.totalOutputAmount));
    btchip_context_D.changeOutputFound = 0;
c0d00918:	489f      	ldr	r0, [pc, #636]	; (c0d00b98 <btchip_apdu_hash_input_finalize_full_internal+0x404>)
c0d0091a:	543c      	strb	r4, [r7, r0]
            btchip_apdu_hash_input_finalize_full_reset();
            return sw;
        }
    }
    END_TRY;
}
c0d0091c:	b2b0      	uxth	r0, r6
c0d0091e:	b01f      	add	sp, #124	; 0x7c
c0d00920:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d00922:	9209      	str	r2, [sp, #36]	; 0x24
            }

            // Always update the transaction & authorization hashes with the
            // given data
            // For SegWit, this has been reset to hold hashOutputs
            if (!btchip_context_D.segwitParsedOnce) {
c0d00924:	20ff      	movs	r0, #255	; 0xff
c0d00926:	0040      	lsls	r0, r0, #1
c0d00928:	9008      	str	r0, [sp, #32]
c0d0092a:	5c28      	ldrb	r0, [r5, r0]
c0d0092c:	2800      	cmp	r0, #0
c0d0092e:	d10e      	bne.n	c0d0094e <btchip_apdu_hash_input_finalize_full_internal+0x1ba>
                cx_hash(&btchip_context_D.transactionHashFull.header, 0,
c0d00930:	2100      	movs	r1, #0
c0d00932:	4668      	mov	r0, sp
c0d00934:	6001      	str	r1, [r0, #0]
c0d00936:	b2f8      	uxtb	r0, r7
c0d00938:	9a07      	ldr	r2, [sp, #28]
c0d0093a:	461c      	mov	r4, r3
c0d0093c:	1a13      	subs	r3, r2, r0
c0d0093e:	4a88      	ldr	r2, [pc, #544]	; (c0d00b60 <btchip_apdu_hash_input_finalize_full_internal+0x3cc>)
c0d00940:	1810      	adds	r0, r2, r0
c0d00942:	1d42      	adds	r2, r0, #5
c0d00944:	4628      	mov	r0, r5
c0d00946:	303c      	adds	r0, #60	; 0x3c
c0d00948:	f002 fa64 	bl	c0d02e14 <cx_hash_X>
c0d0094c:	4623      	mov	r3, r4
                        G_io_apdu_buffer + ISO_OFFSET_CDATA + hashOffset,
                        apduLength - hashOffset, NULL);
            }

            if (btchip_context_D.transactionContext.firstSigned) {
c0d0094e:	7f68      	ldrb	r0, [r5, #29]
c0d00950:	2800      	cmp	r0, #0
c0d00952:	462c      	mov	r4, r5
c0d00954:	d053      	beq.n	c0d009fe <btchip_apdu_hash_input_finalize_full_internal+0x26a>
                if ((btchip_context_D.currentOutputOffset + apduLength) >
c0d00956:	20e5      	movs	r0, #229	; 0xe5
c0d00958:	0087      	lsls	r7, r0, #2
c0d0095a:	4625      	mov	r5, r4
c0d0095c:	5be0      	ldrh	r0, [r4, r7]
c0d0095e:	9a07      	ldr	r2, [sp, #28]
c0d00960:	1881      	adds	r1, r0, r2
c0d00962:	9c09      	ldr	r4, [sp, #36]	; 0x24
c0d00964:	34fb      	adds	r4, #251	; 0xfb
c0d00966:	29c8      	cmp	r1, #200	; 0xc8
c0d00968:	d8ab      	bhi.n	c0d008c2 <btchip_apdu_hash_input_finalize_full_internal+0x12e>
c0d0096a:	9305      	str	r3, [sp, #20]
                    sizeof(btchip_context_D.currentOutput)) {
                    L_DEBUG_APP(("Output is too long to be checked\n"));
                    sw = BTCHIP_SW_INCORRECT_DATA;
                    goto discardTransaction;
                }
                os_memmove(btchip_context_D.currentOutput +
c0d0096c:	1828      	adds	r0, r5, r0
c0d0096e:	4981      	ldr	r1, [pc, #516]	; (c0d00b74 <btchip_apdu_hash_input_finalize_full_internal+0x3e0>)
c0d00970:	1840      	adds	r0, r0, r1
c0d00972:	497b      	ldr	r1, [pc, #492]	; (c0d00b60 <btchip_apdu_hash_input_finalize_full_internal+0x3cc>)
c0d00974:	1d49      	adds	r1, r1, #5
c0d00976:	4614      	mov	r4, r2
c0d00978:	f003 fe1b 	bl	c0d045b2 <os_memmove>
                               btchip_context_D.currentOutputOffset,
                           G_io_apdu_buffer + ISO_OFFSET_CDATA, apduLength);
                btchip_context_D.currentOutputOffset += apduLength;
c0d0097c:	5be8      	ldrh	r0, [r5, r7]
c0d0097e:	1900      	adds	r0, r0, r4
c0d00980:	53e8      	strh	r0, [r5, r7]
c0d00982:	462c      	mov	r4, r5

                // Check if the legacy UI can be applied
                if (!(G_coin_config->kind == COIN_KIND_QTUM) &&
c0d00984:	487c      	ldr	r0, [pc, #496]	; (c0d00b78 <btchip_apdu_hash_input_finalize_full_internal+0x3e4>)
c0d00986:	6800      	ldr	r0, [r0, #0]
c0d00988:	2128      	movs	r1, #40	; 0x28
c0d0098a:	5c40      	ldrb	r0, [r0, r1]
c0d0098c:	2812      	cmp	r0, #18
c0d0098e:	d11a      	bne.n	c0d009c6 <btchip_apdu_hash_input_finalize_full_internal+0x232>
                    btchip_context_D.io_flags |= IO_ASYNCH_REPLY;
                    btchip_context_D.outputParsingState =
                        BTCHIP_OUTPUT_HANDLE_LEGACY;
                    btchip_context_D.remainingOutputs = 0;
                } else {
                    while (handle_output_state() &&
c0d00990:	f000 f9ee 	bl	c0d00d70 <handle_output_state>
c0d00994:	2801      	cmp	r0, #1
c0d00996:	d104      	bne.n	c0d009a2 <btchip_apdu_hash_input_finalize_full_internal+0x20e>
                           (!(btchip_context_D.io_flags & IO_ASYNCH_REPLY)))
c0d00998:	2021      	movs	r0, #33	; 0x21
c0d0099a:	0100      	lsls	r0, r0, #4
c0d0099c:	5c20      	ldrb	r0, [r4, r0]
                    btchip_context_D.io_flags |= IO_ASYNCH_REPLY;
                    btchip_context_D.outputParsingState =
                        BTCHIP_OUTPUT_HANDLE_LEGACY;
                    btchip_context_D.remainingOutputs = 0;
                } else {
                    while (handle_output_state() &&
c0d0099e:	06c0      	lsls	r0, r0, #27
c0d009a0:	d5f6      	bpl.n	c0d00990 <btchip_apdu_hash_input_finalize_full_internal+0x1fc>
                           (!(btchip_context_D.io_flags & IO_ASYNCH_REPLY)))
                        ;

                    // Finalize the TX if necessary

                    if ((btchip_context_D.remainingOutputs == 0) &&
c0d009a2:	2073      	movs	r0, #115	; 0x73
c0d009a4:	00c0      	lsls	r0, r0, #3
c0d009a6:	5820      	ldr	r0, [r4, r0]
c0d009a8:	2800      	cmp	r0, #0
c0d009aa:	d128      	bne.n	c0d009fe <btchip_apdu_hash_input_finalize_full_internal+0x26a>
                        (!(btchip_context_D.io_flags & IO_ASYNCH_REPLY))) {
c0d009ac:	2021      	movs	r0, #33	; 0x21
c0d009ae:	0100      	lsls	r0, r0, #4
c0d009b0:	5c21      	ldrb	r1, [r4, r0]
c0d009b2:	2210      	movs	r2, #16
                           (!(btchip_context_D.io_flags & IO_ASYNCH_REPLY)))
                        ;

                    // Finalize the TX if necessary

                    if ((btchip_context_D.remainingOutputs == 0) &&
c0d009b4:	4211      	tst	r1, r2
c0d009b6:	d122      	bne.n	c0d009fe <btchip_apdu_hash_input_finalize_full_internal+0x26a>
                        (!(btchip_context_D.io_flags & IO_ASYNCH_REPLY))) {
                        btchip_context_D.io_flags |= IO_ASYNCH_REPLY;
c0d009b8:	4311      	orrs	r1, r2
c0d009ba:	5421      	strb	r1, [r4, r0]
                        btchip_context_D.outputParsingState =
c0d009bc:	20e9      	movs	r0, #233	; 0xe9
c0d009be:	0080      	lsls	r0, r0, #2
c0d009c0:	2103      	movs	r1, #3
c0d009c2:	5421      	strb	r1, [r4, r0]
c0d009c4:	e01b      	b.n	c0d009fe <btchip_apdu_hash_input_finalize_full_internal+0x26a>
                btchip_context_D.currentOutputOffset += apduLength;

                // Check if the legacy UI can be applied
                if (!(G_coin_config->kind == COIN_KIND_QTUM) &&
                    (G_io_apdu_buffer[ISO_OFFSET_P1] == FINALIZE_P1_LAST) &&
                    !btchip_context_D.tmpCtx.output.multipleOutput &&
c0d009c6:	4867      	ldr	r0, [pc, #412]	; (c0d00b64 <btchip_apdu_hash_input_finalize_full_internal+0x3d0>)
                           G_io_apdu_buffer + ISO_OFFSET_CDATA, apduLength);
                btchip_context_D.currentOutputOffset += apduLength;

                // Check if the legacy UI can be applied
                if (!(G_coin_config->kind == COIN_KIND_QTUM) &&
                    (G_io_apdu_buffer[ISO_OFFSET_P1] == FINALIZE_P1_LAST) &&
c0d009c8:	4965      	ldr	r1, [pc, #404]	; (c0d00b60 <btchip_apdu_hash_input_finalize_full_internal+0x3cc>)
c0d009ca:	7889      	ldrb	r1, [r1, #2]
c0d009cc:	9a06      	ldr	r2, [sp, #24]
c0d009ce:	4291      	cmp	r1, r2
c0d009d0:	d1de      	bne.n	c0d00990 <btchip_apdu_hash_input_finalize_full_internal+0x1fc>
c0d009d2:	5c20      	ldrb	r0, [r4, r0]
c0d009d4:	2800      	cmp	r0, #0
c0d009d6:	d1db      	bne.n	c0d00990 <btchip_apdu_hash_input_finalize_full_internal+0x1fc>
c0d009d8:	2001      	movs	r0, #1
                    !btchip_context_D.tmpCtx.output.multipleOutput &&
                    prepare_full_output(1)) {
c0d009da:	f003 f889 	bl	c0d03af0 <prepare_full_output>
                               btchip_context_D.currentOutputOffset,
                           G_io_apdu_buffer + ISO_OFFSET_CDATA, apduLength);
                btchip_context_D.currentOutputOffset += apduLength;

                // Check if the legacy UI can be applied
                if (!(G_coin_config->kind == COIN_KIND_QTUM) &&
c0d009de:	2800      	cmp	r0, #0
c0d009e0:	d0d6      	beq.n	c0d00990 <btchip_apdu_hash_input_finalize_full_internal+0x1fc>
                    (G_io_apdu_buffer[ISO_OFFSET_P1] == FINALIZE_P1_LAST) &&
                    !btchip_context_D.tmpCtx.output.multipleOutput &&
                    prepare_full_output(1)) {
                    btchip_context_D.io_flags |= IO_ASYNCH_REPLY;
c0d009e2:	2021      	movs	r0, #33	; 0x21
c0d009e4:	0100      	lsls	r0, r0, #4
c0d009e6:	5c21      	ldrb	r1, [r4, r0]
c0d009e8:	2210      	movs	r2, #16
c0d009ea:	430a      	orrs	r2, r1
c0d009ec:	5422      	strb	r2, [r4, r0]
                    btchip_context_D.outputParsingState =
c0d009ee:	20e9      	movs	r0, #233	; 0xe9
c0d009f0:	0080      	lsls	r0, r0, #2
c0d009f2:	9905      	ldr	r1, [sp, #20]
c0d009f4:	5421      	strb	r1, [r4, r0]
                        BTCHIP_OUTPUT_HANDLE_LEGACY;
                    btchip_context_D.remainingOutputs = 0;
c0d009f6:	2073      	movs	r0, #115	; 0x73
c0d009f8:	00c0      	lsls	r0, r0, #3
c0d009fa:	2100      	movs	r1, #0
c0d009fc:	5021      	str	r1, [r4, r0]
c0d009fe:	980a      	ldr	r0, [sp, #40]	; 0x28
c0d00a00:	5c20      	ldrb	r0, [r4, r0]
c0d00a02:	4a57      	ldr	r2, [pc, #348]	; (c0d00b60 <btchip_apdu_hash_input_finalize_full_internal+0x3cc>)
                            BTCHIP_OUTPUT_FINALIZE_TX;
                    }
                }
            }

            if (G_io_apdu_buffer[ISO_OFFSET_P1] == FINALIZE_P1_MORE) {
c0d00a04:	7891      	ldrb	r1, [r2, #2]
c0d00a06:	2900      	cmp	r1, #0
c0d00a08:	d020      	beq.n	c0d00a4c <btchip_apdu_hash_input_finalize_full_internal+0x2b8>
                btchip_context_D.outLength = 1;
                btchip_context_D.tmpCtx.output.multipleOutput = 1;
                goto return_OK;
            }

            if (!btchip_context_D.usingSegwit) {
c0d00a0a:	2800      	cmp	r0, #0
c0d00a0c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
c0d00a0e:	d10e      	bne.n	c0d00a2e <btchip_apdu_hash_input_finalize_full_internal+0x29a>
c0d00a10:	a817      	add	r0, sp, #92	; 0x5c
                cx_hash(&btchip_context_D.transactionHashAuthorization.header,
c0d00a12:	4669      	mov	r1, sp
c0d00a14:	6008      	str	r0, [r1, #0]
c0d00a16:	4620      	mov	r0, r4
c0d00a18:	30a8      	adds	r0, #168	; 0xa8
c0d00a1a:	1d52      	adds	r2, r2, #5
c0d00a1c:	2101      	movs	r1, #1
c0d00a1e:	9b07      	ldr	r3, [sp, #28]
c0d00a20:	f002 f9f8 	bl	c0d02e14 <cx_hash_X>
c0d00a24:	494e      	ldr	r1, [pc, #312]	; (c0d00b60 <btchip_apdu_hash_input_finalize_full_internal+0x3cc>)
c0d00a26:	980a      	ldr	r0, [sp, #40]	; 0x28
c0d00a28:	5c20      	ldrb	r0, [r4, r0]
                        CX_LAST, G_io_apdu_buffer + ISO_OFFSET_CDATA,
                        apduLength, authorizationHash);
            }

            if (btchip_context_D.usingSegwit) {
c0d00a2a:	2800      	cmp	r0, #0
c0d00a2c:	d049      	beq.n	c0d00ac2 <btchip_apdu_hash_input_finalize_full_internal+0x32e>
                if (!btchip_context_D.segwitParsedOnce) {
c0d00a2e:	9808      	ldr	r0, [sp, #32]
c0d00a30:	5c20      	ldrb	r0, [r4, r0]
c0d00a32:	2800      	cmp	r0, #0
c0d00a34:	d01e      	beq.n	c0d00a74 <btchip_apdu_hash_input_finalize_full_internal+0x2e0>
c0d00a36:	a817      	add	r0, sp, #92	; 0x5c
                                 32));
                    cx_hash(
                        &btchip_context_D.transactionHashAuthorization.header,
                        CX_LAST, G_io_apdu_buffer, 0, authorizationHash);
                } else {
                    cx_hash(
c0d00a38:	4669      	mov	r1, sp
c0d00a3a:	6008      	str	r0, [r1, #0]
c0d00a3c:	2023      	movs	r0, #35	; 0x23
c0d00a3e:	00c0      	lsls	r0, r0, #3
c0d00a40:	1822      	adds	r2, r4, r0
c0d00a42:	4620      	mov	r0, r4
c0d00a44:	30a8      	adds	r0, #168	; 0xa8
c0d00a46:	2101      	movs	r1, #1
c0d00a48:	2360      	movs	r3, #96	; 0x60
c0d00a4a:	e037      	b.n	c0d00abc <btchip_apdu_hash_input_finalize_full_internal+0x328>
                    }
                }
            }

            if (G_io_apdu_buffer[ISO_OFFSET_P1] == FINALIZE_P1_MORE) {
                if (!btchip_context_D.usingSegwit) {
c0d00a4c:	2800      	cmp	r0, #0
c0d00a4e:	d109      	bne.n	c0d00a64 <btchip_apdu_hash_input_finalize_full_internal+0x2d0>
                    cx_hash(
c0d00a50:	2100      	movs	r1, #0
c0d00a52:	4668      	mov	r0, sp
c0d00a54:	6001      	str	r1, [r0, #0]
c0d00a56:	4620      	mov	r0, r4
c0d00a58:	30a8      	adds	r0, #168	; 0xa8
c0d00a5a:	1d52      	adds	r2, r2, #5
c0d00a5c:	9b07      	ldr	r3, [sp, #28]
c0d00a5e:	f002 f9d9 	bl	c0d02e14 <cx_hash_X>
c0d00a62:	4a3f      	ldr	r2, [pc, #252]	; (c0d00b60 <btchip_apdu_hash_input_finalize_full_internal+0x3cc>)
                        &btchip_context_D.transactionHashAuthorization.header,
                        0, G_io_apdu_buffer + ISO_OFFSET_CDATA, apduLength,
                        NULL);
                }
                G_io_apdu_buffer[0] = 0x00;
c0d00a64:	2000      	movs	r0, #0
c0d00a66:	7010      	strb	r0, [r2, #0]
                btchip_context_D.outLength = 1;
c0d00a68:	4845      	ldr	r0, [pc, #276]	; (c0d00b80 <btchip_apdu_hash_input_finalize_full_internal+0x3ec>)
c0d00a6a:	2101      	movs	r1, #1
c0d00a6c:	5221      	strh	r1, [r4, r0]
                btchip_context_D.tmpCtx.output.multipleOutput = 1;
c0d00a6e:	483d      	ldr	r0, [pc, #244]	; (c0d00b64 <btchip_apdu_hash_input_finalize_full_internal+0x3d0>)
c0d00a70:	5421      	strb	r1, [r4, r0]
c0d00a72:	e04e      	b.n	c0d00b12 <btchip_apdu_hash_input_finalize_full_internal+0x37e>
                        apduLength, authorizationHash);
            }

            if (btchip_context_D.usingSegwit) {
                if (!btchip_context_D.segwitParsedOnce) {
                    cx_hash(&btchip_context_D.transactionHashFull.header,
c0d00a74:	202b      	movs	r0, #43	; 0x2b
c0d00a76:	00c0      	lsls	r0, r0, #3
c0d00a78:	1827      	adds	r7, r4, r0
c0d00a7a:	4668      	mov	r0, sp
c0d00a7c:	6007      	str	r7, [r0, #0]
c0d00a7e:	4625      	mov	r5, r4
c0d00a80:	353c      	adds	r5, #60	; 0x3c
c0d00a82:	2101      	movs	r1, #1
c0d00a84:	9102      	str	r1, [sp, #8]
c0d00a86:	2300      	movs	r3, #0
c0d00a88:	9303      	str	r3, [sp, #12]
c0d00a8a:	4628      	mov	r0, r5
c0d00a8c:	463a      	mov	r2, r7
c0d00a8e:	f002 f9c1 	bl	c0d02e14 <cx_hash_X>
                            CX_LAST,
                            btchip_context_D.segwit.cache.hashedOutputs, 0,
                            btchip_context_D.segwit.cache.hashedOutputs);
                    cx_sha256_init(&btchip_context_D.transactionHashFull);
c0d00a92:	4628      	mov	r0, r5
c0d00a94:	f005 fa12 	bl	c0d05ebc <cx_sha256_init>
                    cx_hash(&btchip_context_D.transactionHashFull.header,
c0d00a98:	4668      	mov	r0, sp
c0d00a9a:	6007      	str	r7, [r0, #0]
c0d00a9c:	2320      	movs	r3, #32
c0d00a9e:	4628      	mov	r0, r5
c0d00aa0:	9d02      	ldr	r5, [sp, #8]
c0d00aa2:	4629      	mov	r1, r5
c0d00aa4:	463a      	mov	r2, r7
c0d00aa6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
c0d00aa8:	f002 f9b4 	bl	c0d02e14 <cx_hash_X>
c0d00aac:	a817      	add	r0, sp, #92	; 0x5c
                            sizeof(btchip_context_D.segwit.cache.hashedOutputs),
                            btchip_context_D.segwit.cache.hashedOutputs);
                    L_DEBUG_BUF(("hashOutputs\n",
                                 btchip_context_D.segwit.cache.hashedOutputs,
                                 32));
                    cx_hash(
c0d00aae:	4669      	mov	r1, sp
c0d00ab0:	6008      	str	r0, [r1, #0]
c0d00ab2:	4620      	mov	r0, r4
c0d00ab4:	30a8      	adds	r0, #168	; 0xa8
c0d00ab6:	4a2a      	ldr	r2, [pc, #168]	; (c0d00b60 <btchip_apdu_hash_input_finalize_full_internal+0x3cc>)
c0d00ab8:	4629      	mov	r1, r5
c0d00aba:	9b03      	ldr	r3, [sp, #12]
c0d00abc:	f002 f9aa 	bl	c0d02e14 <cx_hash_X>
c0d00ac0:	4927      	ldr	r1, [pc, #156]	; (c0d00b60 <btchip_apdu_hash_input_finalize_full_internal+0x3cc>)
                        sizeof(btchip_context_D.segwit.cache),
                        authorizationHash);
                }
            }

            if (btchip_context_D.transactionContext.firstSigned) {
c0d00ac2:	7f60      	ldrb	r0, [r4, #29]
c0d00ac4:	2800      	cmp	r0, #0
c0d00ac6:	d029      	beq.n	c0d00b1c <btchip_apdu_hash_input_finalize_full_internal+0x388>
                if (!btchip_context_D.tmpCtx.output.changeInitialized) {
c0d00ac8:	482c      	ldr	r0, [pc, #176]	; (c0d00b7c <btchip_apdu_hash_input_finalize_full_internal+0x3e8>)
c0d00aca:	5c20      	ldrb	r0, [r4, r0]
c0d00acc:	2800      	cmp	r0, #0
c0d00ace:	d104      	bne.n	c0d00ada <btchip_apdu_hash_input_finalize_full_internal+0x346>
                    os_memset(transactionSummary, 0,
c0d00ad0:	2100      	movs	r1, #0
c0d00ad2:	2298      	movs	r2, #152	; 0x98
c0d00ad4:	4638      	mov	r0, r7
c0d00ad6:	f003 fd63 	bl	c0d045a0 <os_memset>
                              sizeof(btchip_transaction_summary_t));
                }

                transactionSummary->payToAddressVersion =
                    btchip_context_D.payToAddressVersion;
c0d00ada:	2020      	movs	r0, #32
c0d00adc:	5c20      	ldrb	r0, [r4, r0]
                if (!btchip_context_D.tmpCtx.output.changeInitialized) {
                    os_memset(transactionSummary, 0,
                              sizeof(btchip_transaction_summary_t));
                }

                transactionSummary->payToAddressVersion =
c0d00ade:	7078      	strb	r0, [r7, #1]
                    btchip_context_D.payToAddressVersion;
                transactionSummary->payToScriptHashVersion =
                    btchip_context_D.payToScriptHashVersion;
c0d00ae0:	2022      	movs	r0, #34	; 0x22
c0d00ae2:	5c20      	ldrb	r0, [r4, r0]
                              sizeof(btchip_transaction_summary_t));
                }

                transactionSummary->payToAddressVersion =
                    btchip_context_D.payToAddressVersion;
                transactionSummary->payToScriptHashVersion =
c0d00ae4:	70b8      	strb	r0, [r7, #2]
                    btchip_context_D.payToScriptHashVersion;

                // Generate new nonce

                cx_rng(transactionSummary->summarydata.transactionNonce, 8);
c0d00ae6:	4638      	mov	r0, r7
c0d00ae8:	3023      	adds	r0, #35	; 0x23
c0d00aea:	2108      	movs	r1, #8
c0d00aec:	f005 f99c 	bl	c0d05e28 <cx_rng>
c0d00af0:	7f60      	ldrb	r0, [r4, #29]
c0d00af2:	2100      	movs	r1, #0
c0d00af4:	4a1a      	ldr	r2, [pc, #104]	; (c0d00b60 <btchip_apdu_hash_input_finalize_full_internal+0x3cc>)
            }

            G_io_apdu_buffer[0] = 0x00;
c0d00af6:	7011      	strb	r1, [r2, #0]
            target++;

            *target = 0x00;
c0d00af8:	7051      	strb	r1, [r2, #1]
            target++;

            btchip_context_D.outLength = (target - G_io_apdu_buffer);
c0d00afa:	4921      	ldr	r1, [pc, #132]	; (c0d00b80 <btchip_apdu_hash_input_finalize_full_internal+0x3ec>)
c0d00afc:	2202      	movs	r2, #2
c0d00afe:	5262      	strh	r2, [r4, r1]
c0d00b00:	1cf9      	adds	r1, r7, #3

            // Check that the input being signed is part of the same
            // transaction, otherwise abort
            // (this is done to keep the transaction counter limit per session
            // synchronized)
            if (btchip_context_D.transactionContext.firstSigned) {
c0d00b02:	2800      	cmp	r0, #0
c0d00b04:	d013      	beq.n	c0d00b2e <btchip_apdu_hash_input_finalize_full_internal+0x39a>
c0d00b06:	ab17      	add	r3, sp, #92	; 0x5c
                os_memmove(transactionSummary->authorizationHash,
c0d00b08:	2220      	movs	r2, #32
c0d00b0a:	4608      	mov	r0, r1
c0d00b0c:	4619      	mov	r1, r3
c0d00b0e:	f003 fd50 	bl	c0d045b2 <os_memmove>
            if (p1 == FINALIZE_P1_CHANGEINFO) {
                unsigned char keyLength;
                if (!btchip_context_D.transactionContext.firstSigned) {
                // Already validated, should be prevented on the client side
                return_OK:
                    CLOSE_TRY;
c0d00b12:	f003 fe09 	bl	c0d04728 <try_context_get_previous>
c0d00b16:	f003 fc98 	bl	c0d0444a <try_context_set>
c0d00b1a:	e6ff      	b.n	c0d0091c <btchip_apdu_hash_input_finalize_full_internal+0x188>
                // Generate new nonce

                cx_rng(transactionSummary->summarydata.transactionNonce, 8);
            }

            G_io_apdu_buffer[0] = 0x00;
c0d00b1c:	2000      	movs	r0, #0
c0d00b1e:	7008      	strb	r0, [r1, #0]
            target++;

            *target = 0x00;
c0d00b20:	7048      	strb	r0, [r1, #1]
            target++;

            btchip_context_D.outLength = (target - G_io_apdu_buffer);
c0d00b22:	4817      	ldr	r0, [pc, #92]	; (c0d00b80 <btchip_apdu_hash_input_finalize_full_internal+0x3ec>)
c0d00b24:	2102      	movs	r1, #2
c0d00b26:	4625      	mov	r5, r4
c0d00b28:	5221      	strh	r1, [r4, r0]
c0d00b2a:	1cf9      	adds	r1, r7, #3
c0d00b2c:	e000      	b.n	c0d00b30 <btchip_apdu_hash_input_finalize_full_internal+0x39c>
c0d00b2e:	4625      	mov	r5, r4
c0d00b30:	a817      	add	r0, sp, #92	; 0x5c
                os_memmove(transactionSummary->authorizationHash,
                           authorizationHash,
                           sizeof(transactionSummary->authorizationHash));
                goto return_OK;
            } else {
                if (btchip_secure_memcmp(
c0d00b32:	2220      	movs	r2, #32
c0d00b34:	f001 fa2f 	bl	c0d01f96 <btchip_secure_memcmp>
c0d00b38:	2800      	cmp	r0, #0
c0d00b3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
c0d00b3c:	d000      	beq.n	c0d00b40 <btchip_apdu_hash_input_finalize_full_internal+0x3ac>
c0d00b3e:	e6c0      	b.n	c0d008c2 <btchip_apdu_hash_input_finalize_full_internal+0x12e>
c0d00b40:	462f      	mov	r7, r5
                    CLOSE_TRY;
                    goto catch_discardTransaction;
                }
            }

            if (btchip_context_D.usingSegwit &&
c0d00b42:	980a      	ldr	r0, [sp, #40]	; 0x28
c0d00b44:	5c39      	ldrb	r1, [r7, r0]
c0d00b46:	200a      	movs	r0, #10
c0d00b48:	2900      	cmp	r1, #0
c0d00b4a:	d006      	beq.n	c0d00b5a <btchip_apdu_hash_input_finalize_full_internal+0x3c6>
c0d00b4c:	9a08      	ldr	r2, [sp, #32]
c0d00b4e:	5cb9      	ldrb	r1, [r7, r2]
c0d00b50:	2900      	cmp	r1, #0
c0d00b52:	d102      	bne.n	c0d00b5a <btchip_apdu_hash_input_finalize_full_internal+0x3c6>
                !btchip_context_D.segwitParsedOnce) {
                // This input cannot be signed when using segwit - just restart.
                btchip_context_D.segwitParsedOnce = 1;
c0d00b54:	2001      	movs	r0, #1
c0d00b56:	54b8      	strb	r0, [r7, r2]
c0d00b58:	2000      	movs	r0, #0
c0d00b5a:	7538      	strb	r0, [r7, #20]
c0d00b5c:	e6c5      	b.n	c0d008ea <btchip_apdu_hash_input_finalize_full_internal+0x156>
c0d00b5e:	46c0      	nop			; (mov r8, r8)
c0d00b60:	20001e6c 	.word	0x20001e6c
c0d00b64:	000002ca 	.word	0x000002ca
c0d00b68:	20001874 	.word	0x20001874
c0d00b6c:	0000ffff 	.word	0x0000ffff
c0d00b70:	00006985 	.word	0x00006985
c0d00b74:	000002cb 	.word	0x000002cb
c0d00b78:	20001c24 	.word	0x20001c24
c0d00b7c:	000002c7 	.word	0x000002c7
c0d00b80:	0000020e 	.word	0x0000020e
c0d00b84:	000002c9 	.word	0x000002c9
c0d00b88:	c0d08980 	.word	0xc0d08980
c0d00b8c:	20001800 	.word	0x20001800
c0d00b90:	000002b2 	.word	0x000002b2
c0d00b94:	000003a5 	.word	0x000003a5
c0d00b98:	000003ad 	.word	0x000003ad

c0d00b9c <btchip_apdu_hash_input_finalize_full>:
        }
    }
    END_TRY;
}

unsigned short btchip_apdu_hash_input_finalize_full() {
c0d00b9c:	b570      	push	{r4, r5, r6, lr}
    unsigned short sw = btchip_apdu_hash_input_finalize_full_internal(
c0d00b9e:	2043      	movs	r0, #67	; 0x43
c0d00ba0:	00c0      	lsls	r0, r0, #3
c0d00ba2:	4d13      	ldr	r5, [pc, #76]	; (c0d00bf0 <btchip_apdu_hash_input_finalize_full+0x54>)
c0d00ba4:	1828      	adds	r0, r5, r0
c0d00ba6:	f7ff fdf5 	bl	c0d00794 <btchip_apdu_hash_input_finalize_full_internal>
c0d00baa:	4604      	mov	r4, r0
        &btchip_context_D.transactionSummary);
    if (btchip_context_D.io_flags & IO_ASYNCH_REPLY) {
c0d00bac:	2021      	movs	r0, #33	; 0x21
c0d00bae:	0106      	lsls	r6, r0, #4
c0d00bb0:	5da8      	ldrb	r0, [r5, r6]
c0d00bb2:	06c0      	lsls	r0, r0, #27
c0d00bb4:	d51a      	bpl.n	c0d00bec <btchip_apdu_hash_input_finalize_full+0x50>
        // if the UI reject the processing of the request, then reply
        // immediately
        bool status;
        if (btchip_context_D.outputParsingState == BTCHIP_OUTPUT_FINALIZE_TX) {
c0d00bb6:	20e9      	movs	r0, #233	; 0xe9
c0d00bb8:	0080      	lsls	r0, r0, #2
c0d00bba:	5c28      	ldrb	r0, [r5, r0]
c0d00bbc:	28ff      	cmp	r0, #255	; 0xff
c0d00bbe:	d004      	beq.n	c0d00bca <btchip_apdu_hash_input_finalize_full+0x2e>
c0d00bc0:	2803      	cmp	r0, #3
c0d00bc2:	d105      	bne.n	c0d00bd0 <btchip_apdu_hash_input_finalize_full+0x34>
            status = btchip_bagl_finalize_tx();
c0d00bc4:	f003 faf2 	bl	c0d041ac <btchip_bagl_finalize_tx>
c0d00bc8:	e004      	b.n	c0d00bd4 <btchip_apdu_hash_input_finalize_full+0x38>
        } else if (btchip_context_D.outputParsingState ==
                   BTCHIP_OUTPUT_HANDLE_LEGACY) {
            status = btchip_bagl_confirm_full_output();
c0d00bca:	f003 fa17 	bl	c0d03ffc <btchip_bagl_confirm_full_output>
c0d00bce:	e001      	b.n	c0d00bd4 <btchip_apdu_hash_input_finalize_full+0x38>
        } else {
            status = btchip_bagl_confirm_single_output();
c0d00bd0:	f003 fa76 	bl	c0d040c0 <btchip_bagl_confirm_single_output>
        }
        if (!status) {
c0d00bd4:	2800      	cmp	r0, #0
c0d00bd6:	d109      	bne.n	c0d00bec <btchip_apdu_hash_input_finalize_full+0x50>
            btchip_context_D.io_flags &= ~IO_ASYNCH_REPLY;
c0d00bd8:	5da8      	ldrb	r0, [r5, r6]
c0d00bda:	21ef      	movs	r1, #239	; 0xef
c0d00bdc:	4001      	ands	r1, r0
c0d00bde:	55a9      	strb	r1, [r5, r6]
c0d00be0:	2000      	movs	r0, #0
            btchip_context_D.transactionContext.transactionState =
c0d00be2:	7528      	strb	r0, [r5, #20]
                BTCHIP_TRANSACTION_NONE;
            btchip_context_D.outLength = 0;
c0d00be4:	4903      	ldr	r1, [pc, #12]	; (c0d00bf4 <btchip_apdu_hash_input_finalize_full+0x58>)
c0d00be6:	5268      	strh	r0, [r5, r1]
c0d00be8:	20d5      	movs	r0, #213	; 0xd5
c0d00bea:	01c4      	lsls	r4, r0, #7
            sw = BTCHIP_SW_INCORRECT_DATA;
        }
    }
    return sw;
c0d00bec:	4620      	mov	r0, r4
c0d00bee:	bd70      	pop	{r4, r5, r6, pc}
c0d00bf0:	20001874 	.word	0x20001874
c0d00bf4:	0000020e 	.word	0x0000020e

c0d00bf8 <btchip_bagl_user_action>:
}

unsigned char btchip_bagl_user_action(unsigned char confirming) {
c0d00bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d00bfa:	b083      	sub	sp, #12
    G_io_apdu_buffer[btchip_context_D.outLength++] = sw >> 8;
    G_io_apdu_buffer[btchip_context_D.outLength++] = sw;

    if ((btchip_context_D.outputParsingState == BTCHIP_OUTPUT_FINALIZE_TX) ||
        (btchip_context_D.outputParsingState == BTCHIP_OUTPUT_HANDLE_LEGACY) ||
        (sw != BTCHIP_SW_OK)) {
c0d00bfc:	2109      	movs	r1, #9
c0d00bfe:	030f      	lsls	r7, r1, #12
c0d00c00:	4d53      	ldr	r5, [pc, #332]	; (c0d00d50 <btchip_bagl_user_action+0x158>)
}

unsigned char btchip_bagl_user_action(unsigned char confirming) {
    unsigned short sw = BTCHIP_SW_OK;
    // confirm and finish the apdu exchange //spaghetti
    if (confirming) {
c0d00c02:	2800      	cmp	r0, #0
c0d00c04:	d054      	beq.n	c0d00cb0 <btchip_bagl_user_action+0xb8>
c0d00c06:	2073      	movs	r0, #115	; 0x73
c0d00c08:	00c4      	lsls	r4, r0, #3
        // Check if all inputs have been confirmed

        if (btchip_context_D.outputParsingState ==
c0d00c0a:	4e52      	ldr	r6, [pc, #328]	; (c0d00d54 <btchip_bagl_user_action+0x15c>)
c0d00c0c:	5930      	ldr	r0, [r6, r4]
c0d00c0e:	21e9      	movs	r1, #233	; 0xe9
c0d00c10:	008b      	lsls	r3, r1, #2
c0d00c12:	5cf1      	ldrb	r1, [r6, r3]
c0d00c14:	2902      	cmp	r1, #2
c0d00c16:	d101      	bne.n	c0d00c1c <btchip_bagl_user_action+0x24>
            BTCHIP_OUTPUT_PARSING_OUTPUT) {
            btchip_context_D.remainingOutputs--;
c0d00c18:	1e40      	subs	r0, r0, #1
c0d00c1a:	5130      	str	r0, [r6, r4]
        }

        while (btchip_context_D.remainingOutputs != 0) {
c0d00c1c:	2800      	cmp	r0, #0
c0d00c1e:	4639      	mov	r1, r7
c0d00c20:	d032      	beq.n	c0d00c88 <btchip_bagl_user_action+0x90>
c0d00c22:	9302      	str	r3, [sp, #8]
c0d00c24:	9500      	str	r5, [sp, #0]
c0d00c26:	9701      	str	r7, [sp, #4]
c0d00c28:	484b      	ldr	r0, [pc, #300]	; (c0d00d58 <btchip_bagl_user_action+0x160>)
            os_memmove(btchip_context_D.currentOutput,
                       btchip_context_D.currentOutput +
c0d00c2a:	1830      	adds	r0, r6, r0
                           btchip_context_D.discardSize,
c0d00c2c:	211d      	movs	r1, #29
c0d00c2e:	014d      	lsls	r5, r1, #5
c0d00c30:	5972      	ldr	r2, [r6, r5]
            btchip_context_D.remainingOutputs--;
        }

        while (btchip_context_D.remainingOutputs != 0) {
            os_memmove(btchip_context_D.currentOutput,
                       btchip_context_D.currentOutput +
c0d00c32:	1881      	adds	r1, r0, r2
                           btchip_context_D.discardSize,
                       btchip_context_D.currentOutputOffset -
c0d00c34:	23e5      	movs	r3, #229	; 0xe5
c0d00c36:	009f      	lsls	r7, r3, #2
c0d00c38:	5bf3      	ldrh	r3, [r6, r7]
c0d00c3a:	1a9a      	subs	r2, r3, r2
            BTCHIP_OUTPUT_PARSING_OUTPUT) {
            btchip_context_D.remainingOutputs--;
        }

        while (btchip_context_D.remainingOutputs != 0) {
            os_memmove(btchip_context_D.currentOutput,
c0d00c3c:	f003 fcb9 	bl	c0d045b2 <os_memmove>
                       btchip_context_D.currentOutput +
                           btchip_context_D.discardSize,
                       btchip_context_D.currentOutputOffset -
                           btchip_context_D.discardSize);
            btchip_context_D.currentOutputOffset -=
                btchip_context_D.discardSize;
c0d00c40:	5970      	ldr	r0, [r6, r5]
            os_memmove(btchip_context_D.currentOutput,
                       btchip_context_D.currentOutput +
                           btchip_context_D.discardSize,
                       btchip_context_D.currentOutputOffset -
                           btchip_context_D.discardSize);
            btchip_context_D.currentOutputOffset -=
c0d00c42:	5bf1      	ldrh	r1, [r6, r7]
c0d00c44:	1a08      	subs	r0, r1, r0
c0d00c46:	53f0      	strh	r0, [r6, r7]
                btchip_context_D.discardSize;
            btchip_context_D.io_flags &= ~IO_ASYNCH_REPLY;
c0d00c48:	2021      	movs	r0, #33	; 0x21
c0d00c4a:	0105      	lsls	r5, r0, #4
c0d00c4c:	5d70      	ldrb	r0, [r6, r5]
c0d00c4e:	21ef      	movs	r1, #239	; 0xef
c0d00c50:	4001      	ands	r1, r0
c0d00c52:	5571      	strb	r1, [r6, r5]
            while (handle_output_state() &&
c0d00c54:	f000 f88c 	bl	c0d00d70 <handle_output_state>
c0d00c58:	5d71      	ldrb	r1, [r6, r5]
                   (!(btchip_context_D.io_flags & IO_ASYNCH_REPLY)))
c0d00c5a:	2210      	movs	r2, #16
c0d00c5c:	400a      	ands	r2, r1
                       btchip_context_D.currentOutputOffset -
                           btchip_context_D.discardSize);
            btchip_context_D.currentOutputOffset -=
                btchip_context_D.discardSize;
            btchip_context_D.io_flags &= ~IO_ASYNCH_REPLY;
            while (handle_output_state() &&
c0d00c5e:	2801      	cmp	r0, #1
c0d00c60:	d101      	bne.n	c0d00c66 <btchip_bagl_user_action+0x6e>
c0d00c62:	2a00      	cmp	r2, #0
c0d00c64:	d0f6      	beq.n	c0d00c54 <btchip_bagl_user_action+0x5c>
                   (!(btchip_context_D.io_flags & IO_ASYNCH_REPLY)))
                ;
            if (btchip_context_D.io_flags & IO_ASYNCH_REPLY) {
c0d00c66:	06c8      	lsls	r0, r1, #27
c0d00c68:	9f01      	ldr	r7, [sp, #4]
c0d00c6a:	4639      	mov	r1, r7
c0d00c6c:	9d00      	ldr	r5, [sp, #0]
c0d00c6e:	9b02      	ldr	r3, [sp, #8]
c0d00c70:	d50a      	bpl.n	c0d00c88 <btchip_bagl_user_action+0x90>
                if (!btchip_bagl_confirm_single_output()) {
c0d00c72:	f003 fa25 	bl	c0d040c0 <btchip_bagl_confirm_single_output>
c0d00c76:	4601      	mov	r1, r0
c0d00c78:	2001      	movs	r0, #1
c0d00c7a:	2900      	cmp	r1, #0
c0d00c7c:	d165      	bne.n	c0d00d4a <btchip_bagl_user_action+0x152>
                    btchip_context_D.transactionContext.transactionState =
c0d00c7e:	2000      	movs	r0, #0
c0d00c80:	7530      	strb	r0, [r6, #20]
c0d00c82:	4629      	mov	r1, r5
c0d00c84:	31fb      	adds	r1, #251	; 0xfb
c0d00c86:	9b02      	ldr	r3, [sp, #8]
                // Out of data to process, wait for the next call
                break;
            }
        }

        if ((btchip_context_D.outputParsingState ==
c0d00c88:	5cf0      	ldrb	r0, [r6, r3]
             BTCHIP_OUTPUT_PARSING_OUTPUT) &&
c0d00c8a:	2802      	cmp	r0, #2
c0d00c8c:	d117      	bne.n	c0d00cbe <btchip_bagl_user_action+0xc6>
            (btchip_context_D.remainingOutputs == 0)) {
c0d00c8e:	5932      	ldr	r2, [r6, r4]
c0d00c90:	2a00      	cmp	r2, #0
c0d00c92:	d114      	bne.n	c0d00cbe <btchip_bagl_user_action+0xc6>
            btchip_context_D.outputParsingState = BTCHIP_OUTPUT_FINALIZE_TX;
c0d00c94:	2003      	movs	r0, #3
c0d00c96:	461c      	mov	r4, r3
c0d00c98:	54f0      	strb	r0, [r6, r3]
            if (!btchip_bagl_finalize_tx()) {
c0d00c9a:	f003 fa87 	bl	c0d041ac <btchip_bagl_finalize_tx>
c0d00c9e:	4601      	mov	r1, r0
c0d00ca0:	2001      	movs	r0, #1
c0d00ca2:	2900      	cmp	r1, #0
c0d00ca4:	d151      	bne.n	c0d00d4a <btchip_bagl_user_action+0x152>
c0d00ca6:	2200      	movs	r2, #0
                btchip_context_D.outputParsingState =
c0d00ca8:	5532      	strb	r2, [r6, r4]
c0d00caa:	35fb      	adds	r5, #251	; 0xfb
c0d00cac:	4610      	mov	r0, r2
c0d00cae:	e01e      	b.n	c0d00cee <btchip_bagl_user_action+0xf6>
        }
        btchip_context_D.outLength -=
            2; // status was already set by the last call
    } else {
        // Discard transaction
        btchip_context_D.transactionContext.transactionState =
c0d00cb0:	4828      	ldr	r0, [pc, #160]	; (c0d00d54 <btchip_bagl_user_action+0x15c>)
c0d00cb2:	2100      	movs	r1, #0
c0d00cb4:	7501      	strb	r1, [r0, #20]
c0d00cb6:	22e9      	movs	r2, #233	; 0xe9
c0d00cb8:	0092      	lsls	r2, r2, #2
c0d00cba:	5c80      	ldrb	r0, [r0, r2]
c0d00cbc:	e01c      	b.n	c0d00cf8 <btchip_bagl_user_action+0x100>
                return 1;
            }
        }

        if ((btchip_context_D.outputParsingState ==
             BTCHIP_OUTPUT_FINALIZE_TX) ||
c0d00cbe:	28ff      	cmp	r0, #255	; 0xff
c0d00cc0:	d001      	beq.n	c0d00cc6 <btchip_bagl_user_action+0xce>
c0d00cc2:	2803      	cmp	r0, #3
c0d00cc4:	d10f      	bne.n	c0d00ce6 <btchip_bagl_user_action+0xee>
c0d00cc6:	2200      	movs	r2, #0
            (btchip_context_D.outputParsingState ==
             BTCHIP_OUTPUT_HANDLE_LEGACY)) {
            btchip_context_D.transactionContext.firstSigned = 0;
c0d00cc8:	7772      	strb	r2, [r6, #29]

            if (btchip_context_D.usingSegwit &&
                !btchip_context_D.segwitParsedOnce) {
c0d00cca:	23ff      	movs	r3, #255	; 0xff
c0d00ccc:	005b      	lsls	r3, r3, #1
             BTCHIP_OUTPUT_FINALIZE_TX) ||
            (btchip_context_D.outputParsingState ==
             BTCHIP_OUTPUT_HANDLE_LEGACY)) {
            btchip_context_D.transactionContext.firstSigned = 0;

            if (btchip_context_D.usingSegwit &&
c0d00cce:	247f      	movs	r4, #127	; 0x7f
c0d00cd0:	00a4      	lsls	r4, r4, #2
c0d00cd2:	5d35      	ldrb	r5, [r6, r4]
c0d00cd4:	240a      	movs	r4, #10
c0d00cd6:	2d00      	cmp	r5, #0
c0d00cd8:	d007      	beq.n	c0d00cea <btchip_bagl_user_action+0xf2>
c0d00cda:	5cf5      	ldrb	r5, [r6, r3]
c0d00cdc:	2d00      	cmp	r5, #0
c0d00cde:	d104      	bne.n	c0d00cea <btchip_bagl_user_action+0xf2>
                !btchip_context_D.segwitParsedOnce) {
                // This input cannot be signed when using segwit - just restart.
                btchip_context_D.segwitParsedOnce = 1;
c0d00ce0:	2401      	movs	r4, #1
c0d00ce2:	54f4      	strb	r4, [r6, r3]
c0d00ce4:	e002      	b.n	c0d00cec <btchip_bagl_user_action+0xf4>
c0d00ce6:	460d      	mov	r5, r1
c0d00ce8:	e002      	b.n	c0d00cf0 <btchip_bagl_user_action+0xf8>
c0d00cea:	4622      	mov	r2, r4
c0d00cec:	460d      	mov	r5, r1
c0d00cee:	7532      	strb	r2, [r6, #20]
            } else {
                btchip_context_D.transactionContext.transactionState =
                    BTCHIP_TRANSACTION_SIGN_READY;
            }
        }
        btchip_context_D.outLength -=
c0d00cf0:	491a      	ldr	r1, [pc, #104]	; (c0d00d5c <btchip_bagl_user_action+0x164>)
c0d00cf2:	5a71      	ldrh	r1, [r6, r1]
c0d00cf4:	4a1a      	ldr	r2, [pc, #104]	; (c0d00d60 <btchip_bagl_user_action+0x168>)
c0d00cf6:	1889      	adds	r1, r1, r2
        btchip_context_D.transactionContext.transactionState =
            BTCHIP_TRANSACTION_NONE;
        sw = BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
        btchip_context_D.outLength = 0;
    }
    G_io_apdu_buffer[btchip_context_D.outLength++] = sw >> 8;
c0d00cf8:	b28a      	uxth	r2, r1
c0d00cfa:	0a2b      	lsrs	r3, r5, #8
c0d00cfc:	4c19      	ldr	r4, [pc, #100]	; (c0d00d64 <btchip_bagl_user_action+0x16c>)
c0d00cfe:	54a3      	strb	r3, [r4, r2]
    G_io_apdu_buffer[btchip_context_D.outLength++] = sw;
c0d00d00:	1c8a      	adds	r2, r1, #2
c0d00d02:	4b16      	ldr	r3, [pc, #88]	; (c0d00d5c <btchip_bagl_user_action+0x164>)
c0d00d04:	4e13      	ldr	r6, [pc, #76]	; (c0d00d54 <btchip_bagl_user_action+0x15c>)
c0d00d06:	52f2      	strh	r2, [r6, r3]
        btchip_context_D.transactionContext.transactionState =
            BTCHIP_TRANSACTION_NONE;
        sw = BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
        btchip_context_D.outLength = 0;
    }
    G_io_apdu_buffer[btchip_context_D.outLength++] = sw >> 8;
c0d00d08:	1c49      	adds	r1, r1, #1
    G_io_apdu_buffer[btchip_context_D.outLength++] = sw;
c0d00d0a:	b289      	uxth	r1, r1
c0d00d0c:	5465      	strb	r5, [r4, r1]

    if ((btchip_context_D.outputParsingState == BTCHIP_OUTPUT_FINALIZE_TX) ||
c0d00d0e:	2803      	cmp	r0, #3
c0d00d10:	d004      	beq.n	c0d00d1c <btchip_bagl_user_action+0x124>
c0d00d12:	28ff      	cmp	r0, #255	; 0xff
c0d00d14:	d002      	beq.n	c0d00d1c <btchip_bagl_user_action+0x124>
        (btchip_context_D.outputParsingState == BTCHIP_OUTPUT_HANDLE_LEGACY) ||
        (sw != BTCHIP_SW_OK)) {
c0d00d16:	b2a8      	uxth	r0, r5
        btchip_context_D.outLength = 0;
    }
    G_io_apdu_buffer[btchip_context_D.outLength++] = sw >> 8;
    G_io_apdu_buffer[btchip_context_D.outLength++] = sw;

    if ((btchip_context_D.outputParsingState == BTCHIP_OUTPUT_FINALIZE_TX) ||
c0d00d18:	42b8      	cmp	r0, r7
c0d00d1a:	d011      	beq.n	c0d00d40 <btchip_bagl_user_action+0x148>
#define FLAG_CHANGE_VALIDATED 0x80

extern uint8_t prepare_full_output(uint8_t checkOnly);

static void btchip_apdu_hash_input_finalize_full_reset(void) {
    btchip_context_D.currentOutputOffset = 0;
c0d00d1c:	20e5      	movs	r0, #229	; 0xe5
c0d00d1e:	0080      	lsls	r0, r0, #2
c0d00d20:	2400      	movs	r4, #0
c0d00d22:	5234      	strh	r4, [r6, r0]
    btchip_context_D.outputParsingState = BTCHIP_OUTPUT_PARSING_NUMBER_OUTPUTS;
c0d00d24:	20e9      	movs	r0, #233	; 0xe9
c0d00d26:	0080      	lsls	r0, r0, #2
c0d00d28:	2101      	movs	r1, #1
c0d00d2a:	5431      	strb	r1, [r6, r0]
    os_memset(btchip_context_D.totalOutputAmount, 0,
c0d00d2c:	480e      	ldr	r0, [pc, #56]	; (c0d00d68 <btchip_bagl_user_action+0x170>)
c0d00d2e:	1830      	adds	r0, r6, r0
c0d00d30:	2208      	movs	r2, #8
c0d00d32:	4621      	mov	r1, r4
c0d00d34:	f003 fc34 	bl	c0d045a0 <os_memset>
              sizeof(btchip_context_D.totalOutputAmount));
    btchip_context_D.changeOutputFound = 0;
c0d00d38:	480c      	ldr	r0, [pc, #48]	; (c0d00d6c <btchip_bagl_user_action+0x174>)
c0d00d3a:	5434      	strb	r4, [r6, r0]
c0d00d3c:	4807      	ldr	r0, [pc, #28]	; (c0d00d5c <btchip_bagl_user_action+0x164>)
c0d00d3e:	5a32      	ldrh	r2, [r6, r0]
        (sw != BTCHIP_SW_OK)) {
        // we've finished the processing of the input
        btchip_apdu_hash_input_finalize_full_reset();
    }

    io_exchange(CHANNEL_APDU | IO_RETURN_AFTER_TX, btchip_context_D.outLength);
c0d00d40:	b291      	uxth	r1, r2
c0d00d42:	2020      	movs	r0, #32
c0d00d44:	f004 f83a 	bl	c0d04dbc <io_exchange>
c0d00d48:	2000      	movs	r0, #0

    return 0;
}
c0d00d4a:	b003      	add	sp, #12
c0d00d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d00d4e:	46c0      	nop			; (mov r8, r8)
c0d00d50:	00006985 	.word	0x00006985
c0d00d54:	20001874 	.word	0x20001874
c0d00d58:	000002cb 	.word	0x000002cb
c0d00d5c:	0000020e 	.word	0x0000020e
c0d00d60:	0000fffe 	.word	0x0000fffe
c0d00d64:	20001e6c 	.word	0x20001e6c
c0d00d68:	000003a5 	.word	0x000003a5
c0d00d6c:	000003ad 	.word	0x000003ad

c0d00d70 <handle_output_state>:
        }
    }
    return displayable;
}

static bool handle_output_state() {
c0d00d70:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d00d72:	b08f      	sub	sp, #60	; 0x3c
    uint32_t discardSize = 0;
    btchip_context_D.discardSize = 0;
c0d00d74:	201d      	movs	r0, #29
c0d00d76:	0146      	lsls	r6, r0, #5
c0d00d78:	4fa2      	ldr	r7, [pc, #648]	; (c0d01004 <handle_output_state+0x294>)
c0d00d7a:	2400      	movs	r4, #0
c0d00d7c:	51bc      	str	r4, [r7, r6]
    bool processed = false;
    switch (btchip_context_D.outputParsingState) {
c0d00d7e:	20e9      	movs	r0, #233	; 0xe9
c0d00d80:	0085      	lsls	r5, r0, #2
c0d00d82:	5d78      	ldrb	r0, [r7, r5]
c0d00d84:	2301      	movs	r3, #1
            break;
        }
        if (btchip_context_D.currentOutput[8] < 0xFD) {
            scriptSize = btchip_context_D.currentOutput[8];
            discardSize = 1;
        } else if (btchip_context_D.currentOutput[8] == 0xFD) {
c0d00d86:	22fd      	movs	r2, #253	; 0xfd

static bool handle_output_state() {
    uint32_t discardSize = 0;
    btchip_context_D.discardSize = 0;
    bool processed = false;
    switch (btchip_context_D.outputParsingState) {
c0d00d88:	2802      	cmp	r0, #2
c0d00d8a:	d024      	beq.n	c0d00dd6 <handle_output_state+0x66>
c0d00d8c:	2801      	cmp	r0, #1
c0d00d8e:	d000      	beq.n	c0d00d92 <handle_output_state+0x22>
c0d00d90:	e131      	b.n	c0d00ff6 <handle_output_state+0x286>
    case BTCHIP_OUTPUT_PARSING_NUMBER_OUTPUTS: {
        btchip_context_D.totalOutputs = 0;
c0d00d92:	20e7      	movs	r0, #231	; 0xe7
c0d00d94:	0086      	lsls	r6, r0, #2
c0d00d96:	51bc      	str	r4, [r7, r6]
        if (btchip_context_D.currentOutputOffset < 1) {
c0d00d98:	20e5      	movs	r0, #229	; 0xe5
c0d00d9a:	0080      	lsls	r0, r0, #2
c0d00d9c:	5a39      	ldrh	r1, [r7, r0]
c0d00d9e:	2900      	cmp	r1, #0
c0d00da0:	d100      	bne.n	c0d00da4 <handle_output_state+0x34>
c0d00da2:	e109      	b.n	c0d00fb8 <handle_output_state+0x248>
            break;
        }
        if (btchip_context_D.currentOutput[0] < 0xFD) {
c0d00da4:	4899      	ldr	r0, [pc, #612]	; (c0d0100c <handle_output_state+0x29c>)
c0d00da6:	5c38      	ldrb	r0, [r7, r0]
c0d00da8:	2701      	movs	r7, #1
c0d00daa:	9705      	str	r7, [sp, #20]
c0d00dac:	4290      	cmp	r0, r2
c0d00dae:	9306      	str	r3, [sp, #24]
c0d00db0:	d349      	bcc.n	c0d00e46 <handle_output_state+0xd6>
            discardSize = 1;
            btchip_context_D.outputParsingState = BTCHIP_OUTPUT_PARSING_OUTPUT;
            processed = true;
            break;
        }
        if (btchip_context_D.currentOutput[0] == 0xFD) {
c0d00db2:	28fe      	cmp	r0, #254	; 0xfe
c0d00db4:	d03a      	beq.n	c0d00e2c <handle_output_state+0xbc>
c0d00db6:	28fd      	cmp	r0, #253	; 0xfd
c0d00db8:	4a92      	ldr	r2, [pc, #584]	; (c0d01004 <handle_output_state+0x294>)
c0d00dba:	d000      	beq.n	c0d00dbe <handle_output_state+0x4e>
c0d00dbc:	e11b      	b.n	c0d00ff6 <handle_output_state+0x286>
            if (btchip_context_D.currentOutputOffset < 3) {
c0d00dbe:	2903      	cmp	r1, #3
c0d00dc0:	d200      	bcs.n	c0d00dc4 <handle_output_state+0x54>
c0d00dc2:	e0f9      	b.n	c0d00fb8 <handle_output_state+0x248>
                break;
            }
            btchip_context_D.totalOutputs = btchip_context_D.remainingOutputs =
                (btchip_context_D.currentOutput[2] << 8) |
                btchip_context_D.currentOutput[1];
c0d00dc4:	20b3      	movs	r0, #179	; 0xb3
c0d00dc6:	0080      	lsls	r0, r0, #2
c0d00dc8:	5c11      	ldrb	r1, [r2, r0]
        if (btchip_context_D.currentOutput[0] == 0xFD) {
            if (btchip_context_D.currentOutputOffset < 3) {
                break;
            }
            btchip_context_D.totalOutputs = btchip_context_D.remainingOutputs =
                (btchip_context_D.currentOutput[2] << 8) |
c0d00dca:	48b2      	ldr	r0, [pc, #712]	; (c0d01094 <handle_output_state+0x324>)
c0d00dcc:	5c10      	ldrb	r0, [r2, r0]
c0d00dce:	0200      	lsls	r0, r0, #8
c0d00dd0:	4308      	orrs	r0, r1
c0d00dd2:	2103      	movs	r1, #3
c0d00dd4:	e036      	b.n	c0d00e44 <handle_output_state+0xd4>
        }
    } break;

    case BTCHIP_OUTPUT_PARSING_OUTPUT: {
        unsigned int scriptSize;
        if (btchip_context_D.currentOutputOffset < 9) {
c0d00dd6:	20e5      	movs	r0, #229	; 0xe5
c0d00dd8:	0085      	lsls	r5, r0, #2
c0d00dda:	5b79      	ldrh	r1, [r7, r5]
c0d00ddc:	2909      	cmp	r1, #9
c0d00dde:	d200      	bcs.n	c0d00de2 <handle_output_state+0x72>
c0d00de0:	e0ea      	b.n	c0d00fb8 <handle_output_state+0x248>
            break;
        }
        if (btchip_context_D.currentOutput[8] < 0xFD) {
c0d00de2:	4889      	ldr	r0, [pc, #548]	; (c0d01008 <handle_output_state+0x298>)
c0d00de4:	5c38      	ldrb	r0, [r7, r0]
c0d00de6:	4290      	cmp	r0, r2
c0d00de8:	d202      	bcs.n	c0d00df0 <handle_output_state+0x80>
c0d00dea:	9306      	str	r3, [sp, #24]
c0d00dec:	2209      	movs	r2, #9
c0d00dee:	e00e      	b.n	c0d00e0e <handle_output_state+0x9e>
c0d00df0:	d000      	beq.n	c0d00df4 <handle_output_state+0x84>
c0d00df2:	e100      	b.n	c0d00ff6 <handle_output_state+0x286>
            scriptSize = btchip_context_D.currentOutput[8];
            discardSize = 1;
        } else if (btchip_context_D.currentOutput[8] == 0xFD) {
            if (btchip_context_D.currentOutputOffset < 9 + 2) {
c0d00df4:	290b      	cmp	r1, #11
c0d00df6:	d200      	bcs.n	c0d00dfa <handle_output_state+0x8a>
c0d00df8:	e0de      	b.n	c0d00fb8 <handle_output_state+0x248>
c0d00dfa:	9306      	str	r3, [sp, #24]
                break;
            }
            scriptSize =
                btchip_read_u32(btchip_context_D.currentOutput + 9, 0, 0);
c0d00dfc:	20b5      	movs	r0, #181	; 0xb5
c0d00dfe:	0080      	lsls	r0, r0, #2
c0d00e00:	1838      	adds	r0, r7, r0
c0d00e02:	2100      	movs	r1, #0
c0d00e04:	460a      	mov	r2, r1
c0d00e06:	f001 f8d5 	bl	c0d01fb4 <btchip_read_u32>
c0d00e0a:	5b79      	ldrh	r1, [r7, r5]
c0d00e0c:	220b      	movs	r2, #11
        } else {
            // Unrealistically large script
            THROW(EXCEPTION);
        }
        if (btchip_context_D.currentOutputOffset <
            8 + discardSize + scriptSize) {
c0d00e0e:	1815      	adds	r5, r2, r0
            discardSize = 3;
        } else {
            // Unrealistically large script
            THROW(EXCEPTION);
        }
        if (btchip_context_D.currentOutputOffset <
c0d00e10:	42a9      	cmp	r1, r5
c0d00e12:	d200      	bcs.n	c0d00e16 <handle_output_state+0xa6>
c0d00e14:	e0d0      	b.n	c0d00fb8 <handle_output_state+0x248>
c0d00e16:	2000      	movs	r0, #0
    unsigned char amount[8], isOpReturn, isP2sh, isNativeSegwit, j,
        nullAmount = 1;
    unsigned char isOpCreate, isOpCall;

    for (j = 0; j < 8; j++) {
        if (btchip_context_D.currentOutput[j] != 0) {
c0d00e18:	1839      	adds	r1, r7, r0
c0d00e1a:	4a7c      	ldr	r2, [pc, #496]	; (c0d0100c <handle_output_state+0x29c>)
c0d00e1c:	5c89      	ldrb	r1, [r1, r2]
    bool displayable = true;
    unsigned char amount[8], isOpReturn, isP2sh, isNativeSegwit, j,
        nullAmount = 1;
    unsigned char isOpCreate, isOpCall;

    for (j = 0; j < 8; j++) {
c0d00e1e:	1c40      	adds	r0, r0, #1
        if (btchip_context_D.currentOutput[j] != 0) {
c0d00e20:	2900      	cmp	r1, #0
c0d00e22:	d126      	bne.n	c0d00e72 <handle_output_state+0x102>
c0d00e24:	2400      	movs	r4, #0
    bool displayable = true;
    unsigned char amount[8], isOpReturn, isP2sh, isNativeSegwit, j,
        nullAmount = 1;
    unsigned char isOpCreate, isOpCall;

    for (j = 0; j < 8; j++) {
c0d00e26:	2807      	cmp	r0, #7
c0d00e28:	d9f6      	bls.n	c0d00e18 <handle_output_state+0xa8>
c0d00e2a:	e030      	b.n	c0d00e8e <handle_output_state+0x11e>
            discardSize = 3;
            btchip_context_D.outputParsingState = BTCHIP_OUTPUT_PARSING_OUTPUT;
            processed = true;
            break;
        } else if (btchip_context_D.currentOutput[0] == 0xFE) {
            if (btchip_context_D.currentOutputOffset < 5) {
c0d00e2c:	2905      	cmp	r1, #5
c0d00e2e:	4975      	ldr	r1, [pc, #468]	; (c0d01004 <handle_output_state+0x294>)
c0d00e30:	d200      	bcs.n	c0d00e34 <handle_output_state+0xc4>
c0d00e32:	e0c1      	b.n	c0d00fb8 <handle_output_state+0x248>
                break;
            }
            btchip_context_D.totalOutputs = btchip_context_D.remainingOutputs =
                btchip_read_u32(btchip_context_D.currentOutput + 1, 0, 0);
c0d00e34:	20b3      	movs	r0, #179	; 0xb3
c0d00e36:	0080      	lsls	r0, r0, #2
c0d00e38:	1808      	adds	r0, r1, r0
c0d00e3a:	2100      	movs	r1, #0
c0d00e3c:	460a      	mov	r2, r1
c0d00e3e:	f001 f8b9 	bl	c0d01fb4 <btchip_read_u32>
c0d00e42:	2105      	movs	r1, #5
c0d00e44:	9105      	str	r1, [sp, #20]
c0d00e46:	2173      	movs	r1, #115	; 0x73
c0d00e48:	00c9      	lsls	r1, r1, #3
c0d00e4a:	4f6e      	ldr	r7, [pc, #440]	; (c0d01004 <handle_output_state+0x294>)
c0d00e4c:	5078      	str	r0, [r7, r1]
c0d00e4e:	51b8      	str	r0, [r7, r6]
c0d00e50:	2002      	movs	r0, #2
c0d00e52:	5578      	strb	r0, [r7, r5]
c0d00e54:	9e05      	ldr	r6, [sp, #20]
c0d00e56:	486d      	ldr	r0, [pc, #436]	; (c0d0100c <handle_output_state+0x29c>)
        THROW(EXCEPTION);
    }

    if (discardSize != 0) {
        os_memmove(btchip_context_D.currentOutput,
                   btchip_context_D.currentOutput + discardSize,
c0d00e58:	1838      	adds	r0, r7, r0
c0d00e5a:	1981      	adds	r1, r0, r6
                   btchip_context_D.currentOutputOffset - discardSize);
c0d00e5c:	22e5      	movs	r2, #229	; 0xe5
c0d00e5e:	0094      	lsls	r4, r2, #2
c0d00e60:	5b3a      	ldrh	r2, [r7, r4]
c0d00e62:	1b92      	subs	r2, r2, r6
    default:
        THROW(EXCEPTION);
    }

    if (discardSize != 0) {
        os_memmove(btchip_context_D.currentOutput,
c0d00e64:	f003 fba5 	bl	c0d045b2 <os_memmove>
                   btchip_context_D.currentOutput + discardSize,
                   btchip_context_D.currentOutputOffset - discardSize);
        btchip_context_D.currentOutputOffset -= discardSize;
c0d00e68:	5b38      	ldrh	r0, [r7, r4]
c0d00e6a:	1b80      	subs	r0, r0, r6
c0d00e6c:	5338      	strh	r0, [r7, r4]
c0d00e6e:	9c06      	ldr	r4, [sp, #24]
c0d00e70:	e0a2      	b.n	c0d00fb8 <handle_output_state+0x248>
            nullAmount = 0;
            break;
        }
    }
    if (!nullAmount) {
        btchip_swap_bytes(amount, btchip_context_D.currentOutput, 8);
c0d00e72:	4866      	ldr	r0, [pc, #408]	; (c0d0100c <handle_output_state+0x29c>)
c0d00e74:	1839      	adds	r1, r7, r0
c0d00e76:	ac0d      	add	r4, sp, #52	; 0x34
c0d00e78:	2208      	movs	r2, #8
c0d00e7a:	4620      	mov	r0, r4
c0d00e7c:	f001 f975 	bl	c0d0216a <btchip_swap_bytes>
        transaction_amount_add_be(btchip_context_D.totalOutputAmount,
c0d00e80:	4863      	ldr	r0, [pc, #396]	; (c0d01010 <handle_output_state+0x2a0>)
c0d00e82:	1838      	adds	r0, r7, r0
c0d00e84:	4601      	mov	r1, r0
c0d00e86:	4622      	mov	r2, r4
c0d00e88:	f001 f9f0 	bl	c0d0226c <transaction_amount_add_be>
c0d00e8c:	9c06      	ldr	r4, [sp, #24]
c0d00e8e:	9505      	str	r5, [sp, #20]
                                  btchip_context_D.totalOutputAmount, amount);
    }
    isOpReturn =
        btchip_output_script_is_op_return(btchip_context_D.currentOutput + 8);
c0d00e90:	485d      	ldr	r0, [pc, #372]	; (c0d01008 <handle_output_state+0x298>)
c0d00e92:	183d      	adds	r5, r7, r0
c0d00e94:	4628      	mov	r0, r5
c0d00e96:	f001 f839 	bl	c0d01f0c <btchip_output_script_is_op_return>
c0d00e9a:	9003      	str	r0, [sp, #12]
    isP2sh = btchip_output_script_is_p2sh(btchip_context_D.currentOutput + 8);
c0d00e9c:	4628      	mov	r0, r5
c0d00e9e:	f000 ffdb 	bl	c0d01e58 <btchip_output_script_is_p2sh>
c0d00ea2:	9004      	str	r0, [sp, #16]
    isNativeSegwit = btchip_output_script_is_native_witness(
c0d00ea4:	4628      	mov	r0, r5
c0d00ea6:	f001 f80f 	bl	c0d01ec8 <btchip_output_script_is_native_witness>
c0d00eaa:	9002      	str	r0, [sp, #8]
        btchip_context_D.currentOutput + 8);
    isOpCreate =
        btchip_output_script_is_op_create(btchip_context_D.currentOutput + 8);
c0d00eac:	4628      	mov	r0, r5
c0d00eae:	f001 f834 	bl	c0d01f1a <btchip_output_script_is_op_create>
c0d00eb2:	9001      	str	r0, [sp, #4]
    isOpCall =
        btchip_output_script_is_op_call(btchip_context_D.currentOutput + 8);
c0d00eb4:	4628      	mov	r0, r5
c0d00eb6:	f001 f84f 	bl	c0d01f58 <btchip_output_script_is_op_call>
c0d00eba:	4601      	mov	r1, r0
    if (((G_coin_config->kind == COIN_KIND_QTUM) &&
c0d00ebc:	4855      	ldr	r0, [pc, #340]	; (c0d01014 <handle_output_state+0x2a4>)
c0d00ebe:	6800      	ldr	r0, [r0, #0]
c0d00ec0:	2528      	movs	r5, #40	; 0x28
c0d00ec2:	5d40      	ldrb	r0, [r0, r5]
c0d00ec4:	2812      	cmp	r0, #18
c0d00ec6:	d116      	bne.n	c0d00ef6 <handle_output_state+0x186>
         !btchip_output_script_is_regular(btchip_context_D.currentOutput + 8) &&
c0d00ec8:	484f      	ldr	r0, [pc, #316]	; (c0d01008 <handle_output_state+0x298>)
c0d00eca:	1838      	adds	r0, r7, r0
c0d00ecc:	9100      	str	r1, [sp, #0]
c0d00ece:	f000 ff75 	bl	c0d01dbc <btchip_output_script_is_regular>
c0d00ed2:	9a00      	ldr	r2, [sp, #0]
c0d00ed4:	9904      	ldr	r1, [sp, #16]
c0d00ed6:	4308      	orrs	r0, r1
c0d00ed8:	2800      	cmp	r0, #0
c0d00eda:	d10c      	bne.n	c0d00ef6 <handle_output_state+0x186>
         !isP2sh && !(nullAmount && isOpReturn) && !isOpCreate && !isOpCall) ||
c0d00edc:	2c00      	cmp	r4, #0
c0d00ede:	d004      	beq.n	c0d00eea <handle_output_state+0x17a>
c0d00ee0:	9801      	ldr	r0, [sp, #4]
c0d00ee2:	4302      	orrs	r2, r0
c0d00ee4:	2a00      	cmp	r2, #0
c0d00ee6:	d106      	bne.n	c0d00ef6 <handle_output_state+0x186>
c0d00ee8:	e082      	b.n	c0d00ff0 <handle_output_state+0x280>
c0d00eea:	9803      	ldr	r0, [sp, #12]
c0d00eec:	9901      	ldr	r1, [sp, #4]
c0d00eee:	4301      	orrs	r1, r0
c0d00ef0:	4311      	orrs	r1, r2
c0d00ef2:	2900      	cmp	r1, #0
c0d00ef4:	d07c      	beq.n	c0d00ff0 <handle_output_state+0x280>
        (!(G_coin_config->kind == COIN_KIND_QTUM) &&
c0d00ef6:	4847      	ldr	r0, [pc, #284]	; (c0d01014 <handle_output_state+0x2a4>)
c0d00ef8:	6800      	ldr	r0, [r0, #0]
c0d00efa:	5d40      	ldrb	r0, [r0, r5]
c0d00efc:	2812      	cmp	r0, #18
c0d00efe:	d010      	beq.n	c0d00f22 <handle_output_state+0x1b2>
c0d00f00:	2001      	movs	r0, #1
c0d00f02:	2100      	movs	r1, #0
         !btchip_output_script_is_regular(btchip_context_D.currentOutput + 8) &&
         !isP2sh && !(nullAmount && isOpReturn))) {
c0d00f04:	9a03      	ldr	r2, [sp, #12]
c0d00f06:	2a00      	cmp	r2, #0
c0d00f08:	d000      	beq.n	c0d00f0c <handle_output_state+0x19c>
c0d00f0a:	4608      	mov	r0, r1
c0d00f0c:	4304      	orrs	r4, r0
        btchip_output_script_is_op_call(btchip_context_D.currentOutput + 8);
    if (((G_coin_config->kind == COIN_KIND_QTUM) &&
         !btchip_output_script_is_regular(btchip_context_D.currentOutput + 8) &&
         !isP2sh && !(nullAmount && isOpReturn) && !isOpCreate && !isOpCall) ||
        (!(G_coin_config->kind == COIN_KIND_QTUM) &&
         !btchip_output_script_is_regular(btchip_context_D.currentOutput + 8) &&
c0d00f0e:	483e      	ldr	r0, [pc, #248]	; (c0d01008 <handle_output_state+0x298>)
c0d00f10:	1838      	adds	r0, r7, r0
c0d00f12:	f000 ff53 	bl	c0d01dbc <btchip_output_script_is_regular>
c0d00f16:	9904      	ldr	r1, [sp, #16]
c0d00f18:	4308      	orrs	r0, r1
c0d00f1a:	2c00      	cmp	r4, #0
c0d00f1c:	d001      	beq.n	c0d00f22 <handle_output_state+0x1b2>
c0d00f1e:	2800      	cmp	r0, #0
c0d00f20:	d066      	beq.n	c0d00ff0 <handle_output_state+0x280>
         !isP2sh && !(nullAmount && isOpReturn))) {
        PRINTF("Error : Unrecognized input script");
        THROW(EXCEPTION);
    }
    if (btchip_context_D.tmpCtx.output.changeInitialized && !isOpReturn) {
c0d00f22:	483d      	ldr	r0, [pc, #244]	; (c0d01018 <handle_output_state+0x2a8>)
c0d00f24:	9903      	ldr	r1, [sp, #12]
c0d00f26:	2900      	cmp	r1, #0
c0d00f28:	9c06      	ldr	r4, [sp, #24]
c0d00f2a:	d13d      	bne.n	c0d00fa8 <handle_output_state+0x238>
c0d00f2c:	5c38      	ldrb	r0, [r7, r0]
c0d00f2e:	2800      	cmp	r0, #0
c0d00f30:	d03a      	beq.n	c0d00fa8 <handle_output_state+0x238>
        bool changeFound = false;
        unsigned char addressOffset =
            (isNativeSegwit ? OUTPUT_SCRIPT_NATIVE_WITNESS_PROGRAM_OFFSET
c0d00f32:	2003      	movs	r0, #3
c0d00f34:	2104      	movs	r1, #4
c0d00f36:	9a04      	ldr	r2, [sp, #16]
c0d00f38:	2a00      	cmp	r2, #0
c0d00f3a:	4605      	mov	r5, r0
c0d00f3c:	d100      	bne.n	c0d00f40 <handle_output_state+0x1d0>
c0d00f3e:	460d      	mov	r5, r1
c0d00f40:	9902      	ldr	r1, [sp, #8]
c0d00f42:	2900      	cmp	r1, #0
c0d00f44:	d000      	beq.n	c0d00f48 <handle_output_state+0x1d8>
c0d00f46:	4605      	mov	r5, r0
                            : isP2sh ? OUTPUT_SCRIPT_P2SH_PRE_LENGTH
                                     : OUTPUT_SCRIPT_REGULAR_PRE_LENGTH);
        if (!isP2sh &&
c0d00f48:	9804      	ldr	r0, [sp, #16]
c0d00f4a:	2800      	cmp	r0, #0
c0d00f4c:	d021      	beq.n	c0d00f92 <handle_output_state+0x222>
            os_memcmp(btchip_context_D.currentOutput + 8 + addressOffset,
                      btchip_context_D.tmpCtx.output.changeAddress + 1,
                      20) == 0) {
            changeFound = true;
        } else if (isP2sh && btchip_context_D.usingSegwit) {
c0d00f4e:	207f      	movs	r0, #127	; 0x7f
c0d00f50:	0080      	lsls	r0, r0, #2
c0d00f52:	5c38      	ldrb	r0, [r7, r0]
c0d00f54:	2800      	cmp	r0, #0
c0d00f56:	d027      	beq.n	c0d00fa8 <handle_output_state+0x238>
c0d00f58:	9406      	str	r4, [sp, #24]
c0d00f5a:	ac07      	add	r4, sp, #28
            unsigned char changeSegwit[22];
            changeSegwit[0] = 0x00;
c0d00f5c:	2000      	movs	r0, #0
c0d00f5e:	7020      	strb	r0, [r4, #0]
c0d00f60:	2214      	movs	r2, #20
            changeSegwit[1] = 0x14;
c0d00f62:	9204      	str	r2, [sp, #16]
c0d00f64:	7062      	strb	r2, [r4, #1]
            os_memmove(changeSegwit + 2,
c0d00f66:	482d      	ldr	r0, [pc, #180]	; (c0d0101c <handle_output_state+0x2ac>)
c0d00f68:	1839      	adds	r1, r7, r0
c0d00f6a:	1ca0      	adds	r0, r4, #2
c0d00f6c:	f003 fb21 	bl	c0d045b2 <os_memmove>
                       btchip_context_D.tmpCtx.output.changeAddress + 1, 20);
            btchip_public_key_hash160(changeSegwit, 22, changeSegwit);
c0d00f70:	2116      	movs	r1, #22
c0d00f72:	4620      	mov	r0, r4
c0d00f74:	4622      	mov	r2, r4
c0d00f76:	f001 f883 	bl	c0d02080 <btchip_public_key_hash160>
            if (os_memcmp(btchip_context_D.currentOutput + 8 + addressOffset,
c0d00f7a:	b2e8      	uxtb	r0, r5
c0d00f7c:	1838      	adds	r0, r7, r0
c0d00f7e:	4922      	ldr	r1, [pc, #136]	; (c0d01008 <handle_output_state+0x298>)
c0d00f80:	1840      	adds	r0, r0, r1
c0d00f82:	4621      	mov	r1, r4
c0d00f84:	9a04      	ldr	r2, [sp, #16]
c0d00f86:	f003 fbb1 	bl	c0d046ec <os_memcmp>
c0d00f8a:	2800      	cmp	r0, #0
c0d00f8c:	d017      	beq.n	c0d00fbe <handle_output_state+0x24e>
c0d00f8e:	9c06      	ldr	r4, [sp, #24]
c0d00f90:	e00a      	b.n	c0d00fa8 <handle_output_state+0x238>
        unsigned char addressOffset =
            (isNativeSegwit ? OUTPUT_SCRIPT_NATIVE_WITNESS_PROGRAM_OFFSET
                            : isP2sh ? OUTPUT_SCRIPT_P2SH_PRE_LENGTH
                                     : OUTPUT_SCRIPT_REGULAR_PRE_LENGTH);
        if (!isP2sh &&
            os_memcmp(btchip_context_D.currentOutput + 8 + addressOffset,
c0d00f92:	4822      	ldr	r0, [pc, #136]	; (c0d0101c <handle_output_state+0x2ac>)
c0d00f94:	1839      	adds	r1, r7, r0
c0d00f96:	b2e8      	uxtb	r0, r5
c0d00f98:	1838      	adds	r0, r7, r0
c0d00f9a:	4a1b      	ldr	r2, [pc, #108]	; (c0d01008 <handle_output_state+0x298>)
c0d00f9c:	1880      	adds	r0, r0, r2
c0d00f9e:	2214      	movs	r2, #20
c0d00fa0:	f003 fba4 	bl	c0d046ec <os_memcmp>
        bool changeFound = false;
        unsigned char addressOffset =
            (isNativeSegwit ? OUTPUT_SCRIPT_NATIVE_WITNESS_PROGRAM_OFFSET
                            : isP2sh ? OUTPUT_SCRIPT_P2SH_PRE_LENGTH
                                     : OUTPUT_SCRIPT_REGULAR_PRE_LENGTH);
        if (!isP2sh &&
c0d00fa4:	2800      	cmp	r0, #0
c0d00fa6:	d011      	beq.n	c0d00fcc <handle_output_state+0x25c>
        processed = true;

        discardSize += 8 + scriptSize;

        if (check_output_displayable()) {
            btchip_context_D.io_flags |= IO_ASYNCH_REPLY;
c0d00fa8:	2021      	movs	r0, #33	; 0x21
c0d00faa:	0100      	lsls	r0, r0, #4
c0d00fac:	5c39      	ldrb	r1, [r7, r0]
c0d00fae:	2210      	movs	r2, #16
c0d00fb0:	430a      	orrs	r2, r1
c0d00fb2:	543a      	strb	r2, [r7, r0]

            // The output can be processed by the UI

            btchip_context_D.discardSize = discardSize;
c0d00fb4:	9805      	ldr	r0, [sp, #20]
c0d00fb6:	51b8      	str	r0, [r7, r6]
                   btchip_context_D.currentOutput + discardSize,
                   btchip_context_D.currentOutputOffset - discardSize);
        btchip_context_D.currentOutputOffset -= discardSize;
    }

    return processed;
c0d00fb8:	4620      	mov	r0, r4
c0d00fba:	b00f      	add	sp, #60	; 0x3c
c0d00fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            os_memmove(changeSegwit + 2,
                       btchip_context_D.tmpCtx.output.changeAddress + 1, 20);
            btchip_public_key_hash160(changeSegwit, 22, changeSegwit);
            if (os_memcmp(btchip_context_D.currentOutput + 8 + addressOffset,
                          changeSegwit, 20) == 0) {
                if (G_coin_config->flags & FLAG_SEGWIT_CHANGE_SUPPORT) {
c0d00fbe:	4815      	ldr	r0, [pc, #84]	; (c0d01014 <handle_output_state+0x2a4>)
c0d00fc0:	6800      	ldr	r0, [r0, #0]
c0d00fc2:	212c      	movs	r1, #44	; 0x2c
c0d00fc4:	5c40      	ldrb	r0, [r0, r1]
c0d00fc6:	0740      	lsls	r0, r0, #29
c0d00fc8:	d51a      	bpl.n	c0d01000 <handle_output_state+0x290>
c0d00fca:	9c06      	ldr	r4, [sp, #24]
c0d00fcc:	9406      	str	r4, [sp, #24]
                    THROW(EXCEPTION);
                }
            }
        }
        if (changeFound) {
            if (btchip_context_D.changeOutputFound) {
c0d00fce:	481d      	ldr	r0, [pc, #116]	; (c0d01044 <handle_output_state+0x2d4>)
c0d00fd0:	5c38      	ldrb	r0, [r7, r0]
c0d00fd2:	2800      	cmp	r0, #0
c0d00fd4:	d112      	bne.n	c0d00ffc <handle_output_state+0x28c>
                PRINTF("Error : Multiple change output found");
                THROW(EXCEPTION);
            }
            btchip_context_D.changeOutputFound = true;
c0d00fd6:	481b      	ldr	r0, [pc, #108]	; (c0d01044 <handle_output_state+0x2d4>)
c0d00fd8:	2101      	movs	r1, #1
c0d00fda:	5439      	strb	r1, [r7, r0]
            // The output can be processed by the UI

            btchip_context_D.discardSize = discardSize;
            discardSize = 0;
        } else {
            btchip_context_D.remainingOutputs--;
c0d00fdc:	2073      	movs	r0, #115	; 0x73
c0d00fde:	00c0      	lsls	r0, r0, #3
c0d00fe0:	5839      	ldr	r1, [r7, r0]
c0d00fe2:	1e49      	subs	r1, r1, #1
c0d00fe4:	5039      	str	r1, [r7, r0]
c0d00fe6:	9e05      	ldr	r6, [sp, #20]

    default:
        THROW(EXCEPTION);
    }

    if (discardSize != 0) {
c0d00fe8:	2e00      	cmp	r6, #0
c0d00fea:	d000      	beq.n	c0d00fee <handle_output_state+0x27e>
c0d00fec:	e733      	b.n	c0d00e56 <handle_output_state+0xe6>
c0d00fee:	e73e      	b.n	c0d00e6e <handle_output_state+0xfe>
         !btchip_output_script_is_regular(btchip_context_D.currentOutput + 8) &&
         !isP2sh && !(nullAmount && isOpReturn) && !isOpCreate && !isOpCall) ||
        (!(G_coin_config->kind == COIN_KIND_QTUM) &&
         !btchip_output_script_is_regular(btchip_context_D.currentOutput + 8) &&
         !isP2sh && !(nullAmount && isOpReturn))) {
        PRINTF("Error : Unrecognized input script");
c0d00ff0:	a01f      	add	r0, pc, #124	; (adr r0, c0d01070 <handle_output_state+0x300>)
c0d00ff2:	f004 f9cd 	bl	c0d05390 <screen_printf>
c0d00ff6:	2001      	movs	r0, #1
c0d00ff8:	f003 fb8f 	bl	c0d0471a <os_longjmp>
                }
            }
        }
        if (changeFound) {
            if (btchip_context_D.changeOutputFound) {
                PRINTF("Error : Multiple change output found");
c0d00ffc:	a012      	add	r0, pc, #72	; (adr r0, c0d01048 <handle_output_state+0x2d8>)
c0d00ffe:	e7f8      	b.n	c0d00ff2 <handle_output_state+0x282>
                          changeSegwit, 20) == 0) {
                if (G_coin_config->flags & FLAG_SEGWIT_CHANGE_SUPPORT) {
                    changeFound = true;
                } else {
                    // Attempt to avoid fatal failures on Bitcoin Cash
                    PRINTF("Error : Non spendable Segwit change");
c0d01000:	a007      	add	r0, pc, #28	; (adr r0, c0d01020 <handle_output_state+0x2b0>)
c0d01002:	e7f6      	b.n	c0d00ff2 <handle_output_state+0x282>
c0d01004:	20001874 	.word	0x20001874
c0d01008:	000002d3 	.word	0x000002d3
c0d0100c:	000002cb 	.word	0x000002cb
c0d01010:	000003a5 	.word	0x000003a5
c0d01014:	20001c24 	.word	0x20001c24
c0d01018:	000002c7 	.word	0x000002c7
c0d0101c:	000002b3 	.word	0x000002b3
c0d01020:	6f727245 	.word	0x6f727245
c0d01024:	203a2072 	.word	0x203a2072
c0d01028:	206e6f4e 	.word	0x206e6f4e
c0d0102c:	6e657073 	.word	0x6e657073
c0d01030:	6c626164 	.word	0x6c626164
c0d01034:	65532065 	.word	0x65532065
c0d01038:	74697767 	.word	0x74697767
c0d0103c:	61686320 	.word	0x61686320
c0d01040:	0065676e 	.word	0x0065676e
c0d01044:	000003ad 	.word	0x000003ad
c0d01048:	6f727245 	.word	0x6f727245
c0d0104c:	203a2072 	.word	0x203a2072
c0d01050:	746c754d 	.word	0x746c754d
c0d01054:	656c7069 	.word	0x656c7069
c0d01058:	61686320 	.word	0x61686320
c0d0105c:	2065676e 	.word	0x2065676e
c0d01060:	7074756f 	.word	0x7074756f
c0d01064:	66207475 	.word	0x66207475
c0d01068:	646e756f 	.word	0x646e756f
c0d0106c:	00000000 	.word	0x00000000
c0d01070:	6f727245 	.word	0x6f727245
c0d01074:	203a2072 	.word	0x203a2072
c0d01078:	65726e55 	.word	0x65726e55
c0d0107c:	6e676f63 	.word	0x6e676f63
c0d01080:	64657a69 	.word	0x64657a69
c0d01084:	706e6920 	.word	0x706e6920
c0d01088:	73207475 	.word	0x73207475
c0d0108c:	70697263 	.word	0x70697263
c0d01090:	00000074 	.word	0x00000074
c0d01094:	000002cd 	.word	0x000002cd

c0d01098 <btchip_apdu_hash_input_start>:
#define P2_NEW 0x00
#define P2_NEW_SEGWIT 0x02
#define P2_NEW_SEGWIT_CASHADDR 0x03
#define P2_CONTINUE 0x80

unsigned short btchip_apdu_hash_input_start() {
c0d01098:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d0109a:	b081      	sub	sp, #4
    unsigned char apduLength;
    apduLength = G_io_apdu_buffer[ISO_OFFSET_LC];
c0d0109c:	4e38      	ldr	r6, [pc, #224]	; (c0d01180 <btchip_apdu_hash_input_start+0xe8>)
c0d0109e:	7935      	ldrb	r5, [r6, #4]

    SB_CHECK(N_btchip.bkp.config.operationMode);
c0d010a0:	4c38      	ldr	r4, [pc, #224]	; (c0d01184 <btchip_apdu_hash_input_start+0xec>)
c0d010a2:	4620      	mov	r0, r4
c0d010a4:	f004 fd2a 	bl	c0d05afc <pic>
c0d010a8:	8880      	ldrh	r0, [r0, #4]
c0d010aa:	f001 f8d6 	bl	c0d0225a <sbCheck>
    switch (SB_GET(N_btchip.bkp.config.operationMode)) {
c0d010ae:	4620      	mov	r0, r4
c0d010b0:	f004 fd24 	bl	c0d05afc <pic>
c0d010b4:	4601      	mov	r1, r0
c0d010b6:	4f34      	ldr	r7, [pc, #208]	; (c0d01188 <btchip_apdu_hash_input_start+0xf0>)
c0d010b8:	1cf8      	adds	r0, r7, #3
c0d010ba:	7909      	ldrb	r1, [r1, #4]
c0d010bc:	2904      	cmp	r1, #4
c0d010be:	d85d      	bhi.n	c0d0117c <btchip_apdu_hash_input_start+0xe4>
c0d010c0:	9500      	str	r5, [sp, #0]
c0d010c2:	2401      	movs	r4, #1
c0d010c4:	4622      	mov	r2, r4
c0d010c6:	408a      	lsls	r2, r1
c0d010c8:	2116      	movs	r1, #22
c0d010ca:	420a      	tst	r2, r1
c0d010cc:	d056      	beq.n	c0d0117c <btchip_apdu_hash_input_start+0xe4>
        break;
    default:
        return BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
    }

    if (G_io_apdu_buffer[ISO_OFFSET_P1] == P1_FIRST) {
c0d010ce:	78b1      	ldrb	r1, [r6, #2]
c0d010d0:	206b      	movs	r0, #107	; 0x6b
c0d010d2:	0200      	lsls	r0, r0, #8
c0d010d4:	2980      	cmp	r1, #128	; 0x80
c0d010d6:	d008      	beq.n	c0d010ea <btchip_apdu_hash_input_start+0x52>
c0d010d8:	2900      	cmp	r1, #0
c0d010da:	d14f      	bne.n	c0d0117c <btchip_apdu_hash_input_start+0xe4>
        // Initialize
        btchip_context_D.transactionContext.transactionState =
c0d010dc:	4a2b      	ldr	r2, [pc, #172]	; (c0d0118c <btchip_apdu_hash_input_start+0xf4>)
c0d010de:	2300      	movs	r3, #0
c0d010e0:	7513      	strb	r3, [r2, #20]
            BTCHIP_TRANSACTION_NONE;
        btchip_set_check_internal_structure_integrity(1);
        btchip_context_D.transactionHashOption = TRANSACTION_HASH_BOTH;
c0d010e2:	2345      	movs	r3, #69	; 0x45
c0d010e4:	009b      	lsls	r3, r3, #2
c0d010e6:	2503      	movs	r5, #3
c0d010e8:	54d5      	strb	r5, [r2, r3]
    } else if (G_io_apdu_buffer[ISO_OFFSET_P1] != P1_NEXT) {
        return BTCHIP_SW_INCORRECT_P1_P2;
    }

    if ((G_io_apdu_buffer[ISO_OFFSET_P2] == P2_NEW) ||
c0d010ea:	78f5      	ldrb	r5, [r6, #3]
c0d010ec:	2d03      	cmp	r5, #3
c0d010ee:	d836      	bhi.n	c0d0115e <btchip_apdu_hash_input_start+0xc6>
c0d010f0:	2d01      	cmp	r5, #1
c0d010f2:	d034      	beq.n	c0d0115e <btchip_apdu_hash_input_start+0xc6>
        (G_io_apdu_buffer[ISO_OFFSET_P2] == P2_NEW_SEGWIT) ||
        (G_io_apdu_buffer[ISO_OFFSET_P2] == P2_NEW_SEGWIT_CASHADDR)) {
        // btchip_context_D.transactionContext.consumeP2SH =
        // ((N_btchip.bkp.config.options & BTCHIP_OPTION_SKIP_2FA_P2SH) != 0);
        if (G_io_apdu_buffer[ISO_OFFSET_P1] == P1_FIRST) {
c0d010f4:	2900      	cmp	r1, #0
c0d010f6:	d134      	bne.n	c0d01162 <btchip_apdu_hash_input_start+0xca>
            unsigned char usingSegwit =
                (G_io_apdu_buffer[ISO_OFFSET_P2] == P2_NEW_SEGWIT) ||
c0d010f8:	4629      	mov	r1, r5
c0d010fa:	4321      	orrs	r1, r4
c0d010fc:	2000      	movs	r0, #0
c0d010fe:	2903      	cmp	r1, #3
c0d01100:	d000      	beq.n	c0d01104 <btchip_apdu_hash_input_start+0x6c>
c0d01102:	4604      	mov	r4, r0
            // Only request PIN validation (user presence) to start a new
            // transaction signing flow.
            // Thus allowing for numerous output to be processed in the
            // background without
            // requiring to disable autolock/autopoweroff
            if (!btchip_context_D.transactionContext.firstSigned &&
c0d01104:	4a21      	ldr	r2, [pc, #132]	; (c0d0118c <btchip_apdu_hash_input_start+0xf4>)
c0d01106:	7f50      	ldrb	r0, [r2, #29]
c0d01108:	2800      	cmp	r0, #0
c0d0110a:	d105      	bne.n	c0d01118 <btchip_apdu_hash_input_start+0x80>
                !os_global_pin_is_validated()) {
c0d0110c:	f004 ff8e 	bl	c0d0602c <os_global_pin_is_validated>
c0d01110:	4a1e      	ldr	r2, [pc, #120]	; (c0d0118c <btchip_apdu_hash_input_start+0xf4>)
            // Only request PIN validation (user presence) to start a new
            // transaction signing flow.
            // Thus allowing for numerous output to be processed in the
            // background without
            // requiring to disable autolock/autopoweroff
            if (!btchip_context_D.transactionContext.firstSigned &&
c0d01112:	2800      	cmp	r0, #0
c0d01114:	4638      	mov	r0, r7
c0d01116:	d031      	beq.n	c0d0117c <btchip_apdu_hash_input_start+0xe4>
c0d01118:	2701      	movs	r7, #1
                !os_global_pin_is_validated()) {
                return BTCHIP_SW_SECURITY_STATUS_NOT_SATISFIED;
            }
            // Master transaction reset
            btchip_context_D.transactionContext.firstSigned = 1;
c0d0111a:	7757      	strb	r7, [r2, #29]
c0d0111c:	2100      	movs	r1, #0
            btchip_context_D.transactionContext.consumeP2SH = 0;
c0d0111e:	77d1      	strb	r1, [r2, #31]
            btchip_context_D.transactionContext.relaxed = 0;
c0d01120:	7791      	strb	r1, [r2, #30]
            btchip_context_D.usingSegwit = usingSegwit;
c0d01122:	207f      	movs	r0, #127	; 0x7f
c0d01124:	0080      	lsls	r0, r0, #2
c0d01126:	5414      	strb	r4, [r2, r0]
        // btchip_context_D.transactionContext.consumeP2SH =
        // ((N_btchip.bkp.config.options & BTCHIP_OPTION_SKIP_2FA_P2SH) != 0);
        if (G_io_apdu_buffer[ISO_OFFSET_P1] == P1_FIRST) {
            unsigned char usingSegwit =
                (G_io_apdu_buffer[ISO_OFFSET_P2] == P2_NEW_SEGWIT) ||
                ((G_io_apdu_buffer[ISO_OFFSET_P2] == P2_NEW_SEGWIT_CASHADDR));
c0d01128:	2d03      	cmp	r5, #3
c0d0112a:	4638      	mov	r0, r7
c0d0112c:	d000      	beq.n	c0d01130 <btchip_apdu_hash_input_start+0x98>
c0d0112e:	4608      	mov	r0, r1
            btchip_context_D.transactionContext.firstSigned = 1;
            btchip_context_D.transactionContext.consumeP2SH = 0;
            btchip_context_D.transactionContext.relaxed = 0;
            btchip_context_D.usingSegwit = usingSegwit;
            btchip_context_D.usingCashAddr =
                (G_coin_config->kind == COIN_KIND_BITCOIN_CASH ? usingCashAddr
c0d01130:	4a17      	ldr	r2, [pc, #92]	; (c0d01190 <btchip_apdu_hash_input_start+0xf8>)
c0d01132:	6812      	ldr	r2, [r2, #0]
c0d01134:	2328      	movs	r3, #40	; 0x28
c0d01136:	5cd2      	ldrb	r2, [r2, r3]
c0d01138:	2a02      	cmp	r2, #2
c0d0113a:	463a      	mov	r2, r7
c0d0113c:	d000      	beq.n	c0d01140 <btchip_apdu_hash_input_start+0xa8>
c0d0113e:	460a      	mov	r2, r1
c0d01140:	4010      	ands	r0, r2
                                                               : 0);
            btchip_context_D.segwitParsedOnce = 0;
c0d01142:	22ff      	movs	r2, #255	; 0xff
c0d01144:	0053      	lsls	r3, r2, #1
            // Master transaction reset
            btchip_context_D.transactionContext.firstSigned = 1;
            btchip_context_D.transactionContext.consumeP2SH = 0;
            btchip_context_D.transactionContext.relaxed = 0;
            btchip_context_D.usingSegwit = usingSegwit;
            btchip_context_D.usingCashAddr =
c0d01146:	32fe      	adds	r2, #254	; 0xfe
c0d01148:	4c10      	ldr	r4, [pc, #64]	; (c0d0118c <btchip_apdu_hash_input_start+0xf4>)
c0d0114a:	54a0      	strb	r0, [r4, r2]
                (G_coin_config->kind == COIN_KIND_BITCOIN_CASH ? usingCashAddr
                                                               : 0);
            btchip_context_D.segwitParsedOnce = 0;
c0d0114c:	54e1      	strb	r1, [r4, r3]
c0d0114e:	4811      	ldr	r0, [pc, #68]	; (c0d01194 <btchip_apdu_hash_input_start+0xfc>)
            btchip_set_check_internal_structure_integrity(1);
            // Initialize for screen pairing
            os_memset(&btchip_context_D.tmpCtx.output, 0,
c0d01150:	1820      	adds	r0, r4, r0
c0d01152:	2219      	movs	r2, #25
c0d01154:	f003 fa24 	bl	c0d045a0 <os_memset>
                      sizeof(btchip_context_D.tmpCtx.output));
            btchip_context_D.tmpCtx.output.changeAccepted = 1;
c0d01158:	480f      	ldr	r0, [pc, #60]	; (c0d01198 <btchip_apdu_hash_input_start+0x100>)
c0d0115a:	5427      	strb	r7, [r4, r0]
c0d0115c:	e001      	b.n	c0d01162 <btchip_apdu_hash_input_start+0xca>
c0d0115e:	2d80      	cmp	r5, #128	; 0x80
c0d01160:	d10c      	bne.n	c0d0117c <btchip_apdu_hash_input_start+0xe4>
        }
    } else if (G_io_apdu_buffer[ISO_OFFSET_P2] != P2_CONTINUE) {
        return BTCHIP_SW_INCORRECT_P1_P2;
    }

    btchip_context_D.transactionBufferPointer =
c0d01162:	2001      	movs	r0, #1
c0d01164:	0240      	lsls	r0, r0, #9
c0d01166:	1d71      	adds	r1, r6, #5
c0d01168:	4a08      	ldr	r2, [pc, #32]	; (c0d0118c <btchip_apdu_hash_input_start+0xf4>)
c0d0116a:	5011      	str	r1, [r2, r0]
        G_io_apdu_buffer + ISO_OFFSET_CDATA;
    btchip_context_D.transactionDataRemaining = apduLength;
c0d0116c:	480b      	ldr	r0, [pc, #44]	; (c0d0119c <btchip_apdu_hash_input_start+0x104>)
c0d0116e:	9900      	ldr	r1, [sp, #0]
c0d01170:	5411      	strb	r1, [r2, r0]

    transaction_parse(PARSE_MODE_SIGNATURE);
c0d01172:	2002      	movs	r0, #2
c0d01174:	f001 f938 	bl	c0d023e8 <transaction_parse>
c0d01178:	2009      	movs	r0, #9
c0d0117a:	0300      	lsls	r0, r0, #12

    return BTCHIP_SW_OK;
}
c0d0117c:	b001      	add	sp, #4
c0d0117e:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d01180:	20001e6c 	.word	0x20001e6c
c0d01184:	c0d08980 	.word	0xc0d08980
c0d01188:	00006982 	.word	0x00006982
c0d0118c:	20001874 	.word	0x20001874
c0d01190:	20001c24 	.word	0x20001c24
c0d01194:	000002b2 	.word	0x000002b2
c0d01198:	000002c9 	.word	0x000002c9
c0d0119c:	000001ff 	.word	0x000001ff

c0d011a0 <btchip_apdu_hash_sign>:
#include "btchip_internal.h"
#include "btchip_apdu_constants.h"

#define SIGHASH_ALL 0x01

unsigned short btchip_apdu_hash_sign() {
c0d011a0:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d011a2:	b0ef      	sub	sp, #444	; 0x1bc
    unsigned char *authorization;
    unsigned short sw;
    unsigned char keyPath[MAX_BIP32_PATH_LENGTH];
    cx_sha256_t localHash;

    SB_CHECK(N_btchip.bkp.config.operationMode);
c0d011a4:	4c62      	ldr	r4, [pc, #392]	; (c0d01330 <btchip_apdu_hash_sign+0x190>)
c0d011a6:	4620      	mov	r0, r4
c0d011a8:	f004 fca8 	bl	c0d05afc <pic>
c0d011ac:	8880      	ldrh	r0, [r0, #4]
c0d011ae:	f001 f854 	bl	c0d0225a <sbCheck>
    switch (SB_GET(N_btchip.bkp.config.operationMode)) {
c0d011b2:	4620      	mov	r0, r4
c0d011b4:	f004 fca2 	bl	c0d05afc <pic>
c0d011b8:	7900      	ldrb	r0, [r0, #4]
c0d011ba:	4f5e      	ldr	r7, [pc, #376]	; (c0d01334 <btchip_apdu_hash_sign+0x194>)
c0d011bc:	2804      	cmp	r0, #4
c0d011be:	d83c      	bhi.n	c0d0123a <btchip_apdu_hash_sign+0x9a>
c0d011c0:	2401      	movs	r4, #1
c0d011c2:	4621      	mov	r1, r4
c0d011c4:	4081      	lsls	r1, r0
c0d011c6:	2016      	movs	r0, #22
c0d011c8:	4201      	tst	r1, r0
c0d011ca:	d036      	beq.n	c0d0123a <btchip_apdu_hash_sign+0x9a>
        break;
    default:
        return BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
    }

    if ((G_io_apdu_buffer[ISO_OFFSET_P1] != 0) &&
c0d011cc:	4e5a      	ldr	r6, [pc, #360]	; (c0d01338 <btchip_apdu_hash_sign+0x198>)
c0d011ce:	206b      	movs	r0, #107	; 0x6b
c0d011d0:	0200      	lsls	r0, r0, #8
c0d011d2:	78b1      	ldrb	r1, [r6, #2]
c0d011d4:	2900      	cmp	r1, #0
c0d011d6:	d002      	beq.n	c0d011de <btchip_apdu_hash_sign+0x3e>
c0d011d8:	78f1      	ldrb	r1, [r6, #3]
c0d011da:	2900      	cmp	r1, #0
c0d011dc:	d12e      	bne.n	c0d0123c <btchip_apdu_hash_sign+0x9c>
c0d011de:	2067      	movs	r0, #103	; 0x67
c0d011e0:	0200      	lsls	r0, r0, #8
        (G_io_apdu_buffer[ISO_OFFSET_P2] != 0)) {
        return BTCHIP_SW_INCORRECT_P1_P2;
    }

    if (G_io_apdu_buffer[ISO_OFFSET_LC] < (1 + 1 + 4 + 1)) {
c0d011e2:	7931      	ldrb	r1, [r6, #4]
c0d011e4:	2907      	cmp	r1, #7
c0d011e6:	d329      	bcc.n	c0d0123c <btchip_apdu_hash_sign+0x9c>
c0d011e8:	ad06      	add	r5, sp, #24
        return BTCHIP_SW_INCORRECT_LENGTH;
    }

    // Check state
    BEGIN_TRY {
        TRY {
c0d011ea:	4628      	mov	r0, r5
c0d011ec:	f006 fb62 	bl	c0d078b4 <setjmp>
c0d011f0:	8528      	strh	r0, [r5, #40]	; 0x28
c0d011f2:	4952      	ldr	r1, [pc, #328]	; (c0d0133c <btchip_apdu_hash_sign+0x19c>)
c0d011f4:	4208      	tst	r0, r1
c0d011f6:	d005      	beq.n	c0d01204 <btchip_apdu_hash_sign+0x64>
c0d011f8:	a806      	add	r0, sp, #24

            sw = BTCHIP_SW_OK;

            // Then discard the transaction and reply
        }
        CATCH_ALL {
c0d011fa:	2100      	movs	r1, #0
c0d011fc:	8501      	strh	r1, [r0, #40]	; 0x28
c0d011fe:	206f      	movs	r0, #111	; 0x6f
c0d01200:	0207      	lsls	r7, r0, #8
c0d01202:	e00e      	b.n	c0d01222 <btchip_apdu_hash_sign+0x82>
c0d01204:	a806      	add	r0, sp, #24
        return BTCHIP_SW_INCORRECT_LENGTH;
    }

    // Check state
    BEGIN_TRY {
        TRY {
c0d01206:	f003 f920 	bl	c0d0444a <try_context_set>
            btchip_set_check_internal_structure_integrity(0);
            if (btchip_context_D.transactionContext.transactionState !=
c0d0120a:	484d      	ldr	r0, [pc, #308]	; (c0d01340 <btchip_apdu_hash_sign+0x1a0>)
c0d0120c:	7d00      	ldrb	r0, [r0, #20]
c0d0120e:	280a      	cmp	r0, #10
c0d01210:	d103      	bne.n	c0d0121a <btchip_apdu_hash_sign+0x7a>
c0d01212:	37fb      	adds	r7, #251	; 0xfb
                sw = BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
                goto discardTransaction;
            }

            // Read parameters
            if (G_io_apdu_buffer[ISO_OFFSET_CDATA] > MAX_BIP32_PATH) {
c0d01214:	7970      	ldrb	r0, [r6, #5]
c0d01216:	280b      	cmp	r0, #11
c0d01218:	d313      	bcc.n	c0d01242 <btchip_apdu_hash_sign+0xa2>
                sw = BTCHIP_SW_INCORRECT_DATA;
            discardTransaction:
                CLOSE_TRY;
c0d0121a:	f003 fa85 	bl	c0d04728 <try_context_get_previous>
c0d0121e:	f003 f914 	bl	c0d0444a <try_context_set>
            // Then discard the transaction and reply
        }
        CATCH_ALL {
            sw = SW_TECHNICAL_DETAILS(0xF);
        catch_discardTransaction:
            btchip_context_D.transactionContext.transactionState =
c0d01222:	4847      	ldr	r0, [pc, #284]	; (c0d01340 <btchip_apdu_hash_sign+0x1a0>)
c0d01224:	2100      	movs	r1, #0
c0d01226:	7501      	strb	r1, [r0, #20]
                BTCHIP_TRANSACTION_NONE;
        }
        FINALLY {
c0d01228:	f003 fa7c 	bl	c0d04724 <try_context_get>
c0d0122c:	a906      	add	r1, sp, #24
c0d0122e:	4288      	cmp	r0, r1
c0d01230:	d103      	bne.n	c0d0123a <btchip_apdu_hash_sign+0x9a>
c0d01232:	f003 fa79 	bl	c0d04728 <try_context_get_previous>
c0d01236:	f003 f908 	bl	c0d0444a <try_context_set>
c0d0123a:	4638      	mov	r0, r7
            btchip_set_check_internal_structure_integrity(1);
            return sw;
        }
    }
    END_TRY;
}
c0d0123c:	b280      	uxth	r0, r0
c0d0123e:	b06f      	add	sp, #444	; 0x1bc
c0d01240:	bdf0      	pop	{r4, r5, r6, r7, pc}
                sw = BTCHIP_SW_INCORRECT_DATA;
            discardTransaction:
                CLOSE_TRY;
                goto catch_discardTransaction;
            }
            os_memmove(keyPath, G_io_apdu_buffer + ISO_OFFSET_CDATA,
c0d01242:	1d75      	adds	r5, r6, #5
c0d01244:	a82c      	add	r0, sp, #176	; 0xb0
c0d01246:	2229      	movs	r2, #41	; 0x29
c0d01248:	4629      	mov	r1, r5
c0d0124a:	f003 f9b2 	bl	c0d045b2 <os_memmove>
                       MAX_BIP32_PATH_LENGTH);
            parameters += (4 * G_io_apdu_buffer[ISO_OFFSET_CDATA]) + 1;
c0d0124e:	7970      	ldrb	r0, [r6, #5]
c0d01250:	0080      	lsls	r0, r0, #2
c0d01252:	4320      	orrs	r0, r4
            authorizationLength = *(parameters++);
            authorization = parameters;
            parameters += authorizationLength;
c0d01254:	5c29      	ldrb	r1, [r5, r0]
                CLOSE_TRY;
                goto catch_discardTransaction;
            }
            os_memmove(keyPath, G_io_apdu_buffer + ISO_OFFSET_CDATA,
                       MAX_BIP32_PATH_LENGTH);
            parameters += (4 * G_io_apdu_buffer[ISO_OFFSET_CDATA]) + 1;
c0d01256:	1828      	adds	r0, r5, r0
            authorizationLength = *(parameters++);
c0d01258:	1845      	adds	r5, r0, r1
            authorization = parameters;
            parameters += authorizationLength;
c0d0125a:	1c68      	adds	r0, r5, #1
c0d0125c:	2200      	movs	r2, #0
            lockTime = btchip_read_u32(parameters, 1, 0);
c0d0125e:	4621      	mov	r1, r4
c0d01260:	f000 fea8 	bl	c0d01fb4 <btchip_read_u32>
c0d01264:	9005      	str	r0, [sp, #20]
            parameters += 4;
            sighashType = *(parameters++);
c0d01266:	796d      	ldrb	r5, [r5, #5]

            if (((N_btchip.bkp.config.options &
c0d01268:	4831      	ldr	r0, [pc, #196]	; (c0d01330 <btchip_apdu_hash_sign+0x190>)
c0d0126a:	f004 fc47 	bl	c0d05afc <pic>
c0d0126e:	7980      	ldrb	r0, [r0, #6]
c0d01270:	0740      	lsls	r0, r0, #29
c0d01272:	d40d      	bmi.n	c0d01290 <btchip_apdu_hash_sign+0xf0>
                  BTCHIP_OPTION_FREE_SIGHASHTYPE) == 0)) {
                // if bitcoin cash OR forkid is set, then use the fork id
                if (G_coin_config->kind == COIN_KIND_BITCOIN_CASH ||
c0d01274:	4833      	ldr	r0, [pc, #204]	; (c0d01344 <btchip_apdu_hash_sign+0x1a4>)
c0d01276:	6800      	ldr	r0, [r0, #0]
c0d01278:	2128      	movs	r1, #40	; 0x28
c0d0127a:	5c41      	ldrb	r1, [r0, r1]
c0d0127c:	2902      	cmp	r1, #2
c0d0127e:	d002      	beq.n	c0d01286 <btchip_apdu_hash_sign+0xe6>
                    G_coin_config->forkid) {
c0d01280:	6a41      	ldr	r1, [r0, #36]	; 0x24
            sighashType = *(parameters++);

            if (((N_btchip.bkp.config.options &
                  BTCHIP_OPTION_FREE_SIGHASHTYPE) == 0)) {
                // if bitcoin cash OR forkid is set, then use the fork id
                if (G_coin_config->kind == COIN_KIND_BITCOIN_CASH ||
c0d01282:	2900      	cmp	r1, #0
c0d01284:	d051      	beq.n	c0d0132a <btchip_apdu_hash_sign+0x18a>
                    G_coin_config->forkid) {
#define SIGHASH_FORKID 0x40
                    if (sighashType != (SIGHASH_ALL | SIGHASH_FORKID)) {
c0d01286:	2d41      	cmp	r5, #65	; 0x41
c0d01288:	d1c7      	bne.n	c0d0121a <btchip_apdu_hash_sign+0x7a>
                        sw = BTCHIP_SW_INCORRECT_DATA;
                        goto discardTransaction;
                    }
                    sighashType |= (G_coin_config->forkid << 8);
c0d0128a:	6a40      	ldr	r0, [r0, #36]	; 0x24
c0d0128c:	0200      	lsls	r0, r0, #8
c0d0128e:	4305      	orrs	r5, r0
                }
            }

            // Read transaction parameters
            // TODO : remove copy
            os_memmove(&transactionSummary,
c0d01290:	9504      	str	r5, [sp, #16]
c0d01292:	2043      	movs	r0, #67	; 0x43
c0d01294:	00c0      	lsls	r0, r0, #3
c0d01296:	492a      	ldr	r1, [pc, #168]	; (c0d01340 <btchip_apdu_hash_sign+0x1a0>)
c0d01298:	1809      	adds	r1, r1, r0
c0d0129a:	a837      	add	r0, sp, #220	; 0xdc
c0d0129c:	2298      	movs	r2, #152	; 0x98
c0d0129e:	f003 f988 	bl	c0d045b2 <os_memmove>
c0d012a2:	a82c      	add	r0, sp, #176	; 0xb0
c0d012a4:	2100      	movs	r1, #0
                       &btchip_context_D.transactionSummary,
                       sizeof(transactionSummary));

            // Fetch the private key

            btchip_private_derive_keypair(keyPath, 0, NULL);
c0d012a6:	460a      	mov	r2, r1
c0d012a8:	f000 ff6f 	bl	c0d0218a <btchip_private_derive_keypair>
c0d012ac:	af6d      	add	r7, sp, #436	; 0x1b4
            // TODO optional : check the public key against the associated non
            // blank input to sign

            // Finalize the hash

            btchip_write_u32_le(dataBuffer, lockTime);
c0d012ae:	4638      	mov	r0, r7
c0d012b0:	9905      	ldr	r1, [sp, #20]
c0d012b2:	f000 fea8 	bl	c0d02006 <btchip_write_u32_le>
            btchip_write_u32_le(dataBuffer + 4, sighashType);
c0d012b6:	1d38      	adds	r0, r7, #4
c0d012b8:	4629      	mov	r1, r5
c0d012ba:	f000 fea4 	bl	c0d02006 <btchip_write_u32_le>
c0d012be:	ad65      	add	r5, sp, #404	; 0x194
            L_DEBUG_BUF(
                ("Finalize hash with\n", dataBuffer, sizeof(dataBuffer)));

            cx_hash(&btchip_context_D.transactionHashFull.header, CX_LAST,
c0d012c0:	4668      	mov	r0, sp
c0d012c2:	6005      	str	r5, [r0, #0]
c0d012c4:	481e      	ldr	r0, [pc, #120]	; (c0d01340 <btchip_apdu_hash_sign+0x1a0>)
c0d012c6:	303c      	adds	r0, #60	; 0x3c
c0d012c8:	2308      	movs	r3, #8
c0d012ca:	4621      	mov	r1, r4
c0d012cc:	463a      	mov	r2, r7
c0d012ce:	f001 fda1 	bl	c0d02e14 <cx_hash_X>
c0d012d2:	af11      	add	r7, sp, #68	; 0x44
                    dataBuffer, sizeof(dataBuffer), hash1);
            L_DEBUG_BUF(("Hash1\n", hash1, sizeof(hash1)));

            // Rehash
            cx_sha256_init(&localHash);
c0d012d4:	4638      	mov	r0, r7
c0d012d6:	f004 fdf1 	bl	c0d05ebc <cx_sha256_init>
c0d012da:	a95d      	add	r1, sp, #372	; 0x174
            cx_hash(&localHash.header, CX_LAST, hash1, sizeof(hash1), hash2);
c0d012dc:	9103      	str	r1, [sp, #12]
c0d012de:	4668      	mov	r0, sp
c0d012e0:	6001      	str	r1, [r0, #0]
c0d012e2:	2320      	movs	r3, #32
c0d012e4:	4638      	mov	r0, r7
c0d012e6:	4621      	mov	r1, r4
c0d012e8:	462a      	mov	r2, r5
c0d012ea:	461d      	mov	r5, r3
c0d012ec:	f001 fd92 	bl	c0d02e14 <cx_hash_X>

            // Sign
            btchip_signverify_finalhash(
                &btchip_private_key_D, 1, hash2, sizeof(hash2),
                G_io_apdu_buffer, sizeof(G_io_apdu_buffer),
                ((N_btchip.bkp.config.options &
c0d012f0:	480f      	ldr	r0, [pc, #60]	; (c0d01330 <btchip_apdu_hash_sign+0x190>)
c0d012f2:	f004 fc03 	bl	c0d05afc <pic>
c0d012f6:	7980      	ldrb	r0, [r0, #6]
c0d012f8:	0840      	lsrs	r0, r0, #1
c0d012fa:	4020      	ands	r0, r4
            cx_sha256_init(&localHash);
            cx_hash(&localHash.header, CX_LAST, hash1, sizeof(hash1), hash2);
            L_DEBUG_BUF(("Hash2\n", hash2, sizeof(hash2)));

            // Sign
            btchip_signverify_finalhash(
c0d012fc:	4669      	mov	r1, sp
c0d012fe:	22ff      	movs	r2, #255	; 0xff
c0d01300:	3252      	adds	r2, #82	; 0x52
c0d01302:	600e      	str	r6, [r1, #0]
c0d01304:	604a      	str	r2, [r1, #4]
c0d01306:	6088      	str	r0, [r1, #8]
c0d01308:	480f      	ldr	r0, [pc, #60]	; (c0d01348 <btchip_apdu_hash_sign+0x1a8>)
c0d0130a:	4621      	mov	r1, r4
c0d0130c:	9a03      	ldr	r2, [sp, #12]
c0d0130e:	462b      	mov	r3, r5
c0d01310:	f000 ff70 	bl	c0d021f4 <btchip_signverify_finalhash>
                &btchip_private_key_D, 1, hash2, sizeof(hash2),
                G_io_apdu_buffer, sizeof(G_io_apdu_buffer),
                ((N_btchip.bkp.config.options &
                  BTCHIP_OPTION_DETERMINISTIC_SIGNATURE) != 0));

            btchip_context_D.outLength = G_io_apdu_buffer[1] + 2;
c0d01314:	7870      	ldrb	r0, [r6, #1]
            G_io_apdu_buffer[btchip_context_D.outLength++] = sighashType;
c0d01316:	1cc1      	adds	r1, r0, #3
c0d01318:	4a0c      	ldr	r2, [pc, #48]	; (c0d0134c <btchip_apdu_hash_sign+0x1ac>)
c0d0131a:	4b09      	ldr	r3, [pc, #36]	; (c0d01340 <btchip_apdu_hash_sign+0x1a0>)
c0d0131c:	5299      	strh	r1, [r3, r2]
            cx_sha256_init(&localHash);
            cx_hash(&localHash.header, CX_LAST, hash1, sizeof(hash1), hash2);
            L_DEBUG_BUF(("Hash2\n", hash2, sizeof(hash2)));

            // Sign
            btchip_signverify_finalhash(
c0d0131e:	1830      	adds	r0, r6, r0
                G_io_apdu_buffer, sizeof(G_io_apdu_buffer),
                ((N_btchip.bkp.config.options &
                  BTCHIP_OPTION_DETERMINISTIC_SIGNATURE) != 0));

            btchip_context_D.outLength = G_io_apdu_buffer[1] + 2;
            G_io_apdu_buffer[btchip_context_D.outLength++] = sighashType;
c0d01320:	9904      	ldr	r1, [sp, #16]
c0d01322:	7081      	strb	r1, [r0, #2]
c0d01324:	2009      	movs	r0, #9
c0d01326:	0307      	lsls	r7, r0, #12
c0d01328:	e77e      	b.n	c0d01228 <btchip_apdu_hash_sign+0x88>
                        sw = BTCHIP_SW_INCORRECT_DATA;
                        goto discardTransaction;
                    }
                    sighashType |= (G_coin_config->forkid << 8);
                } else {
                    if (sighashType != SIGHASH_ALL) {
c0d0132a:	2d01      	cmp	r5, #1
c0d0132c:	d0b0      	beq.n	c0d01290 <btchip_apdu_hash_sign+0xf0>
c0d0132e:	e774      	b.n	c0d0121a <btchip_apdu_hash_sign+0x7a>
c0d01330:	c0d08980 	.word	0xc0d08980
c0d01334:	00006985 	.word	0x00006985
c0d01338:	20001e6c 	.word	0x20001e6c
c0d0133c:	0000ffff 	.word	0x0000ffff
c0d01340:	20001874 	.word	0x20001874
c0d01344:	20001c24 	.word	0x20001c24
c0d01348:	2000184c 	.word	0x2000184c
c0d0134c:	0000020e 	.word	0x0000020e

c0d01350 <btchip_apdu_set_alternate_coin_version>:
#include "btchip_apdu_constants.h"

#define P1_VERSION_ONLY 0x00
#define P1_VERSION_COINID 0x01

unsigned short btchip_apdu_set_alternate_coin_version() {
c0d01350:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d01352:	b081      	sub	sp, #4
c0d01354:	206b      	movs	r0, #107	; 0x6b
c0d01356:	0207      	lsls	r7, r0, #8
    uint8_t offset = ISO_OFFSET_CDATA;
    unsigned char p1 = G_io_apdu_buffer[ISO_OFFSET_P1];
c0d01358:	4e3a      	ldr	r6, [pc, #232]	; (c0d01444 <btchip_apdu_set_alternate_coin_version+0xf4>)
c0d0135a:	78b5      	ldrb	r5, [r6, #2]
    if ((p1 != P1_VERSION_ONLY) && (p1 != P1_VERSION_COINID)) {
c0d0135c:	2d01      	cmp	r5, #1
c0d0135e:	d86c      	bhi.n	c0d0143a <btchip_apdu_set_alternate_coin_version+0xea>
c0d01360:	7930      	ldrb	r0, [r6, #4]
c0d01362:	2167      	movs	r1, #103	; 0x67
c0d01364:	020f      	lsls	r7, r1, #8
        return BTCHIP_SW_INCORRECT_P1_P2;
    }

    if (p1 == P1_VERSION_ONLY) {
c0d01366:	2d00      	cmp	r5, #0
c0d01368:	d002      	beq.n	c0d01370 <btchip_apdu_set_alternate_coin_version+0x20>
        if (G_io_apdu_buffer[ISO_OFFSET_LC] != 0x05) {
            return BTCHIP_SW_INCORRECT_LENGTH;
        }
    } else {
        if (G_io_apdu_buffer[ISO_OFFSET_LC] >
c0d0136a:	2819      	cmp	r0, #25
c0d0136c:	d902      	bls.n	c0d01374 <btchip_apdu_set_alternate_coin_version+0x24>
c0d0136e:	e064      	b.n	c0d0143a <btchip_apdu_set_alternate_coin_version+0xea>
    if ((p1 != P1_VERSION_ONLY) && (p1 != P1_VERSION_COINID)) {
        return BTCHIP_SW_INCORRECT_P1_P2;
    }

    if (p1 == P1_VERSION_ONLY) {
        if (G_io_apdu_buffer[ISO_OFFSET_LC] != 0x05) {
c0d01370:	2805      	cmp	r0, #5
c0d01372:	d162      	bne.n	c0d0143a <btchip_apdu_set_alternate_coin_version+0xea>
            7 + MAX_COIN_ID + MAX_SHORT_COIN_ID) {
            return BTCHIP_SW_INCORRECT_LENGTH;
        }
    }

    SB_CHECK(N_btchip.bkp.config.operationMode);
c0d01374:	4c34      	ldr	r4, [pc, #208]	; (c0d01448 <btchip_apdu_set_alternate_coin_version+0xf8>)
c0d01376:	4620      	mov	r0, r4
c0d01378:	f004 fbc0 	bl	c0d05afc <pic>
c0d0137c:	8880      	ldrh	r0, [r0, #4]
c0d0137e:	f000 ff6c 	bl	c0d0225a <sbCheck>
    if ((SB_GET(N_btchip.bkp.config.operationMode) ==
c0d01382:	4620      	mov	r0, r4
c0d01384:	f004 fbba 	bl	c0d05afc <pic>
c0d01388:	4c30      	ldr	r4, [pc, #192]	; (c0d0144c <btchip_apdu_set_alternate_coin_version+0xfc>)
c0d0138a:	1ce7      	adds	r7, r4, #3
c0d0138c:	7900      	ldrb	r0, [r0, #4]
         BTCHIP_MODE_SETUP_NEEDED) ||
c0d0138e:	28ff      	cmp	r0, #255	; 0xff
c0d01390:	d053      	beq.n	c0d0143a <btchip_apdu_set_alternate_coin_version+0xea>
        (SB_GET(N_btchip.bkp.config.operationMode) == BTCHIP_MODE_ISSUER)) {
c0d01392:	482d      	ldr	r0, [pc, #180]	; (c0d01448 <btchip_apdu_set_alternate_coin_version+0xf8>)
c0d01394:	f004 fbb2 	bl	c0d05afc <pic>
c0d01398:	7900      	ldrb	r0, [r0, #4]
            return BTCHIP_SW_INCORRECT_LENGTH;
        }
    }

    SB_CHECK(N_btchip.bkp.config.operationMode);
    if ((SB_GET(N_btchip.bkp.config.operationMode) ==
c0d0139a:	2800      	cmp	r0, #0
c0d0139c:	d04d      	beq.n	c0d0143a <btchip_apdu_set_alternate_coin_version+0xea>
         BTCHIP_MODE_SETUP_NEEDED) ||
        (SB_GET(N_btchip.bkp.config.operationMode) == BTCHIP_MODE_ISSUER)) {
        return BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
    }

    if (!os_global_pin_is_validated()) {
c0d0139e:	f004 fe45 	bl	c0d0602c <os_global_pin_is_validated>
c0d013a2:	2800      	cmp	r0, #0
c0d013a4:	d048      	beq.n	c0d01438 <btchip_apdu_set_alternate_coin_version+0xe8>
        return BTCHIP_SW_SECURITY_STATUS_NOT_SATISFIED;
    }

    switch (G_io_apdu_buffer[offset + 4]) {
c0d013a6:	7a70      	ldrb	r0, [r6, #9]
c0d013a8:	34fe      	adds	r4, #254	; 0xfe
c0d013aa:	2801      	cmp	r0, #1
c0d013ac:	d010      	beq.n	c0d013d0 <btchip_apdu_set_alternate_coin_version+0x80>
c0d013ae:	2803      	cmp	r0, #3
c0d013b0:	d008      	beq.n	c0d013c4 <btchip_apdu_set_alternate_coin_version+0x74>
c0d013b2:	2802      	cmp	r0, #2
c0d013b4:	d140      	bne.n	c0d01438 <btchip_apdu_set_alternate_coin_version+0xe8>
    case BTCHIP_FAMILY_BITCOIN:
        break;
    case BTCHIP_FAMILY_PEERCOIN:
        if (!(G_coin_config->flags & FLAG_PEERCOIN_SUPPORT)) {
c0d013b6:	4926      	ldr	r1, [pc, #152]	; (c0d01450 <btchip_apdu_set_alternate_coin_version+0x100>)
c0d013b8:	6809      	ldr	r1, [r1, #0]
c0d013ba:	222c      	movs	r2, #44	; 0x2c
c0d013bc:	5c89      	ldrb	r1, [r1, r2]
c0d013be:	0789      	lsls	r1, r1, #30
c0d013c0:	d406      	bmi.n	c0d013d0 <btchip_apdu_set_alternate_coin_version+0x80>
c0d013c2:	e039      	b.n	c0d01438 <btchip_apdu_set_alternate_coin_version+0xe8>
            goto incorrect_family;
        }
        break;
    case BTCHIP_FAMILY_QTUM:
        if (!(G_coin_config->kind == COIN_KIND_QTUM)) {
c0d013c4:	4922      	ldr	r1, [pc, #136]	; (c0d01450 <btchip_apdu_set_alternate_coin_version+0x100>)
c0d013c6:	6809      	ldr	r1, [r1, #0]
c0d013c8:	2228      	movs	r2, #40	; 0x28
c0d013ca:	5c89      	ldrb	r1, [r1, r2]
c0d013cc:	2912      	cmp	r1, #18
c0d013ce:	d133      	bne.n	c0d01438 <btchip_apdu_set_alternate_coin_version+0xe8>
    incorrect_family:
        return BTCHIP_SW_INCORRECT_DATA;
    }

    btchip_context_D.payToAddressVersion =
        (G_io_apdu_buffer[offset] << 8) | (G_io_apdu_buffer[offset + 1]);
c0d013d0:	79b1      	ldrb	r1, [r6, #6]
c0d013d2:	7972      	ldrb	r2, [r6, #5]
c0d013d4:	0212      	lsls	r2, r2, #8
c0d013d6:	430a      	orrs	r2, r1
    default:
    incorrect_family:
        return BTCHIP_SW_INCORRECT_DATA;
    }

    btchip_context_D.payToAddressVersion =
c0d013d8:	4b1e      	ldr	r3, [pc, #120]	; (c0d01454 <btchip_apdu_set_alternate_coin_version+0x104>)
c0d013da:	841a      	strh	r2, [r3, #32]
        (G_io_apdu_buffer[offset] << 8) | (G_io_apdu_buffer[offset + 1]);
    offset += 2;
    btchip_context_D.payToScriptHashVersion =
        (G_io_apdu_buffer[offset] << 8) | (G_io_apdu_buffer[offset + 1]);
c0d013dc:	7a31      	ldrb	r1, [r6, #8]
c0d013de:	79f2      	ldrb	r2, [r6, #7]
c0d013e0:	0212      	lsls	r2, r2, #8
c0d013e2:	430a      	orrs	r2, r1
    }

    btchip_context_D.payToAddressVersion =
        (G_io_apdu_buffer[offset] << 8) | (G_io_apdu_buffer[offset + 1]);
    offset += 2;
    btchip_context_D.payToScriptHashVersion =
c0d013e4:	845a      	strh	r2, [r3, #34]	; 0x22
        (G_io_apdu_buffer[offset] << 8) | (G_io_apdu_buffer[offset + 1]);
    offset += 2;
    btchip_context_D.coinFamily = G_io_apdu_buffer[offset++];
c0d013e6:	2124      	movs	r1, #36	; 0x24
c0d013e8:	5458      	strb	r0, [r3, r1]
c0d013ea:	2009      	movs	r0, #9
c0d013ec:	0300      	lsls	r0, r0, #12
    if (p1 == P1_VERSION_COINID) {
c0d013ee:	2d01      	cmp	r5, #1
c0d013f0:	d126      	bne.n	c0d01440 <btchip_apdu_set_alternate_coin_version+0xf0>
        uint8_t coinIdLength = G_io_apdu_buffer[offset];
c0d013f2:	7ab1      	ldrb	r1, [r6, #10]
        uint8_t shortCoinIdLength = G_io_apdu_buffer[offset + 1 + coinIdLength];
c0d013f4:	460d      	mov	r5, r1
c0d013f6:	350b      	adds	r5, #11
        if ((coinIdLength > MAX_COIN_ID) ||
c0d013f8:	290d      	cmp	r1, #13
c0d013fa:	d81d      	bhi.n	c0d01438 <btchip_apdu_set_alternate_coin_version+0xe8>
        (G_io_apdu_buffer[offset] << 8) | (G_io_apdu_buffer[offset + 1]);
    offset += 2;
    btchip_context_D.coinFamily = G_io_apdu_buffer[offset++];
    if (p1 == P1_VERSION_COINID) {
        uint8_t coinIdLength = G_io_apdu_buffer[offset];
        uint8_t shortCoinIdLength = G_io_apdu_buffer[offset + 1 + coinIdLength];
c0d013fc:	5d72      	ldrb	r2, [r6, r5]
c0d013fe:	2a05      	cmp	r2, #5
c0d01400:	4627      	mov	r7, r4
c0d01402:	d81a      	bhi.n	c0d0143a <btchip_apdu_set_alternate_coin_version+0xea>
c0d01404:	9000      	str	r0, [sp, #0]
        if ((coinIdLength > MAX_COIN_ID) ||
            (shortCoinIdLength > MAX_SHORT_COIN_ID)) {
            return BTCHIP_SW_INCORRECT_DATA;
        }
        os_memmove(btchip_context_D.coinId, G_io_apdu_buffer + offset + 1,
c0d01406:	4618      	mov	r0, r3
c0d01408:	3025      	adds	r0, #37	; 0x25
c0d0140a:	460c      	mov	r4, r1
c0d0140c:	4631      	mov	r1, r6
c0d0140e:	310b      	adds	r1, #11
c0d01410:	4617      	mov	r7, r2
c0d01412:	4622      	mov	r2, r4
c0d01414:	f003 f8cd 	bl	c0d045b2 <os_memmove>
                   coinIdLength);
        btchip_context_D.coinIdLength = coinIdLength;
c0d01418:	2037      	movs	r0, #55	; 0x37
c0d0141a:	4a0e      	ldr	r2, [pc, #56]	; (c0d01454 <btchip_apdu_set_alternate_coin_version+0x104>)
c0d0141c:	5414      	strb	r4, [r2, r0]
        offset += 1 + coinIdLength;
        os_memmove(btchip_context_D.shortCoinId, G_io_apdu_buffer + offset + 1,
c0d0141e:	b2e8      	uxtb	r0, r5
c0d01420:	1830      	adds	r0, r6, r0
c0d01422:	1c41      	adds	r1, r0, #1
c0d01424:	4610      	mov	r0, r2
c0d01426:	4614      	mov	r4, r2
c0d01428:	3032      	adds	r0, #50	; 0x32
c0d0142a:	463a      	mov	r2, r7
c0d0142c:	f003 f8c1 	bl	c0d045b2 <os_memmove>
                   shortCoinIdLength);
        btchip_context_D.shortCoinIdLength = shortCoinIdLength;
c0d01430:	2038      	movs	r0, #56	; 0x38
c0d01432:	5427      	strb	r7, [r4, r0]
c0d01434:	9f00      	ldr	r7, [sp, #0]
c0d01436:	e000      	b.n	c0d0143a <btchip_apdu_set_alternate_coin_version+0xea>
c0d01438:	4627      	mov	r7, r4
    }

    return BTCHIP_SW_OK;
}
c0d0143a:	b2b8      	uxth	r0, r7
c0d0143c:	b001      	add	sp, #4
c0d0143e:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d01440:	4607      	mov	r7, r0
c0d01442:	e7fa      	b.n	c0d0143a <btchip_apdu_set_alternate_coin_version+0xea>
c0d01444:	20001e6c 	.word	0x20001e6c
c0d01448:	c0d08980 	.word	0xc0d08980
c0d0144c:	00006982 	.word	0x00006982
c0d01450:	20001c24 	.word	0x20001c24
c0d01454:	20001874 	.word	0x20001874

c0d01458 <btchip_apdu_set_operation_mode>:

#define P1_DISABLE_KEYCARD 0x00
#define P1_ENABLE_KEYCARD 0x01
#define P1_ENABLE_KEYCARD_PERMANENTLY 0x02

unsigned short btchip_apdu_set_operation_mode() {
c0d01458:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d0145a:	b081      	sub	sp, #4
c0d0145c:	2067      	movs	r0, #103	; 0x67
c0d0145e:	0206      	lsls	r6, r0, #8
    unsigned char operationMode;

    if (G_io_apdu_buffer[ISO_OFFSET_LC] != 0x01) {
c0d01460:	4d23      	ldr	r5, [pc, #140]	; (c0d014f0 <btchip_apdu_set_operation_mode+0x98>)
c0d01462:	7928      	ldrb	r0, [r5, #4]
c0d01464:	2801      	cmp	r0, #1
c0d01466:	d13f      	bne.n	c0d014e8 <btchip_apdu_set_operation_mode+0x90>
        return BTCHIP_SW_INCORRECT_LENGTH;
    }

    SB_CHECK(N_btchip.bkp.config.operationMode);
c0d01468:	4c22      	ldr	r4, [pc, #136]	; (c0d014f4 <btchip_apdu_set_operation_mode+0x9c>)
c0d0146a:	4620      	mov	r0, r4
c0d0146c:	f004 fb46 	bl	c0d05afc <pic>
c0d01470:	8880      	ldrh	r0, [r0, #4]
c0d01472:	f000 fef2 	bl	c0d0225a <sbCheck>
    if ((SB_GET(N_btchip.bkp.config.operationMode) ==
c0d01476:	4620      	mov	r0, r4
c0d01478:	f004 fb40 	bl	c0d05afc <pic>
c0d0147c:	7900      	ldrb	r0, [r0, #4]
c0d0147e:	4f1e      	ldr	r7, [pc, #120]	; (c0d014f8 <btchip_apdu_set_operation_mode+0xa0>)
         BTCHIP_MODE_SETUP_NEEDED) ||
c0d01480:	28ff      	cmp	r0, #255	; 0xff
c0d01482:	d030      	beq.n	c0d014e6 <btchip_apdu_set_operation_mode+0x8e>
        (SB_GET(N_btchip.bkp.config.operationMode) == BTCHIP_MODE_ISSUER)) {
c0d01484:	481b      	ldr	r0, [pc, #108]	; (c0d014f4 <btchip_apdu_set_operation_mode+0x9c>)
c0d01486:	f004 fb39 	bl	c0d05afc <pic>
c0d0148a:	7900      	ldrb	r0, [r0, #4]
    if (G_io_apdu_buffer[ISO_OFFSET_LC] != 0x01) {
        return BTCHIP_SW_INCORRECT_LENGTH;
    }

    SB_CHECK(N_btchip.bkp.config.operationMode);
    if ((SB_GET(N_btchip.bkp.config.operationMode) ==
c0d0148c:	2800      	cmp	r0, #0
c0d0148e:	d02a      	beq.n	c0d014e6 <btchip_apdu_set_operation_mode+0x8e>
c0d01490:	1efe      	subs	r6, r7, #3
         BTCHIP_MODE_SETUP_NEEDED) ||
        (SB_GET(N_btchip.bkp.config.operationMode) == BTCHIP_MODE_ISSUER)) {
        return BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
    }

    if (!os_global_pin_is_validated()) {
c0d01492:	f004 fdcb 	bl	c0d0602c <os_global_pin_is_validated>
c0d01496:	2800      	cmp	r0, #0
c0d01498:	d026      	beq.n	c0d014e8 <btchip_apdu_set_operation_mode+0x90>
        return BTCHIP_SW_SECURITY_STATUS_NOT_SATISFIED;
    }
    operationMode = G_io_apdu_buffer[ISO_OFFSET_CDATA];
c0d0149a:	796c      	ldrb	r4, [r5, #5]

    if (operationMode == BTCHIP_MODE_WALLET) {
    }

    if (operationMode == SB_GET(N_btchip.bkp.config.operationMode)) {
c0d0149c:	4815      	ldr	r0, [pc, #84]	; (c0d014f4 <btchip_apdu_set_operation_mode+0x9c>)
c0d0149e:	f004 fb2d 	bl	c0d05afc <pic>
c0d014a2:	2109      	movs	r1, #9
c0d014a4:	030d      	lsls	r5, r1, #12
c0d014a6:	7900      	ldrb	r0, [r0, #4]
c0d014a8:	4284      	cmp	r4, r0
c0d014aa:	d01a      	beq.n	c0d014e2 <btchip_apdu_set_operation_mode+0x8a>
c0d014ac:	463e      	mov	r6, r7
c0d014ae:	36fb      	adds	r6, #251	; 0xfb
        return BTCHIP_SW_OK;
    }

    switch (operationMode) {
c0d014b0:	2c08      	cmp	r4, #8
c0d014b2:	d819      	bhi.n	c0d014e8 <btchip_apdu_set_operation_mode+0x90>
c0d014b4:	2001      	movs	r0, #1
c0d014b6:	40a0      	lsls	r0, r4
c0d014b8:	218b      	movs	r1, #139	; 0x8b
c0d014ba:	0049      	lsls	r1, r1, #1
c0d014bc:	4208      	tst	r0, r1
c0d014be:	d013      	beq.n	c0d014e8 <btchip_apdu_set_operation_mode+0x90>
        break;
    default:
        return BTCHIP_SW_INCORRECT_DATA;
    }

    SB_CHECK(N_btchip.bkp.config.supportedModes);
c0d014c0:	4e0c      	ldr	r6, [pc, #48]	; (c0d014f4 <btchip_apdu_set_operation_mode+0x9c>)
c0d014c2:	4630      	mov	r0, r6
c0d014c4:	f004 fb1a 	bl	c0d05afc <pic>
c0d014c8:	8840      	ldrh	r0, [r0, #2]
c0d014ca:	f000 fec6 	bl	c0d0225a <sbCheck>
    if ((SB_GET(N_btchip.bkp.config.supportedModes) & operationMode) == 0) {
c0d014ce:	4630      	mov	r0, r6
c0d014d0:	f004 fb14 	bl	c0d05afc <pic>
c0d014d4:	8840      	ldrh	r0, [r0, #2]
c0d014d6:	4220      	tst	r0, r4
c0d014d8:	463e      	mov	r6, r7
c0d014da:	d005      	beq.n	c0d014e8 <btchip_apdu_set_operation_mode+0x90>
        return BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
    }

    // commit new operation
    btchip_set_operation_mode(operationMode);
c0d014dc:	4620      	mov	r0, r4
c0d014de:	f000 fc59 	bl	c0d01d94 <btchip_set_operation_mode>
c0d014e2:	462e      	mov	r6, r5
c0d014e4:	e000      	b.n	c0d014e8 <btchip_apdu_set_operation_mode+0x90>
c0d014e6:	463e      	mov	r6, r7

    return BTCHIP_SW_OK;
}
c0d014e8:	b2b0      	uxth	r0, r6
c0d014ea:	b001      	add	sp, #4
c0d014ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d014ee:	46c0      	nop			; (mov r8, r8)
c0d014f0:	20001e6c 	.word	0x20001e6c
c0d014f4:	c0d08980 	.word	0xc0d08980
c0d014f8:	00006985 	.word	0x00006985

c0d014fc <btchip_apdu_setup>:

#include "btchip_internal.h"
#include "btchip_apdu_constants.h"

unsigned short btchip_apdu_setup() {
    return BTCHIP_SW_INS_NOT_SUPPORTED;
c0d014fc:	206d      	movs	r0, #109	; 0x6d
c0d014fe:	0200      	lsls	r0, r0, #8
c0d01500:	4770      	bx	lr
	...

c0d01504 <btchip_autosetup>:
}

// Setup with WALLET mode only, deterministic signatures only
void btchip_autosetup() {
c0d01504:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d01506:	b08b      	sub	sp, #44	; 0x2c
c0d01508:	ad09      	add	r5, sp, #36	; 0x24
c0d0150a:	2100      	movs	r1, #0
c0d0150c:	2606      	movs	r6, #6
    btchip_config_t config;
    unsigned char i;
    unsigned char tmp[32];
    os_memset(&config, 0, sizeof(btchip_config_t));
c0d0150e:	4628      	mov	r0, r5
c0d01510:	4632      	mov	r2, r6
c0d01512:	f003 f845 	bl	c0d045a0 <os_memset>
    config.options |= BTCHIP_OPTION_DETERMINISTIC_SIGNATURE;
    config.options |= BTCHIP_OPTION_SKIP_2FA_P2SH; // TODO : remove when
c0d01516:	200a      	movs	r0, #10
void btchip_autosetup() {
    btchip_config_t config;
    unsigned char i;
    unsigned char tmp[32];
    os_memset(&config, 0, sizeof(btchip_config_t));
    config.options |= BTCHIP_OPTION_DETERMINISTIC_SIGNATURE;
c0d01518:	990a      	ldr	r1, [sp, #40]	; 0x28
    config.options |= BTCHIP_OPTION_SKIP_2FA_P2SH; // TODO : remove when
c0d0151a:	4301      	orrs	r1, r0
c0d0151c:	7129      	strb	r1, [r5, #4]
c0d0151e:	2401      	movs	r4, #1
                                                   // supporting multi output
    SB_SET(config.supportedModes, BTCHIP_MODE_WALLET);
c0d01520:	4628      	mov	r0, r5
c0d01522:	4621      	mov	r1, r4
c0d01524:	f000 fe92 	bl	c0d0224c <sbSet>
c0d01528:	2002      	movs	r0, #2
    SB_SET(config.operationMode, BTCHIP_MODE_WALLET);
c0d0152a:	4328      	orrs	r0, r5
c0d0152c:	4621      	mov	r1, r4
c0d0152e:	f000 fe8d 	bl	c0d0224c <sbSet>
    // os_memmove(config.coinId, PIC(G_coin_config->coinid),
    // config.coinIdLength);
    // config.shortCoinIdLength = strlen(PIC(G_coin_config->name_short));
    // os_memmove(config.shortCoinId, PIC(G_coin_config->name_short),
    // config.shortCoinIdLength);
    nvm_write((void *)&N_btchip.bkp.config, &config, sizeof(config));
c0d01532:	4f11      	ldr	r7, [pc, #68]	; (c0d01578 <btchip_autosetup+0x74>)
c0d01534:	4638      	mov	r0, r7
c0d01536:	f004 fae1 	bl	c0d05afc <pic>
c0d0153a:	1c80      	adds	r0, r0, #2
c0d0153c:	4629      	mov	r1, r5
c0d0153e:	4632      	mov	r2, r6
c0d01540:	f004 fc5c 	bl	c0d05dfc <nvm_write>
c0d01544:	466d      	mov	r5, sp
    cx_rng(tmp, sizeof(tmp));
c0d01546:	2620      	movs	r6, #32
c0d01548:	4628      	mov	r0, r5
c0d0154a:	4631      	mov	r1, r6
c0d0154c:	f004 fc6c 	bl	c0d05e28 <cx_rng>
    nvm_write((void *)&N_btchip.bkp.trustedinput_key, tmp, sizeof(tmp));
c0d01550:	4638      	mov	r0, r7
c0d01552:	f004 fad3 	bl	c0d05afc <pic>
c0d01556:	3008      	adds	r0, #8
c0d01558:	4629      	mov	r1, r5
c0d0155a:	4632      	mov	r2, r6
c0d0155c:	f004 fc4e 	bl	c0d05dfc <nvm_write>
c0d01560:	ad08      	add	r5, sp, #32
    i = 1;
c0d01562:	702c      	strb	r4, [r5, #0]
    nvm_write((void *)&N_btchip.config_valid, &i, 1);
c0d01564:	4638      	mov	r0, r7
c0d01566:	f004 fac9 	bl	c0d05afc <pic>
c0d0156a:	1c40      	adds	r0, r0, #1
c0d0156c:	4629      	mov	r1, r5
c0d0156e:	4622      	mov	r2, r4
c0d01570:	f004 fc44 	bl	c0d05dfc <nvm_write>
}
c0d01574:	b00b      	add	sp, #44	; 0x2c
c0d01576:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d01578:	c0d08980 	.word	0xc0d08980

c0d0157c <checkBitId>:

//#define SLIP_13 0x8000000D

unsigned short btchip_compute_hash(void);

unsigned char checkBitId(unsigned char *bip32Path) {
c0d0157c:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d0157e:	b081      	sub	sp, #4
    unsigned char i;
    unsigned char bip32PathLength = bip32Path[0];
c0d01580:	7801      	ldrb	r1, [r0, #0]
c0d01582:	2500      	movs	r5, #0
c0d01584:	9100      	str	r1, [sp, #0]
    if ((bip32PathLength != 0) && (btchip_read_u32(bip32Path, 1, 0) == SLIP_13))
    {
        return BITID_MULTIPLE;
    }
    */
    for (i = 0; i < bip32PathLength; i++) {
c0d01586:	2900      	cmp	r1, #0
c0d01588:	d018      	beq.n	c0d015bc <checkBitId+0x40>
unsigned short btchip_compute_hash(void);

unsigned char checkBitId(unsigned char *bip32Path) {
    unsigned char i;
    unsigned char bip32PathLength = bip32Path[0];
    bip32Path++;
c0d0158a:	1c44      	adds	r4, r0, #1
c0d0158c:	2700      	movs	r7, #0
c0d0158e:	2501      	movs	r5, #1
c0d01590:	2600      	movs	r6, #0
    {
        return BITID_MULTIPLE;
    }
    */
    for (i = 0; i < bip32PathLength; i++) {
        unsigned short account = btchip_read_u32(bip32Path, 1, 0);
c0d01592:	4620      	mov	r0, r4
c0d01594:	4629      	mov	r1, r5
c0d01596:	4632      	mov	r2, r6
c0d01598:	f000 fd0c 	bl	c0d01fb4 <btchip_read_u32>
        bip32Path += 4;

        if (account == BITID_DERIVE) {
c0d0159c:	b280      	uxth	r0, r0
c0d0159e:	4909      	ldr	r1, [pc, #36]	; (c0d015c4 <checkBitId+0x48>)
c0d015a0:	4288      	cmp	r0, r1
c0d015a2:	d00b      	beq.n	c0d015bc <checkBitId+0x40>
c0d015a4:	4908      	ldr	r1, [pc, #32]	; (c0d015c8 <checkBitId+0x4c>)
c0d015a6:	4288      	cmp	r0, r1
c0d015a8:	d007      	beq.n	c0d015ba <checkBitId+0x3e>
        return BITID_MULTIPLE;
    }
    */
    for (i = 0; i < bip32PathLength; i++) {
        unsigned short account = btchip_read_u32(bip32Path, 1, 0);
        bip32Path += 4;
c0d015aa:	1d24      	adds	r4, r4, #4
    if ((bip32PathLength != 0) && (btchip_read_u32(bip32Path, 1, 0) == SLIP_13))
    {
        return BITID_MULTIPLE;
    }
    */
    for (i = 0; i < bip32PathLength; i++) {
c0d015ac:	1c7f      	adds	r7, r7, #1
c0d015ae:	b2f8      	uxtb	r0, r7
c0d015b0:	9900      	ldr	r1, [sp, #0]
c0d015b2:	4288      	cmp	r0, r1
c0d015b4:	4635      	mov	r5, r6
c0d015b6:	d3ea      	bcc.n	c0d0158e <checkBitId+0x12>
c0d015b8:	e000      	b.n	c0d015bc <checkBitId+0x40>
c0d015ba:	2502      	movs	r5, #2
        if (account == BITID_DERIVE_MULTIPLE) {
            return BITID_MULTIPLE;
        }
    }
    return BITID_NONE;
}
c0d015bc:	b2e8      	uxtb	r0, r5
c0d015be:	b001      	add	sp, #4
c0d015c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d015c2:	46c0      	nop			; (mov r8, r8)
c0d015c4:	0000b11d 	.word	0x0000b11d
c0d015c8:	0000b11e 	.word	0x0000b11e

c0d015cc <btchip_apdu_sign_message_internal>:

// TODO : support longer messages

unsigned short btchip_apdu_sign_message_internal() {
c0d015cc:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d015ce:	b097      	sub	sp, #92	; 0x5c
    unsigned short sw = BTCHIP_SW_OK;
    unsigned char p1 = G_io_apdu_buffer[ISO_OFFSET_P1];
c0d015d0:	4aa3      	ldr	r2, [pc, #652]	; (c0d01860 <btchip_apdu_sign_message_internal+0x294>)
c0d015d2:	7897      	ldrb	r7, [r2, #2]
    unsigned char p2 = G_io_apdu_buffer[ISO_OFFSET_P2];
    unsigned char apduLength = G_io_apdu_buffer[ISO_OFFSET_LC];
    unsigned short offset = ISO_OFFSET_CDATA;

    if ((p1 != P1_PREPARE) && (p1 != P1_SIGN)) {
c0d015d4:	2080      	movs	r0, #128	; 0x80
c0d015d6:	4338      	orrs	r0, r7
c0d015d8:	216b      	movs	r1, #107	; 0x6b
c0d015da:	020c      	lsls	r4, r1, #8
c0d015dc:	2880      	cmp	r0, #128	; 0x80
c0d015de:	d000      	beq.n	c0d015e2 <btchip_apdu_sign_message_internal+0x16>
c0d015e0:	e114      	b.n	c0d0180c <btchip_apdu_sign_message_internal+0x240>

unsigned short btchip_apdu_sign_message_internal() {
    unsigned short sw = BTCHIP_SW_OK;
    unsigned char p1 = G_io_apdu_buffer[ISO_OFFSET_P1];
    unsigned char p2 = G_io_apdu_buffer[ISO_OFFSET_P2];
    unsigned char apduLength = G_io_apdu_buffer[ISO_OFFSET_LC];
c0d015e2:	7910      	ldrb	r0, [r2, #4]
// TODO : support longer messages

unsigned short btchip_apdu_sign_message_internal() {
    unsigned short sw = BTCHIP_SW_OK;
    unsigned char p1 = G_io_apdu_buffer[ISO_OFFSET_P1];
    unsigned char p2 = G_io_apdu_buffer[ISO_OFFSET_P2];
c0d015e4:	9008      	str	r0, [sp, #32]
c0d015e6:	78d5      	ldrb	r5, [r2, #3]
    unsigned short offset = ISO_OFFSET_CDATA;

    if ((p1 != P1_PREPARE) && (p1 != P1_SIGN)) {
        return BTCHIP_SW_INCORRECT_P1_P2;
    }
    if (p1 == P1_PREPARE) {
c0d015e8:	2f00      	cmp	r7, #0
c0d015ea:	d104      	bne.n	c0d015f6 <btchip_apdu_sign_message_internal+0x2a>
c0d015ec:	2d02      	cmp	r5, #2
c0d015ee:	d302      	bcc.n	c0d015f6 <btchip_apdu_sign_message_internal+0x2a>
c0d015f0:	2d80      	cmp	r5, #128	; 0x80
c0d015f2:	d000      	beq.n	c0d015f6 <btchip_apdu_sign_message_internal+0x2a>
c0d015f4:	e10a      	b.n	c0d0180c <btchip_apdu_sign_message_internal+0x240>
c0d015f6:	20d5      	movs	r0, #213	; 0xd5
c0d015f8:	01c6      	lsls	r6, r0, #7
c0d015fa:	4634      	mov	r4, r6
c0d015fc:	3cfe      	subs	r4, #254	; 0xfe
        if ((p2 != P2_FIRST) && (p2 != P2_OTHER) && (p2 != P2_LEGACY)) {
            return BTCHIP_SW_INCORRECT_P1_P2;
        }
    }

    if (!os_global_pin_is_validated()) {
c0d015fe:	f004 fd15 	bl	c0d0602c <os_global_pin_is_validated>
c0d01602:	2800      	cmp	r0, #0
c0d01604:	d100      	bne.n	c0d01608 <btchip_apdu_sign_message_internal+0x3c>
c0d01606:	e101      	b.n	c0d0180c <btchip_apdu_sign_message_internal+0x240>
c0d01608:	9609      	str	r6, [sp, #36]	; 0x24
c0d0160a:	ae0c      	add	r6, sp, #48	; 0x30
        return BTCHIP_SW_SECURITY_STATUS_NOT_SATISFIED;
    }

    BEGIN_TRY {
        TRY {
c0d0160c:	4630      	mov	r0, r6
c0d0160e:	f006 f951 	bl	c0d078b4 <setjmp>
c0d01612:	8530      	strh	r0, [r6, #40]	; 0x28
c0d01614:	4993      	ldr	r1, [pc, #588]	; (c0d01864 <btchip_apdu_sign_message_internal+0x298>)
c0d01616:	4208      	tst	r0, r1
c0d01618:	d005      	beq.n	c0d01626 <btchip_apdu_sign_message_internal+0x5a>
c0d0161a:	a80c      	add	r0, sp, #48	; 0x30
                    CLOSE_TRY;
                    return BTCHIP_SW_OK;
                }
            }
        }
        CATCH_ALL {
c0d0161c:	2100      	movs	r1, #0
c0d0161e:	8501      	strh	r1, [r0, #40]	; 0x28
c0d01620:	206f      	movs	r0, #111	; 0x6f
c0d01622:	0204      	lsls	r4, r0, #8
c0d01624:	e0e1      	b.n	c0d017ea <btchip_apdu_sign_message_internal+0x21e>
c0d01626:	a80c      	add	r0, sp, #48	; 0x30
    if (!os_global_pin_is_validated()) {
        return BTCHIP_SW_SECURITY_STATUS_NOT_SATISFIED;
    }

    BEGIN_TRY {
        TRY {
c0d01628:	f002 ff0f 	bl	c0d0444a <try_context_set>
c0d0162c:	2009      	movs	r0, #9
c0d0162e:	0304      	lsls	r4, r0, #12
            if (p1 == P1_PREPARE) {
c0d01630:	2f00      	cmp	r7, #0
c0d01632:	d015      	beq.n	c0d01660 <btchip_apdu_sign_message_internal+0x94>
                    } else {
                        btchip_context_D.outLength = 1;
                    }
                }
            } else {
                if ((btchip_context_D.transactionSummary.messageLength == 0) ||
c0d01634:	488c      	ldr	r0, [pc, #560]	; (c0d01868 <btchip_apdu_sign_message_internal+0x29c>)
c0d01636:	4d8d      	ldr	r5, [pc, #564]	; (c0d0186c <btchip_apdu_sign_message_internal+0x2a0>)
c0d01638:	5a28      	ldrh	r0, [r5, r0]
                    (btchip_context_D.hashedMessageLength !=
c0d0163a:	212b      	movs	r1, #43	; 0x2b
c0d0163c:	0109      	lsls	r1, r1, #4
                    } else {
                        btchip_context_D.outLength = 1;
                    }
                }
            } else {
                if ((btchip_context_D.transactionSummary.messageLength == 0) ||
c0d0163e:	2800      	cmp	r0, #0
c0d01640:	d100      	bne.n	c0d01644 <btchip_apdu_sign_message_internal+0x78>
c0d01642:	e0cd      	b.n	c0d017e0 <btchip_apdu_sign_message_internal+0x214>
                    (btchip_context_D.hashedMessageLength !=
c0d01644:	5a69      	ldrh	r1, [r5, r1]
c0d01646:	4281      	cmp	r1, r0
c0d01648:	d000      	beq.n	c0d0164c <btchip_apdu_sign_message_internal+0x80>
c0d0164a:	e0c9      	b.n	c0d017e0 <btchip_apdu_sign_message_internal+0x214>
                    L_DEBUG_APP(("Invalid length to sign\n"));
                    sw = BTCHIP_SW_INCORRECT_DATA;
                    CLOSE_TRY;
                    goto discard;
                }
                if (checkBitId(btchip_context_D.transactionSummary.summarydata
c0d0164c:	4888      	ldr	r0, [pc, #544]	; (c0d01870 <btchip_apdu_sign_message_internal+0x2a4>)
c0d0164e:	1828      	adds	r0, r5, r0
c0d01650:	f7ff ff94 	bl	c0d0157c <checkBitId>
c0d01654:	2800      	cmp	r0, #0
c0d01656:	d062      	beq.n	c0d0171e <btchip_apdu_sign_message_internal+0x152>
                                   .keyPath) != BITID_NONE) {
                    sw = btchip_compute_hash();
c0d01658:	f000 f914 	bl	c0d01884 <btchip_compute_hash>
c0d0165c:	4604      	mov	r4, r0
c0d0165e:	e0cc      	b.n	c0d017fa <btchip_apdu_sign_message_internal+0x22e>
    }

    BEGIN_TRY {
        TRY {
            if (p1 == P1_PREPARE) {
                if ((p2 == P2_FIRST) || (p2 == P2_LEGACY)) {
c0d01660:	2d01      	cmp	r5, #1
c0d01662:	d82a      	bhi.n	c0d016ba <btchip_apdu_sign_message_internal+0xee>
                    unsigned char chunkLength;
                    unsigned char messageLength[3];
                    unsigned char messageLengthSize;
                    os_memset(&btchip_context_D.transactionSummary, 0,
c0d01664:	2043      	movs	r0, #67	; 0x43
c0d01666:	00c0      	lsls	r0, r0, #3
c0d01668:	4f80      	ldr	r7, [pc, #512]	; (c0d0186c <btchip_apdu_sign_message_internal+0x2a0>)
c0d0166a:	1838      	adds	r0, r7, r0
c0d0166c:	2600      	movs	r6, #0
c0d0166e:	2298      	movs	r2, #152	; 0x98
c0d01670:	4631      	mov	r1, r6
c0d01672:	f002 ff95 	bl	c0d045a0 <os_memset>
c0d01676:	4a7a      	ldr	r2, [pc, #488]	; (c0d01860 <btchip_apdu_sign_message_internal+0x294>)
                              sizeof(btchip_transaction_summary_t));
                    if (G_io_apdu_buffer[offset] > MAX_BIP32_PATH) {
c0d01678:	7950      	ldrb	r0, [r2, #5]
c0d0167a:	280b      	cmp	r0, #11
c0d0167c:	d300      	bcc.n	c0d01680 <btchip_apdu_sign_message_internal+0xb4>
c0d0167e:	e0af      	b.n	c0d017e0 <btchip_apdu_sign_message_internal+0x214>
                        sw = BTCHIP_SW_INCORRECT_DATA;
                        CLOSE_TRY;
                        goto discard;
                    }
                    btchip_context_D.transactionSummary.payToAddressVersion =
                        btchip_context_D.payToAddressVersion;
c0d01680:	2020      	movs	r0, #32
c0d01682:	5c38      	ldrb	r0, [r7, r0]
                        L_DEBUG_APP(("Invalid path\n"));
                        sw = BTCHIP_SW_INCORRECT_DATA;
                        CLOSE_TRY;
                        goto discard;
                    }
                    btchip_context_D.transactionSummary.payToAddressVersion =
c0d01684:	497c      	ldr	r1, [pc, #496]	; (c0d01878 <btchip_apdu_sign_message_internal+0x2ac>)
c0d01686:	5478      	strb	r0, [r7, r1]
                        btchip_context_D.payToAddressVersion;
                    btchip_context_D.transactionSummary.payToScriptHashVersion =
                        btchip_context_D.payToScriptHashVersion;
c0d01688:	2022      	movs	r0, #34	; 0x22
c0d0168a:	5c38      	ldrb	r0, [r7, r0]
                        CLOSE_TRY;
                        goto discard;
                    }
                    btchip_context_D.transactionSummary.payToAddressVersion =
                        btchip_context_D.payToAddressVersion;
                    btchip_context_D.transactionSummary.payToScriptHashVersion =
c0d0168c:	497b      	ldr	r1, [pc, #492]	; (c0d0187c <btchip_apdu_sign_message_internal+0x2b0>)
c0d0168e:	5478      	strb	r0, [r7, r1]
                        btchip_context_D.payToScriptHashVersion;
                    os_memmove(
c0d01690:	4877      	ldr	r0, [pc, #476]	; (c0d01870 <btchip_apdu_sign_message_internal+0x2a4>)
c0d01692:	1838      	adds	r0, r7, r0
c0d01694:	1d51      	adds	r1, r2, #5
c0d01696:	4617      	mov	r7, r2
c0d01698:	2229      	movs	r2, #41	; 0x29
c0d0169a:	f002 ff8a 	bl	c0d045b2 <os_memmove>
                        btchip_context_D.transactionSummary.summarydata.keyPath,
                        G_io_apdu_buffer + offset, MAX_BIP32_PATH_LENGTH);
                    offset += (4 * G_io_apdu_buffer[offset]) + 1;
c0d0169e:	7978      	ldrb	r0, [r7, #5]
c0d016a0:	0080      	lsls	r0, r0, #2
c0d016a2:	2301      	movs	r3, #1
c0d016a4:	4318      	orrs	r0, r3
                    }
                    btchip_context_D.transactionSummary.payToAddressVersion =
                        btchip_context_D.payToAddressVersion;
                    btchip_context_D.transactionSummary.payToScriptHashVersion =
                        btchip_context_D.payToScriptHashVersion;
                    os_memmove(
c0d016a6:	183a      	adds	r2, r7, r0
c0d016a8:	7951      	ldrb	r1, [r2, #5]
                        btchip_context_D.transactionSummary.summarydata.keyPath,
                        G_io_apdu_buffer + offset, MAX_BIP32_PATH_LENGTH);
                    offset += (4 * G_io_apdu_buffer[offset]) + 1;
                    if (p2 == P2_LEGACY) {
c0d016aa:	2d00      	cmp	r5, #0
c0d016ac:	9306      	str	r3, [sp, #24]
c0d016ae:	d03d      	beq.n	c0d0172c <btchip_apdu_sign_message_internal+0x160>
                            G_io_apdu_buffer[offset];
                        offset++;
                    } else {
                        btchip_context_D.transactionSummary.messageLength =
                            (G_io_apdu_buffer[offset] << 8) |
                            (G_io_apdu_buffer[offset + 1]);
c0d016b0:	7992      	ldrb	r2, [r2, #6]
                        btchip_context_D.transactionSummary.messageLength =
                            G_io_apdu_buffer[offset];
                        offset++;
                    } else {
                        btchip_context_D.transactionSummary.messageLength =
                            (G_io_apdu_buffer[offset] << 8) |
c0d016b2:	0209      	lsls	r1, r1, #8
c0d016b4:	4311      	orrs	r1, r2
c0d016b6:	2207      	movs	r2, #7
c0d016b8:	e039      	b.n	c0d0172e <btchip_apdu_sign_message_internal+0x162>
                    } else {
                        btchip_context_D.outLength = 1;
                    }
                } else {
                    if ((btchip_context_D.hashedMessageLength + apduLength) >
                        btchip_context_D.transactionSummary.messageLength) {
c0d016ba:	486b      	ldr	r0, [pc, #428]	; (c0d01868 <btchip_apdu_sign_message_internal+0x29c>)
                        btchip_context_D.outLength = 2;
                    } else {
                        btchip_context_D.outLength = 1;
                    }
                } else {
                    if ((btchip_context_D.hashedMessageLength + apduLength) >
c0d016bc:	4a6b      	ldr	r2, [pc, #428]	; (c0d0186c <btchip_apdu_sign_message_internal+0x2a0>)
                        btchip_context_D.transactionSummary.messageLength) {
c0d016be:	5a10      	ldrh	r0, [r2, r0]
                        btchip_context_D.outLength = 2;
                    } else {
                        btchip_context_D.outLength = 1;
                    }
                } else {
                    if ((btchip_context_D.hashedMessageLength + apduLength) >
c0d016c0:	212b      	movs	r1, #43	; 0x2b
c0d016c2:	010d      	lsls	r5, r1, #4
c0d016c4:	5b51      	ldrh	r1, [r2, r5]
c0d016c6:	9e08      	ldr	r6, [sp, #32]
c0d016c8:	1989      	adds	r1, r1, r6
c0d016ca:	4281      	cmp	r1, r0
c0d016cc:	d900      	bls.n	c0d016d0 <btchip_apdu_sign_message_internal+0x104>
c0d016ce:	e087      	b.n	c0d017e0 <btchip_apdu_sign_message_internal+0x214>
c0d016d0:	2700      	movs	r7, #0
                        L_DEBUG_APP(("Invalid data length\n"));
                        sw = BTCHIP_SW_INCORRECT_DATA;
                        CLOSE_TRY;
                        goto discard;
                    }
                    cx_hash(&btchip_context_D.transactionHashFull.header, 0,
c0d016d2:	4668      	mov	r0, sp
c0d016d4:	6007      	str	r7, [r0, #0]
c0d016d6:	4610      	mov	r0, r2
c0d016d8:	303c      	adds	r0, #60	; 0x3c
c0d016da:	4961      	ldr	r1, [pc, #388]	; (c0d01860 <btchip_apdu_sign_message_internal+0x294>)
c0d016dc:	1d4a      	adds	r2, r1, #5
c0d016de:	9202      	str	r2, [sp, #8]
c0d016e0:	4639      	mov	r1, r7
c0d016e2:	4633      	mov	r3, r6
c0d016e4:	f001 fb96 	bl	c0d02e14 <cx_hash_X>
                            G_io_apdu_buffer + offset, apduLength, NULL);
                    cx_hash(
c0d016e8:	4668      	mov	r0, sp
c0d016ea:	6007      	str	r7, [r0, #0]
c0d016ec:	485f      	ldr	r0, [pc, #380]	; (c0d0186c <btchip_apdu_sign_message_internal+0x2a0>)
c0d016ee:	30a8      	adds	r0, #168	; 0xa8
c0d016f0:	4639      	mov	r1, r7
c0d016f2:	9a02      	ldr	r2, [sp, #8]
c0d016f4:	4633      	mov	r3, r6
c0d016f6:	f001 fb8d 	bl	c0d02e14 <cx_hash_X>
                        &btchip_context_D.transactionHashAuthorization.header,
                        0, G_io_apdu_buffer + offset, apduLength, NULL);
                    btchip_context_D.hashedMessageLength += apduLength;
c0d016fa:	485c      	ldr	r0, [pc, #368]	; (c0d0186c <btchip_apdu_sign_message_internal+0x2a0>)
c0d016fc:	5b40      	ldrh	r0, [r0, r5]
c0d016fe:	1980      	adds	r0, r0, r6
c0d01700:	4b5a      	ldr	r3, [pc, #360]	; (c0d0186c <btchip_apdu_sign_message_internal+0x2a0>)
c0d01702:	5358      	strh	r0, [r3, r5]
c0d01704:	4d56      	ldr	r5, [pc, #344]	; (c0d01860 <btchip_apdu_sign_message_internal+0x294>)
                    G_io_apdu_buffer[0] = 0x00;
c0d01706:	702f      	strb	r7, [r5, #0]
                    if (btchip_context_D.hashedMessageLength ==
                        btchip_context_D.transactionSummary.messageLength) {
c0d01708:	4957      	ldr	r1, [pc, #348]	; (c0d01868 <btchip_apdu_sign_message_internal+0x29c>)
c0d0170a:	5a59      	ldrh	r1, [r3, r1]
                    cx_hash(&btchip_context_D.transactionHashFull.header, 0,
                            G_io_apdu_buffer + offset, apduLength, NULL);
                    cx_hash(
                        &btchip_context_D.transactionHashAuthorization.header,
                        0, G_io_apdu_buffer + offset, apduLength, NULL);
                    btchip_context_D.hashedMessageLength += apduLength;
c0d0170c:	b282      	uxth	r2, r0
c0d0170e:	2001      	movs	r0, #1
                    G_io_apdu_buffer[0] = 0x00;
                    if (btchip_context_D.hashedMessageLength ==
c0d01710:	4291      	cmp	r1, r2
c0d01712:	d101      	bne.n	c0d01718 <btchip_apdu_sign_message_internal+0x14c>
                        btchip_context_D.transactionSummary.messageLength) {
                        G_io_apdu_buffer[1] = 0x00;
c0d01714:	706f      	strb	r7, [r5, #1]
c0d01716:	2002      	movs	r0, #2
c0d01718:	4956      	ldr	r1, [pc, #344]	; (c0d01874 <btchip_apdu_sign_message_internal+0x2a8>)
c0d0171a:	5258      	strh	r0, [r3, r1]
c0d0171c:	e06d      	b.n	c0d017fa <btchip_apdu_sign_message_internal+0x22e>
                }
                if (checkBitId(btchip_context_D.transactionSummary.summarydata
                                   .keyPath) != BITID_NONE) {
                    sw = btchip_compute_hash();
                } else {
                    btchip_context_D.io_flags |= IO_ASYNCH_REPLY;
c0d0171e:	2021      	movs	r0, #33	; 0x21
c0d01720:	0100      	lsls	r0, r0, #4
c0d01722:	5c29      	ldrb	r1, [r5, r0]
c0d01724:	2210      	movs	r2, #16
c0d01726:	430a      	orrs	r2, r1
c0d01728:	542a      	strb	r2, [r5, r0]
c0d0172a:	e06b      	b.n	c0d01804 <btchip_apdu_sign_message_internal+0x238>
c0d0172c:	2206      	movs	r2, #6
c0d0172e:	4f4f      	ldr	r7, [pc, #316]	; (c0d0186c <btchip_apdu_sign_message_internal+0x2a0>)
c0d01730:	4b4d      	ldr	r3, [pc, #308]	; (c0d01868 <btchip_apdu_sign_message_internal+0x29c>)
c0d01732:	52f9      	strh	r1, [r7, r3]
c0d01734:	1810      	adds	r0, r2, r0
                        btchip_context_D.transactionSummary.messageLength =
                            (G_io_apdu_buffer[offset] << 8) |
                            (G_io_apdu_buffer[offset + 1]);
                        offset += 2;
                    }
                    if (btchip_context_D.transactionSummary.messageLength ==
c0d01736:	2900      	cmp	r1, #0
c0d01738:	d052      	beq.n	c0d017e0 <btchip_apdu_sign_message_internal+0x214>
c0d0173a:	9007      	str	r0, [sp, #28]
                        L_DEBUG_APP(("Null message length\n"));
                        sw = BTCHIP_SW_INCORRECT_DATA;
                        CLOSE_TRY;
                        goto discard;
                    }
                    btchip_context_D.hashedMessageLength = 0;
c0d0173c:	202b      	movs	r0, #43	; 0x2b
c0d0173e:	0100      	lsls	r0, r0, #4
c0d01740:	9004      	str	r0, [sp, #16]
c0d01742:	523e      	strh	r6, [r7, r0]
                    cx_sha256_init(&btchip_context_D.transactionHashFull);
c0d01744:	463d      	mov	r5, r7
c0d01746:	353c      	adds	r5, #60	; 0x3c
c0d01748:	4628      	mov	r0, r5
c0d0174a:	f004 fbb7 	bl	c0d05ebc <cx_sha256_init>
                    cx_sha256_init(
c0d0174e:	4638      	mov	r0, r7
c0d01750:	30a8      	adds	r0, #168	; 0xa8
c0d01752:	9005      	str	r0, [sp, #20]
c0d01754:	f004 fbb2 	bl	c0d05ebc <cx_sha256_init>
                        &btchip_context_D.transactionHashAuthorization);
                    chunkLength =
                        btchip_context_D.coinIdLength + SIGNMAGIC_LENGTH;
c0d01758:	2037      	movs	r0, #55	; 0x37
c0d0175a:	9003      	str	r0, [sp, #12]
c0d0175c:	5c38      	ldrb	r0, [r7, r0]
c0d0175e:	3011      	adds	r0, #17
c0d01760:	aa0b      	add	r2, sp, #44	; 0x2c
                    }
                    btchip_context_D.hashedMessageLength = 0;
                    cx_sha256_init(&btchip_context_D.transactionHashFull);
                    cx_sha256_init(
                        &btchip_context_D.transactionHashAuthorization);
                    chunkLength =
c0d01762:	7010      	strb	r0, [r2, #0]
                        btchip_context_D.coinIdLength + SIGNMAGIC_LENGTH;
                    cx_hash(&btchip_context_D.transactionHashFull.header, 0,
c0d01764:	4668      	mov	r0, sp
c0d01766:	6006      	str	r6, [r0, #0]
c0d01768:	4628      	mov	r0, r5
c0d0176a:	4631      	mov	r1, r6
c0d0176c:	9b06      	ldr	r3, [sp, #24]
c0d0176e:	f001 fb51 	bl	c0d02e14 <cx_hash_X>
                            &chunkLength, 1, NULL);
                    cx_hash(&btchip_context_D.transactionHashFull.header, 0,
c0d01772:	9803      	ldr	r0, [sp, #12]
c0d01774:	5c3b      	ldrb	r3, [r7, r0]
c0d01776:	4668      	mov	r0, sp
c0d01778:	6006      	str	r6, [r0, #0]
c0d0177a:	463a      	mov	r2, r7
c0d0177c:	3225      	adds	r2, #37	; 0x25
c0d0177e:	4628      	mov	r0, r5
c0d01780:	4631      	mov	r1, r6
c0d01782:	f001 fb47 	bl	c0d02e14 <cx_hash_X>
                            btchip_context_D.coinId,
                            btchip_context_D.coinIdLength, NULL);
                    cx_hash(&btchip_context_D.transactionHashFull.header, 0,
c0d01786:	4668      	mov	r0, sp
c0d01788:	6006      	str	r6, [r0, #0]
c0d0178a:	4a3d      	ldr	r2, [pc, #244]	; (c0d01880 <btchip_apdu_sign_message_internal+0x2b4>)
c0d0178c:	447a      	add	r2, pc
                    btchip_context_D.hashedMessageLength = 0;
                    cx_sha256_init(&btchip_context_D.transactionHashFull);
                    cx_sha256_init(
                        &btchip_context_D.transactionHashAuthorization);
                    chunkLength =
                        btchip_context_D.coinIdLength + SIGNMAGIC_LENGTH;
c0d0178e:	2311      	movs	r3, #17
                    cx_hash(&btchip_context_D.transactionHashFull.header, 0,
                            &chunkLength, 1, NULL);
                    cx_hash(&btchip_context_D.transactionHashFull.header, 0,
                            btchip_context_D.coinId,
                            btchip_context_D.coinIdLength, NULL);
                    cx_hash(&btchip_context_D.transactionHashFull.header, 0,
c0d01790:	4628      	mov	r0, r5
c0d01792:	4631      	mov	r1, r6
c0d01794:	f001 fb3e 	bl	c0d02e14 <cx_hash_X>
c0d01798:	9b06      	ldr	r3, [sp, #24]
                            (unsigned char *)SIGNMAGIC, SIGNMAGIC_LENGTH, NULL);
                    if (btchip_context_D.transactionSummary.messageLength <
c0d0179a:	4833      	ldr	r0, [pc, #204]	; (c0d01868 <btchip_apdu_sign_message_internal+0x29c>)
c0d0179c:	5a38      	ldrh	r0, [r7, r0]
c0d0179e:	28fd      	cmp	r0, #253	; 0xfd
c0d017a0:	4631      	mov	r1, r6
c0d017a2:	d306      	bcc.n	c0d017b2 <btchip_apdu_sign_message_internal+0x1e6>
c0d017a4:	a90a      	add	r1, sp, #40	; 0x28
                        0xfd) {
                        messageLength[0] =
                            btchip_context_D.transactionSummary.messageLength;
                        messageLengthSize = 1;
                    } else {
                        messageLength[0] = 0xfd;
c0d017a6:	22fd      	movs	r2, #253	; 0xfd
c0d017a8:	700a      	strb	r2, [r1, #0]
                        messageLength[1] =
c0d017aa:	7048      	strb	r0, [r1, #1]
                            (btchip_context_D.transactionSummary.messageLength &
                             0xff);
                        messageLength[2] = ((btchip_context_D.transactionSummary
c0d017ac:	0a00      	lsrs	r0, r0, #8
c0d017ae:	2303      	movs	r3, #3
c0d017b0:	2102      	movs	r1, #2
c0d017b2:	aa0a      	add	r2, sp, #40	; 0x28
c0d017b4:	5450      	strb	r0, [r2, r1]
                                                 .messageLength >>
                                             8) &
                                            0xff);
                        messageLengthSize = 3;
                    }
                    cx_hash(&btchip_context_D.transactionHashFull.header, 0,
c0d017b6:	4668      	mov	r0, sp
c0d017b8:	6006      	str	r6, [r0, #0]
c0d017ba:	4628      	mov	r0, r5
c0d017bc:	4631      	mov	r1, r6
c0d017be:	f001 fb29 	bl	c0d02e14 <cx_hash_X>
c0d017c2:	9808      	ldr	r0, [sp, #32]
                            messageLength, messageLengthSize, NULL);
                    chunkLength = apduLength - (offset - ISO_OFFSET_CDATA);
c0d017c4:	38fb      	subs	r0, #251	; 0xfb
c0d017c6:	462e      	mov	r6, r5
c0d017c8:	9d07      	ldr	r5, [sp, #28]
c0d017ca:	1b40      	subs	r0, r0, r5
c0d017cc:	a90b      	add	r1, sp, #44	; 0x2c
c0d017ce:	7008      	strb	r0, [r1, #0]
c0d017d0:	9a04      	ldr	r2, [sp, #16]
                    if ((btchip_context_D.hashedMessageLength + chunkLength) >
c0d017d2:	5ab9      	ldrh	r1, [r7, r2]
c0d017d4:	b2c3      	uxtb	r3, r0
c0d017d6:	18c8      	adds	r0, r1, r3
                        btchip_context_D.transactionSummary.messageLength) {
c0d017d8:	4923      	ldr	r1, [pc, #140]	; (c0d01868 <btchip_apdu_sign_message_internal+0x29c>)
c0d017da:	5a79      	ldrh	r1, [r7, r1]
                        messageLengthSize = 3;
                    }
                    cx_hash(&btchip_context_D.transactionHashFull.header, 0,
                            messageLength, messageLengthSize, NULL);
                    chunkLength = apduLength - (offset - ISO_OFFSET_CDATA);
                    if ((btchip_context_D.hashedMessageLength + chunkLength) >
c0d017dc:	4288      	cmp	r0, r1
c0d017de:	d918      	bls.n	c0d01812 <btchip_apdu_sign_message_internal+0x246>
c0d017e0:	f002 ffa2 	bl	c0d04728 <try_context_get_previous>
c0d017e4:	f002 fe31 	bl	c0d0444a <try_context_set>
c0d017e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
        }
        CATCH_ALL {
            sw = SW_TECHNICAL_DETAILS(0x0F);
        }
    discard : {
        os_memset(&btchip_context_D.transactionSummary, 0,
c0d017ea:	2043      	movs	r0, #67	; 0x43
c0d017ec:	00c0      	lsls	r0, r0, #3
c0d017ee:	491f      	ldr	r1, [pc, #124]	; (c0d0186c <btchip_apdu_sign_message_internal+0x2a0>)
c0d017f0:	1808      	adds	r0, r1, r0
c0d017f2:	2100      	movs	r1, #0
c0d017f4:	2298      	movs	r2, #152	; 0x98
c0d017f6:	f002 fed3 	bl	c0d045a0 <os_memset>
                  sizeof(btchip_transaction_summary_t));
    }
        FINALLY {
c0d017fa:	f002 ff93 	bl	c0d04724 <try_context_get>
c0d017fe:	a90c      	add	r1, sp, #48	; 0x30
c0d01800:	4288      	cmp	r0, r1
c0d01802:	d103      	bne.n	c0d0180c <btchip_apdu_sign_message_internal+0x240>
c0d01804:	f002 ff90 	bl	c0d04728 <try_context_get_previous>
c0d01808:	f002 fe1f 	bl	c0d0444a <try_context_set>
            return sw;
        }
    }
    END_TRY;
}
c0d0180c:	b2a0      	uxth	r0, r4
c0d0180e:	b017      	add	sp, #92	; 0x5c
c0d01810:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d01812:	4631      	mov	r1, r6
c0d01814:	2600      	movs	r6, #0
                        L_DEBUG_APP(("Invalid data length\n"));
                        sw = BTCHIP_SW_INCORRECT_DATA;
                        CLOSE_TRY;
                        goto discard;
                    }
                    cx_hash(&btchip_context_D.transactionHashFull.header, 0,
c0d01816:	4668      	mov	r0, sp
c0d01818:	6006      	str	r6, [r0, #0]
c0d0181a:	4811      	ldr	r0, [pc, #68]	; (c0d01860 <btchip_apdu_sign_message_internal+0x294>)
c0d0181c:	1947      	adds	r7, r0, r5
c0d0181e:	4608      	mov	r0, r1
c0d01820:	4631      	mov	r1, r6
c0d01822:	463a      	mov	r2, r7
c0d01824:	f001 faf6 	bl	c0d02e14 <cx_hash_X>
c0d01828:	ad0b      	add	r5, sp, #44	; 0x2c
                            G_io_apdu_buffer + offset, chunkLength, NULL);
                    cx_hash(
c0d0182a:	782b      	ldrb	r3, [r5, #0]
c0d0182c:	4668      	mov	r0, sp
c0d0182e:	6006      	str	r6, [r0, #0]
c0d01830:	9805      	ldr	r0, [sp, #20]
c0d01832:	4631      	mov	r1, r6
c0d01834:	463a      	mov	r2, r7
c0d01836:	4f0d      	ldr	r7, [pc, #52]	; (c0d0186c <btchip_apdu_sign_message_internal+0x2a0>)
c0d01838:	f001 faec 	bl	c0d02e14 <cx_hash_X>
c0d0183c:	4b08      	ldr	r3, [pc, #32]	; (c0d01860 <btchip_apdu_sign_message_internal+0x294>)
c0d0183e:	9a04      	ldr	r2, [sp, #16]
                        &btchip_context_D.transactionHashAuthorization.header,
                        0, G_io_apdu_buffer + offset, chunkLength, NULL);
                    btchip_context_D.hashedMessageLength += chunkLength;
c0d01840:	5ab8      	ldrh	r0, [r7, r2]
c0d01842:	7829      	ldrb	r1, [r5, #0]
c0d01844:	1840      	adds	r0, r0, r1
c0d01846:	52b8      	strh	r0, [r7, r2]
                    G_io_apdu_buffer[0] = 0x00;
c0d01848:	701e      	strb	r6, [r3, #0]
                    if (btchip_context_D.hashedMessageLength ==
                        btchip_context_D.transactionSummary.messageLength) {
c0d0184a:	4907      	ldr	r1, [pc, #28]	; (c0d01868 <btchip_apdu_sign_message_internal+0x29c>)
c0d0184c:	5a79      	ldrh	r1, [r7, r1]
                    cx_hash(&btchip_context_D.transactionHashFull.header, 0,
                            G_io_apdu_buffer + offset, chunkLength, NULL);
                    cx_hash(
                        &btchip_context_D.transactionHashAuthorization.header,
                        0, G_io_apdu_buffer + offset, chunkLength, NULL);
                    btchip_context_D.hashedMessageLength += chunkLength;
c0d0184e:	b282      	uxth	r2, r0
c0d01850:	2001      	movs	r0, #1
                    G_io_apdu_buffer[0] = 0x00;
                    if (btchip_context_D.hashedMessageLength ==
c0d01852:	4291      	cmp	r1, r2
c0d01854:	d101      	bne.n	c0d0185a <btchip_apdu_sign_message_internal+0x28e>
                        btchip_context_D.transactionSummary.messageLength) {
                        G_io_apdu_buffer[1] = 0x00;
c0d01856:	705e      	strb	r6, [r3, #1]
c0d01858:	2002      	movs	r0, #2
c0d0185a:	4906      	ldr	r1, [pc, #24]	; (c0d01874 <btchip_apdu_sign_message_internal+0x2a8>)
c0d0185c:	5278      	strh	r0, [r7, r1]
c0d0185e:	e7cc      	b.n	c0d017fa <btchip_apdu_sign_message_internal+0x22e>
c0d01860:	20001e6c 	.word	0x20001e6c
c0d01864:	0000ffff 	.word	0x0000ffff
c0d01868:	000002ae 	.word	0x000002ae
c0d0186c:	20001874 	.word	0x20001874
c0d01870:	00000285 	.word	0x00000285
c0d01874:	0000020e 	.word	0x0000020e
c0d01878:	00000219 	.word	0x00000219
c0d0187c:	0000021a 	.word	0x0000021a
c0d01880:	00006270 	.word	0x00006270

c0d01884 <btchip_compute_hash>:
        btchip_bagl_confirm_message_signature();
    }
    return sw;
}

unsigned short btchip_compute_hash() {
c0d01884:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d01886:	b097      	sub	sp, #92	; 0x5c
    unsigned char hash[32];
    unsigned short sw = BTCHIP_SW_OK;
    btchip_context_D.outLength = 0;
c0d01888:	4832      	ldr	r0, [pc, #200]	; (c0d01954 <btchip_compute_hash+0xd0>)
c0d0188a:	4e33      	ldr	r6, [pc, #204]	; (c0d01958 <btchip_compute_hash+0xd4>)
c0d0188c:	2500      	movs	r5, #0
c0d0188e:	5235      	strh	r5, [r6, r0]
c0d01890:	ac04      	add	r4, sp, #16
    BEGIN_TRY {
        TRY {
c0d01892:	4620      	mov	r0, r4
c0d01894:	f006 f80e 	bl	c0d078b4 <setjmp>
c0d01898:	8520      	strh	r0, [r4, #40]	; 0x28
c0d0189a:	4930      	ldr	r1, [pc, #192]	; (c0d0195c <btchip_compute_hash+0xd8>)
c0d0189c:	4208      	tst	r0, r1
c0d0189e:	d004      	beq.n	c0d018aa <btchip_compute_hash+0x26>
c0d018a0:	a804      	add	r0, sp, #16
                G_io_apdu_buffer, 100,                        // OUT
                ((N_btchip.bkp.config.options &
                  BTCHIP_OPTION_DETERMINISTIC_SIGNATURE) != 0));
            btchip_context_D.outLength = G_io_apdu_buffer[1] + 2;
        }
        CATCH_ALL {
c0d018a2:	8505      	strh	r5, [r0, #40]	; 0x28
c0d018a4:	206f      	movs	r0, #111	; 0x6f
c0d018a6:	0204      	lsls	r4, r0, #8
c0d018a8:	e03b      	b.n	c0d01922 <btchip_compute_hash+0x9e>
c0d018aa:	a804      	add	r0, sp, #16
unsigned short btchip_compute_hash() {
    unsigned char hash[32];
    unsigned short sw = BTCHIP_SW_OK;
    btchip_context_D.outLength = 0;
    BEGIN_TRY {
        TRY {
c0d018ac:	f002 fdcd 	bl	c0d0444a <try_context_set>
c0d018b0:	ac0f      	add	r4, sp, #60	; 0x3c
            cx_hash(&btchip_context_D.transactionHashFull.header, CX_LAST, hash,
c0d018b2:	4668      	mov	r0, sp
c0d018b4:	6004      	str	r4, [r0, #0]
c0d018b6:	4e28      	ldr	r6, [pc, #160]	; (c0d01958 <btchip_compute_hash+0xd4>)
c0d018b8:	363c      	adds	r6, #60	; 0x3c
c0d018ba:	2501      	movs	r5, #1
c0d018bc:	2700      	movs	r7, #0
c0d018be:	4630      	mov	r0, r6
c0d018c0:	4629      	mov	r1, r5
c0d018c2:	4622      	mov	r2, r4
c0d018c4:	463b      	mov	r3, r7
c0d018c6:	f001 faa5 	bl	c0d02e14 <cx_hash_X>
                    0, hash);
            cx_sha256_init(&btchip_context_D.transactionHashFull);
c0d018ca:	4630      	mov	r0, r6
c0d018cc:	f004 faf6 	bl	c0d05ebc <cx_sha256_init>
            cx_hash(&btchip_context_D.transactionHashFull.header, CX_LAST, hash,
c0d018d0:	4668      	mov	r0, sp
c0d018d2:	6004      	str	r4, [r0, #0]
c0d018d4:	2320      	movs	r3, #32
c0d018d6:	9303      	str	r3, [sp, #12]
c0d018d8:	4630      	mov	r0, r6
c0d018da:	4629      	mov	r1, r5
c0d018dc:	4622      	mov	r2, r4
c0d018de:	f001 fa99 	bl	c0d02e14 <cx_hash_X>
                    32, hash);
            btchip_private_derive_keypair(
c0d018e2:	481f      	ldr	r0, [pc, #124]	; (c0d01960 <btchip_compute_hash+0xdc>)
c0d018e4:	491c      	ldr	r1, [pc, #112]	; (c0d01958 <btchip_compute_hash+0xd4>)
c0d018e6:	1808      	adds	r0, r1, r0
c0d018e8:	4639      	mov	r1, r7
c0d018ea:	463a      	mov	r2, r7
c0d018ec:	f000 fc4d 	bl	c0d0218a <btchip_private_derive_keypair>
                btchip_context_D.transactionSummary.summarydata.keyPath, 0,
                NULL);
            btchip_signverify_finalhash(
                &btchip_private_key_D, 1, hash, sizeof(hash), // IN
                G_io_apdu_buffer, 100,                        // OUT
                ((N_btchip.bkp.config.options &
c0d018f0:	481c      	ldr	r0, [pc, #112]	; (c0d01964 <btchip_compute_hash+0xe0>)
c0d018f2:	f004 f903 	bl	c0d05afc <pic>
c0d018f6:	7980      	ldrb	r0, [r0, #6]
c0d018f8:	0840      	lsrs	r0, r0, #1
c0d018fa:	4028      	ands	r0, r5
            cx_hash(&btchip_context_D.transactionHashFull.header, CX_LAST, hash,
                    32, hash);
            btchip_private_derive_keypair(
                btchip_context_D.transactionSummary.summarydata.keyPath, 0,
                NULL);
            btchip_signverify_finalhash(
c0d018fc:	4669      	mov	r1, sp
c0d018fe:	6088      	str	r0, [r1, #8]
c0d01900:	2064      	movs	r0, #100	; 0x64
c0d01902:	6048      	str	r0, [r1, #4]
c0d01904:	4e18      	ldr	r6, [pc, #96]	; (c0d01968 <btchip_compute_hash+0xe4>)
c0d01906:	600e      	str	r6, [r1, #0]
c0d01908:	4818      	ldr	r0, [pc, #96]	; (c0d0196c <btchip_compute_hash+0xe8>)
c0d0190a:	4629      	mov	r1, r5
c0d0190c:	4622      	mov	r2, r4
c0d0190e:	9b03      	ldr	r3, [sp, #12]
c0d01910:	f000 fc70 	bl	c0d021f4 <btchip_signverify_finalhash>
                &btchip_private_key_D, 1, hash, sizeof(hash), // IN
                G_io_apdu_buffer, 100,                        // OUT
                ((N_btchip.bkp.config.options &
                  BTCHIP_OPTION_DETERMINISTIC_SIGNATURE) != 0));
            btchip_context_D.outLength = G_io_apdu_buffer[1] + 2;
c0d01914:	7870      	ldrb	r0, [r6, #1]
c0d01916:	4e10      	ldr	r6, [pc, #64]	; (c0d01958 <btchip_compute_hash+0xd4>)
c0d01918:	1c80      	adds	r0, r0, #2
c0d0191a:	490e      	ldr	r1, [pc, #56]	; (c0d01954 <btchip_compute_hash+0xd0>)
c0d0191c:	5270      	strh	r0, [r6, r1]
c0d0191e:	2009      	movs	r0, #9
c0d01920:	0304      	lsls	r4, r0, #12
        }
        CATCH_ALL {
            sw = SW_TECHNICAL_DETAILS(0x0F);
        }
        FINALLY {
c0d01922:	f002 feff 	bl	c0d04724 <try_context_get>
c0d01926:	a904      	add	r1, sp, #16
c0d01928:	4288      	cmp	r0, r1
c0d0192a:	d103      	bne.n	c0d01934 <btchip_compute_hash+0xb0>
c0d0192c:	f002 fefc 	bl	c0d04728 <try_context_get_previous>
c0d01930:	f002 fd8b 	bl	c0d0444a <try_context_set>
            os_memset(&btchip_context_D.transactionSummary, 0,
c0d01934:	2043      	movs	r0, #67	; 0x43
c0d01936:	00c0      	lsls	r0, r0, #3
c0d01938:	1830      	adds	r0, r6, r0
c0d0193a:	2100      	movs	r1, #0
c0d0193c:	2298      	movs	r2, #152	; 0x98
c0d0193e:	f002 fe2f 	bl	c0d045a0 <os_memset>
c0d01942:	a804      	add	r0, sp, #16
                      sizeof(btchip_transaction_summary_t));
        }
    }
    END_TRY;
c0d01944:	8d00      	ldrh	r0, [r0, #40]	; 0x28
c0d01946:	2800      	cmp	r0, #0
c0d01948:	d102      	bne.n	c0d01950 <btchip_compute_hash+0xcc>
    return sw;
c0d0194a:	4620      	mov	r0, r4
c0d0194c:	b017      	add	sp, #92	; 0x5c
c0d0194e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FINALLY {
            os_memset(&btchip_context_D.transactionSummary, 0,
                      sizeof(btchip_transaction_summary_t));
        }
    }
    END_TRY;
c0d01950:	f002 fee3 	bl	c0d0471a <os_longjmp>
c0d01954:	0000020e 	.word	0x0000020e
c0d01958:	20001874 	.word	0x20001874
c0d0195c:	0000ffff 	.word	0x0000ffff
c0d01960:	00000285 	.word	0x00000285
c0d01964:	c0d08980 	.word	0xc0d08980
c0d01968:	20001e6c 	.word	0x20001e6c
c0d0196c:	2000184c 	.word	0x2000184c

c0d01970 <btchip_apdu_sign_message>:
        }
    }
    END_TRY;
}

unsigned short btchip_apdu_sign_message() {
c0d01970:	b5b0      	push	{r4, r5, r7, lr}
    unsigned short sw = btchip_apdu_sign_message_internal();
    if (btchip_context_D.io_flags & IO_ASYNCH_REPLY) {
c0d01972:	2021      	movs	r0, #33	; 0x21
c0d01974:	0105      	lsls	r5, r0, #4
    }
    END_TRY;
}

unsigned short btchip_apdu_sign_message() {
    unsigned short sw = btchip_apdu_sign_message_internal();
c0d01976:	f7ff fe29 	bl	c0d015cc <btchip_apdu_sign_message_internal>
c0d0197a:	4604      	mov	r4, r0
    if (btchip_context_D.io_flags & IO_ASYNCH_REPLY) {
c0d0197c:	4803      	ldr	r0, [pc, #12]	; (c0d0198c <btchip_apdu_sign_message+0x1c>)
c0d0197e:	5d40      	ldrb	r0, [r0, r5]
c0d01980:	06c0      	lsls	r0, r0, #27
c0d01982:	d501      	bpl.n	c0d01988 <btchip_apdu_sign_message+0x18>
        btchip_bagl_confirm_message_signature();
c0d01984:	f002 fc74 	bl	c0d04270 <btchip_bagl_confirm_message_signature>
    }
    return sw;
c0d01988:	4620      	mov	r0, r4
c0d0198a:	bdb0      	pop	{r4, r5, r7, pc}
c0d0198c:	20001874 	.word	0x20001874

c0d01990 <btchip_bagl_user_action_message_signing>:
    }
    END_TRY;
    return sw;
}

void btchip_bagl_user_action_message_signing(unsigned char confirming) {
c0d01990:	b5b0      	push	{r4, r5, r7, lr}
c0d01992:	4601      	mov	r1, r0
c0d01994:	2269      	movs	r2, #105	; 0x69
c0d01996:	2085      	movs	r0, #133	; 0x85
    unsigned short sw;
    if (confirming) {
c0d01998:	2900      	cmp	r1, #0
c0d0199a:	d002      	beq.n	c0d019a2 <btchip_bagl_user_action_message_signing+0x12>
        sw = btchip_compute_hash();
c0d0199c:	f7ff ff72 	bl	c0d01884 <btchip_compute_hash>
    } else {
c0d019a0:	0a02      	lsrs	r2, r0, #8
        sw = BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
    }
    G_io_apdu_buffer[btchip_context_D.outLength++] = sw >> 8;
c0d019a2:	4907      	ldr	r1, [pc, #28]	; (c0d019c0 <btchip_bagl_user_action_message_signing+0x30>)
c0d019a4:	4b07      	ldr	r3, [pc, #28]	; (c0d019c4 <btchip_bagl_user_action_message_signing+0x34>)
c0d019a6:	5a5c      	ldrh	r4, [r3, r1]
c0d019a8:	4d07      	ldr	r5, [pc, #28]	; (c0d019c8 <btchip_bagl_user_action_message_signing+0x38>)
c0d019aa:	552a      	strb	r2, [r5, r4]
    G_io_apdu_buffer[btchip_context_D.outLength++] = sw;
c0d019ac:	1ca2      	adds	r2, r4, #2
c0d019ae:	525a      	strh	r2, [r3, r1]
    if (confirming) {
        sw = btchip_compute_hash();
    } else {
        sw = BTCHIP_SW_CONDITIONS_OF_USE_NOT_SATISFIED;
    }
    G_io_apdu_buffer[btchip_context_D.outLength++] = sw >> 8;
c0d019b0:	1c61      	adds	r1, r4, #1
    G_io_apdu_buffer[btchip_context_D.outLength++] = sw;
c0d019b2:	b289      	uxth	r1, r1
c0d019b4:	5468      	strb	r0, [r5, r1]

    io_exchange(CHANNEL_APDU | IO_RETURN_AFTER_TX, btchip_context_D.outLength);
c0d019b6:	b291      	uxth	r1, r2
c0d019b8:	2020      	movs	r0, #32
c0d019ba:	f003 f9ff 	bl	c0d04dbc <io_exchange>
}
c0d019be:	bdb0      	pop	{r4, r5, r7, pc}
c0d019c0:	0000020e 	.word	0x0000020e
c0d019c4:	20001874 	.word	0x20001874
c0d019c8:	20001e6c 	.word	0x20001e6c

c0d019cc <btchip_apdu_verify_pin>:

#include "btchip_internal.h"
#include "btchip_apdu_constants.h"

unsigned short btchip_apdu_verify_pin() {
    return BTCHIP_SW_INS_NOT_SUPPORTED;
c0d019cc:	206d      	movs	r0, #109	; 0x6d
c0d019ce:	0200      	lsls	r0, r0, #8
c0d019d0:	4770      	bx	lr
	...

c0d019d4 <btchip_encode_base58>:
    return length;
}

unsigned char btchip_encode_base58(unsigned char WIDE *in, unsigned char length,
                                   unsigned char *out,
                                   unsigned char maxoutlen) {
c0d019d4:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d019d6:	b0b7      	sub	sp, #220	; 0xdc
c0d019d8:	461d      	mov	r5, r3
c0d019da:	4614      	mov	r4, r2
c0d019dc:	460f      	mov	r7, r1
c0d019de:	4601      	mov	r1, r0
    unsigned char tmp[25];
    unsigned char buffer[164];
    unsigned char j;
    unsigned char startAt;
    unsigned char zeroCount = 0;
    if (length > sizeof(tmp)) {
c0d019e0:	2f1a      	cmp	r7, #26
c0d019e2:	d279      	bcs.n	c0d01ad8 <btchip_encode_base58+0x104>
c0d019e4:	a830      	add	r0, sp, #192	; 0xc0
        THROW(INVALID_PARAMETER);
    }
    os_memmove(tmp, in, length);
c0d019e6:	463a      	mov	r2, r7
c0d019e8:	f002 fde3 	bl	c0d045b2 <os_memmove>
c0d019ec:	2200      	movs	r2, #0
    L_DEBUG_APP(("Length to encode %d\n", length));
    L_DEBUG_BUF(("To encode\n", tmp, length));
    while ((zeroCount < length) && (tmp[zeroCount] == 0)) {
c0d019ee:	2f00      	cmp	r7, #0
c0d019f0:	d009      	beq.n	c0d01a06 <btchip_encode_base58+0x32>
c0d019f2:	2200      	movs	r2, #0
c0d019f4:	b2d0      	uxtb	r0, r2
c0d019f6:	a930      	add	r1, sp, #192	; 0xc0
c0d019f8:	5c08      	ldrb	r0, [r1, r0]
c0d019fa:	2800      	cmp	r0, #0
c0d019fc:	d103      	bne.n	c0d01a06 <btchip_encode_base58+0x32>
        ++zeroCount;
c0d019fe:	1c52      	adds	r2, r2, #1
c0d01a00:	b2d0      	uxtb	r0, r2
        THROW(INVALID_PARAMETER);
    }
    os_memmove(tmp, in, length);
    L_DEBUG_APP(("Length to encode %d\n", length));
    L_DEBUG_BUF(("To encode\n", tmp, length));
    while ((zeroCount < length) && (tmp[zeroCount] == 0)) {
c0d01a02:	42b8      	cmp	r0, r7
c0d01a04:	d3f6      	bcc.n	c0d019f4 <btchip_encode_base58+0x20>
c0d01a06:	9504      	str	r5, [sp, #16]
c0d01a08:	9401      	str	r4, [sp, #4]
        ++zeroCount;
    }
    j = 2 * length;
c0d01a0a:	0078      	lsls	r0, r7, #1
c0d01a0c:	9203      	str	r2, [sp, #12]
    startAt = zeroCount;
    while (startAt < length) {
c0d01a0e:	b2d5      	uxtb	r5, r2
c0d01a10:	42bd      	cmp	r5, r7
c0d01a12:	9002      	str	r0, [sp, #8]
c0d01a14:	4604      	mov	r4, r0
c0d01a16:	d22a      	bcs.n	c0d01a6e <btchip_encode_base58+0x9a>
c0d01a18:	9c02      	ldr	r4, [sp, #8]
c0d01a1a:	9e03      	ldr	r6, [sp, #12]
c0d01a1c:	9705      	str	r7, [sp, #20]
c0d01a1e:	9406      	str	r4, [sp, #24]
        unsigned short remainder = 0;
        unsigned char divLoop;
        for (divLoop = startAt; divLoop < length; divLoop++) {
c0d01a20:	b2f0      	uxtb	r0, r6
c0d01a22:	2100      	movs	r1, #0
c0d01a24:	42b8      	cmp	r0, r7
c0d01a26:	d20f      	bcs.n	c0d01a48 <btchip_encode_base58+0x74>
c0d01a28:	9905      	ldr	r1, [sp, #20]
c0d01a2a:	1a0f      	subs	r7, r1, r0
c0d01a2c:	a930      	add	r1, sp, #192	; 0xc0
c0d01a2e:	180c      	adds	r4, r1, r0
c0d01a30:	2100      	movs	r1, #0
            unsigned short digit256 = (unsigned short)(tmp[divLoop] & 0xff);
            unsigned short tmpDiv = remainder * 256 + digit256;
c0d01a32:	0209      	lsls	r1, r1, #8
c0d01a34:	7820      	ldrb	r0, [r4, #0]
            tmp[divLoop] = (unsigned char)(tmpDiv / 58);
c0d01a36:	4308      	orrs	r0, r1
c0d01a38:	213a      	movs	r1, #58	; 0x3a
            remainder = (tmpDiv % 58);
c0d01a3a:	f005 fe9f 	bl	c0d0777c <__aeabi_uidivmod>
        unsigned short remainder = 0;
        unsigned char divLoop;
        for (divLoop = startAt; divLoop < length; divLoop++) {
            unsigned short digit256 = (unsigned short)(tmp[divLoop] & 0xff);
            unsigned short tmpDiv = remainder * 256 + digit256;
            tmp[divLoop] = (unsigned char)(tmpDiv / 58);
c0d01a3e:	7020      	strb	r0, [r4, #0]
    j = 2 * length;
    startAt = zeroCount;
    while (startAt < length) {
        unsigned short remainder = 0;
        unsigned char divLoop;
        for (divLoop = startAt; divLoop < length; divLoop++) {
c0d01a40:	1e7f      	subs	r7, r7, #1
c0d01a42:	1c64      	adds	r4, r4, #1
c0d01a44:	2f00      	cmp	r7, #0
c0d01a46:	d1f4      	bne.n	c0d01a32 <btchip_encode_base58+0x5e>
c0d01a48:	a830      	add	r0, sp, #192	; 0xc0
            unsigned short digit256 = (unsigned short)(tmp[divLoop] & 0xff);
            unsigned short tmpDiv = remainder * 256 + digit256;
            tmp[divLoop] = (unsigned char)(tmpDiv / 58);
            remainder = (tmpDiv % 58);
        }
        if (tmp[startAt] == 0) {
c0d01a4a:	5d42      	ldrb	r2, [r0, r5]
            ++startAt;
        }
        buffer[--j] = (unsigned char)BASE58ALPHABET[remainder];
c0d01a4c:	4825      	ldr	r0, [pc, #148]	; (c0d01ae4 <btchip_encode_base58+0x110>)
c0d01a4e:	4478      	add	r0, pc
c0d01a50:	5c40      	ldrb	r0, [r0, r1]
c0d01a52:	9c06      	ldr	r4, [sp, #24]
c0d01a54:	1e64      	subs	r4, r4, #1
c0d01a56:	b2e1      	uxtb	r1, r4
c0d01a58:	ab07      	add	r3, sp, #28
c0d01a5a:	5458      	strb	r0, [r3, r1]
            unsigned short digit256 = (unsigned short)(tmp[divLoop] & 0xff);
            unsigned short tmpDiv = remainder * 256 + digit256;
            tmp[divLoop] = (unsigned char)(tmpDiv / 58);
            remainder = (tmpDiv % 58);
        }
        if (tmp[startAt] == 0) {
c0d01a5c:	1c70      	adds	r0, r6, #1
c0d01a5e:	2a00      	cmp	r2, #0
c0d01a60:	d000      	beq.n	c0d01a64 <btchip_encode_base58+0x90>
c0d01a62:	4630      	mov	r0, r6
c0d01a64:	b2c5      	uxtb	r5, r0
c0d01a66:	9f05      	ldr	r7, [sp, #20]
    while ((zeroCount < length) && (tmp[zeroCount] == 0)) {
        ++zeroCount;
    }
    j = 2 * length;
    startAt = zeroCount;
    while (startAt < length) {
c0d01a68:	42bd      	cmp	r5, r7
c0d01a6a:	4606      	mov	r6, r0
c0d01a6c:	d3d7      	bcc.n	c0d01a1e <btchip_encode_base58+0x4a>
        if (tmp[startAt] == 0) {
            ++startAt;
        }
        buffer[--j] = (unsigned char)BASE58ALPHABET[remainder];
    }
    while ((j < (2 * length)) && (buffer[j] == BASE58ALPHABET[0])) {
c0d01a6e:	b2e1      	uxtb	r1, r4
c0d01a70:	9f02      	ldr	r7, [sp, #8]
c0d01a72:	42b9      	cmp	r1, r7
c0d01a74:	d20d      	bcs.n	c0d01a92 <btchip_encode_base58+0xbe>
c0d01a76:	481c      	ldr	r0, [pc, #112]	; (c0d01ae8 <btchip_encode_base58+0x114>)
c0d01a78:	4478      	add	r0, pc
c0d01a7a:	7800      	ldrb	r0, [r0, #0]
c0d01a7c:	9b04      	ldr	r3, [sp, #16]
c0d01a7e:	9e03      	ldr	r6, [sp, #12]
c0d01a80:	aa07      	add	r2, sp, #28
c0d01a82:	5c51      	ldrb	r1, [r2, r1]
c0d01a84:	4281      	cmp	r1, r0
c0d01a86:	d106      	bne.n	c0d01a96 <btchip_encode_base58+0xc2>
        ++j;
c0d01a88:	1c64      	adds	r4, r4, #1
        if (tmp[startAt] == 0) {
            ++startAt;
        }
        buffer[--j] = (unsigned char)BASE58ALPHABET[remainder];
    }
    while ((j < (2 * length)) && (buffer[j] == BASE58ALPHABET[0])) {
c0d01a8a:	b2e1      	uxtb	r1, r4
c0d01a8c:	42b9      	cmp	r1, r7
c0d01a8e:	d3f7      	bcc.n	c0d01a80 <btchip_encode_base58+0xac>
c0d01a90:	e001      	b.n	c0d01a96 <btchip_encode_base58+0xc2>
c0d01a92:	9b04      	ldr	r3, [sp, #16]
c0d01a94:	9e03      	ldr	r6, [sp, #12]
        ++j;
    }
    while (zeroCount-- > 0) {
c0d01a96:	0630      	lsls	r0, r6, #24
c0d01a98:	d010      	beq.n	c0d01abc <btchip_encode_base58+0xe8>
c0d01a9a:	4814      	ldr	r0, [pc, #80]	; (c0d01aec <btchip_encode_base58+0x118>)
c0d01a9c:	4478      	add	r0, pc
c0d01a9e:	7800      	ldrb	r0, [r0, #0]
c0d01aa0:	4625      	mov	r5, r4
c0d01aa2:	4621      	mov	r1, r4
c0d01aa4:	4632      	mov	r2, r6
        buffer[--j] = BASE58ALPHABET[0];
c0d01aa6:	1e49      	subs	r1, r1, #1
c0d01aa8:	b2cb      	uxtb	r3, r1
c0d01aaa:	ac07      	add	r4, sp, #28
c0d01aac:	54e0      	strb	r0, [r4, r3]
        buffer[--j] = (unsigned char)BASE58ALPHABET[remainder];
    }
    while ((j < (2 * length)) && (buffer[j] == BASE58ALPHABET[0])) {
        ++j;
    }
    while (zeroCount-- > 0) {
c0d01aae:	1e52      	subs	r2, r2, #1
c0d01ab0:	23ff      	movs	r3, #255	; 0xff
c0d01ab2:	421a      	tst	r2, r3
c0d01ab4:	d1f7      	bne.n	c0d01aa6 <btchip_encode_base58+0xd2>
c0d01ab6:	462c      	mov	r4, r5
c0d01ab8:	1ba4      	subs	r4, r4, r6
c0d01aba:	9b04      	ldr	r3, [sp, #16]
        buffer[--j] = BASE58ALPHABET[0];
    }
    length = 2 * length - j;
c0d01abc:	b2e0      	uxtb	r0, r4
c0d01abe:	1a39      	subs	r1, r7, r0
    if (maxoutlen < length) {
c0d01ac0:	b2ce      	uxtb	r6, r1
c0d01ac2:	42b3      	cmp	r3, r6
c0d01ac4:	d30b      	bcc.n	c0d01ade <btchip_encode_base58+0x10a>
c0d01ac6:	a907      	add	r1, sp, #28
        L_DEBUG_APP(("Encode overflow %d %d\n", length, maxoutlen));
        THROW(EXCEPTION_OVERFLOW);
    }
    os_memmove(out, (buffer + j), length);
c0d01ac8:	1809      	adds	r1, r1, r0
c0d01aca:	9801      	ldr	r0, [sp, #4]
c0d01acc:	4632      	mov	r2, r6
c0d01ace:	f002 fd70 	bl	c0d045b2 <os_memmove>
    L_DEBUG_APP(("Length encoded %d\n", length));
    L_DEBUG_BUF(("Encoded\n", out, length));
    return length;
c0d01ad2:	4630      	mov	r0, r6
c0d01ad4:	b037      	add	sp, #220	; 0xdc
c0d01ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    unsigned char buffer[164];
    unsigned char j;
    unsigned char startAt;
    unsigned char zeroCount = 0;
    if (length > sizeof(tmp)) {
        THROW(INVALID_PARAMETER);
c0d01ad8:	2002      	movs	r0, #2
c0d01ada:	f002 fe1e 	bl	c0d0471a <os_longjmp>
        buffer[--j] = BASE58ALPHABET[0];
    }
    length = 2 * length - j;
    if (maxoutlen < length) {
        L_DEBUG_APP(("Encode overflow %d %d\n", length, maxoutlen));
        THROW(EXCEPTION_OVERFLOW);
c0d01ade:	2003      	movs	r0, #3
c0d01ae0:	f002 fe1b 	bl	c0d0471a <os_longjmp>
c0d01ae4:	00005f74 	.word	0x00005f74
c0d01ae8:	00005f4a 	.word	0x00005f4a
c0d01aec:	00005f26 	.word	0x00005f26

c0d01af0 <btchip_convert_hex_amount_to_displayable>:
#include "btchip_internal.h"

#define SCRATCH_SIZE 21

unsigned char
btchip_convert_hex_amount_to_displayable(unsigned char WIDE *amount) {
c0d01af0:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d01af2:	b095      	sub	sp, #84	; 0x54
c0d01af4:	9002      	str	r0, [sp, #8]
    unsigned char LOOP1;
    unsigned char LOOP2;
    if (!(G_coin_config->flags & FLAG_PEERCOIN_UNITS)) {
c0d01af6:	4863      	ldr	r0, [pc, #396]	; (c0d01c84 <btchip_convert_hex_amount_to_displayable+0x194>)
c0d01af8:	6800      	ldr	r0, [r0, #0]
c0d01afa:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
c0d01afc:	ad0a      	add	r5, sp, #40	; 0x28
    unsigned char nscratch = SCRATCH_SIZE;
    unsigned char smin = nscratch - 2;
    unsigned char comma = 0;

    for (i = 0; i < SCRATCH_SIZE; i++) {
        scratch[i] = 0;
c0d01afe:	212a      	movs	r1, #42	; 0x2a
c0d01b00:	4628      	mov	r0, r5
c0d01b02:	f005 fe41 	bl	c0d07788 <__aeabi_memclr>
c0d01b06:	2002      	movs	r0, #2
    }
    for (i = 0; i < 8; i++) {
c0d01b08:	4305      	orrs	r5, r0
c0d01b0a:	9505      	str	r5, [sp, #20]
    unsigned char LOOP1;
    unsigned char LOOP2;
    if (!(G_coin_config->flags & FLAG_PEERCOIN_UNITS)) {
        LOOP1 = 13;
        LOOP2 = 8;
    } else {
c0d01b0c:	0061      	lsls	r1, r4, #1
c0d01b0e:	4001      	ands	r1, r0
c0d01b10:	220d      	movs	r2, #13
c0d01b12:	430a      	orrs	r2, r1
c0d01b14:	9203      	str	r2, [sp, #12]
c0d01b16:	4041      	eors	r1, r0
c0d01b18:	1d88      	adds	r0, r1, #6
c0d01b1a:	9000      	str	r0, [sp, #0]
c0d01b1c:	2213      	movs	r2, #19
c0d01b1e:	2000      	movs	r0, #0
c0d01b20:	9001      	str	r0, [sp, #4]
c0d01b22:	4601      	mov	r1, r0
c0d01b24:	9802      	ldr	r0, [sp, #8]
c0d01b26:	9104      	str	r1, [sp, #16]
c0d01b28:	5c40      	ldrb	r0, [r0, r1]
c0d01b2a:	9006      	str	r0, [sp, #24]
c0d01b2c:	9901      	ldr	r1, [sp, #4]
    }
    for (i = 0; i < 8; i++) {
        for (j = 0; j < 8; j++) {
            unsigned char k;
            unsigned short shifted_in =
                (((amount[i] & 0xff) & ((1 << (7 - j)))) != 0) ? (short)1
c0d01b2e:	2007      	movs	r0, #7
c0d01b30:	9109      	str	r1, [sp, #36]	; 0x24
c0d01b32:	1a40      	subs	r0, r0, r1
c0d01b34:	2101      	movs	r1, #1
c0d01b36:	9108      	str	r1, [sp, #32]
c0d01b38:	4081      	lsls	r1, r0
c0d01b3a:	9806      	ldr	r0, [sp, #24]
c0d01b3c:	4001      	ands	r1, r0
c0d01b3e:	9107      	str	r1, [sp, #28]
                                                               : (short)0;
            for (k = smin; k < nscratch; k++) {
c0d01b40:	b2d0      	uxtb	r0, r2
c0d01b42:	2814      	cmp	r0, #20
c0d01b44:	d80e      	bhi.n	c0d01b64 <btchip_convert_hex_amount_to_displayable+0x74>
                scratch[k] += ((scratch[k] >= 5) ? 3 : 0);
c0d01b46:	2115      	movs	r1, #21
c0d01b48:	1a0b      	subs	r3, r1, r0
c0d01b4a:	0041      	lsls	r1, r0, #1
c0d01b4c:	ac0a      	add	r4, sp, #40	; 0x28
c0d01b4e:	1865      	adds	r5, r4, r1
c0d01b50:	882c      	ldrh	r4, [r5, #0]
c0d01b52:	1ce1      	adds	r1, r4, #3
c0d01b54:	2c04      	cmp	r4, #4
c0d01b56:	d800      	bhi.n	c0d01b5a <btchip_convert_hex_amount_to_displayable+0x6a>
c0d01b58:	4621      	mov	r1, r4
c0d01b5a:	8029      	strh	r1, [r5, #0]
        for (j = 0; j < 8; j++) {
            unsigned char k;
            unsigned short shifted_in =
                (((amount[i] & 0xff) & ((1 << (7 - j)))) != 0) ? (short)1
                                                               : (short)0;
            for (k = smin; k < nscratch; k++) {
c0d01b5c:	1e5b      	subs	r3, r3, #1
c0d01b5e:	1cad      	adds	r5, r5, #2
c0d01b60:	2b00      	cmp	r3, #0
c0d01b62:	d1f5      	bne.n	c0d01b50 <btchip_convert_hex_amount_to_displayable+0x60>
                scratch[k] += ((scratch[k] >= 5) ? 3 : 0);
            }
            if (scratch[smin] >= 8) {
c0d01b64:	0041      	lsls	r1, r0, #1
c0d01b66:	ab0a      	add	r3, sp, #40	; 0x28
c0d01b68:	5a59      	ldrh	r1, [r3, r1]
                smin -= 1;
c0d01b6a:	30ff      	adds	r0, #255	; 0xff
                (((amount[i] & 0xff) & ((1 << (7 - j)))) != 0) ? (short)1
                                                               : (short)0;
            for (k = smin; k < nscratch; k++) {
                scratch[k] += ((scratch[k] >= 5) ? 3 : 0);
            }
            if (scratch[smin] >= 8) {
c0d01b6c:	2907      	cmp	r1, #7
c0d01b6e:	d800      	bhi.n	c0d01b72 <btchip_convert_hex_amount_to_displayable+0x82>
c0d01b70:	4610      	mov	r0, r2
c0d01b72:	b2c1      	uxtb	r1, r0
                smin -= 1;
            }
            for (k = smin; k < nscratch - 1; k++) {
c0d01b74:	2913      	cmp	r1, #19
c0d01b76:	d817      	bhi.n	c0d01ba8 <btchip_convert_hex_amount_to_displayable+0xb8>
                scratch[k] =
                    ((scratch[k] << 1) & 0xF) | ((scratch[k + 1] >= 8) ? 1 : 0);
c0d01b78:	2214      	movs	r2, #20
c0d01b7a:	1a52      	subs	r2, r2, r1
c0d01b7c:	0049      	lsls	r1, r1, #1
c0d01b7e:	9b05      	ldr	r3, [sp, #20]
c0d01b80:	185b      	adds	r3, r3, r1
c0d01b82:	ac0a      	add	r4, sp, #40	; 0x28
c0d01b84:	5a65      	ldrh	r5, [r4, r1]
c0d01b86:	881e      	ldrh	r6, [r3, #0]
c0d01b88:	2401      	movs	r4, #1
c0d01b8a:	2700      	movs	r7, #0
c0d01b8c:	2e07      	cmp	r6, #7
c0d01b8e:	4621      	mov	r1, r4
c0d01b90:	d800      	bhi.n	c0d01b94 <btchip_convert_hex_amount_to_displayable+0xa4>
c0d01b92:	4639      	mov	r1, r7
c0d01b94:	006d      	lsls	r5, r5, #1
c0d01b96:	270e      	movs	r7, #14
c0d01b98:	402f      	ands	r7, r5
c0d01b9a:	430f      	orrs	r7, r1
c0d01b9c:	43e1      	mvns	r1, r4
            }
            if (scratch[smin] >= 8) {
                smin -= 1;
            }
            for (k = smin; k < nscratch - 1; k++) {
                scratch[k] =
c0d01b9e:	525f      	strh	r7, [r3, r1]
                scratch[k] += ((scratch[k] >= 5) ? 3 : 0);
            }
            if (scratch[smin] >= 8) {
                smin -= 1;
            }
            for (k = smin; k < nscratch - 1; k++) {
c0d01ba0:	1c9b      	adds	r3, r3, #2
c0d01ba2:	1e52      	subs	r2, r2, #1
                scratch[k] =
                    ((scratch[k] << 1) & 0xF) | ((scratch[k + 1] >= 8) ? 1 : 0);
c0d01ba4:	4635      	mov	r5, r6
c0d01ba6:	d1ee      	bne.n	c0d01b86 <btchip_convert_hex_amount_to_displayable+0x96>
c0d01ba8:	9907      	ldr	r1, [sp, #28]
    }
    for (i = 0; i < 8; i++) {
        for (j = 0; j < 8; j++) {
            unsigned char k;
            unsigned short shifted_in =
                (((amount[i] & 0xff) & ((1 << (7 - j)))) != 0) ? (short)1
c0d01baa:	2900      	cmp	r1, #0
c0d01bac:	9b08      	ldr	r3, [sp, #32]
c0d01bae:	d100      	bne.n	c0d01bb2 <btchip_convert_hex_amount_to_displayable+0xc2>
c0d01bb0:	460b      	mov	r3, r1
            }
            for (k = smin; k < nscratch - 1; k++) {
                scratch[k] =
                    ((scratch[k] << 1) & 0xF) | ((scratch[k + 1] >= 8) ? 1 : 0);
            }
            scratch[nscratch - 1] = ((scratch[nscratch - 1] << 1) & 0x0F) |
c0d01bb2:	9914      	ldr	r1, [sp, #80]	; 0x50
c0d01bb4:	0049      	lsls	r1, r1, #1
c0d01bb6:	220e      	movs	r2, #14
c0d01bb8:	400a      	ands	r2, r1
c0d01bba:	431a      	orrs	r2, r3
c0d01bbc:	a90a      	add	r1, sp, #40	; 0x28
c0d01bbe:	850a      	strh	r2, [r1, #40]	; 0x28
c0d01bc0:	9909      	ldr	r1, [sp, #36]	; 0x24

    for (i = 0; i < SCRATCH_SIZE; i++) {
        scratch[i] = 0;
    }
    for (i = 0; i < 8; i++) {
        for (j = 0; j < 8; j++) {
c0d01bc2:	1c49      	adds	r1, r1, #1
c0d01bc4:	2908      	cmp	r1, #8
c0d01bc6:	4602      	mov	r2, r0
c0d01bc8:	d1b1      	bne.n	c0d01b2e <btchip_convert_hex_amount_to_displayable+0x3e>
c0d01bca:	9904      	ldr	r1, [sp, #16]
    unsigned char comma = 0;

    for (i = 0; i < SCRATCH_SIZE; i++) {
        scratch[i] = 0;
    }
    for (i = 0; i < 8; i++) {
c0d01bcc:	1c49      	adds	r1, r1, #1
c0d01bce:	2908      	cmp	r1, #8
c0d01bd0:	4602      	mov	r2, r0
c0d01bd2:	d1a7      	bne.n	c0d01b24 <btchip_convert_hex_amount_to_displayable+0x34>
c0d01bd4:	2100      	movs	r1, #0
c0d01bd6:	4b2c      	ldr	r3, [pc, #176]	; (c0d01c88 <btchip_convert_hex_amount_to_displayable+0x198>)
c0d01bd8:	460c      	mov	r4, r1
c0d01bda:	460a      	mov	r2, r1
c0d01bdc:	460d      	mov	r5, r1
c0d01bde:	b2e0      	uxtb	r0, r4
c0d01be0:	0040      	lsls	r0, r0, #1
c0d01be2:	ae0a      	add	r6, sp, #40	; 0x28
c0d01be4:	5a30      	ldrh	r0, [r6, r0]
                                    (shifted_in == 1 ? 1 : 0);
        }
    }

    for (i = 0; i < LOOP1; i++) {
        if (!nonZero && (scratch[offset] == 0)) {
c0d01be6:	062d      	lsls	r5, r5, #24
c0d01be8:	d103      	bne.n	c0d01bf2 <btchip_convert_hex_amount_to_displayable+0x102>
c0d01bea:	2800      	cmp	r0, #0
c0d01bec:	d101      	bne.n	c0d01bf2 <btchip_convert_hex_amount_to_displayable+0x102>
c0d01bee:	460d      	mov	r5, r1
c0d01bf0:	e007      	b.n	c0d01c02 <btchip_convert_hex_amount_to_displayable+0x112>
            offset++;
        } else {
            nonZero = 1;
            btchip_context_D.tmp[targetOffset++] = scratch[offset++] + '0';
c0d01bf2:	2585      	movs	r5, #133	; 0x85
c0d01bf4:	00ad      	lsls	r5, r5, #2
c0d01bf6:	595d      	ldr	r5, [r3, r5]
c0d01bf8:	b2d6      	uxtb	r6, r2
c0d01bfa:	3030      	adds	r0, #48	; 0x30
c0d01bfc:	55a8      	strb	r0, [r5, r6]
c0d01bfe:	1c52      	adds	r2, r2, #1
c0d01c00:	2501      	movs	r5, #1
c0d01c02:	1c64      	adds	r4, r4, #1
            scratch[nscratch - 1] = ((scratch[nscratch - 1] << 1) & 0x0F) |
                                    (shifted_in == 1 ? 1 : 0);
        }
    }

    for (i = 0; i < LOOP1; i++) {
c0d01c04:	b2e0      	uxtb	r0, r4
c0d01c06:	9e03      	ldr	r6, [sp, #12]
c0d01c08:	42b0      	cmp	r0, r6
c0d01c0a:	d3e8      	bcc.n	c0d01bde <btchip_convert_hex_amount_to_displayable+0xee>
        } else {
            nonZero = 1;
            btchip_context_D.tmp[targetOffset++] = scratch[offset++] + '0';
        }
    }
    if (targetOffset == 0) {
c0d01c0c:	0611      	lsls	r1, r2, #24
c0d01c0e:	d105      	bne.n	c0d01c1c <btchip_convert_hex_amount_to_displayable+0x12c>
        btchip_context_D.tmp[targetOffset++] = '0';
c0d01c10:	2185      	movs	r1, #133	; 0x85
c0d01c12:	0089      	lsls	r1, r1, #2
c0d01c14:	5859      	ldr	r1, [r3, r1]
c0d01c16:	2230      	movs	r2, #48	; 0x30
c0d01c18:	700a      	strb	r2, [r1, #0]
c0d01c1a:	2201      	movs	r2, #1
c0d01c1c:	2100      	movs	r1, #0
c0d01c1e:	9109      	str	r1, [sp, #36]	; 0x24
c0d01c20:	9d00      	ldr	r5, [sp, #0]
    }
    workOffset = offset;
    for (i = 0; i < LOOP2; i++) {
        unsigned char allZero = 1;
        unsigned char j;
        for (j = i; j < LOOP2; j++) {
c0d01c22:	b2cf      	uxtb	r7, r1
c0d01c24:	42af      	cmp	r7, r5
c0d01c26:	460e      	mov	r6, r1
c0d01c28:	d229      	bcs.n	c0d01c7e <btchip_convert_hex_amount_to_displayable+0x18e>
            if (scratch[workOffset + j] != 0) {
c0d01c2a:	183f      	adds	r7, r7, r0
c0d01c2c:	007f      	lsls	r7, r7, #1
c0d01c2e:	ad0a      	add	r5, sp, #40	; 0x28
c0d01c30:	5bed      	ldrh	r5, [r5, r7]
    }
    workOffset = offset;
    for (i = 0; i < LOOP2; i++) {
        unsigned char allZero = 1;
        unsigned char j;
        for (j = i; j < LOOP2; j++) {
c0d01c32:	1c76      	adds	r6, r6, #1
            if (scratch[workOffset + j] != 0) {
c0d01c34:	2d00      	cmp	r5, #0
c0d01c36:	d104      	bne.n	c0d01c42 <btchip_convert_hex_amount_to_displayable+0x152>
    }
    workOffset = offset;
    for (i = 0; i < LOOP2; i++) {
        unsigned char allZero = 1;
        unsigned char j;
        for (j = i; j < LOOP2; j++) {
c0d01c38:	b2f7      	uxtb	r7, r6
c0d01c3a:	9d00      	ldr	r5, [sp, #0]
c0d01c3c:	42af      	cmp	r7, r5
c0d01c3e:	d3f4      	bcc.n	c0d01c2a <btchip_convert_hex_amount_to_displayable+0x13a>
c0d01c40:	e01d      	b.n	c0d01c7e <btchip_convert_hex_amount_to_displayable+0x18e>
            }
        }
        if (allZero) {
            break;
        }
        if (!comma) {
c0d01c42:	9d09      	ldr	r5, [sp, #36]	; 0x24
c0d01c44:	062d      	lsls	r5, r5, #24
c0d01c46:	d108      	bne.n	c0d01c5a <btchip_convert_hex_amount_to_displayable+0x16a>
            btchip_context_D.tmp[targetOffset++] = '.';
c0d01c48:	2585      	movs	r5, #133	; 0x85
c0d01c4a:	00ad      	lsls	r5, r5, #2
c0d01c4c:	595d      	ldr	r5, [r3, r5]
c0d01c4e:	b2d6      	uxtb	r6, r2
c0d01c50:	272e      	movs	r7, #46	; 0x2e
c0d01c52:	55af      	strb	r7, [r5, r6]
c0d01c54:	1c52      	adds	r2, r2, #1
c0d01c56:	2501      	movs	r5, #1
c0d01c58:	9509      	str	r5, [sp, #36]	; 0x24
            comma = 1;
        }
        btchip_context_D.tmp[targetOffset++] = scratch[offset++] + '0';
c0d01c5a:	2585      	movs	r5, #133	; 0x85
c0d01c5c:	00ad      	lsls	r5, r5, #2
c0d01c5e:	595d      	ldr	r5, [r3, r5]
c0d01c60:	b2e6      	uxtb	r6, r4
c0d01c62:	0076      	lsls	r6, r6, #1
c0d01c64:	af0a      	add	r7, sp, #40	; 0x28
c0d01c66:	5bbe      	ldrh	r6, [r7, r6]
c0d01c68:	3630      	adds	r6, #48	; 0x30
c0d01c6a:	b2d7      	uxtb	r7, r2
c0d01c6c:	55ee      	strb	r6, [r5, r7]
c0d01c6e:	1c52      	adds	r2, r2, #1
c0d01c70:	1c64      	adds	r4, r4, #1
    }
    if (targetOffset == 0) {
        btchip_context_D.tmp[targetOffset++] = '0';
    }
    workOffset = offset;
    for (i = 0; i < LOOP2; i++) {
c0d01c72:	1c49      	adds	r1, r1, #1
c0d01c74:	b2cd      	uxtb	r5, r1
c0d01c76:	9e00      	ldr	r6, [sp, #0]
c0d01c78:	42b5      	cmp	r5, r6
c0d01c7a:	4635      	mov	r5, r6
c0d01c7c:	d3d1      	bcc.n	c0d01c22 <btchip_convert_hex_amount_to_displayable+0x132>
            btchip_context_D.tmp[targetOffset++] = '.';
            comma = 1;
        }
        btchip_context_D.tmp[targetOffset++] = scratch[offset++] + '0';
    }
    return targetOffset;
c0d01c7e:	b2d0      	uxtb	r0, r2
c0d01c80:	b015      	add	sp, #84	; 0x54
c0d01c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d01c84:	20001c24 	.word	0x20001c24
c0d01c88:	20001874 	.word	0x20001874

c0d01c8c <btchip_context_init>:
void btchip_autosetup(void);

/**
 * Initialize the application context on boot
 */
void btchip_context_init() {
c0d01c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d01c8e:	b081      	sub	sp, #4
    L_DEBUG_APP(("Context init\n"));
    L_DEBUG_APP(("Backup size %d\n", sizeof(N_btchip.bkp)));
    os_memset(&btchip_context_D, 0, sizeof(btchip_context_D));
c0d01c90:	203b      	movs	r0, #59	; 0x3b
c0d01c92:	0102      	lsls	r2, r0, #4
c0d01c94:	4d36      	ldr	r5, [pc, #216]	; (c0d01d70 <btchip_context_init+0xe4>)
c0d01c96:	2600      	movs	r6, #0
c0d01c98:	4628      	mov	r0, r5
c0d01c9a:	4631      	mov	r1, r6
c0d01c9c:	f002 fc80 	bl	c0d045a0 <os_memset>
    SB_SET(btchip_context_D.halted, 0);
c0d01ca0:	4628      	mov	r0, r5
c0d01ca2:	4631      	mov	r1, r6
c0d01ca4:	f000 fad2 	bl	c0d0224c <sbSet>
    btchip_context_D.currentOutputOffset = 0;
c0d01ca8:	20e5      	movs	r0, #229	; 0xe5
c0d01caa:	0080      	lsls	r0, r0, #2
c0d01cac:	522e      	strh	r6, [r5, r0]
    btchip_context_D.outputParsingState = BTCHIP_OUTPUT_PARSING_NUMBER_OUTPUTS;
c0d01cae:	20e9      	movs	r0, #233	; 0xe9
c0d01cb0:	0080      	lsls	r0, r0, #2
c0d01cb2:	2401      	movs	r4, #1
c0d01cb4:	542c      	strb	r4, [r5, r0]
    os_memset(btchip_context_D.totalOutputAmount, 0,
c0d01cb6:	482f      	ldr	r0, [pc, #188]	; (c0d01d74 <btchip_context_init+0xe8>)
c0d01cb8:	1828      	adds	r0, r5, r0
c0d01cba:	2208      	movs	r2, #8
c0d01cbc:	4631      	mov	r1, r6
c0d01cbe:	f002 fc6f 	bl	c0d045a0 <os_memset>
              sizeof(btchip_context_D.totalOutputAmount));
    btchip_context_D.changeOutputFound = 0;
c0d01cc2:	482d      	ldr	r0, [pc, #180]	; (c0d01d78 <btchip_context_init+0xec>)
c0d01cc4:	542e      	strb	r6, [r5, r0]

    if (N_btchip.config_valid != 0x01) {
c0d01cc6:	482d      	ldr	r0, [pc, #180]	; (c0d01d7c <btchip_context_init+0xf0>)
c0d01cc8:	f003 ff18 	bl	c0d05afc <pic>
c0d01ccc:	7840      	ldrb	r0, [r0, #1]
c0d01cce:	2801      	cmp	r0, #1
c0d01cd0:	d001      	beq.n	c0d01cd6 <btchip_context_init+0x4a>
        btchip_autosetup();
c0d01cd2:	f7ff fc17 	bl	c0d01504 <btchip_autosetup>
    }

    if (!N_btchip.config_valid) {
c0d01cd6:	4829      	ldr	r0, [pc, #164]	; (c0d01d7c <btchip_context_init+0xf0>)
c0d01cd8:	f003 ff10 	bl	c0d05afc <pic>
c0d01cdc:	7840      	ldrb	r0, [r0, #1]
c0d01cde:	2800      	cmp	r0, #0
c0d01ce0:	d032      	beq.n	c0d01d48 <btchip_context_init+0xbc>
        btchip_context_D.shortCoinIdLength =
        N_btchip.bkp.config.shortCoinIdLength;
        os_memmove(btchip_context_D.shortCoinId,
        N_btchip.bkp.config.shortCoinId, N_btchip.bkp.config.shortCoinIdLength);
        */
        btchip_context_D.payToAddressVersion = G_coin_config->p2pkh_version;
c0d01ce2:	4e27      	ldr	r6, [pc, #156]	; (c0d01d80 <btchip_context_init+0xf4>)
c0d01ce4:	6830      	ldr	r0, [r6, #0]
c0d01ce6:	8801      	ldrh	r1, [r0, #0]
c0d01ce8:	8429      	strh	r1, [r5, #32]
        btchip_context_D.payToScriptHashVersion = G_coin_config->p2sh_version;
c0d01cea:	8841      	ldrh	r1, [r0, #2]
c0d01cec:	8469      	strh	r1, [r5, #34]	; 0x22
        btchip_context_D.coinFamily = G_coin_config->family;
c0d01cee:	7901      	ldrb	r1, [r0, #4]
c0d01cf0:	2224      	movs	r2, #36	; 0x24
c0d01cf2:	54a9      	strb	r1, [r5, r2]
        btchip_context_D.coinIdLength = strlen(PIC(G_coin_config->coinid));
c0d01cf4:	6940      	ldr	r0, [r0, #20]
c0d01cf6:	f003 ff01 	bl	c0d05afc <pic>
c0d01cfa:	f005 fdfd 	bl	c0d078f8 <strlen>
c0d01cfe:	2737      	movs	r7, #55	; 0x37
c0d01d00:	55e8      	strb	r0, [r5, r7]
        os_memmove(btchip_context_D.coinId, PIC(G_coin_config->coinid),
c0d01d02:	6830      	ldr	r0, [r6, #0]
c0d01d04:	6940      	ldr	r0, [r0, #20]
c0d01d06:	f003 fef9 	bl	c0d05afc <pic>
c0d01d0a:	4601      	mov	r1, r0
                   btchip_context_D.coinIdLength);
c0d01d0c:	5dea      	ldrb	r2, [r5, r7]
        */
        btchip_context_D.payToAddressVersion = G_coin_config->p2pkh_version;
        btchip_context_D.payToScriptHashVersion = G_coin_config->p2sh_version;
        btchip_context_D.coinFamily = G_coin_config->family;
        btchip_context_D.coinIdLength = strlen(PIC(G_coin_config->coinid));
        os_memmove(btchip_context_D.coinId, PIC(G_coin_config->coinid),
c0d01d0e:	4628      	mov	r0, r5
c0d01d10:	3025      	adds	r0, #37	; 0x25
c0d01d12:	f002 fc4e 	bl	c0d045b2 <os_memmove>
                   btchip_context_D.coinIdLength);
        btchip_context_D.shortCoinIdLength =
            strlen(PIC(G_coin_config->name_short));
c0d01d16:	6830      	ldr	r0, [r6, #0]
c0d01d18:	69c0      	ldr	r0, [r0, #28]
c0d01d1a:	f003 feef 	bl	c0d05afc <pic>
c0d01d1e:	f005 fdeb 	bl	c0d078f8 <strlen>
        btchip_context_D.payToScriptHashVersion = G_coin_config->p2sh_version;
        btchip_context_D.coinFamily = G_coin_config->family;
        btchip_context_D.coinIdLength = strlen(PIC(G_coin_config->coinid));
        os_memmove(btchip_context_D.coinId, PIC(G_coin_config->coinid),
                   btchip_context_D.coinIdLength);
        btchip_context_D.shortCoinIdLength =
c0d01d22:	2738      	movs	r7, #56	; 0x38
c0d01d24:	55e8      	strb	r0, [r5, r7]
            strlen(PIC(G_coin_config->name_short));
        os_memmove(btchip_context_D.shortCoinId, PIC(G_coin_config->name_short),
c0d01d26:	6830      	ldr	r0, [r6, #0]
c0d01d28:	69c0      	ldr	r0, [r0, #28]
c0d01d2a:	f003 fee7 	bl	c0d05afc <pic>
c0d01d2e:	4601      	mov	r1, r0
                   btchip_context_D.shortCoinIdLength);
c0d01d30:	5dea      	ldrb	r2, [r5, r7]
        btchip_context_D.coinIdLength = strlen(PIC(G_coin_config->coinid));
        os_memmove(btchip_context_D.coinId, PIC(G_coin_config->coinid),
                   btchip_context_D.coinIdLength);
        btchip_context_D.shortCoinIdLength =
            strlen(PIC(G_coin_config->name_short));
        os_memmove(btchip_context_D.shortCoinId, PIC(G_coin_config->name_short),
c0d01d32:	3532      	adds	r5, #50	; 0x32
c0d01d34:	4628      	mov	r0, r5
c0d01d36:	f002 fc3c 	bl	c0d045b2 <os_memmove>
                   btchip_context_D.shortCoinIdLength);

        SB_CHECK(N_btchip.bkp.config.operationMode);
c0d01d3a:	4810      	ldr	r0, [pc, #64]	; (c0d01d7c <btchip_context_init+0xf0>)
c0d01d3c:	f003 fede 	bl	c0d05afc <pic>
c0d01d40:	8880      	ldrh	r0, [r0, #4]
c0d01d42:	f000 fa8a 	bl	c0d0225a <sbCheck>
c0d01d46:	e002      	b.n	c0d01d4e <btchip_context_init+0xc2>
    if (!N_btchip.config_valid) {
        unsigned char defaultMode;
        L_DEBUG_APP(("No configuration found\n"));
        defaultMode = BTCHIP_MODE_SETUP_NEEDED;

        btchip_set_operation_mode(defaultMode);
c0d01d48:	20ff      	movs	r0, #255	; 0xff
c0d01d4a:	f000 f823 	bl	c0d01d94 <btchip_set_operation_mode>
        os_memmove(btchip_context_D.shortCoinId, PIC(G_coin_config->name_short),
                   btchip_context_D.shortCoinIdLength);

        SB_CHECK(N_btchip.bkp.config.operationMode);
    }
    if (!N_btchip.storageInitialized) {
c0d01d4e:	480b      	ldr	r0, [pc, #44]	; (c0d01d7c <btchip_context_init+0xf0>)
c0d01d50:	f003 fed4 	bl	c0d05afc <pic>
c0d01d54:	7800      	ldrb	r0, [r0, #0]
c0d01d56:	2800      	cmp	r0, #0
c0d01d58:	d108      	bne.n	c0d01d6c <btchip_context_init+0xe0>
c0d01d5a:	466d      	mov	r5, sp
        unsigned char initialized = 1;
c0d01d5c:	702c      	strb	r4, [r5, #0]

        nvm_write((void *)&N_btchip.storageInitialized, &initialized, 1);
c0d01d5e:	4807      	ldr	r0, [pc, #28]	; (c0d01d7c <btchip_context_init+0xf0>)
c0d01d60:	f003 fecc 	bl	c0d05afc <pic>
c0d01d64:	4629      	mov	r1, r5
c0d01d66:	4622      	mov	r2, r4
c0d01d68:	f004 f848 	bl	c0d05dfc <nvm_write>
    }
}
c0d01d6c:	b001      	add	sp, #4
c0d01d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d01d70:	20001874 	.word	0x20001874
c0d01d74:	000003a5 	.word	0x000003a5
c0d01d78:	000003ad 	.word	0x000003ad
c0d01d7c:	c0d08980 	.word	0xc0d08980
c0d01d80:	20001c24 	.word	0x20001c24

c0d01d84 <btchip_compress_public_key_value>:
********************************************************************************/

#include "btchip_internal.h"

void btchip_compress_public_key_value(unsigned char *value) {
    value[0] = ((value[64] & 1) ? 0x03 : 0x02);
c0d01d84:	2140      	movs	r1, #64	; 0x40
c0d01d86:	5c41      	ldrb	r1, [r0, r1]
c0d01d88:	2201      	movs	r2, #1
c0d01d8a:	400a      	ands	r2, r1
c0d01d8c:	2102      	movs	r1, #2
c0d01d8e:	4311      	orrs	r1, r2
c0d01d90:	7001      	strb	r1, [r0, #0]
}
c0d01d92:	4770      	bx	lr

c0d01d94 <btchip_set_operation_mode>:

#include "btchip_internal.h"

#include "btchip_public_ram_variables.h"

void btchip_set_operation_mode(unsigned char operationMode) {
c0d01d94:	b510      	push	{r4, lr}
c0d01d96:	b082      	sub	sp, #8
c0d01d98:	4601      	mov	r1, r0
c0d01d9a:	ac01      	add	r4, sp, #4
    secu8 opMode;
    SB_SET(opMode, operationMode);
c0d01d9c:	4620      	mov	r0, r4
c0d01d9e:	f000 fa55 	bl	c0d0224c <sbSet>

    // only modify operation mode
    nvm_write((void *)&N_btchip.bkp.config.operationMode, &opMode,
c0d01da2:	4805      	ldr	r0, [pc, #20]	; (c0d01db8 <btchip_set_operation_mode+0x24>)
c0d01da4:	f003 feaa 	bl	c0d05afc <pic>
c0d01da8:	1d00      	adds	r0, r0, #4
c0d01daa:	2202      	movs	r2, #2
c0d01dac:	4621      	mov	r1, r4
c0d01dae:	f004 f825 	bl	c0d05dfc <nvm_write>
              sizeof(opMode));
}
c0d01db2:	b002      	add	sp, #8
c0d01db4:	bd10      	pop	{r4, pc}
c0d01db6:	46c0      	nop			; (mov r8, r8)
c0d01db8:	c0d08980 	.word	0xc0d08980

c0d01dbc <btchip_output_script_is_regular>:
    0x03, // Push 3 bytes to stack to make ParamHeight line up properly
    0xc0, 0x1f, 0x02, // ParamHeight (139200) -> hex -> endianness swapped
    0xb4              // OP_CHECKBLOCKATHEIGHT
};                    // BIP0115 Replay Protection

unsigned char btchip_output_script_is_regular(unsigned char *buffer) {
c0d01dbc:	b570      	push	{r4, r5, r6, lr}
c0d01dbe:	4604      	mov	r4, r0
    if (G_coin_config->native_segwit_prefix) {
c0d01dc0:	4e1e      	ldr	r6, [pc, #120]	; (c0d01e3c <btchip_output_script_is_regular+0x80>)
c0d01dc2:	6830      	ldr	r0, [r6, #0]
c0d01dc4:	6a01      	ldr	r1, [r0, #32]
c0d01dc6:	2900      	cmp	r1, #0
c0d01dc8:	d011      	beq.n	c0d01dee <btchip_output_script_is_regular+0x32>
        if ((os_memcmp(buffer, TRANSACTION_OUTPUT_SCRIPT_P2WPKH_PRE,
c0d01dca:	491d      	ldr	r1, [pc, #116]	; (c0d01e40 <btchip_output_script_is_regular+0x84>)
c0d01dcc:	4479      	add	r1, pc
c0d01dce:	2203      	movs	r2, #3
c0d01dd0:	4620      	mov	r0, r4
c0d01dd2:	f002 fc8b 	bl	c0d046ec <os_memcmp>
c0d01dd6:	2501      	movs	r5, #1
                       sizeof(TRANSACTION_OUTPUT_SCRIPT_P2WPKH_PRE)) == 0) ||
c0d01dd8:	2800      	cmp	r0, #0
c0d01dda:	d02c      	beq.n	c0d01e36 <btchip_output_script_is_regular+0x7a>
            (os_memcmp(buffer, TRANSACTION_OUTPUT_SCRIPT_P2WSH_PRE,
c0d01ddc:	4919      	ldr	r1, [pc, #100]	; (c0d01e44 <btchip_output_script_is_regular+0x88>)
c0d01dde:	4479      	add	r1, pc
c0d01de0:	2203      	movs	r2, #3
c0d01de2:	4620      	mov	r0, r4
c0d01de4:	f002 fc82 	bl	c0d046ec <os_memcmp>
    0xb4              // OP_CHECKBLOCKATHEIGHT
};                    // BIP0115 Replay Protection

unsigned char btchip_output_script_is_regular(unsigned char *buffer) {
    if (G_coin_config->native_segwit_prefix) {
        if ((os_memcmp(buffer, TRANSACTION_OUTPUT_SCRIPT_P2WPKH_PRE,
c0d01de8:	2800      	cmp	r0, #0
c0d01dea:	d024      	beq.n	c0d01e36 <btchip_output_script_is_regular+0x7a>
c0d01dec:	6830      	ldr	r0, [r6, #0]
            (os_memcmp(buffer, TRANSACTION_OUTPUT_SCRIPT_P2WSH_PRE,
                       sizeof(TRANSACTION_OUTPUT_SCRIPT_P2WSH_PRE)) == 0)) {
            return 1;
        }
    }
    if (G_coin_config->kind == COIN_KIND_ZENCASH) {
c0d01dee:	2128      	movs	r1, #40	; 0x28
c0d01df0:	5c40      	ldrb	r0, [r0, r1]
c0d01df2:	2815      	cmp	r0, #21
c0d01df4:	d10c      	bne.n	c0d01e10 <btchip_output_script_is_regular+0x54>
        if ((os_memcmp(buffer, ZEN_OUTPUT_SCRIPT_PRE,
c0d01df6:	4914      	ldr	r1, [pc, #80]	; (c0d01e48 <btchip_output_script_is_regular+0x8c>)
c0d01df8:	4479      	add	r1, pc
c0d01dfa:	2204      	movs	r2, #4
c0d01dfc:	4620      	mov	r0, r4
c0d01dfe:	f002 fc75 	bl	c0d046ec <os_memcmp>
                       sizeof(ZEN_OUTPUT_SCRIPT_PRE)) == 0) &&
c0d01e02:	2800      	cmp	r0, #0
c0d01e04:	d116      	bne.n	c0d01e34 <btchip_output_script_is_regular+0x78>
            (os_memcmp(buffer + sizeof(ZEN_OUTPUT_SCRIPT_PRE) + 20,
c0d01e06:	3418      	adds	r4, #24
c0d01e08:	4910      	ldr	r1, [pc, #64]	; (c0d01e4c <btchip_output_script_is_regular+0x90>)
c0d01e0a:	4479      	add	r1, pc
c0d01e0c:	2228      	movs	r2, #40	; 0x28
c0d01e0e:	e00b      	b.n	c0d01e28 <btchip_output_script_is_regular+0x6c>
                       ZEN_OUTPUT_SCRIPT_POST,
                       sizeof(ZEN_OUTPUT_SCRIPT_POST)) == 0)) {
            return 1;
        }
    } else {
        if ((os_memcmp(buffer, TRANSACTION_OUTPUT_SCRIPT_PRE,
c0d01e10:	490f      	ldr	r1, [pc, #60]	; (c0d01e50 <btchip_output_script_is_regular+0x94>)
c0d01e12:	4479      	add	r1, pc
c0d01e14:	2204      	movs	r2, #4
c0d01e16:	4620      	mov	r0, r4
c0d01e18:	f002 fc68 	bl	c0d046ec <os_memcmp>
                       sizeof(TRANSACTION_OUTPUT_SCRIPT_PRE)) == 0) &&
c0d01e1c:	2800      	cmp	r0, #0
c0d01e1e:	d109      	bne.n	c0d01e34 <btchip_output_script_is_regular+0x78>
            (os_memcmp(buffer + sizeof(TRANSACTION_OUTPUT_SCRIPT_PRE) + 20,
c0d01e20:	3418      	adds	r4, #24
c0d01e22:	490c      	ldr	r1, [pc, #48]	; (c0d01e54 <btchip_output_script_is_regular+0x98>)
c0d01e24:	4479      	add	r1, pc
c0d01e26:	2202      	movs	r2, #2
c0d01e28:	4620      	mov	r0, r4
c0d01e2a:	f002 fc5f 	bl	c0d046ec <os_memcmp>
c0d01e2e:	2501      	movs	r5, #1
c0d01e30:	2800      	cmp	r0, #0
c0d01e32:	d000      	beq.n	c0d01e36 <btchip_output_script_is_regular+0x7a>
c0d01e34:	2500      	movs	r5, #0
                       sizeof(TRANSACTION_OUTPUT_SCRIPT_POST)) == 0)) {
            return 1;
        }
    }
    return 0;
}
c0d01e36:	4628      	mov	r0, r5
c0d01e38:	bd70      	pop	{r4, r5, r6, pc}
c0d01e3a:	46c0      	nop			; (mov r8, r8)
c0d01e3c:	20001c24 	.word	0x20001c24
c0d01e40:	00005bc4 	.word	0x00005bc4
c0d01e44:	00005bb5 	.word	0x00005bb5
c0d01e48:	00005b9e 	.word	0x00005b9e
c0d01e4c:	00005b90 	.word	0x00005b90
c0d01e50:	00005b4a 	.word	0x00005b4a
c0d01e54:	00005b3c 	.word	0x00005b3c

c0d01e58 <btchip_output_script_is_p2sh>:

unsigned char btchip_output_script_is_p2sh(unsigned char *buffer) {
c0d01e58:	b5b0      	push	{r4, r5, r7, lr}
c0d01e5a:	4604      	mov	r4, r0
    if (G_coin_config->kind == COIN_KIND_ZENCASH) {
c0d01e5c:	4815      	ldr	r0, [pc, #84]	; (c0d01eb4 <btchip_output_script_is_p2sh+0x5c>)
c0d01e5e:	6800      	ldr	r0, [r0, #0]
c0d01e60:	2128      	movs	r1, #40	; 0x28
c0d01e62:	5c40      	ldrb	r0, [r0, r1]
c0d01e64:	2815      	cmp	r0, #21
c0d01e66:	d110      	bne.n	c0d01e8a <btchip_output_script_is_p2sh+0x32>
        if ((os_memcmp(buffer, ZEN_TRANSACTION_OUTPUT_SCRIPT_P2SH_PRE,
c0d01e68:	4913      	ldr	r1, [pc, #76]	; (c0d01eb8 <btchip_output_script_is_p2sh+0x60>)
c0d01e6a:	4479      	add	r1, pc
c0d01e6c:	2203      	movs	r2, #3
c0d01e6e:	4620      	mov	r0, r4
c0d01e70:	f002 fc3c 	bl	c0d046ec <os_memcmp>
                       sizeof(ZEN_TRANSACTION_OUTPUT_SCRIPT_P2SH_PRE)) == 0) &&
c0d01e74:	2800      	cmp	r0, #0
c0d01e76:	d11a      	bne.n	c0d01eae <btchip_output_script_is_p2sh+0x56>
            (os_memcmp(buffer + sizeof(ZEN_TRANSACTION_OUTPUT_SCRIPT_P2SH_PRE) + 20,
c0d01e78:	3417      	adds	r4, #23
c0d01e7a:	4910      	ldr	r1, [pc, #64]	; (c0d01ebc <btchip_output_script_is_p2sh+0x64>)
c0d01e7c:	4479      	add	r1, pc
c0d01e7e:	2227      	movs	r2, #39	; 0x27
c0d01e80:	4620      	mov	r0, r4
c0d01e82:	f002 fc33 	bl	c0d046ec <os_memcmp>
c0d01e86:	2501      	movs	r5, #1
c0d01e88:	e00f      	b.n	c0d01eaa <btchip_output_script_is_p2sh+0x52>
                       ZEN_TRANSACTION_OUTPUT_SCRIPT_P2SH_POST,
                       sizeof(ZEN_TRANSACTION_OUTPUT_SCRIPT_P2SH_POST)) == 0)) {
            return 1;
        }
    } else {
        if ((os_memcmp(buffer, TRANSACTION_OUTPUT_SCRIPT_P2SH_PRE,
c0d01e8a:	490d      	ldr	r1, [pc, #52]	; (c0d01ec0 <btchip_output_script_is_p2sh+0x68>)
c0d01e8c:	4479      	add	r1, pc
c0d01e8e:	2203      	movs	r2, #3
c0d01e90:	4620      	mov	r0, r4
c0d01e92:	f002 fc2b 	bl	c0d046ec <os_memcmp>
                       sizeof(TRANSACTION_OUTPUT_SCRIPT_P2SH_PRE)) == 0) &&
c0d01e96:	2800      	cmp	r0, #0
c0d01e98:	d109      	bne.n	c0d01eae <btchip_output_script_is_p2sh+0x56>
            (os_memcmp(buffer + sizeof(TRANSACTION_OUTPUT_SCRIPT_P2SH_PRE) + 20,
c0d01e9a:	3417      	adds	r4, #23
c0d01e9c:	4909      	ldr	r1, [pc, #36]	; (c0d01ec4 <btchip_output_script_is_p2sh+0x6c>)
c0d01e9e:	4479      	add	r1, pc
c0d01ea0:	2501      	movs	r5, #1
c0d01ea2:	4620      	mov	r0, r4
c0d01ea4:	462a      	mov	r2, r5
c0d01ea6:	f002 fc21 	bl	c0d046ec <os_memcmp>
c0d01eaa:	2800      	cmp	r0, #0
c0d01eac:	d000      	beq.n	c0d01eb0 <btchip_output_script_is_p2sh+0x58>
c0d01eae:	2500      	movs	r5, #0
                       sizeof(TRANSACTION_OUTPUT_SCRIPT_P2SH_POST)) == 0)) {
            return 1;
        }
    }
    return 0;
}
c0d01eb0:	4628      	mov	r0, r5
c0d01eb2:	bdb0      	pop	{r4, r5, r7, pc}
c0d01eb4:	20001c24 	.word	0x20001c24
c0d01eb8:	00005afc 	.word	0x00005afc
c0d01ebc:	00005aed 	.word	0x00005aed
c0d01ec0:	00005ad6 	.word	0x00005ad6
c0d01ec4:	00005ac7 	.word	0x00005ac7

c0d01ec8 <btchip_output_script_is_native_witness>:

unsigned char btchip_output_script_is_native_witness(unsigned char *buffer) {
c0d01ec8:	b5b0      	push	{r4, r5, r7, lr}
c0d01eca:	4604      	mov	r4, r0
    if (G_coin_config->native_segwit_prefix) {
c0d01ecc:	480c      	ldr	r0, [pc, #48]	; (c0d01f00 <btchip_output_script_is_native_witness+0x38>)
c0d01ece:	6800      	ldr	r0, [r0, #0]
c0d01ed0:	6a00      	ldr	r0, [r0, #32]
c0d01ed2:	2800      	cmp	r0, #0
c0d01ed4:	d010      	beq.n	c0d01ef8 <btchip_output_script_is_native_witness+0x30>
        if ((os_memcmp(buffer, TRANSACTION_OUTPUT_SCRIPT_P2WPKH_PRE,
c0d01ed6:	490b      	ldr	r1, [pc, #44]	; (c0d01f04 <btchip_output_script_is_native_witness+0x3c>)
c0d01ed8:	4479      	add	r1, pc
c0d01eda:	2203      	movs	r2, #3
c0d01edc:	4620      	mov	r0, r4
c0d01ede:	f002 fc05 	bl	c0d046ec <os_memcmp>
c0d01ee2:	2501      	movs	r5, #1
                       sizeof(TRANSACTION_OUTPUT_SCRIPT_P2WPKH_PRE)) == 0) ||
c0d01ee4:	2800      	cmp	r0, #0
c0d01ee6:	d008      	beq.n	c0d01efa <btchip_output_script_is_native_witness+0x32>
            (os_memcmp(buffer, TRANSACTION_OUTPUT_SCRIPT_P2WSH_PRE,
c0d01ee8:	4907      	ldr	r1, [pc, #28]	; (c0d01f08 <btchip_output_script_is_native_witness+0x40>)
c0d01eea:	4479      	add	r1, pc
c0d01eec:	2203      	movs	r2, #3
c0d01eee:	4620      	mov	r0, r4
c0d01ef0:	f002 fbfc 	bl	c0d046ec <os_memcmp>
    return 0;
}

unsigned char btchip_output_script_is_native_witness(unsigned char *buffer) {
    if (G_coin_config->native_segwit_prefix) {
        if ((os_memcmp(buffer, TRANSACTION_OUTPUT_SCRIPT_P2WPKH_PRE,
c0d01ef4:	2800      	cmp	r0, #0
c0d01ef6:	d000      	beq.n	c0d01efa <btchip_output_script_is_native_witness+0x32>
c0d01ef8:	2500      	movs	r5, #0
                       sizeof(TRANSACTION_OUTPUT_SCRIPT_P2WSH_PRE)) == 0)) {
            return 1;
        }
    }
    return 0;
}
c0d01efa:	4628      	mov	r0, r5
c0d01efc:	bdb0      	pop	{r4, r5, r7, pc}
c0d01efe:	46c0      	nop			; (mov r8, r8)
c0d01f00:	20001c24 	.word	0x20001c24
c0d01f04:	00005ab8 	.word	0x00005ab8
c0d01f08:	00005aa9 	.word	0x00005aa9

c0d01f0c <btchip_output_script_is_op_return>:

unsigned char btchip_output_script_is_op_return(unsigned char *buffer) {
    return (buffer[1] == 0x6A);
c0d01f0c:	7842      	ldrb	r2, [r0, #1]
c0d01f0e:	2001      	movs	r0, #1
c0d01f10:	2100      	movs	r1, #0
c0d01f12:	2a6a      	cmp	r2, #106	; 0x6a
c0d01f14:	d000      	beq.n	c0d01f18 <btchip_output_script_is_op_return+0xc>
c0d01f16:	4608      	mov	r0, r1
c0d01f18:	4770      	bx	lr

c0d01f1a <btchip_output_script_is_op_create>:
}

unsigned char btchip_output_script_is_op_create(unsigned char *buffer) {
c0d01f1a:	b5b0      	push	{r4, r5, r7, lr}
c0d01f1c:	4605      	mov	r5, r0
    return (!btchip_output_script_is_regular(buffer) &&
c0d01f1e:	f7ff ff4d 	bl	c0d01dbc <btchip_output_script_is_regular>
c0d01f22:	2400      	movs	r4, #0
c0d01f24:	2800      	cmp	r0, #0
c0d01f26:	d115      	bne.n	c0d01f54 <btchip_output_script_is_op_create+0x3a>
            !btchip_output_script_is_p2sh(buffer) &&
c0d01f28:	4628      	mov	r0, r5
c0d01f2a:	f7ff ff95 	bl	c0d01e58 <btchip_output_script_is_p2sh>
c0d01f2e:	2800      	cmp	r0, #0
c0d01f30:	d110      	bne.n	c0d01f54 <btchip_output_script_is_op_create+0x3a>
    }
    return 0;
}

unsigned char btchip_output_script_is_op_return(unsigned char *buffer) {
    return (buffer[1] == 0x6A);
c0d01f32:	7868      	ldrb	r0, [r5, #1]
}

unsigned char btchip_output_script_is_op_create(unsigned char *buffer) {
    return (!btchip_output_script_is_regular(buffer) &&
            !btchip_output_script_is_p2sh(buffer) &&
            !btchip_output_script_is_op_return(buffer) && (buffer[0] <= 0xEA) &&
c0d01f34:	286a      	cmp	r0, #106	; 0x6a
c0d01f36:	d00d      	beq.n	c0d01f54 <btchip_output_script_is_op_create+0x3a>
c0d01f38:	7828      	ldrb	r0, [r5, #0]
c0d01f3a:	213e      	movs	r1, #62	; 0x3e
c0d01f3c:	43c9      	mvns	r1, r1
c0d01f3e:	312a      	adds	r1, #42	; 0x2a
c0d01f40:	b2ca      	uxtb	r2, r1
c0d01f42:	21c1      	movs	r1, #193	; 0xc1
c0d01f44:	4290      	cmp	r0, r2
c0d01f46:	d205      	bcs.n	c0d01f54 <btchip_output_script_is_op_create+0x3a>
            (buffer[buffer[0]] == 0xC1));
c0d01f48:	5c2a      	ldrb	r2, [r5, r0]
c0d01f4a:	2401      	movs	r4, #1
c0d01f4c:	2000      	movs	r0, #0
c0d01f4e:	428a      	cmp	r2, r1
c0d01f50:	d000      	beq.n	c0d01f54 <btchip_output_script_is_op_create+0x3a>
c0d01f52:	4604      	mov	r4, r0
unsigned char btchip_output_script_is_op_return(unsigned char *buffer) {
    return (buffer[1] == 0x6A);
}

unsigned char btchip_output_script_is_op_create(unsigned char *buffer) {
    return (!btchip_output_script_is_regular(buffer) &&
c0d01f54:	4620      	mov	r0, r4
c0d01f56:	bdb0      	pop	{r4, r5, r7, pc}

c0d01f58 <btchip_output_script_is_op_call>:
            !btchip_output_script_is_p2sh(buffer) &&
            !btchip_output_script_is_op_return(buffer) && (buffer[0] <= 0xEA) &&
            (buffer[buffer[0]] == 0xC1));
}

unsigned char btchip_output_script_is_op_call(unsigned char *buffer) {
c0d01f58:	b5b0      	push	{r4, r5, r7, lr}
c0d01f5a:	4605      	mov	r5, r0
    return (!btchip_output_script_is_regular(buffer) &&
c0d01f5c:	f7ff ff2e 	bl	c0d01dbc <btchip_output_script_is_regular>
c0d01f60:	2400      	movs	r4, #0
c0d01f62:	2800      	cmp	r0, #0
c0d01f64:	d115      	bne.n	c0d01f92 <btchip_output_script_is_op_call+0x3a>
            !btchip_output_script_is_p2sh(buffer) &&
c0d01f66:	4628      	mov	r0, r5
c0d01f68:	f7ff ff76 	bl	c0d01e58 <btchip_output_script_is_p2sh>
c0d01f6c:	2800      	cmp	r0, #0
c0d01f6e:	d110      	bne.n	c0d01f92 <btchip_output_script_is_op_call+0x3a>
    }
    return 0;
}

unsigned char btchip_output_script_is_op_return(unsigned char *buffer) {
    return (buffer[1] == 0x6A);
c0d01f70:	7868      	ldrb	r0, [r5, #1]
}

unsigned char btchip_output_script_is_op_call(unsigned char *buffer) {
    return (!btchip_output_script_is_regular(buffer) &&
            !btchip_output_script_is_p2sh(buffer) &&
            !btchip_output_script_is_op_return(buffer) && (buffer[0] <= 0xEA) &&
c0d01f72:	286a      	cmp	r0, #106	; 0x6a
c0d01f74:	d00d      	beq.n	c0d01f92 <btchip_output_script_is_op_call+0x3a>
c0d01f76:	7828      	ldrb	r0, [r5, #0]
c0d01f78:	213d      	movs	r1, #61	; 0x3d
c0d01f7a:	43c9      	mvns	r1, r1
c0d01f7c:	3129      	adds	r1, #41	; 0x29
c0d01f7e:	b2ca      	uxtb	r2, r1
c0d01f80:	21c2      	movs	r1, #194	; 0xc2
c0d01f82:	4290      	cmp	r0, r2
c0d01f84:	d205      	bcs.n	c0d01f92 <btchip_output_script_is_op_call+0x3a>
            (buffer[buffer[0]] == 0xC2));
c0d01f86:	5c2a      	ldrb	r2, [r5, r0]
c0d01f88:	2401      	movs	r4, #1
c0d01f8a:	2000      	movs	r0, #0
c0d01f8c:	428a      	cmp	r2, r1
c0d01f8e:	d000      	beq.n	c0d01f92 <btchip_output_script_is_op_call+0x3a>
c0d01f90:	4604      	mov	r4, r0
            !btchip_output_script_is_op_return(buffer) && (buffer[0] <= 0xEA) &&
            (buffer[buffer[0]] == 0xC1));
}

unsigned char btchip_output_script_is_op_call(unsigned char *buffer) {
    return (!btchip_output_script_is_regular(buffer) &&
c0d01f92:	4620      	mov	r0, r4
c0d01f94:	bdb0      	pop	{r4, r5, r7, pc}

c0d01f96 <btchip_secure_memcmp>:
        ;
    return (candidate % modulo);
}

unsigned char btchip_secure_memcmp(const void WIDE *buf1, const void WIDE *buf2,
                                   unsigned short length) {
c0d01f96:	b570      	push	{r4, r5, r6, lr}
c0d01f98:	2300      	movs	r3, #0
    unsigned char error = 0;
    while (length--) {
c0d01f9a:	2a00      	cmp	r2, #0
c0d01f9c:	d008      	beq.n	c0d01fb0 <btchip_secure_memcmp+0x1a>
c0d01f9e:	2300      	movs	r3, #0
c0d01fa0:	1e52      	subs	r2, r2, #1
c0d01fa2:	b294      	uxth	r4, r2
        error |= ((unsigned char WIDE *)buf1)[length] ^
c0d01fa4:	5d05      	ldrb	r5, [r0, r4]
                 ((unsigned char WIDE *)buf2)[length];
c0d01fa6:	5d0e      	ldrb	r6, [r1, r4]

unsigned char btchip_secure_memcmp(const void WIDE *buf1, const void WIDE *buf2,
                                   unsigned short length) {
    unsigned char error = 0;
    while (length--) {
        error |= ((unsigned char WIDE *)buf1)[length] ^
c0d01fa8:	406e      	eors	r6, r5
c0d01faa:	4333      	orrs	r3, r6
}

unsigned char btchip_secure_memcmp(const void WIDE *buf1, const void WIDE *buf2,
                                   unsigned short length) {
    unsigned char error = 0;
    while (length--) {
c0d01fac:	2c00      	cmp	r4, #0
c0d01fae:	d1f7      	bne.n	c0d01fa0 <btchip_secure_memcmp+0xa>
    }
    if (length != 0xffff) {
        return 1;
    }
    return error;
}
c0d01fb0:	b2d8      	uxtb	r0, r3
c0d01fb2:	bd70      	pop	{r4, r5, r6, pc}

c0d01fb4 <btchip_read_u32>:

unsigned long int btchip_read_u32(unsigned char WIDE *buffer, unsigned char be,
                                  unsigned char skipSign) {
c0d01fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d01fb6:	b082      	sub	sp, #8
c0d01fb8:	9201      	str	r2, [sp, #4]
c0d01fba:	9000      	str	r0, [sp, #0]
c0d01fbc:	2007      	movs	r0, #7
c0d01fbe:	43c0      	mvns	r0, r0
c0d01fc0:	2408      	movs	r4, #8
c0d01fc2:	2900      	cmp	r1, #0
c0d01fc4:	d000      	beq.n	c0d01fc8 <btchip_read_u32+0x14>
c0d01fc6:	4604      	mov	r4, r0
    unsigned char i;
    unsigned long int result = 0;
    unsigned char shiftValue = (be ? 24 : 0);
c0d01fc8:	2518      	movs	r5, #24
c0d01fca:	2900      	cmp	r1, #0
c0d01fcc:	d100      	bne.n	c0d01fd0 <btchip_read_u32+0x1c>
c0d01fce:	460d      	mov	r5, r1
c0d01fd0:	2600      	movs	r6, #0
c0d01fd2:	4631      	mov	r1, r6
    for (i = 0; i < 4; i++) {
        unsigned char x = (unsigned char)buffer[i];
c0d01fd4:	1dc2      	adds	r2, r0, #7
c0d01fd6:	4372      	muls	r2, r6
c0d01fd8:	9b00      	ldr	r3, [sp, #0]
c0d01fda:	5c9f      	ldrb	r7, [r3, r2]
        if ((i == 0) && skipSign) {
            x &= 0x7f;
c0d01fdc:	237f      	movs	r3, #127	; 0x7f
c0d01fde:	403b      	ands	r3, r7
    unsigned char i;
    unsigned long int result = 0;
    unsigned char shiftValue = (be ? 24 : 0);
    for (i = 0; i < 4; i++) {
        unsigned char x = (unsigned char)buffer[i];
        if ((i == 0) && skipSign) {
c0d01fe0:	2e00      	cmp	r6, #0
c0d01fe2:	463a      	mov	r2, r7
c0d01fe4:	d100      	bne.n	c0d01fe8 <btchip_read_u32+0x34>
c0d01fe6:	461a      	mov	r2, r3
c0d01fe8:	9b01      	ldr	r3, [sp, #4]
c0d01fea:	2b00      	cmp	r3, #0
c0d01fec:	d000      	beq.n	c0d01ff0 <btchip_read_u32+0x3c>
c0d01fee:	4617      	mov	r7, r2
            x &= 0x7f;
        }
        result += ((unsigned long int)x) << shiftValue;
c0d01ff0:	b2ea      	uxtb	r2, r5
c0d01ff2:	4097      	lsls	r7, r2
c0d01ff4:	1879      	adds	r1, r7, r1
c0d01ff6:	1915      	adds	r5, r2, r4
unsigned long int btchip_read_u32(unsigned char WIDE *buffer, unsigned char be,
                                  unsigned char skipSign) {
    unsigned char i;
    unsigned long int result = 0;
    unsigned char shiftValue = (be ? 24 : 0);
    for (i = 0; i < 4; i++) {
c0d01ff8:	1e76      	subs	r6, r6, #1
c0d01ffa:	4632      	mov	r2, r6
c0d01ffc:	3204      	adds	r2, #4
c0d01ffe:	d1e9      	bne.n	c0d01fd4 <btchip_read_u32+0x20>
            shiftValue -= 8;
        } else {
            shiftValue += 8;
        }
    }
    return result;
c0d02000:	4608      	mov	r0, r1
c0d02002:	b002      	add	sp, #8
c0d02004:	bdf0      	pop	{r4, r5, r6, r7, pc}

c0d02006 <btchip_write_u32_le>:
    buffer[2] = ((value >> 8) & 0xff);
    buffer[3] = (value & 0xff);
}

void btchip_write_u32_le(unsigned char *buffer, unsigned long int value) {
    buffer[0] = (value & 0xff);
c0d02006:	7001      	strb	r1, [r0, #0]
    buffer[1] = ((value >> 8) & 0xff);
c0d02008:	0a0a      	lsrs	r2, r1, #8
c0d0200a:	7042      	strb	r2, [r0, #1]
    buffer[2] = ((value >> 16) & 0xff);
c0d0200c:	0c0a      	lsrs	r2, r1, #16
c0d0200e:	7082      	strb	r2, [r0, #2]
    buffer[3] = ((value >> 24) & 0xff);
c0d02010:	0e09      	lsrs	r1, r1, #24
c0d02012:	70c1      	strb	r1, [r0, #3]
}
c0d02014:	4770      	bx	lr
	...

c0d02018 <btchip_retrieve_keypair_discard>:

void btchip_retrieve_keypair_discard(unsigned char WIDE *privateComponent,
                                     unsigned char derivePublic) {
c0d02018:	b570      	push	{r4, r5, r6, lr}
c0d0201a:	b08c      	sub	sp, #48	; 0x30
c0d0201c:	460c      	mov	r4, r1
c0d0201e:	4605      	mov	r5, r0
c0d02020:	ae01      	add	r6, sp, #4
    BEGIN_TRY {
        TRY {
c0d02022:	4630      	mov	r0, r6
c0d02024:	f005 fc46 	bl	c0d078b4 <setjmp>
c0d02028:	8530      	strh	r0, [r6, #40]	; 0x28
c0d0202a:	4912      	ldr	r1, [pc, #72]	; (c0d02074 <btchip_retrieve_keypair_discard+0x5c>)
c0d0202c:	4208      	tst	r0, r1
c0d0202e:	d110      	bne.n	c0d02052 <btchip_retrieve_keypair_discard+0x3a>
c0d02030:	a801      	add	r0, sp, #4
c0d02032:	f002 fa0a 	bl	c0d0444a <try_context_set>
            cx_ecdsa_init_private_key(BTCHIP_CURVE, privateComponent, 32,
c0d02036:	2021      	movs	r0, #33	; 0x21
c0d02038:	2220      	movs	r2, #32
c0d0203a:	4b0f      	ldr	r3, [pc, #60]	; (c0d02078 <btchip_retrieve_keypair_discard+0x60>)
c0d0203c:	4629      	mov	r1, r5
c0d0203e:	f003 ff6f 	bl	c0d05f20 <cx_ecfp_init_private_key>
                                      &btchip_private_key_D);

            L_DEBUG_BUF(("Using private component\n", privateComponent, 32));

            if (derivePublic) {
c0d02042:	2c00      	cmp	r4, #0
c0d02044:	d005      	beq.n	c0d02052 <btchip_retrieve_keypair_discard+0x3a>
                cx_ecfp_generate_pair(BTCHIP_CURVE, &btchip_public_key_D,
c0d02046:	2021      	movs	r0, #33	; 0x21
c0d02048:	490c      	ldr	r1, [pc, #48]	; (c0d0207c <btchip_retrieve_keypair_discard+0x64>)
c0d0204a:	4a0b      	ldr	r2, [pc, #44]	; (c0d02078 <btchip_retrieve_keypair_discard+0x60>)
c0d0204c:	2301      	movs	r3, #1
c0d0204e:	f003 ff7f 	bl	c0d05f50 <cx_ecfp_generate_pair>
                                      &btchip_private_key_D, 1);
            }
        }
        FINALLY {
c0d02052:	f002 fb67 	bl	c0d04724 <try_context_get>
c0d02056:	a901      	add	r1, sp, #4
c0d02058:	4288      	cmp	r0, r1
c0d0205a:	d103      	bne.n	c0d02064 <btchip_retrieve_keypair_discard+0x4c>
c0d0205c:	f002 fb64 	bl	c0d04728 <try_context_get_previous>
c0d02060:	f002 f9f3 	bl	c0d0444a <try_context_set>
c0d02064:	a801      	add	r0, sp, #4
        }
    }
    END_TRY;
c0d02066:	8d00      	ldrh	r0, [r0, #40]	; 0x28
c0d02068:	2800      	cmp	r0, #0
c0d0206a:	d101      	bne.n	c0d02070 <btchip_retrieve_keypair_discard+0x58>
}
c0d0206c:	b00c      	add	sp, #48	; 0x30
c0d0206e:	bd70      	pop	{r4, r5, r6, pc}
            }
        }
        FINALLY {
        }
    }
    END_TRY;
c0d02070:	f002 fb53 	bl	c0d0471a <os_longjmp>
c0d02074:	0000ffff 	.word	0x0000ffff
c0d02078:	2000184c 	.word	0x2000184c
c0d0207c:	20001800 	.word	0x20001800

c0d02080 <btchip_public_key_hash160>:
}

void btchip_public_key_hash160(unsigned char WIDE *in, unsigned short inlen,
                               unsigned char *out) {
c0d02080:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d02082:	b0a7      	sub	sp, #156	; 0x9c
c0d02084:	9203      	str	r2, [sp, #12]
c0d02086:	9102      	str	r1, [sp, #8]
c0d02088:	4604      	mov	r4, r0
c0d0208a:	ad0c      	add	r5, sp, #48	; 0x30
        cx_sha256_t shasha;
        cx_ripemd160_t riprip;
    } u;
    unsigned char buffer[32];

    cx_sha256_init(&u.shasha);
c0d0208c:	4628      	mov	r0, r5
c0d0208e:	f003 ff15 	bl	c0d05ebc <cx_sha256_init>
c0d02092:	ae04      	add	r6, sp, #16
    cx_hash(&u.shasha.header, CX_LAST, in, inlen, buffer);
c0d02094:	4668      	mov	r0, sp
c0d02096:	6006      	str	r6, [r0, #0]
c0d02098:	2701      	movs	r7, #1
c0d0209a:	4628      	mov	r0, r5
c0d0209c:	4639      	mov	r1, r7
c0d0209e:	4622      	mov	r2, r4
c0d020a0:	9b02      	ldr	r3, [sp, #8]
c0d020a2:	f000 feb7 	bl	c0d02e14 <cx_hash_X>
    cx_ripemd160_init(&u.riprip);
c0d020a6:	4628      	mov	r0, r5
c0d020a8:	f003 fef2 	bl	c0d05e90 <cx_ripemd160_init>
    cx_hash(&u.riprip.header, CX_LAST, buffer, 32, out);
c0d020ac:	4668      	mov	r0, sp
c0d020ae:	9903      	ldr	r1, [sp, #12]
c0d020b0:	6001      	str	r1, [r0, #0]
c0d020b2:	2320      	movs	r3, #32
c0d020b4:	4628      	mov	r0, r5
c0d020b6:	4639      	mov	r1, r7
c0d020b8:	4632      	mov	r2, r6
c0d020ba:	f000 feab 	bl	c0d02e14 <cx_hash_X>
}
c0d020be:	b027      	add	sp, #156	; 0x9c
c0d020c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

c0d020c2 <btchip_public_key_to_encoded_base58>:

unsigned short btchip_public_key_to_encoded_base58(
    unsigned char WIDE *in, unsigned short inlen, unsigned char *out,
    unsigned short outlen, unsigned short version,
    unsigned char alreadyHashed) {
c0d020c2:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d020c4:	b0af      	sub	sp, #188	; 0xbc
c0d020c6:	4606      	mov	r6, r0
c0d020c8:	9c34      	ldr	r4, [sp, #208]	; 0xd0
    unsigned char tmpBuffer[26];
    unsigned char checksumBuffer[32];
    cx_sha256_t hash;
    unsigned char versionSize = (version > 255 ? 2 : 1);
c0d020ca:	2502      	movs	r5, #2
c0d020cc:	2001      	movs	r0, #1
c0d020ce:	2cff      	cmp	r4, #255	; 0xff
c0d020d0:	d800      	bhi.n	c0d020d4 <btchip_public_key_to_encoded_base58+0x12>
c0d020d2:	4605      	mov	r5, r0
c0d020d4:	9835      	ldr	r0, [sp, #212]	; 0xd4

    if (!alreadyHashed) {
c0d020d6:	2800      	cmp	r0, #0
c0d020d8:	9204      	str	r2, [sp, #16]
c0d020da:	9303      	str	r3, [sp, #12]
c0d020dc:	d008      	beq.n	c0d020f0 <btchip_public_key_to_encoded_base58+0x2e>
            tmpBuffer[1] = version;
        } else {
            tmpBuffer[0] = version;
        }
    } else {
        os_memmove(tmpBuffer, in, 20 + versionSize);
c0d020de:	2014      	movs	r0, #20
c0d020e0:	4328      	orrs	r0, r5
c0d020e2:	b2c2      	uxtb	r2, r0
c0d020e4:	a828      	add	r0, sp, #160	; 0xa0
c0d020e6:	4631      	mov	r1, r6
c0d020e8:	f002 fa63 	bl	c0d045b2 <os_memmove>
    }

    cx_sha256_init(&hash);
    cx_hash(&hash.header, CX_LAST, tmpBuffer, 20 + versionSize, checksumBuffer);
c0d020ec:	b2ed      	uxtb	r5, r5
c0d020ee:	e00f      	b.n	c0d02110 <btchip_public_key_to_encoded_base58+0x4e>
    cx_sha256_t hash;
    unsigned char versionSize = (version > 255 ? 2 : 1);

    if (!alreadyHashed) {
        L_DEBUG_BUF(("To hash\n", in, inlen));
        btchip_public_key_hash160(in, inlen, tmpBuffer + versionSize);
c0d020f0:	b2ed      	uxtb	r5, r5
c0d020f2:	a828      	add	r0, sp, #160	; 0xa0
c0d020f4:	1942      	adds	r2, r0, r5
c0d020f6:	4630      	mov	r0, r6
c0d020f8:	f7ff ffc2 	bl	c0d02080 <btchip_public_key_hash160>
        L_DEBUG_BUF(("Hash160\n", (tmpBuffer + versionSize), 20));
        if (version > 255) {
c0d020fc:	0a21      	lsrs	r1, r4, #8
c0d020fe:	2000      	movs	r0, #0
c0d02100:	2900      	cmp	r1, #0
c0d02102:	d002      	beq.n	c0d0210a <btchip_public_key_to_encoded_base58+0x48>
c0d02104:	a828      	add	r0, sp, #160	; 0xa0
            tmpBuffer[0] = (version >> 8);
c0d02106:	7001      	strb	r1, [r0, #0]
c0d02108:	2001      	movs	r0, #1
c0d0210a:	a928      	add	r1, sp, #160	; 0xa0
c0d0210c:	4301      	orrs	r1, r0
c0d0210e:	700c      	strb	r4, [r1, #0]
        }
    } else {
        os_memmove(tmpBuffer, in, 20 + versionSize);
    }

    cx_sha256_init(&hash);
c0d02110:	9502      	str	r5, [sp, #8]
c0d02112:	ac05      	add	r4, sp, #20
c0d02114:	4620      	mov	r0, r4
c0d02116:	f003 fed1 	bl	c0d05ebc <cx_sha256_init>
c0d0211a:	af20      	add	r7, sp, #128	; 0x80
    cx_hash(&hash.header, CX_LAST, tmpBuffer, 20 + versionSize, checksumBuffer);
c0d0211c:	4668      	mov	r0, sp
c0d0211e:	6007      	str	r7, [r0, #0]
c0d02120:	2314      	movs	r3, #20
c0d02122:	432b      	orrs	r3, r5
c0d02124:	2501      	movs	r5, #1
c0d02126:	ae28      	add	r6, sp, #160	; 0xa0
c0d02128:	4620      	mov	r0, r4
c0d0212a:	4629      	mov	r1, r5
c0d0212c:	4632      	mov	r2, r6
c0d0212e:	f000 fe71 	bl	c0d02e14 <cx_hash_X>
    cx_sha256_init(&hash);
c0d02132:	4620      	mov	r0, r4
c0d02134:	f003 fec2 	bl	c0d05ebc <cx_sha256_init>
    cx_hash(&hash.header, CX_LAST, checksumBuffer, 32, checksumBuffer);
c0d02138:	4668      	mov	r0, sp
c0d0213a:	6007      	str	r7, [r0, #0]
c0d0213c:	2320      	movs	r3, #32
c0d0213e:	4620      	mov	r0, r4
c0d02140:	4629      	mov	r1, r5
c0d02142:	463a      	mov	r2, r7
c0d02144:	f000 fe66 	bl	c0d02e14 <cx_hash_X>
c0d02148:	9c02      	ldr	r4, [sp, #8]

    L_DEBUG_BUF(("Checksum\n", checksumBuffer, 4));
    os_memmove(tmpBuffer + 20 + versionSize, checksumBuffer, 4);
c0d0214a:	1930      	adds	r0, r6, r4
c0d0214c:	3014      	adds	r0, #20
c0d0214e:	2204      	movs	r2, #4
c0d02150:	4639      	mov	r1, r7
c0d02152:	f002 fa2e 	bl	c0d045b2 <os_memmove>
    return btchip_encode_base58(tmpBuffer, 24 + versionSize, out, outlen);
c0d02156:	2118      	movs	r1, #24
c0d02158:	4321      	orrs	r1, r4
c0d0215a:	9803      	ldr	r0, [sp, #12]
c0d0215c:	b2c3      	uxtb	r3, r0
c0d0215e:	4630      	mov	r0, r6
c0d02160:	9a04      	ldr	r2, [sp, #16]
c0d02162:	f7ff fc37 	bl	c0d019d4 <btchip_encode_base58>
c0d02166:	b02f      	add	sp, #188	; 0xbc
c0d02168:	bdf0      	pop	{r4, r5, r6, r7, pc}

c0d0216a <btchip_swap_bytes>:
}

void btchip_swap_bytes(unsigned char *target, unsigned char *source,
                       unsigned char size) {
c0d0216a:	b510      	push	{r4, lr}
    unsigned char i;
    for (i = 0; i < size; i++) {
c0d0216c:	2a00      	cmp	r2, #0
c0d0216e:	d00b      	beq.n	c0d02188 <btchip_swap_bytes+0x1e>
c0d02170:	4252      	negs	r2, r2
c0d02172:	1e49      	subs	r1, r1, #1
c0d02174:	2300      	movs	r3, #0
c0d02176:	43db      	mvns	r3, r3
        target[i] = source[size - 1 - i];
c0d02178:	461c      	mov	r4, r3
c0d0217a:	4354      	muls	r4, r2
c0d0217c:	5d0c      	ldrb	r4, [r1, r4]
c0d0217e:	7004      	strb	r4, [r0, #0]
}

void btchip_swap_bytes(unsigned char *target, unsigned char *source,
                       unsigned char size) {
    unsigned char i;
    for (i = 0; i < size; i++) {
c0d02180:	1c52      	adds	r2, r2, #1
c0d02182:	1c40      	adds	r0, r0, #1
c0d02184:	2a00      	cmp	r2, #0
c0d02186:	d1f7      	bne.n	c0d02178 <btchip_swap_bytes+0xe>
        target[i] = source[size - 1 - i];
    }
}
c0d02188:	bd10      	pop	{r4, pc}

c0d0218a <btchip_private_derive_keypair>:
    return outlen;
}

void btchip_private_derive_keypair(unsigned char WIDE *bip32Path,
                                   unsigned char derivePublic,
                                   unsigned char *out_chainCode) {
c0d0218a:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d0218c:	b095      	sub	sp, #84	; 0x54
c0d0218e:	9202      	str	r2, [sp, #8]
    unsigned char bip32PathLength;
    unsigned char i;
    unsigned int bip32PathInt[MAX_BIP32_PATH];
    unsigned char privateComponent[32];

    bip32PathLength = bip32Path[0];
c0d02190:	7802      	ldrb	r2, [r0, #0]
    if (bip32PathLength > MAX_BIP32_PATH) {
c0d02192:	2a0b      	cmp	r2, #11
c0d02194:	d22b      	bcs.n	c0d021ee <btchip_private_derive_keypair+0x64>
c0d02196:	9101      	str	r1, [sp, #4]
        THROW(INVALID_PARAMETER);
    }
    bip32Path++;
    for (i = 0; i < bip32PathLength; i++) {
c0d02198:	2a00      	cmp	r2, #0
c0d0219a:	d014      	beq.n	c0d021c6 <btchip_private_derive_keypair+0x3c>

    bip32PathLength = bip32Path[0];
    if (bip32PathLength > MAX_BIP32_PATH) {
        THROW(INVALID_PARAMETER);
    }
    bip32Path++;
c0d0219c:	1c40      	adds	r0, r0, #1
c0d0219e:	2400      	movs	r4, #0
c0d021a0:	4625      	mov	r5, r4
c0d021a2:	2718      	movs	r7, #24
c0d021a4:	4621      	mov	r1, r4
c0d021a6:	4626      	mov	r6, r4
    for (i = 0; i < 4; i++) {
        unsigned char x = (unsigned char)buffer[i];
        if ((i == 0) && skipSign) {
            x &= 0x7f;
        }
        result += ((unsigned long int)x) << shiftValue;
c0d021a8:	5c43      	ldrb	r3, [r0, r1]
c0d021aa:	b2ff      	uxtb	r7, r7
c0d021ac:	40bb      	lsls	r3, r7
c0d021ae:	199e      	adds	r6, r3, r6
unsigned long int btchip_read_u32(unsigned char WIDE *buffer, unsigned char be,
                                  unsigned char skipSign) {
    unsigned char i;
    unsigned long int result = 0;
    unsigned char shiftValue = (be ? 24 : 0);
    for (i = 0; i < 4; i++) {
c0d021b0:	1c49      	adds	r1, r1, #1
c0d021b2:	3f08      	subs	r7, #8
c0d021b4:	2904      	cmp	r1, #4
c0d021b6:	d1f7      	bne.n	c0d021a8 <btchip_private_derive_keypair+0x1e>
    if (bip32PathLength > MAX_BIP32_PATH) {
        THROW(INVALID_PARAMETER);
    }
    bip32Path++;
    for (i = 0; i < bip32PathLength; i++) {
        bip32PathInt[i] = btchip_read_u32(bip32Path, 1, 0);
c0d021b8:	00a9      	lsls	r1, r5, #2
c0d021ba:	ab0b      	add	r3, sp, #44	; 0x2c
c0d021bc:	505e      	str	r6, [r3, r1]
    bip32PathLength = bip32Path[0];
    if (bip32PathLength > MAX_BIP32_PATH) {
        THROW(INVALID_PARAMETER);
    }
    bip32Path++;
    for (i = 0; i < bip32PathLength; i++) {
c0d021be:	1c6d      	adds	r5, r5, #1
        bip32PathInt[i] = btchip_read_u32(bip32Path, 1, 0);
        bip32Path += 4;
c0d021c0:	1d00      	adds	r0, r0, #4
    bip32PathLength = bip32Path[0];
    if (bip32PathLength > MAX_BIP32_PATH) {
        THROW(INVALID_PARAMETER);
    }
    bip32Path++;
    for (i = 0; i < bip32PathLength; i++) {
c0d021c2:	4295      	cmp	r5, r2
c0d021c4:	d1ed      	bne.n	c0d021a2 <btchip_private_derive_keypair+0x18>
        bip32PathInt[i] = btchip_read_u32(bip32Path, 1, 0);
        bip32Path += 4;
    }
    os_perso_derive_node_bip32(CX_CURVE_256K1, bip32PathInt, bip32PathLength,
c0d021c6:	4668      	mov	r0, sp
c0d021c8:	9902      	ldr	r1, [sp, #8]
c0d021ca:	6001      	str	r1, [r0, #0]
c0d021cc:	2021      	movs	r0, #33	; 0x21
c0d021ce:	a90b      	add	r1, sp, #44	; 0x2c
c0d021d0:	ad03      	add	r5, sp, #12
c0d021d2:	462b      	mov	r3, r5
c0d021d4:	f003 ff12 	bl	c0d05ffc <os_perso_derive_node_bip32>
                               privateComponent, out_chainCode);
    btchip_retrieve_keypair_discard(privateComponent, derivePublic);
c0d021d8:	4628      	mov	r0, r5
c0d021da:	9901      	ldr	r1, [sp, #4]
c0d021dc:	f7ff ff1c 	bl	c0d02018 <btchip_retrieve_keypair_discard>
c0d021e0:	2100      	movs	r1, #0
    os_memset(privateComponent, 0, sizeof(privateComponent));
c0d021e2:	2220      	movs	r2, #32
c0d021e4:	4628      	mov	r0, r5
c0d021e6:	f002 f9db 	bl	c0d045a0 <os_memset>
}
c0d021ea:	b015      	add	sp, #84	; 0x54
c0d021ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    unsigned int bip32PathInt[MAX_BIP32_PATH];
    unsigned char privateComponent[32];

    bip32PathLength = bip32Path[0];
    if (bip32PathLength > MAX_BIP32_PATH) {
        THROW(INVALID_PARAMETER);
c0d021ee:	2002      	movs	r0, #2
c0d021f0:	f002 fa93 	bl	c0d0471a <os_longjmp>

c0d021f4 <btchip_signverify_finalhash>:


void btchip_signverify_finalhash(void WIDE *keyContext, unsigned char sign,
                                 unsigned char WIDE *in, unsigned short inlen,
                                 unsigned char *out, unsigned short outlen,
                                 unsigned char rfc6979) {
c0d021f4:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d021f6:	b085      	sub	sp, #20
c0d021f8:	4614      	mov	r4, r2
c0d021fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    if (sign) {
c0d021fc:	2900      	cmp	r1, #0
c0d021fe:	d016      	beq.n	c0d0222e <btchip_signverify_finalhash+0x3a>
c0d02200:	9f0c      	ldr	r7, [sp, #48]	; 0x30
c0d02202:	2100      	movs	r1, #0
        unsigned int info = 0;
c0d02204:	9104      	str	r1, [sp, #16]
c0d02206:	ae04      	add	r6, sp, #16
        cx_ecdsa_sign((cx_ecfp_private_key_t WIDE *)keyContext,
c0d02208:	4669      	mov	r1, sp
c0d0220a:	c168      	stmia	r1!, {r3, r5, r6}
c0d0220c:	490d      	ldr	r1, [pc, #52]	; (c0d02244 <btchip_signverify_finalhash+0x50>)
c0d0220e:	4a0e      	ldr	r2, [pc, #56]	; (c0d02248 <btchip_signverify_finalhash+0x54>)
c0d02210:	2f00      	cmp	r7, #0
c0d02212:	d100      	bne.n	c0d02216 <btchip_signverify_finalhash+0x22>
c0d02214:	4611      	mov	r1, r2
c0d02216:	2203      	movs	r2, #3
c0d02218:	4623      	mov	r3, r4
c0d0221a:	f000 fe6b 	bl	c0d02ef4 <cx_ecdsa_sign_X>
                      CX_LAST | (rfc6979 ? CX_RND_RFC6979 : CX_RND_TRNG),
                      CX_SHA256, in, inlen, out, &info);
        if (info & CX_ECCINFO_PARITY_ODD) {
c0d0221e:	7830      	ldrb	r0, [r6, #0]
c0d02220:	07c0      	lsls	r0, r0, #31
c0d02222:	d00d      	beq.n	c0d02240 <btchip_signverify_finalhash+0x4c>
            out[0] |= 0x01;
c0d02224:	7828      	ldrb	r0, [r5, #0]
c0d02226:	2101      	movs	r1, #1
c0d02228:	4301      	orrs	r1, r0
c0d0222a:	7029      	strb	r1, [r5, #0]
c0d0222c:	e008      	b.n	c0d02240 <btchip_signverify_finalhash+0x4c>
c0d0222e:	990b      	ldr	r1, [sp, #44]	; 0x2c
        }
    } else {
        cx_ecdsa_verify((cx_ecfp_public_key_t WIDE *)keyContext, CX_LAST,
c0d02230:	466a      	mov	r2, sp
c0d02232:	c228      	stmia	r2!, {r3, r5}
c0d02234:	6011      	str	r1, [r2, #0]
c0d02236:	2101      	movs	r1, #1
c0d02238:	2203      	movs	r2, #3
c0d0223a:	4623      	mov	r3, r4
c0d0223c:	f003 fec0 	bl	c0d05fc0 <cx_ecdsa_verify>
                        CX_SHA256, in, inlen, out, outlen);
    }
}
c0d02240:	b005      	add	sp, #20
c0d02242:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d02244:	00000601 	.word	0x00000601
c0d02248:	00000401 	.word	0x00000401

c0d0224c <sbSet>:
********************************************************************************/

#include "btchip_internal.h"

void sbSet(secu8 *target, unsigned char source) {
    *target = (((unsigned char)~source) << 8) + source;
c0d0224c:	020a      	lsls	r2, r1, #8
c0d0224e:	430a      	orrs	r2, r1
c0d02250:	21ff      	movs	r1, #255	; 0xff
c0d02252:	0209      	lsls	r1, r1, #8
c0d02254:	4051      	eors	r1, r2
c0d02256:	8001      	strh	r1, [r0, #0]
}
c0d02258:	4770      	bx	lr

c0d0225a <sbCheck>:

void sbCheck(secu8 source) {
c0d0225a:	b580      	push	{r7, lr}
    if (((source >> 8) & 0xff) != (unsigned char)(~(source & 0xff))) {
c0d0225c:	21ff      	movs	r1, #255	; 0xff
c0d0225e:	4381      	bics	r1, r0
c0d02260:	0a00      	lsrs	r0, r0, #8
c0d02262:	4288      	cmp	r0, r1
c0d02264:	d001      	beq.n	c0d0226a <sbCheck+0x10>
        reset();
c0d02266:	f003 fdb5 	bl	c0d05dd4 <reset>
    }
}
c0d0226a:	bd80      	pop	{r7, pc}

c0d0226c <transaction_amount_add_be>:
#define OP_EQUAL 0x87
#define OP_CHECKMULTISIG 0xAE

unsigned char transaction_amount_add_be(unsigned char *target,
                                        unsigned char WIDE *a,
                                        unsigned char WIDE *b) {
c0d0226c:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d0226e:	b082      	sub	sp, #8
c0d02270:	2300      	movs	r3, #0
c0d02272:	43dc      	mvns	r4, r3
    unsigned char carry = 0;
    unsigned char i;
    for (i = 0; i < 8; i++) {
c0d02274:	9401      	str	r4, [sp, #4]
c0d02276:	1dc9      	adds	r1, r1, #7
c0d02278:	1dd2      	adds	r2, r2, #7
c0d0227a:	1dc5      	adds	r5, r0, #7
c0d0227c:	461e      	mov	r6, r3
c0d0227e:	9300      	str	r3, [sp, #0]
c0d02280:	4618      	mov	r0, r3
        unsigned short val = a[8 - 1 - i] + b[8 - 1 - i] + (carry ? 1 : 0);
c0d02282:	9f01      	ldr	r7, [sp, #4]
c0d02284:	4377      	muls	r7, r6
c0d02286:	5dd3      	ldrb	r3, [r2, r7]
c0d02288:	5dcc      	ldrb	r4, [r1, r7]
c0d0228a:	b2c0      	uxtb	r0, r0
c0d0228c:	1820      	adds	r0, r4, r0
c0d0228e:	18c3      	adds	r3, r0, r3
        carry = (val > 255);
        target[8 - 1 - i] = (val & 255);
c0d02290:	55eb      	strb	r3, [r5, r7]
c0d02292:	2001      	movs	r0, #1
                                        unsigned char WIDE *b) {
    unsigned char carry = 0;
    unsigned char i;
    for (i = 0; i < 8; i++) {
        unsigned short val = a[8 - 1 - i] + b[8 - 1 - i] + (carry ? 1 : 0);
        carry = (val > 255);
c0d02294:	2bff      	cmp	r3, #255	; 0xff
c0d02296:	d800      	bhi.n	c0d0229a <transaction_amount_add_be+0x2e>
c0d02298:	9800      	ldr	r0, [sp, #0]
unsigned char transaction_amount_add_be(unsigned char *target,
                                        unsigned char WIDE *a,
                                        unsigned char WIDE *b) {
    unsigned char carry = 0;
    unsigned char i;
    for (i = 0; i < 8; i++) {
c0d0229a:	1c76      	adds	r6, r6, #1
c0d0229c:	2e08      	cmp	r6, #8
c0d0229e:	d1f0      	bne.n	c0d02282 <transaction_amount_add_be+0x16>
        unsigned short val = a[8 - 1 - i] + b[8 - 1 - i] + (carry ? 1 : 0);
        carry = (val > 255);
        target[8 - 1 - i] = (val & 255);
    }
    return carry;
c0d022a0:	b002      	add	sp, #8
c0d022a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

c0d022a4 <transaction_amount_sub_be>:
}

unsigned char transaction_amount_sub_be(unsigned char *target,
                                        unsigned char WIDE *a,
                                        unsigned char WIDE *b) {
c0d022a4:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d022a6:	b083      	sub	sp, #12
c0d022a8:	2300      	movs	r3, #0
c0d022aa:	43dc      	mvns	r4, r3
    unsigned char borrow = 0;
    unsigned char i;
    for (i = 0; i < 8; i++) {
c0d022ac:	9402      	str	r4, [sp, #8]
c0d022ae:	1dc9      	adds	r1, r1, #7
c0d022b0:	9101      	str	r1, [sp, #4]
c0d022b2:	1dd2      	adds	r2, r2, #7
c0d022b4:	1dc0      	adds	r0, r0, #7
c0d022b6:	461d      	mov	r5, r3
c0d022b8:	9300      	str	r3, [sp, #0]
c0d022ba:	461e      	mov	r6, r3
        unsigned short tmpA = a[8 - 1 - i];
c0d022bc:	9c02      	ldr	r4, [sp, #8]
c0d022be:	436c      	muls	r4, r5
        unsigned short tmpB = b[8 - 1 - i];
c0d022c0:	5d17      	ldrb	r7, [r2, r4]
                                        unsigned char WIDE *a,
                                        unsigned char WIDE *b) {
    unsigned char borrow = 0;
    unsigned char i;
    for (i = 0; i < 8; i++) {
        unsigned short tmpA = a[8 - 1 - i];
c0d022c2:	9901      	ldr	r1, [sp, #4]
c0d022c4:	5d0b      	ldrb	r3, [r1, r4]
        unsigned short tmpB = b[8 - 1 - i];
        if (borrow) {
c0d022c6:	0631      	lsls	r1, r6, #24
c0d022c8:	d002      	beq.n	c0d022d0 <transaction_amount_sub_be+0x2c>
            if (tmpA <= tmpB) {
c0d022ca:	42bb      	cmp	r3, r7
c0d022cc:	d902      	bls.n	c0d022d4 <transaction_amount_sub_be+0x30>
                tmpA += (255 + 1) - 1;
            } else {
                borrow = 0;
                tmpA--;
c0d022ce:	1e5b      	subs	r3, r3, #1
c0d022d0:	9900      	ldr	r1, [sp, #0]
c0d022d2:	e001      	b.n	c0d022d8 <transaction_amount_sub_be+0x34>
    for (i = 0; i < 8; i++) {
        unsigned short tmpA = a[8 - 1 - i];
        unsigned short tmpB = b[8 - 1 - i];
        if (borrow) {
            if (tmpA <= tmpB) {
                tmpA += (255 + 1) - 1;
c0d022d4:	33ff      	adds	r3, #255	; 0xff
c0d022d6:	4631      	mov	r1, r6
            } else {
                borrow = 0;
                tmpA--;
            }
        }
        if (tmpA < tmpB) {
c0d022d8:	b29b      	uxth	r3, r3
            borrow = 1;
            tmpA += 255 + 1;
        }
        target[8 - 1 - i] = (unsigned char)(tmpA - tmpB);
c0d022da:	1bde      	subs	r6, r3, r7
c0d022dc:	5506      	strb	r6, [r0, r4]
c0d022de:	2601      	movs	r6, #1
            } else {
                borrow = 0;
                tmpA--;
            }
        }
        if (tmpA < tmpB) {
c0d022e0:	42bb      	cmp	r3, r7
c0d022e2:	d300      	bcc.n	c0d022e6 <transaction_amount_sub_be+0x42>
c0d022e4:	460e      	mov	r6, r1
unsigned char transaction_amount_sub_be(unsigned char *target,
                                        unsigned char WIDE *a,
                                        unsigned char WIDE *b) {
    unsigned char borrow = 0;
    unsigned char i;
    for (i = 0; i < 8; i++) {
c0d022e6:	1c6d      	adds	r5, r5, #1
c0d022e8:	2d08      	cmp	r5, #8
c0d022ea:	d1e7      	bne.n	c0d022bc <transaction_amount_sub_be+0x18>
            borrow = 1;
            tmpA += 255 + 1;
        }
        target[8 - 1 - i] = (unsigned char)(tmpA - tmpB);
    }
    return borrow;
c0d022ec:	b2f0      	uxtb	r0, r6
c0d022ee:	b003      	add	sp, #12
c0d022f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

c0d022f4 <transaction_offset>:
}

void transaction_offset(unsigned char value) {
c0d022f4:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d022f6:	b081      	sub	sp, #4
c0d022f8:	4604      	mov	r4, r0
    if ((btchip_context_D.transactionHashOption & TRANSACTION_HASH_FULL) != 0) {
c0d022fa:	2045      	movs	r0, #69	; 0x45
c0d022fc:	0087      	lsls	r7, r0, #2
c0d022fe:	4d0f      	ldr	r5, [pc, #60]	; (c0d0233c <transaction_offset+0x48>)
c0d02300:	5de8      	ldrb	r0, [r5, r7]
c0d02302:	2601      	movs	r6, #1
c0d02304:	4230      	tst	r0, r6
c0d02306:	d00a      	beq.n	c0d0231e <transaction_offset+0x2a>
        L_DEBUG_BUF(("Add to hash full\n",
                     btchip_context_D.transactionBufferPointer, value));
        cx_hash(&btchip_context_D.transactionHashFull.header, 0,
c0d02308:	0270      	lsls	r0, r6, #9
c0d0230a:	582a      	ldr	r2, [r5, r0]
c0d0230c:	2100      	movs	r1, #0
c0d0230e:	4668      	mov	r0, sp
c0d02310:	6001      	str	r1, [r0, #0]
c0d02312:	4628      	mov	r0, r5
c0d02314:	303c      	adds	r0, #60	; 0x3c
c0d02316:	4623      	mov	r3, r4
c0d02318:	f000 fd7c 	bl	c0d02e14 <cx_hash_X>
c0d0231c:	5de8      	ldrb	r0, [r5, r7]
                btchip_context_D.transactionBufferPointer, value, NULL);
    }
    if ((btchip_context_D.transactionHashOption &
c0d0231e:	0780      	lsls	r0, r0, #30
c0d02320:	d509      	bpl.n	c0d02336 <transaction_offset+0x42>
         TRANSACTION_HASH_AUTHORIZATION) != 0) {
        cx_hash(&btchip_context_D.transactionHashAuthorization.header, 0,
c0d02322:	0270      	lsls	r0, r6, #9
c0d02324:	582a      	ldr	r2, [r5, r0]
c0d02326:	2100      	movs	r1, #0
c0d02328:	4668      	mov	r0, sp
c0d0232a:	6001      	str	r1, [r0, #0]
c0d0232c:	35a8      	adds	r5, #168	; 0xa8
c0d0232e:	4628      	mov	r0, r5
c0d02330:	4623      	mov	r3, r4
c0d02332:	f000 fd6f 	bl	c0d02e14 <cx_hash_X>
                btchip_context_D.transactionBufferPointer, value, NULL);
    }
}
c0d02336:	b001      	add	sp, #4
c0d02338:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d0233a:	46c0      	nop			; (mov r8, r8)
c0d0233c:	20001874 	.word	0x20001874

c0d02340 <transaction_get_varint>:
    transaction_offset(value);
    btchip_context_D.transactionBufferPointer += value;
    btchip_context_D.transactionDataRemaining -= value;
}

unsigned long int transaction_get_varint(void) {
c0d02340:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d02342:	b081      	sub	sp, #4
#include "btchip_apdu_constants.h"

#define DEBUG_LONG "%ld"

void check_transaction_available(unsigned char x) {
    if (btchip_context_D.transactionDataRemaining < x) {
c0d02344:	4826      	ldr	r0, [pc, #152]	; (c0d023e0 <transaction_get_varint+0xa0>)
c0d02346:	4e27      	ldr	r6, [pc, #156]	; (c0d023e4 <transaction_get_varint+0xa4>)
c0d02348:	5c30      	ldrb	r0, [r6, r0]
c0d0234a:	2800      	cmp	r0, #0
c0d0234c:	d041      	beq.n	c0d023d2 <transaction_get_varint+0x92>
}

unsigned long int transaction_get_varint(void) {
    unsigned char firstByte;
    check_transaction_available(1);
    firstByte = *btchip_context_D.transactionBufferPointer;
c0d0234e:	2401      	movs	r4, #1
c0d02350:	0267      	lsls	r7, r4, #9
c0d02352:	59f0      	ldr	r0, [r6, r7]
c0d02354:	7805      	ldrb	r5, [r0, #0]
    if (firstByte < 0xFD) {
c0d02356:	2dfc      	cmp	r5, #252	; 0xfc
c0d02358:	d92e      	bls.n	c0d023b8 <transaction_get_varint+0x78>
        transaction_offset_increase(1);
        return firstByte;
    } else if (firstByte == 0xFD) {
c0d0235a:	2dfe      	cmp	r5, #254	; 0xfe
c0d0235c:	d019      	beq.n	c0d02392 <transaction_get_varint+0x52>
c0d0235e:	2dfd      	cmp	r5, #253	; 0xfd
c0d02360:	d13a      	bne.n	c0d023d8 <transaction_get_varint+0x98>
                btchip_context_D.transactionBufferPointer, value, NULL);
    }
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
c0d02362:	4620      	mov	r0, r4
c0d02364:	f7ff ffc6 	bl	c0d022f4 <transaction_offset>
    btchip_context_D.transactionBufferPointer += value;
c0d02368:	59f0      	ldr	r0, [r6, r7]
c0d0236a:	1c41      	adds	r1, r0, #1
c0d0236c:	51f1      	str	r1, [r6, r7]
    btchip_context_D.transactionDataRemaining -= value;
c0d0236e:	491c      	ldr	r1, [pc, #112]	; (c0d023e0 <transaction_get_varint+0xa0>)
c0d02370:	5c72      	ldrb	r2, [r6, r1]
c0d02372:	32ff      	adds	r2, #255	; 0xff
c0d02374:	5472      	strb	r2, [r6, r1]
c0d02376:	b2d1      	uxtb	r1, r2
#include "btchip_apdu_constants.h"

#define DEBUG_LONG "%ld"

void check_transaction_available(unsigned char x) {
    if (btchip_context_D.transactionDataRemaining < x) {
c0d02378:	2901      	cmp	r1, #1
c0d0237a:	d92a      	bls.n	c0d023d2 <transaction_get_varint+0x92>
    } else if (firstByte == 0xFD) {
        unsigned long int result;
        transaction_offset_increase(1);
        check_transaction_available(2);
        result =
            (unsigned long int)(*btchip_context_D.transactionBufferPointer) |
c0d0237c:	7841      	ldrb	r1, [r0, #1]
            ((unsigned long int)(*(btchip_context_D.transactionBufferPointer +
c0d0237e:	9100      	str	r1, [sp, #0]
c0d02380:	7885      	ldrb	r5, [r0, #2]
c0d02382:	2402      	movs	r4, #2
                btchip_context_D.transactionBufferPointer, value, NULL);
    }
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
c0d02384:	4620      	mov	r0, r4
c0d02386:	f7ff ffb5 	bl	c0d022f4 <transaction_offset>
        check_transaction_available(2);
        result =
            (unsigned long int)(*btchip_context_D.transactionBufferPointer) |
            ((unsigned long int)(*(btchip_context_D.transactionBufferPointer +
                                   1))
             << 8);
c0d0238a:	022d      	lsls	r5, r5, #8
    } else if (firstByte == 0xFD) {
        unsigned long int result;
        transaction_offset_increase(1);
        check_transaction_available(2);
        result =
            (unsigned long int)(*btchip_context_D.transactionBufferPointer) |
c0d0238c:	9800      	ldr	r0, [sp, #0]
c0d0238e:	4305      	orrs	r5, r0
c0d02390:	e015      	b.n	c0d023be <transaction_get_varint+0x7e>
                btchip_context_D.transactionBufferPointer, value, NULL);
    }
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
c0d02392:	4620      	mov	r0, r4
c0d02394:	f7ff ffae 	bl	c0d022f4 <transaction_offset>
    btchip_context_D.transactionBufferPointer += value;
c0d02398:	59f0      	ldr	r0, [r6, r7]
c0d0239a:	1c40      	adds	r0, r0, #1
c0d0239c:	51f0      	str	r0, [r6, r7]
    btchip_context_D.transactionDataRemaining -= value;
c0d0239e:	4910      	ldr	r1, [pc, #64]	; (c0d023e0 <transaction_get_varint+0xa0>)
c0d023a0:	5c72      	ldrb	r2, [r6, r1]
c0d023a2:	32ff      	adds	r2, #255	; 0xff
c0d023a4:	5472      	strb	r2, [r6, r1]
c0d023a6:	b2d1      	uxtb	r1, r2
#include "btchip_apdu_constants.h"

#define DEBUG_LONG "%ld"

void check_transaction_available(unsigned char x) {
    if (btchip_context_D.transactionDataRemaining < x) {
c0d023a8:	2903      	cmp	r1, #3
c0d023aa:	d912      	bls.n	c0d023d2 <transaction_get_varint+0x92>
    } else if (firstByte == 0xFE) {
        unsigned long int result;
        transaction_offset_increase(1);
        check_transaction_available(4);
        result =
            btchip_read_u32(btchip_context_D.transactionBufferPointer, 0, 0);
c0d023ac:	2100      	movs	r1, #0
c0d023ae:	460a      	mov	r2, r1
c0d023b0:	f7ff fe00 	bl	c0d01fb4 <btchip_read_u32>
c0d023b4:	4605      	mov	r5, r0
c0d023b6:	2404      	movs	r4, #4
c0d023b8:	4620      	mov	r0, r4
c0d023ba:	f7ff ff9b 	bl	c0d022f4 <transaction_offset>
    }
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
    btchip_context_D.transactionBufferPointer += value;
c0d023be:	59f0      	ldr	r0, [r6, r7]
c0d023c0:	1900      	adds	r0, r0, r4
c0d023c2:	51f0      	str	r0, [r6, r7]
    btchip_context_D.transactionDataRemaining -= value;
c0d023c4:	4806      	ldr	r0, [pc, #24]	; (c0d023e0 <transaction_get_varint+0xa0>)
c0d023c6:	5c31      	ldrb	r1, [r6, r0]
c0d023c8:	1b09      	subs	r1, r1, r4
c0d023ca:	5431      	strb	r1, [r6, r0]
    } else {
        L_DEBUG_APP(("Varint parsing failed\n"));
        THROW(INVALID_PARAMETER);
        return 0;
    }
}
c0d023cc:	4628      	mov	r0, r5
c0d023ce:	b001      	add	sp, #4
c0d023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d023d2:	2001      	movs	r0, #1
c0d023d4:	f002 f9a1 	bl	c0d0471a <os_longjmp>
            btchip_read_u32(btchip_context_D.transactionBufferPointer, 0, 0);
        transaction_offset_increase(4);
        return result;
    } else {
        L_DEBUG_APP(("Varint parsing failed\n"));
        THROW(INVALID_PARAMETER);
c0d023d8:	2002      	movs	r0, #2
c0d023da:	f002 f99e 	bl	c0d0471a <os_longjmp>
c0d023de:	46c0      	nop			; (mov r8, r8)
c0d023e0:	000001ff 	.word	0x000001ff
c0d023e4:	20001874 	.word	0x20001874

c0d023e8 <transaction_parse>:
        return 0;
    }
}

void transaction_parse(unsigned char parseMode) {
c0d023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d023ea:	b0bb      	sub	sp, #236	; 0xec
c0d023ec:	9019      	str	r0, [sp, #100]	; 0x64
    unsigned char optionP2SHSkip2FA =
        ((N_btchip.bkp.config.options & BTCHIP_OPTION_SKIP_2FA_P2SH) != 0);
c0d023ee:	48e6      	ldr	r0, [pc, #920]	; (c0d02788 <transaction_parse+0x3a0>)
c0d023f0:	f003 fb84 	bl	c0d05afc <pic>
c0d023f4:	7985      	ldrb	r5, [r0, #6]
c0d023f6:	ac30      	add	r4, sp, #192	; 0xc0
    btchip_set_check_internal_structure_integrity(0);
    BEGIN_TRY {
        TRY {
c0d023f8:	4620      	mov	r0, r4
c0d023fa:	f005 fa5b 	bl	c0d078b4 <setjmp>
c0d023fe:	8520      	strh	r0, [r4, #40]	; 0x28
    }
}

void transaction_parse(unsigned char parseMode) {
    unsigned char optionP2SHSkip2FA =
        ((N_btchip.bkp.config.options & BTCHIP_OPTION_SKIP_2FA_P2SH) != 0);
c0d02400:	08ef      	lsrs	r7, r5, #3
c0d02402:	2101      	movs	r1, #1
c0d02404:	9117      	str	r1, [sp, #92]	; 0x5c
c0d02406:	400f      	ands	r7, r1
    btchip_set_check_internal_structure_integrity(0);
    BEGIN_TRY {
        TRY {
c0d02408:	b280      	uxth	r0, r0
c0d0240a:	2800      	cmp	r0, #0
c0d0240c:	d000      	beq.n	c0d02410 <transaction_parse+0x28>
c0d0240e:	e3d3      	b.n	c0d02bb8 <transaction_parse+0x7d0>
c0d02410:	a830      	add	r0, sp, #192	; 0xc0
c0d02412:	f002 f81a 	bl	c0d0444a <try_context_set>
c0d02416:	a81a      	add	r0, sp, #104	; 0x68
            for (;;) {
c0d02418:	1dc0      	adds	r0, r0, #7
c0d0241a:	9016      	str	r0, [sp, #88]	; 0x58
c0d0241c:	a822      	add	r0, sp, #136	; 0x88
c0d0241e:	1d01      	adds	r1, r0, #4
c0d02420:	9114      	str	r1, [sp, #80]	; 0x50
c0d02422:	3028      	adds	r0, #40	; 0x28
c0d02424:	9015      	str	r0, [sp, #84]	; 0x54
c0d02426:	4dd9      	ldr	r5, [pc, #868]	; (c0d0278c <transaction_parse+0x3a4>)
c0d02428:	9718      	str	r7, [sp, #96]	; 0x60
c0d0242a:	e00e      	b.n	c0d0244a <transaction_parse+0x62>
c0d0242c:	b2e0      	uxtb	r0, r4
c0d0242e:	f7ff ff61 	bl	c0d022f4 <transaction_offset>
c0d02432:	9817      	ldr	r0, [sp, #92]	; 0x5c
c0d02434:	0240      	lsls	r0, r0, #9
c0d02436:	5829      	ldr	r1, [r5, r0]
c0d02438:	1909      	adds	r1, r1, r4
c0d0243a:	5029      	str	r1, [r5, r0]
c0d0243c:	48d4      	ldr	r0, [pc, #848]	; (c0d02790 <transaction_parse+0x3a8>)
c0d0243e:	5c29      	ldrb	r1, [r5, r0]
c0d02440:	1b09      	subs	r1, r1, r4
c0d02442:	5429      	strb	r1, [r5, r0]
c0d02444:	6928      	ldr	r0, [r5, #16]
c0d02446:	1b00      	subs	r0, r0, r4
c0d02448:	6128      	str	r0, [r5, #16]
                switch (btchip_context_D.transactionContext.transactionState) {
c0d0244a:	7d29      	ldrb	r1, [r5, #20]
c0d0244c:	e04c      	b.n	c0d024e8 <transaction_parse+0x100>
                        btchip_context_D.transactionContext.scriptRemaining--;
                    }

                    if (btchip_context_D.transactionContext.scriptRemaining ==
                        0) {
                        if (parseMode == PARSE_MODE_SIGNATURE) {
c0d0244e:	9919      	ldr	r1, [sp, #100]	; 0x64
c0d02450:	2902      	cmp	r1, #2
c0d02452:	d11b      	bne.n	c0d0248c <transaction_parse+0xa4>
                            if (!btchip_context_D.usingSegwit) {
c0d02454:	217f      	movs	r1, #127	; 0x7f
c0d02456:	0089      	lsls	r1, r1, #2
c0d02458:	5c69      	ldrb	r1, [r5, r1]
c0d0245a:	2900      	cmp	r1, #0
c0d0245c:	d012      	beq.n	c0d02484 <transaction_parse+0x9c>
                                // Restore dual hash for signature +
                                // authentication
                                btchip_context_D.transactionHashOption =
                                    TRANSACTION_HASH_BOTH;
                            } else {
                                if (btchip_context_D.segwitParsedOnce) {
c0d0245e:	21ff      	movs	r1, #255	; 0xff
c0d02460:	0049      	lsls	r1, r1, #1
c0d02462:	5c69      	ldrb	r1, [r5, r1]
c0d02464:	2900      	cmp	r1, #0
c0d02466:	d011      	beq.n	c0d0248c <transaction_parse+0xa4>
c0d02468:	2100      	movs	r1, #0
                                    // Append the saved value
                                    L_DEBUG_BUF(("SEGWIT Add value\n",
                                                 btchip_context_D.inputValue,
                                                 8));
                                    cx_hash(&btchip_context_D
c0d0246a:	4668      	mov	r0, sp
c0d0246c:	6001      	str	r1, [r0, #0]
c0d0246e:	207d      	movs	r0, #125	; 0x7d
c0d02470:	0080      	lsls	r0, r0, #2
c0d02472:	182a      	adds	r2, r5, r0
c0d02474:	4628      	mov	r0, r5
c0d02476:	303c      	adds	r0, #60	; 0x3c
c0d02478:	2308      	movs	r3, #8
c0d0247a:	f000 fccb 	bl	c0d02e14 <cx_hash_X>
c0d0247e:	48c4      	ldr	r0, [pc, #784]	; (c0d02790 <transaction_parse+0x3a8>)
c0d02480:	5c28      	ldrb	r0, [r5, r0]
c0d02482:	e003      	b.n	c0d0248c <transaction_parse+0xa4>
                        0) {
                        if (parseMode == PARSE_MODE_SIGNATURE) {
                            if (!btchip_context_D.usingSegwit) {
                                // Restore dual hash for signature +
                                // authentication
                                btchip_context_D.transactionHashOption =
c0d02484:	2145      	movs	r1, #69	; 0x45
c0d02486:	0089      	lsls	r1, r1, #2
c0d02488:	2203      	movs	r2, #3
c0d0248a:	546a      	strb	r2, [r5, r1]
#include "btchip_apdu_constants.h"

#define DEBUG_LONG "%ld"

void check_transaction_available(unsigned char x) {
    if (btchip_context_D.transactionDataRemaining < x) {
c0d0248c:	b2c0      	uxtb	r0, r0
c0d0248e:	2803      	cmp	r0, #3
c0d02490:	d800      	bhi.n	c0d02494 <transaction_parse+0xac>
c0d02492:	e38e      	b.n	c0d02bb2 <transaction_parse+0x7ca>
                            }
                        }
                        // Sequence
                        check_transaction_available(4);
                        if (btchip_context_D.usingSegwit &&
                            !btchip_context_D.segwitParsedOnce) {
c0d02494:	20ff      	movs	r0, #255	; 0xff
c0d02496:	0040      	lsls	r0, r0, #1
                                }
                            }
                        }
                        // Sequence
                        check_transaction_available(4);
                        if (btchip_context_D.usingSegwit &&
c0d02498:	217f      	movs	r1, #127	; 0x7f
c0d0249a:	0089      	lsls	r1, r1, #2
c0d0249c:	5c69      	ldrb	r1, [r5, r1]
c0d0249e:	2900      	cmp	r1, #0
c0d024a0:	d00e      	beq.n	c0d024c0 <transaction_parse+0xd8>
c0d024a2:	5c28      	ldrb	r0, [r5, r0]
c0d024a4:	2800      	cmp	r0, #0
c0d024a6:	d10b      	bne.n	c0d024c0 <transaction_parse+0xd8>
                            !btchip_context_D.segwitParsedOnce) {
                            cx_hash(&btchip_context_D.segwit.hash.hashSequence
c0d024a8:	9817      	ldr	r0, [sp, #92]	; 0x5c
c0d024aa:	0240      	lsls	r0, r0, #9
c0d024ac:	582a      	ldr	r2, [r5, r0]
c0d024ae:	2100      	movs	r1, #0
c0d024b0:	4668      	mov	r0, sp
c0d024b2:	6001      	str	r1, [r0, #0]
c0d024b4:	2061      	movs	r0, #97	; 0x61
c0d024b6:	0080      	lsls	r0, r0, #2
c0d024b8:	1828      	adds	r0, r5, r0
c0d024ba:	2304      	movs	r3, #4
c0d024bc:	f000 fcaa 	bl	c0d02e14 <cx_hash_X>
c0d024c0:	2004      	movs	r0, #4
                btchip_context_D.transactionBufferPointer, value, NULL);
    }
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
c0d024c2:	f7ff ff17 	bl	c0d022f4 <transaction_offset>
c0d024c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    btchip_context_D.transactionBufferPointer += value;
c0d024c8:	0250      	lsls	r0, r2, #9
c0d024ca:	5829      	ldr	r1, [r5, r0]
c0d024cc:	1d09      	adds	r1, r1, #4
c0d024ce:	5029      	str	r1, [r5, r0]
    btchip_context_D.transactionDataRemaining -= value;
c0d024d0:	48af      	ldr	r0, [pc, #700]	; (c0d02790 <transaction_parse+0x3a8>)
c0d024d2:	5c29      	ldrb	r1, [r5, r0]
c0d024d4:	31fc      	adds	r1, #252	; 0xfc
c0d024d6:	5429      	strb	r1, [r5, r0]
                                    4, NULL);
                        }
                        transaction_offset_increase(4);
                        // Move to next input
                        btchip_context_D.transactionContext
                            .transactionRemainingInputsOutputs--;
c0d024d8:	68a8      	ldr	r0, [r5, #8]
c0d024da:	1e40      	subs	r0, r0, #1
c0d024dc:	60a8      	str	r0, [r5, #8]
                        btchip_context_D.transactionContext
                            .transactionCurrentInputOutput++;
c0d024de:	68e8      	ldr	r0, [r5, #12]
c0d024e0:	1c40      	adds	r0, r0, #1
c0d024e2:	60e8      	str	r0, [r5, #12]
c0d024e4:	4611      	mov	r1, r2
c0d024e6:	7529      	strb	r1, [r5, #20]
c0d024e8:	b2c8      	uxtb	r0, r1
        ((N_btchip.bkp.config.options & BTCHIP_OPTION_SKIP_2FA_P2SH) != 0);
    btchip_set_check_internal_structure_integrity(0);
    BEGIN_TRY {
        TRY {
            for (;;) {
                switch (btchip_context_D.transactionContext.transactionState) {
c0d024ea:	2804      	cmp	r0, #4
c0d024ec:	dd0d      	ble.n	c0d0250a <transaction_parse+0x122>
c0d024ee:	2807      	cmp	r0, #7
c0d024f0:	dc16      	bgt.n	c0d02520 <transaction_parse+0x138>
c0d024f2:	2805      	cmp	r0, #5
c0d024f4:	d100      	bne.n	c0d024f8 <transaction_parse+0x110>
c0d024f6:	e136      	b.n	c0d02766 <transaction_parse+0x37e>
c0d024f8:	2806      	cmp	r0, #6
c0d024fa:	d01c      	beq.n	c0d02536 <transaction_parse+0x14e>
c0d024fc:	2807      	cmp	r0, #7
c0d024fe:	d1f3      	bne.n	c0d024e8 <transaction_parse+0x100>
                }

                case BTCHIP_TRANSACTION_PROCESS_EXTRA: {
                    unsigned char dataAvailable;

                    if (btchip_context_D.transactionContext.scriptRemaining ==
c0d02500:	692c      	ldr	r4, [r5, #16]
c0d02502:	2108      	movs	r1, #8
c0d02504:	2c00      	cmp	r4, #0
c0d02506:	d0ee      	beq.n	c0d024e6 <transaction_parse+0xfe>
c0d02508:	e33a      	b.n	c0d02b80 <transaction_parse+0x798>
c0d0250a:	2801      	cmp	r0, #1
c0d0250c:	dd0c      	ble.n	c0d02528 <transaction_parse+0x140>
c0d0250e:	2802      	cmp	r0, #2
c0d02510:	d100      	bne.n	c0d02514 <transaction_parse+0x12c>
c0d02512:	e307      	b.n	c0d02b24 <transaction_parse+0x73c>
c0d02514:	2803      	cmp	r0, #3
c0d02516:	d031      	beq.n	c0d0257c <transaction_parse+0x194>
c0d02518:	2804      	cmp	r0, #4
c0d0251a:	d1e5      	bne.n	c0d024e8 <transaction_parse+0x100>
c0d0251c:	68a8      	ldr	r0, [r5, #8]
c0d0251e:	e0f1      	b.n	c0d02704 <transaction_parse+0x31c>
c0d02520:	3808      	subs	r0, #8
c0d02522:	2803      	cmp	r0, #3
c0d02524:	d2e0      	bcs.n	c0d024e8 <transaction_parse+0x100>
c0d02526:	e335      	b.n	c0d02b94 <transaction_parse+0x7ac>
c0d02528:	2800      	cmp	r0, #0
c0d0252a:	d100      	bne.n	c0d0252e <transaction_parse+0x146>
c0d0252c:	e092      	b.n	c0d02654 <transaction_parse+0x26c>
c0d0252e:	2801      	cmp	r0, #1
c0d02530:	d1da      	bne.n	c0d024e8 <transaction_parse+0x100>
c0d02532:	68a8      	ldr	r0, [r5, #8]
c0d02534:	e16d      	b.n	c0d02812 <transaction_parse+0x42a>
                        dataAvailable;
                    break;
                }
                case BTCHIP_TRANSACTION_OUTPUT_HASHING_DONE: {
                    L_DEBUG_APP(("Output hashing done\n"));
                    if (btchip_context_D.transactionDataRemaining < 1) {
c0d02536:	4896      	ldr	r0, [pc, #600]	; (c0d02790 <transaction_parse+0x3a8>)
c0d02538:	5c28      	ldrb	r0, [r5, r0]
c0d0253a:	2800      	cmp	r0, #0
c0d0253c:	d100      	bne.n	c0d02540 <transaction_parse+0x158>
c0d0253e:	e329      	b.n	c0d02b94 <transaction_parse+0x7ac>
#include "btchip_apdu_constants.h"

#define DEBUG_LONG "%ld"

void check_transaction_available(unsigned char x) {
    if (btchip_context_D.transactionDataRemaining < x) {
c0d02540:	2803      	cmp	r0, #3
c0d02542:	d800      	bhi.n	c0d02546 <transaction_parse+0x15e>
c0d02544:	e335      	b.n	c0d02bb2 <transaction_parse+0x7ca>
c0d02546:	2004      	movs	r0, #4
                btchip_context_D.transactionBufferPointer, value, NULL);
    }
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
c0d02548:	f7ff fed4 	bl	c0d022f4 <transaction_offset>
    btchip_context_D.transactionBufferPointer += value;
c0d0254c:	9817      	ldr	r0, [sp, #92]	; 0x5c
c0d0254e:	0240      	lsls	r0, r0, #9
c0d02550:	5829      	ldr	r1, [r5, r0]
c0d02552:	1d09      	adds	r1, r1, #4
c0d02554:	5029      	str	r1, [r5, r0]
    btchip_context_D.transactionDataRemaining -= value;
c0d02556:	488e      	ldr	r0, [pc, #568]	; (c0d02790 <transaction_parse+0x3a8>)
c0d02558:	5c2a      	ldrb	r2, [r5, r0]
c0d0255a:	32fc      	adds	r2, #252	; 0xfc
c0d0255c:	542a      	strb	r2, [r5, r0]
c0d0255e:	2108      	movs	r1, #8
c0d02560:	20ff      	movs	r0, #255	; 0xff
                    }
                    // Locktime
                    check_transaction_available(4);
                    transaction_offset_increase(4);

                    if (btchip_context_D.transactionDataRemaining == 0) {
c0d02562:	4202      	tst	r2, r0
c0d02564:	d0bf      	beq.n	c0d024e6 <transaction_parse+0xfe>
                        btchip_context_D.transactionContext.transactionState =
                            BTCHIP_TRANSACTION_PARSED;
                        continue;
                    } else {
                        btchip_context_D.transactionHashOption = 0;
c0d02566:	2045      	movs	r0, #69	; 0x45
c0d02568:	0084      	lsls	r4, r0, #2
c0d0256a:	2000      	movs	r0, #0
c0d0256c:	5528      	strb	r0, [r5, r4]
                        btchip_context_D.transactionContext.scriptRemaining =
                            transaction_get_varint();
c0d0256e:	f7ff fee7 	bl	c0d02340 <transaction_get_varint>
                        btchip_context_D.transactionContext.transactionState =
                            BTCHIP_TRANSACTION_PARSED;
                        continue;
                    } else {
                        btchip_context_D.transactionHashOption = 0;
                        btchip_context_D.transactionContext.scriptRemaining =
c0d02572:	6128      	str	r0, [r5, #16]
                            transaction_get_varint();
                        btchip_context_D.transactionHashOption =
c0d02574:	9817      	ldr	r0, [sp, #92]	; 0x5c
c0d02576:	5528      	strb	r0, [r5, r4]
c0d02578:	2107      	movs	r1, #7
c0d0257a:	e7b4      	b.n	c0d024e6 <transaction_parse+0xfe>
                        dataAvailable;
                    break;
                }
                case BTCHIP_TRANSACTION_INPUT_HASHING_DONE: {
                    L_DEBUG_APP(("Input hashing done\n"));
                    if (parseMode == PARSE_MODE_SIGNATURE) {
c0d0257c:	9819      	ldr	r0, [sp, #100]	; 0x64
c0d0257e:	2802      	cmp	r0, #2
c0d02580:	d000      	beq.n	c0d02584 <transaction_parse+0x19c>
c0d02582:	e0b3      	b.n	c0d026ec <transaction_parse+0x304>
                        // inputs have been prepared, stop the parsing here
                        if (btchip_context_D.usingSegwit &&
                            !btchip_context_D.segwitParsedOnce) {
c0d02584:	20ff      	movs	r0, #255	; 0xff
c0d02586:	0043      	lsls	r3, r0, #1
c0d02588:	5ce8      	ldrb	r0, [r5, r3]
                }
                case BTCHIP_TRANSACTION_INPUT_HASHING_DONE: {
                    L_DEBUG_APP(("Input hashing done\n"));
                    if (parseMode == PARSE_MODE_SIGNATURE) {
                        // inputs have been prepared, stop the parsing here
                        if (btchip_context_D.usingSegwit &&
c0d0258a:	217f      	movs	r1, #127	; 0x7f
c0d0258c:	008e      	lsls	r6, r1, #2
c0d0258e:	5daa      	ldrb	r2, [r5, r6]
c0d02590:	2a00      	cmp	r2, #0
c0d02592:	d04b      	beq.n	c0d0262c <transaction_parse+0x244>
c0d02594:	2800      	cmp	r0, #0
c0d02596:	d149      	bne.n	c0d0262c <transaction_parse+0x244>
c0d02598:	a922      	add	r1, sp, #136	; 0x88
                            !btchip_context_D.segwitParsedOnce) {
                            unsigned char hashedPrevouts[32];
                            unsigned char hashedSequence[32];
                            // Flush the cache
                            cx_hash(&btchip_context_D.segwit.hash.hashPrevouts
c0d0259a:	9108      	str	r1, [sp, #32]
c0d0259c:	4668      	mov	r0, sp
c0d0259e:	6001      	str	r1, [r0, #0]
c0d025a0:	2023      	movs	r0, #35	; 0x23
c0d025a2:	00c0      	lsls	r0, r0, #3
c0d025a4:	182c      	adds	r4, r5, r0
c0d025a6:	2101      	movs	r1, #1
c0d025a8:	9102      	str	r1, [sp, #8]
c0d025aa:	2200      	movs	r2, #0
c0d025ac:	9207      	str	r2, [sp, #28]
c0d025ae:	4620      	mov	r0, r4
c0d025b0:	9409      	str	r4, [sp, #36]	; 0x24
c0d025b2:	960e      	str	r6, [sp, #56]	; 0x38
c0d025b4:	9e08      	ldr	r6, [sp, #32]
c0d025b6:	4632      	mov	r2, r6
c0d025b8:	930d      	str	r3, [sp, #52]	; 0x34
c0d025ba:	9b07      	ldr	r3, [sp, #28]
c0d025bc:	f000 fc2a 	bl	c0d02e14 <cx_hash_X>
                                         .header,
                                    CX_LAST, hashedPrevouts, 0, hashedPrevouts);
                            cx_sha256_init(
c0d025c0:	4620      	mov	r0, r4
c0d025c2:	f003 fc7b 	bl	c0d05ebc <cx_sha256_init>
                                &btchip_context_D.segwit.hash.hashPrevouts);
                            cx_hash(&btchip_context_D.segwit.hash.hashPrevouts
c0d025c6:	4668      	mov	r0, sp
c0d025c8:	6006      	str	r6, [r0, #0]
c0d025ca:	2320      	movs	r3, #32
c0d025cc:	9306      	str	r3, [sp, #24]
c0d025ce:	4620      	mov	r0, r4
c0d025d0:	9c02      	ldr	r4, [sp, #8]
c0d025d2:	4621      	mov	r1, r4
c0d025d4:	4632      	mov	r2, r6
c0d025d6:	f000 fc1d 	bl	c0d02e14 <cx_hash_X>
c0d025da:	ae1a      	add	r6, sp, #104	; 0x68
                                         .header,
                                    CX_LAST, hashedPrevouts,
                                    sizeof(hashedPrevouts), hashedPrevouts);
                            cx_hash(&btchip_context_D.segwit.hash.hashSequence
c0d025dc:	4668      	mov	r0, sp
c0d025de:	6006      	str	r6, [r0, #0]
c0d025e0:	2061      	movs	r0, #97	; 0x61
c0d025e2:	0080      	lsls	r0, r0, #2
c0d025e4:	182f      	adds	r7, r5, r0
c0d025e6:	4638      	mov	r0, r7
c0d025e8:	4621      	mov	r1, r4
c0d025ea:	4632      	mov	r2, r6
c0d025ec:	9b07      	ldr	r3, [sp, #28]
c0d025ee:	f000 fc11 	bl	c0d02e14 <cx_hash_X>
                                         .header,
                                    CX_LAST, hashedSequence, 0, hashedSequence);
                            cx_sha256_init(
c0d025f2:	4638      	mov	r0, r7
c0d025f4:	f003 fc62 	bl	c0d05ebc <cx_sha256_init>
                                &btchip_context_D.segwit.hash.hashSequence);
                            cx_hash(&btchip_context_D.segwit.hash.hashSequence
c0d025f8:	4668      	mov	r0, sp
c0d025fa:	6006      	str	r6, [r0, #0]
c0d025fc:	4638      	mov	r0, r7
c0d025fe:	9f18      	ldr	r7, [sp, #96]	; 0x60
c0d02600:	4621      	mov	r1, r4
c0d02602:	4632      	mov	r2, r6
c0d02604:	9c06      	ldr	r4, [sp, #24]
c0d02606:	4623      	mov	r3, r4
c0d02608:	f000 fc04 	bl	c0d02e14 <cx_hash_X>
                                         .header,
                                    CX_LAST, hashedSequence,
                                    sizeof(hashedSequence), hashedSequence);
                            os_memmove(
c0d0260c:	9809      	ldr	r0, [sp, #36]	; 0x24
c0d0260e:	9908      	ldr	r1, [sp, #32]
c0d02610:	4622      	mov	r2, r4
c0d02612:	f001 ffce 	bl	c0d045b2 <os_memmove>
                                btchip_context_D.segwit.cache.hashedPrevouts,
                                hashedPrevouts, sizeof(hashedPrevouts));
                            os_memmove(
c0d02616:	2027      	movs	r0, #39	; 0x27
c0d02618:	00c0      	lsls	r0, r0, #3
c0d0261a:	1828      	adds	r0, r5, r0
c0d0261c:	4631      	mov	r1, r6
c0d0261e:	4622      	mov	r2, r4
c0d02620:	f001 ffc7 	bl	c0d045b2 <os_memmove>
c0d02624:	980d      	ldr	r0, [sp, #52]	; 0x34
c0d02626:	5c28      	ldrb	r0, [r5, r0]
c0d02628:	990e      	ldr	r1, [sp, #56]	; 0x38
c0d0262a:	5c6a      	ldrb	r2, [r5, r1]
c0d0262c:	2109      	movs	r1, #9
                            L_DEBUG_BUF(
                                ("hashSequence\n",
                                 btchip_context_D.segwit.cache.hashedSequence,
                                 32));
                        }
                        if (btchip_context_D.usingSegwit &&
c0d0262e:	2a00      	cmp	r2, #0
c0d02630:	d100      	bne.n	c0d02634 <transaction_parse+0x24c>
c0d02632:	e758      	b.n	c0d024e6 <transaction_parse+0xfe>
c0d02634:	2800      	cmp	r0, #0
c0d02636:	d100      	bne.n	c0d0263a <transaction_parse+0x252>
c0d02638:	e755      	b.n	c0d024e6 <transaction_parse+0xfe>
                            L_DEBUG_BUF(
                                ("SEGWIT hashedOutputs\n",
                                 btchip_context_D.segwit.cache.hashedOutputs,
                                 sizeof(btchip_context_D.segwit.cache
                                            .hashedOutputs)));
                            cx_hash(
c0d0263a:	2100      	movs	r1, #0
c0d0263c:	4668      	mov	r0, sp
c0d0263e:	6001      	str	r1, [r0, #0]
c0d02640:	202b      	movs	r0, #43	; 0x2b
c0d02642:	00c0      	lsls	r0, r0, #3
c0d02644:	182a      	adds	r2, r5, r0
c0d02646:	4628      	mov	r0, r5
c0d02648:	303c      	adds	r0, #60	; 0x3c
c0d0264a:	2320      	movs	r3, #32
c0d0264c:	f000 fbe2 	bl	c0d02e14 <cx_hash_X>
c0d02650:	210a      	movs	r1, #10
c0d02652:	e748      	b.n	c0d024e6 <transaction_parse+0xfe>
c0d02654:	2700      	movs	r7, #0
                switch (btchip_context_D.transactionContext.transactionState) {
                case BTCHIP_TRANSACTION_NONE: {
                    L_DEBUG_APP(("Init transaction parser\n"));
                    // Reset transaction state
                    btchip_context_D.transactionContext
                        .transactionRemainingInputsOutputs = 0;
c0d02656:	60af      	str	r7, [r5, #8]
                    btchip_context_D.transactionContext
                        .transactionCurrentInputOutput = 0;
c0d02658:	60ef      	str	r7, [r5, #12]
                    btchip_context_D.transactionContext.scriptRemaining = 0;
c0d0265a:	612f      	str	r7, [r5, #16]
                    os_memset(
c0d0265c:	4628      	mov	r0, r5
c0d0265e:	3015      	adds	r0, #21
c0d02660:	2208      	movs	r2, #8
c0d02662:	4639      	mov	r1, r7
c0d02664:	f001 ff9c 	bl	c0d045a0 <os_memset>
                        btchip_context_D.transactionContext.transactionAmount,
                        0, sizeof(btchip_context_D.transactionContext
                                      .transactionAmount));
                    // TODO : transactionControlFid
                    // Reset hashes
                    cx_sha256_init(&btchip_context_D.transactionHashFull);
c0d02668:	462c      	mov	r4, r5
c0d0266a:	343c      	adds	r4, #60	; 0x3c
c0d0266c:	4620      	mov	r0, r4
c0d0266e:	f003 fc25 	bl	c0d05ebc <cx_sha256_init>
                    cx_sha256_init(
c0d02672:	462e      	mov	r6, r5
c0d02674:	36a8      	adds	r6, #168	; 0xa8
c0d02676:	4630      	mov	r0, r6
c0d02678:	f003 fc20 	bl	c0d05ebc <cx_sha256_init>
                        &btchip_context_D.transactionHashAuthorization);
                    if (btchip_context_D.usingSegwit) {
c0d0267c:	207f      	movs	r0, #127	; 0x7f
c0d0267e:	0080      	lsls	r0, r0, #2
c0d02680:	5c28      	ldrb	r0, [r5, r0]
c0d02682:	2800      	cmp	r0, #0
c0d02684:	d100      	bne.n	c0d02688 <transaction_parse+0x2a0>
c0d02686:	e08f      	b.n	c0d027a8 <transaction_parse+0x3c0>
                        btchip_context_D.transactionHashOption = 0;
c0d02688:	2045      	movs	r0, #69	; 0x45
c0d0268a:	0080      	lsls	r0, r0, #2
c0d0268c:	542f      	strb	r7, [r5, r0]
                        if (!btchip_context_D.segwitParsedOnce) {
c0d0268e:	20ff      	movs	r0, #255	; 0xff
c0d02690:	0040      	lsls	r0, r0, #1
c0d02692:	5c28      	ldrb	r0, [r5, r0]
c0d02694:	2800      	cmp	r0, #0
c0d02696:	d07d      	beq.n	c0d02794 <transaction_parse+0x3ac>
                            L_DEBUG_BUF(
                                ("SEGWIT HashedSequence\n",
                                 btchip_context_D.segwit.cache.hashedSequence,
                                 sizeof(btchip_context_D.segwit.cache
                                            .hashedSequence)));
                            cx_hash(
c0d02698:	4668      	mov	r0, sp
c0d0269a:	6007      	str	r7, [r0, #0]
c0d0269c:	201f      	movs	r0, #31
c0d0269e:	0100      	lsls	r0, r0, #4
c0d026a0:	182a      	adds	r2, r5, r0
c0d026a2:	2304      	movs	r3, #4
c0d026a4:	4620      	mov	r0, r4
c0d026a6:	4639      	mov	r1, r7
c0d026a8:	f000 fbb4 	bl	c0d02e14 <cx_hash_X>
                                &btchip_context_D.transactionHashFull.header, 0,
                                btchip_context_D.transactionVersion,
                                sizeof(btchip_context_D.transactionVersion),
                                NULL);
                            cx_hash(
c0d026ac:	4668      	mov	r0, sp
c0d026ae:	6007      	str	r7, [r0, #0]
c0d026b0:	2023      	movs	r0, #35	; 0x23
c0d026b2:	00c0      	lsls	r0, r0, #3
c0d026b4:	182a      	adds	r2, r5, r0
c0d026b6:	9205      	str	r2, [sp, #20]
c0d026b8:	2020      	movs	r0, #32
c0d026ba:	9003      	str	r0, [sp, #12]
c0d026bc:	4620      	mov	r0, r4
c0d026be:	4639      	mov	r1, r7
c0d026c0:	9b03      	ldr	r3, [sp, #12]
c0d026c2:	f000 fba7 	bl	c0d02e14 <cx_hash_X>
                                &btchip_context_D.transactionHashFull.header, 0,
                                btchip_context_D.segwit.cache.hashedPrevouts,
                                sizeof(btchip_context_D.segwit.cache
                                           .hashedPrevouts),
                                NULL);
                            cx_hash(
c0d026c6:	4668      	mov	r0, sp
c0d026c8:	6007      	str	r7, [r0, #0]
c0d026ca:	2027      	movs	r0, #39	; 0x27
c0d026cc:	00c0      	lsls	r0, r0, #3
c0d026ce:	182a      	adds	r2, r5, r0
c0d026d0:	4620      	mov	r0, r4
c0d026d2:	4639      	mov	r1, r7
c0d026d4:	9b03      	ldr	r3, [sp, #12]
c0d026d6:	f000 fb9d 	bl	c0d02e14 <cx_hash_X>
                                &btchip_context_D.transactionHashFull.header, 0,
                                btchip_context_D.segwit.cache.hashedSequence,
                                sizeof(btchip_context_D.segwit.cache
                                           .hashedSequence),
                                NULL);
                            cx_hash(&btchip_context_D
c0d026da:	4668      	mov	r0, sp
c0d026dc:	6007      	str	r7, [r0, #0]
c0d026de:	2360      	movs	r3, #96	; 0x60
c0d026e0:	4630      	mov	r0, r6
c0d026e2:	4639      	mov	r1, r7
c0d026e4:	9a05      	ldr	r2, [sp, #20]
c0d026e6:	f000 fb95 	bl	c0d02e14 <cx_hash_X>
c0d026ea:	e05d      	b.n	c0d027a8 <transaction_parse+0x3c0>
                                .transactionState =
                                BTCHIP_TRANSACTION_PRESIGN_READY;
                        }
                        continue;
                    }
                    if (btchip_context_D.transactionDataRemaining < 1) {
c0d026ec:	4828      	ldr	r0, [pc, #160]	; (c0d02790 <transaction_parse+0x3a8>)
c0d026ee:	5c28      	ldrb	r0, [r5, r0]
c0d026f0:	2800      	cmp	r0, #0
c0d026f2:	d100      	bne.n	c0d026f6 <transaction_parse+0x30e>
c0d026f4:	e24e      	b.n	c0d02b94 <transaction_parse+0x7ac>
                        goto ok;
                    }
                    // Number of outputs
                    btchip_context_D.transactionContext
                        .transactionRemainingInputsOutputs =
                        transaction_get_varint();
c0d026f6:	f7ff fe23 	bl	c0d02340 <transaction_get_varint>
c0d026fa:	2100      	movs	r1, #0
                        // No more data to read, ok
                        goto ok;
                    }
                    // Number of outputs
                    btchip_context_D.transactionContext
                        .transactionRemainingInputsOutputs =
c0d026fc:	60a8      	str	r0, [r5, #8]
                        transaction_get_varint();
                    btchip_context_D.transactionContext
                        .transactionCurrentInputOutput = 0;
c0d026fe:	60e9      	str	r1, [r5, #12]
                    L_DEBUG_APP(("Number of outputs : " DEBUG_LONG "\n",
                                 btchip_context_D.transactionContext
                                     .transactionRemainingInputsOutputs));
                    // Ready to proceed
                    btchip_context_D.transactionContext.transactionState =
c0d02700:	2104      	movs	r1, #4
c0d02702:	7529      	strb	r1, [r5, #20]
c0d02704:	2106      	movs	r1, #6
                        BTCHIP_TRANSACTION_DEFINED_WAIT_OUTPUT;

                    // no break is intentional
                }
                case BTCHIP_TRANSACTION_DEFINED_WAIT_OUTPUT: {
                    if (btchip_context_D.transactionContext
c0d02706:	2800      	cmp	r0, #0
c0d02708:	d100      	bne.n	c0d0270c <transaction_parse+0x324>
c0d0270a:	e6ec      	b.n	c0d024e6 <transaction_parse+0xfe>
                        // No more outputs to hash, move forward
                        btchip_context_D.transactionContext.transactionState =
                            BTCHIP_TRANSACTION_OUTPUT_HASHING_DONE;
                        continue;
                    }
                    if (btchip_context_D.transactionDataRemaining < 1) {
c0d0270c:	4820      	ldr	r0, [pc, #128]	; (c0d02790 <transaction_parse+0x3a8>)
c0d0270e:	5c28      	ldrb	r0, [r5, r0]
c0d02710:	2800      	cmp	r0, #0
c0d02712:	d100      	bne.n	c0d02716 <transaction_parse+0x32e>
c0d02714:	e23e      	b.n	c0d02b94 <transaction_parse+0x7ac>
#include "btchip_apdu_constants.h"

#define DEBUG_LONG "%ld"

void check_transaction_available(unsigned char x) {
    if (btchip_context_D.transactionDataRemaining < x) {
c0d02716:	2807      	cmp	r0, #7
c0d02718:	d800      	bhi.n	c0d0271c <transaction_parse+0x334>
c0d0271a:	e24a      	b.n	c0d02bb2 <transaction_parse+0x7ca>
                        // No more data to read, ok
                        goto ok;
                    }
                    // Amount
                    check_transaction_available(8);
                    if ((parseMode == PARSE_MODE_TRUSTED_INPUT) &&
c0d0271c:	9819      	ldr	r0, [sp, #100]	; 0x64
c0d0271e:	2801      	cmp	r0, #1
c0d02720:	d110      	bne.n	c0d02744 <transaction_parse+0x35c>
                        (btchip_context_D.transactionContext
                             .transactionCurrentInputOutput ==
                         btchip_context_D.transactionTargetInput)) {
c0d02722:	2041      	movs	r0, #65	; 0x41
c0d02724:	00c0      	lsls	r0, r0, #3
c0d02726:	5828      	ldr	r0, [r5, r0]
                    }
                    // Amount
                    check_transaction_available(8);
                    if ((parseMode == PARSE_MODE_TRUSTED_INPUT) &&
                        (btchip_context_D.transactionContext
                             .transactionCurrentInputOutput ==
c0d02728:	68e9      	ldr	r1, [r5, #12]
                        // No more data to read, ok
                        goto ok;
                    }
                    // Amount
                    check_transaction_available(8);
                    if ((parseMode == PARSE_MODE_TRUSTED_INPUT) &&
c0d0272a:	4281      	cmp	r1, r0
c0d0272c:	d10a      	bne.n	c0d02744 <transaction_parse+0x35c>
c0d0272e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
                             .transactionCurrentInputOutput ==
                         btchip_context_D.transactionTargetInput)) {
                        // Save the amount
                        os_memmove(btchip_context_D.transactionContext
                                       .transactionAmount,
                                   btchip_context_D.transactionBufferPointer,
c0d02730:	0260      	lsls	r0, r4, #9
c0d02732:	5829      	ldr	r1, [r5, r0]
                    if ((parseMode == PARSE_MODE_TRUSTED_INPUT) &&
                        (btchip_context_D.transactionContext
                             .transactionCurrentInputOutput ==
                         btchip_context_D.transactionTargetInput)) {
                        // Save the amount
                        os_memmove(btchip_context_D.transactionContext
c0d02734:	4628      	mov	r0, r5
c0d02736:	3015      	adds	r0, #21
c0d02738:	2208      	movs	r2, #8
c0d0273a:	f001 ff3a 	bl	c0d045b2 <os_memmove>
                                       .transactionAmount,
                                   btchip_context_D.transactionBufferPointer,
                                   8);
                        btchip_context_D.trustedInputProcessed = 1;
c0d0273e:	2081      	movs	r0, #129	; 0x81
c0d02740:	0080      	lsls	r0, r0, #2
c0d02742:	542c      	strb	r4, [r5, r0]
c0d02744:	2008      	movs	r0, #8
                btchip_context_D.transactionBufferPointer, value, NULL);
    }
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
c0d02746:	f7ff fdd5 	bl	c0d022f4 <transaction_offset>
    btchip_context_D.transactionBufferPointer += value;
c0d0274a:	9817      	ldr	r0, [sp, #92]	; 0x5c
c0d0274c:	0240      	lsls	r0, r0, #9
c0d0274e:	5829      	ldr	r1, [r5, r0]
c0d02750:	3108      	adds	r1, #8
c0d02752:	5029      	str	r1, [r5, r0]
    btchip_context_D.transactionDataRemaining -= value;
c0d02754:	480e      	ldr	r0, [pc, #56]	; (c0d02790 <transaction_parse+0x3a8>)
c0d02756:	5c29      	ldrb	r1, [r5, r0]
c0d02758:	31f8      	adds	r1, #248	; 0xf8
c0d0275a:	5429      	strb	r1, [r5, r0]
                        btchip_context_D.trustedInputProcessed = 1;
                    }
                    transaction_offset_increase(8);
                    // Read the script length
                    btchip_context_D.transactionContext.scriptRemaining =
                        transaction_get_varint();
c0d0275c:	f7ff fdf0 	bl	c0d02340 <transaction_get_varint>
                                   8);
                        btchip_context_D.trustedInputProcessed = 1;
                    }
                    transaction_offset_increase(8);
                    // Read the script length
                    btchip_context_D.transactionContext.scriptRemaining =
c0d02760:	6128      	str	r0, [r5, #16]

                    L_DEBUG_APP(
                        ("Script to read " DEBUG_LONG "\n",
                         btchip_context_D.transactionContext.scriptRemaining));
                    // Move on
                    btchip_context_D.transactionContext.transactionState =
c0d02762:	2005      	movs	r0, #5
c0d02764:	7528      	strb	r0, [r5, #20]
                        L_DEBUG_APP(("Marking P2SH output\n"));
                        btchip_context_D.transactionContext.consumeP2SH = 1;
                      }
                    }
                    */
                    if (btchip_context_D.transactionDataRemaining < 1) {
c0d02766:	480a      	ldr	r0, [pc, #40]	; (c0d02790 <transaction_parse+0x3a8>)
c0d02768:	5c28      	ldrb	r0, [r5, r0]
c0d0276a:	2800      	cmp	r0, #0
c0d0276c:	d100      	bne.n	c0d02770 <transaction_parse+0x388>
c0d0276e:	e211      	b.n	c0d02b94 <transaction_parse+0x7ac>
                        // No more data to read, ok
                        goto ok;
                    }
                    if (btchip_context_D.transactionContext.scriptRemaining ==
c0d02770:	692c      	ldr	r4, [r5, #16]
c0d02772:	2c00      	cmp	r4, #0
c0d02774:	d000      	beq.n	c0d02778 <transaction_parse+0x390>
c0d02776:	e207      	b.n	c0d02b88 <transaction_parse+0x7a0>
                        0) {
                        // Move to next output
                        btchip_context_D.transactionContext
                            .transactionRemainingInputsOutputs--;
c0d02778:	68a8      	ldr	r0, [r5, #8]
c0d0277a:	1e40      	subs	r0, r0, #1
c0d0277c:	60a8      	str	r0, [r5, #8]
                        btchip_context_D.transactionContext
                            .transactionCurrentInputOutput++;
c0d0277e:	68e8      	ldr	r0, [r5, #12]
c0d02780:	1c40      	adds	r0, r0, #1
c0d02782:	60e8      	str	r0, [r5, #12]
c0d02784:	2104      	movs	r1, #4
c0d02786:	e6ae      	b.n	c0d024e6 <transaction_parse+0xfe>
c0d02788:	c0d08980 	.word	0xc0d08980
c0d0278c:	20001874 	.word	0x20001874
c0d02790:	000001ff 	.word	0x000001ff
c0d02794:	2023      	movs	r0, #35	; 0x23
c0d02796:	00c0      	lsls	r0, r0, #3
                    cx_sha256_init(
                        &btchip_context_D.transactionHashAuthorization);
                    if (btchip_context_D.usingSegwit) {
                        btchip_context_D.transactionHashOption = 0;
                        if (!btchip_context_D.segwitParsedOnce) {
                            cx_sha256_init(
c0d02798:	1828      	adds	r0, r5, r0
c0d0279a:	f003 fb8f 	bl	c0d05ebc <cx_sha256_init>
                                &btchip_context_D.segwit.hash.hashPrevouts);
                            cx_sha256_init(
c0d0279e:	2061      	movs	r0, #97	; 0x61
c0d027a0:	0080      	lsls	r0, r0, #2
c0d027a2:	1828      	adds	r0, r5, r0
c0d027a4:	f003 fb8a 	bl	c0d05ebc <cx_sha256_init>
#include "btchip_apdu_constants.h"

#define DEBUG_LONG "%ld"

void check_transaction_available(unsigned char x) {
    if (btchip_context_D.transactionDataRemaining < x) {
c0d027a8:	48f4      	ldr	r0, [pc, #976]	; (c0d02b7c <transaction_parse+0x794>)
c0d027aa:	5c28      	ldrb	r0, [r5, r0]
c0d027ac:	2803      	cmp	r0, #3
c0d027ae:	d800      	bhi.n	c0d027b2 <transaction_parse+0x3ca>
c0d027b0:	e1ff      	b.n	c0d02bb2 <transaction_parse+0x7ca>
                    }
                    // Parse the beginning of the transaction
                    // Version
                    check_transaction_available(4);
                    os_memmove(btchip_context_D.transactionVersion,
                               btchip_context_D.transactionBufferPointer, 4);
c0d027b2:	2601      	movs	r6, #1
c0d027b4:	0277      	lsls	r7, r6, #9
c0d027b6:	59e9      	ldr	r1, [r5, r7]
                        }
                    }
                    // Parse the beginning of the transaction
                    // Version
                    check_transaction_available(4);
                    os_memmove(btchip_context_D.transactionVersion,
c0d027b8:	201f      	movs	r0, #31
c0d027ba:	0100      	lsls	r0, r0, #4
c0d027bc:	1828      	adds	r0, r5, r0
c0d027be:	2404      	movs	r4, #4
c0d027c0:	4622      	mov	r2, r4
c0d027c2:	f001 fef6 	bl	c0d045b2 <os_memmove>
                btchip_context_D.transactionBufferPointer, value, NULL);
    }
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
c0d027c6:	4620      	mov	r0, r4
c0d027c8:	f7ff fd94 	bl	c0d022f4 <transaction_offset>
    btchip_context_D.transactionBufferPointer += value;
c0d027cc:	59e8      	ldr	r0, [r5, r7]
c0d027ce:	1d00      	adds	r0, r0, #4
c0d027d0:	51e8      	str	r0, [r5, r7]
    btchip_context_D.transactionDataRemaining -= value;
c0d027d2:	49ea      	ldr	r1, [pc, #936]	; (c0d02b7c <transaction_parse+0x794>)
c0d027d4:	5c68      	ldrb	r0, [r5, r1]
c0d027d6:	30fc      	adds	r0, #252	; 0xfc
c0d027d8:	5468      	strb	r0, [r5, r1]
                    os_memmove(btchip_context_D.transactionVersion,
                               btchip_context_D.transactionBufferPointer, 4);
                    transaction_offset_increase(4);

                    if (G_coin_config->flags & FLAG_PEERCOIN_SUPPORT) {
                        if (btchip_context_D.coinFamily ==
c0d027da:	2124      	movs	r1, #36	; 0x24
                    check_transaction_available(4);
                    os_memmove(btchip_context_D.transactionVersion,
                               btchip_context_D.transactionBufferPointer, 4);
                    transaction_offset_increase(4);

                    if (G_coin_config->flags & FLAG_PEERCOIN_SUPPORT) {
c0d027dc:	4afb      	ldr	r2, [pc, #1004]	; (c0d02bcc <transaction_parse+0x7e4>)
c0d027de:	6812      	ldr	r2, [r2, #0]
c0d027e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
c0d027e2:	0792      	lsls	r2, r2, #30
c0d027e4:	d510      	bpl.n	c0d02808 <transaction_parse+0x420>
c0d027e6:	5c69      	ldrb	r1, [r5, r1]
c0d027e8:	2902      	cmp	r1, #2
c0d027ea:	d10d      	bne.n	c0d02808 <transaction_parse+0x420>
c0d027ec:	b2c0      	uxtb	r0, r0
#include "btchip_apdu_constants.h"

#define DEBUG_LONG "%ld"

void check_transaction_available(unsigned char x) {
    if (btchip_context_D.transactionDataRemaining < x) {
c0d027ee:	2803      	cmp	r0, #3
c0d027f0:	d800      	bhi.n	c0d027f4 <transaction_parse+0x40c>
c0d027f2:	e1de      	b.n	c0d02bb2 <transaction_parse+0x7ca>
c0d027f4:	2004      	movs	r0, #4
                btchip_context_D.transactionBufferPointer, value, NULL);
    }
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
c0d027f6:	f7ff fd7d 	bl	c0d022f4 <transaction_offset>
    btchip_context_D.transactionBufferPointer += value;
c0d027fa:	59e8      	ldr	r0, [r5, r7]
c0d027fc:	1d00      	adds	r0, r0, #4
c0d027fe:	51e8      	str	r0, [r5, r7]
    btchip_context_D.transactionDataRemaining -= value;
c0d02800:	48f5      	ldr	r0, [pc, #980]	; (c0d02bd8 <transaction_parse+0x7f0>)
c0d02802:	5c29      	ldrb	r1, [r5, r0]
c0d02804:	31fc      	adds	r1, #252	; 0xfc
c0d02806:	5429      	strb	r1, [r5, r0]
                    }

                    // Number of inputs
                    btchip_context_D.transactionContext
                        .transactionRemainingInputsOutputs =
                        transaction_get_varint();
c0d02808:	f7ff fd9a 	bl	c0d02340 <transaction_get_varint>
                        }
                    }

                    // Number of inputs
                    btchip_context_D.transactionContext
                        .transactionRemainingInputsOutputs =
c0d0280c:	60a8      	str	r0, [r5, #8]
                        transaction_get_varint();
                    L_DEBUG_APP(("Number of inputs : " DEBUG_LONG "\n",
                                 btchip_context_D.transactionContext
                                     .transactionRemainingInputsOutputs));
                    // Ready to proceed
                    btchip_context_D.transactionContext.transactionState =
c0d0280e:	752e      	strb	r6, [r5, #20]
c0d02810:	9f18      	ldr	r7, [sp, #96]	; 0x60
                }

                case BTCHIP_TRANSACTION_DEFINED_WAIT_INPUT: {
                    unsigned char trustedInputFlag = 1;
                    L_DEBUG_APP(("Process input\n"));
                    if (btchip_context_D.transactionContext
c0d02812:	2800      	cmp	r0, #0
c0d02814:	d100      	bne.n	c0d02818 <transaction_parse+0x430>
c0d02816:	e1ae      	b.n	c0d02b76 <transaction_parse+0x78e>
                        // No more inputs to hash, move forward
                        btchip_context_D.transactionContext.transactionState =
                            BTCHIP_TRANSACTION_INPUT_HASHING_DONE;
                        continue;
                    }
                    if (btchip_context_D.transactionDataRemaining < 1) {
c0d02818:	48ef      	ldr	r0, [pc, #956]	; (c0d02bd8 <transaction_parse+0x7f0>)
c0d0281a:	5c28      	ldrb	r0, [r5, r0]
c0d0281c:	2800      	cmp	r0, #0
c0d0281e:	d100      	bne.n	c0d02822 <transaction_parse+0x43a>
c0d02820:	e1b8      	b.n	c0d02b94 <transaction_parse+0x7ac>
c0d02822:	2401      	movs	r4, #1
                        // No more data to read, ok
                        goto ok;
                    }
                    // Proceed with the next input
                    if (parseMode == PARSE_MODE_TRUSTED_INPUT) {
c0d02824:	9919      	ldr	r1, [sp, #100]	; 0x64
c0d02826:	2902      	cmp	r1, #2
c0d02828:	d015      	beq.n	c0d02856 <transaction_parse+0x46e>
c0d0282a:	9919      	ldr	r1, [sp, #100]	; 0x64
c0d0282c:	460f      	mov	r7, r1
c0d0282e:	2901      	cmp	r1, #1
c0d02830:	4626      	mov	r6, r4
c0d02832:	d000      	beq.n	c0d02836 <transaction_parse+0x44e>
c0d02834:	e158      	b.n	c0d02ae8 <transaction_parse+0x700>
#include "btchip_apdu_constants.h"

#define DEBUG_LONG "%ld"

void check_transaction_available(unsigned char x) {
    if (btchip_context_D.transactionDataRemaining < x) {
c0d02836:	2823      	cmp	r0, #35	; 0x23
c0d02838:	d800      	bhi.n	c0d0283c <transaction_parse+0x454>
c0d0283a:	e1ba      	b.n	c0d02bb2 <transaction_parse+0x7ca>
c0d0283c:	2024      	movs	r0, #36	; 0x24
                btchip_context_D.transactionBufferPointer, value, NULL);
    }
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
c0d0283e:	f7ff fd59 	bl	c0d022f4 <transaction_offset>
c0d02842:	2601      	movs	r6, #1
    btchip_context_D.transactionBufferPointer += value;
c0d02844:	0270      	lsls	r0, r6, #9
c0d02846:	5829      	ldr	r1, [r5, r0]
c0d02848:	3124      	adds	r1, #36	; 0x24
c0d0284a:	5029      	str	r1, [r5, r0]
    btchip_context_D.transactionDataRemaining -= value;
c0d0284c:	48e2      	ldr	r0, [pc, #904]	; (c0d02bd8 <transaction_parse+0x7f0>)
c0d0284e:	5c29      	ldrb	r1, [r5, r0]
c0d02850:	31dc      	adds	r1, #220	; 0xdc
c0d02852:	5429      	strb	r1, [r5, r0]
c0d02854:	e148      	b.n	c0d02ae8 <transaction_parse+0x700>
#include "btchip_apdu_constants.h"

#define DEBUG_LONG "%ld"

void check_transaction_available(unsigned char x) {
    if (btchip_context_D.transactionDataRemaining < x) {
c0d02856:	2801      	cmp	r0, #1
c0d02858:	d800      	bhi.n	c0d0285c <transaction_parse+0x474>
c0d0285a:	e1aa      	b.n	c0d02bb2 <transaction_parse+0x7ca>
                        unsigned char *savePointer;

                        // Expect the trusted input flag and trusted input
                        // length
                        check_transaction_available(2);
                        switch (*btchip_context_D.transactionBufferPointer) {
c0d0285c:	2101      	movs	r1, #1
c0d0285e:	9111      	str	r1, [sp, #68]	; 0x44
c0d02860:	0249      	lsls	r1, r1, #9
c0d02862:	9110      	str	r1, [sp, #64]	; 0x40
c0d02864:	5869      	ldr	r1, [r5, r1]
c0d02866:	780a      	ldrb	r2, [r1, #0]
c0d02868:	2300      	movs	r3, #0
c0d0286a:	43df      	mvns	r7, r3
c0d0286c:	2a02      	cmp	r2, #2
c0d0286e:	d03e      	beq.n	c0d028ee <transaction_parse+0x506>
c0d02870:	2a01      	cmp	r2, #1
c0d02872:	d100      	bne.n	c0d02876 <transaction_parse+0x48e>
c0d02874:	e084      	b.n	c0d02980 <transaction_parse+0x598>
c0d02876:	2a00      	cmp	r2, #0
c0d02878:	d000      	beq.n	c0d0287c <transaction_parse+0x494>
c0d0287a:	e19a      	b.n	c0d02bb2 <transaction_parse+0x7ca>
                        case 0:
                            if (btchip_context_D.usingSegwit) {
c0d0287c:	207f      	movs	r0, #127	; 0x7f
c0d0287e:	0080      	lsls	r0, r0, #2
c0d02880:	5c28      	ldrb	r0, [r5, r0]
c0d02882:	2800      	cmp	r0, #0
c0d02884:	d000      	beq.n	c0d02888 <transaction_parse+0x4a0>
c0d02886:	e194      	b.n	c0d02bb2 <transaction_parse+0x7ca>
c0d02888:	4627      	mov	r7, r4
c0d0288a:	4cd1      	ldr	r4, [pc, #836]	; (c0d02bd0 <transaction_parse+0x7e8>)
                                    TRANSACTION_HASH_FULL;
                            }
                        } else if (!trustedInputFlag) {
                            // Only authorized in relaxed wallet and server
                            // modes
                            SB_CHECK(N_btchip.bkp.config.operationMode);
c0d0288c:	4620      	mov	r0, r4
c0d0288e:	9312      	str	r3, [sp, #72]	; 0x48
c0d02890:	f003 f934 	bl	c0d05afc <pic>
c0d02894:	8880      	ldrh	r0, [r0, #4]
c0d02896:	f7ff fce0 	bl	c0d0225a <sbCheck>
                            switch (SB_GET(N_btchip.bkp.config.operationMode)) {
c0d0289a:	4620      	mov	r0, r4
c0d0289c:	463c      	mov	r4, r7
c0d0289e:	f003 f92d 	bl	c0d05afc <pic>
c0d028a2:	7900      	ldrb	r0, [r0, #4]
c0d028a4:	2804      	cmp	r0, #4
c0d028a6:	d008      	beq.n	c0d028ba <transaction_parse+0x4d2>
c0d028a8:	2802      	cmp	r0, #2
c0d028aa:	d006      	beq.n	c0d028ba <transaction_parse+0x4d2>
c0d028ac:	2801      	cmp	r0, #1
c0d028ae:	d000      	beq.n	c0d028b2 <transaction_parse+0x4ca>
c0d028b0:	e17f      	b.n	c0d02bb2 <transaction_parse+0x7ca>
                            case BTCHIP_MODE_WALLET:
                                if (!optionP2SHSkip2FA) {
c0d028b2:	9818      	ldr	r0, [sp, #96]	; 0x60
c0d028b4:	2800      	cmp	r0, #0
c0d028b6:	d100      	bne.n	c0d028ba <transaction_parse+0x4d2>
c0d028b8:	e17b      	b.n	c0d02bb2 <transaction_parse+0x7ca>
c0d028ba:	9f10      	ldr	r7, [sp, #64]	; 0x40
                            default:
                                L_DEBUG_APP(
                                    ("Untrusted input not authorized\n"));
                                goto fail;
                            }
                            btchip_context_D.transactionBufferPointer++;
c0d028bc:	59e8      	ldr	r0, [r5, r7]
c0d028be:	1c40      	adds	r0, r0, #1
c0d028c0:	51e8      	str	r0, [r5, r7]
                            btchip_context_D.transactionDataRemaining--;
c0d028c2:	48c5      	ldr	r0, [pc, #788]	; (c0d02bd8 <transaction_parse+0x7f0>)
c0d028c4:	5c29      	ldrb	r1, [r5, r0]
c0d028c6:	1e49      	subs	r1, r1, #1
c0d028c8:	5429      	strb	r1, [r5, r0]
c0d028ca:	b2c8      	uxtb	r0, r1
#include "btchip_apdu_constants.h"

#define DEBUG_LONG "%ld"

void check_transaction_available(unsigned char x) {
    if (btchip_context_D.transactionDataRemaining < x) {
c0d028cc:	2823      	cmp	r0, #35	; 0x23
c0d028ce:	d800      	bhi.n	c0d028d2 <transaction_parse+0x4ea>
c0d028d0:	e16f      	b.n	c0d02bb2 <transaction_parse+0x7ca>
c0d028d2:	2024      	movs	r0, #36	; 0x24
                btchip_context_D.transactionBufferPointer, value, NULL);
    }
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
c0d028d4:	f7ff fd0e 	bl	c0d022f4 <transaction_offset>
    btchip_context_D.transactionBufferPointer += value;
c0d028d8:	59e8      	ldr	r0, [r5, r7]
c0d028da:	3024      	adds	r0, #36	; 0x24
c0d028dc:	51e8      	str	r0, [r5, r7]
    btchip_context_D.transactionDataRemaining -= value;
c0d028de:	48be      	ldr	r0, [pc, #760]	; (c0d02bd8 <transaction_parse+0x7f0>)
c0d028e0:	5c29      	ldrb	r1, [r5, r0]
c0d028e2:	31dc      	adds	r1, #220	; 0xdc
c0d028e4:	5429      	strb	r1, [r5, r0]
                            btchip_context_D.transactionDataRemaining--;
                            check_transaction_available(
                                36); // prevout : 32 hash + 4 index
                            transaction_offset_increase(36);
                            L_DEBUG_APP(("Marking relaxed input\n"));
                            btchip_context_D.transactionContext.relaxed = 1;
c0d028e6:	9811      	ldr	r0, [sp, #68]	; 0x44
c0d028e8:	77a8      	strb	r0, [r5, #30]
c0d028ea:	9e12      	ldr	r6, [sp, #72]	; 0x48
c0d028ec:	e0f2      	b.n	c0d02ad4 <transaction_parse+0x6ec>
                                goto fail;
                            }
                            trustedInputFlag = 1;
                            break;
                        case 2:
                            if (!btchip_context_D.usingSegwit) {
c0d028ee:	207f      	movs	r0, #127	; 0x7f
c0d028f0:	0080      	lsls	r0, r0, #2
c0d028f2:	5c28      	ldrb	r0, [r5, r0]
c0d028f4:	2800      	cmp	r0, #0
c0d028f6:	d100      	bne.n	c0d028fa <transaction_parse+0x512>
c0d028f8:	e15b      	b.n	c0d02bb2 <transaction_parse+0x7ca>
c0d028fa:	9413      	str	r4, [sp, #76]	; 0x4c
    }
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
    btchip_context_D.transactionBufferPointer += value;
c0d028fc:	2401      	movs	r4, #1
                btchip_context_D.transactionBufferPointer, value, NULL);
    }
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
c0d028fe:	4620      	mov	r0, r4
c0d02900:	f7ff fcf8 	bl	c0d022f4 <transaction_offset>
c0d02904:	4623      	mov	r3, r4
    btchip_context_D.transactionBufferPointer += value;
c0d02906:	025c      	lsls	r4, r3, #9
c0d02908:	5928      	ldr	r0, [r5, r4]
c0d0290a:	1c42      	adds	r2, r0, #1
c0d0290c:	512a      	str	r2, [r5, r4]
    btchip_context_D.transactionDataRemaining -= value;
c0d0290e:	48b2      	ldr	r0, [pc, #712]	; (c0d02bd8 <transaction_parse+0x7f0>)
c0d02910:	5c29      	ldrb	r1, [r5, r0]
c0d02912:	31ff      	adds	r1, #255	; 0xff
c0d02914:	5429      	strb	r1, [r5, r0]
c0d02916:	b2c8      	uxtb	r0, r1
#include "btchip_apdu_constants.h"

#define DEBUG_LONG "%ld"

void check_transaction_available(unsigned char x) {
    if (btchip_context_D.transactionDataRemaining < x) {
c0d02918:	2823      	cmp	r0, #35	; 0x23
c0d0291a:	d800      	bhi.n	c0d0291e <transaction_parse+0x536>
c0d0291c:	e149      	b.n	c0d02bb2 <transaction_parse+0x7ca>
                        */
                        if (btchip_context_D.usingSegwit) {
                            transaction_offset_increase(1);
                            check_transaction_available(
                                36); // prevout : 32 hash + 4 index
                            if (!btchip_context_D.segwitParsedOnce) {
c0d0291e:	20ff      	movs	r0, #255	; 0xff
c0d02920:	0040      	lsls	r0, r0, #1
c0d02922:	5c28      	ldrb	r0, [r5, r0]
c0d02924:	2800      	cmp	r0, #0
c0d02926:	d100      	bne.n	c0d0292a <transaction_parse+0x542>
c0d02928:	e091      	b.n	c0d02a4e <transaction_parse+0x666>
                                             btchip_context_D.transactionContext
                                                 .transactionAmount,
                                             8));
                                transaction_offset_increase(8);
                            } else {
                                btchip_context_D.transactionHashOption =
c0d0292a:	2045      	movs	r0, #69	; 0x45
c0d0292c:	0087      	lsls	r7, r0, #2
c0d0292e:	55eb      	strb	r3, [r5, r7]
c0d02930:	2024      	movs	r0, #36	; 0x24
c0d02932:	9312      	str	r3, [sp, #72]	; 0x48
                btchip_context_D.transactionBufferPointer, value, NULL);
    }
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
c0d02934:	f7ff fcde 	bl	c0d022f4 <transaction_offset>
    btchip_context_D.transactionBufferPointer += value;
c0d02938:	5929      	ldr	r1, [r5, r4]
c0d0293a:	3124      	adds	r1, #36	; 0x24
c0d0293c:	5129      	str	r1, [r5, r4]
    btchip_context_D.transactionDataRemaining -= value;
c0d0293e:	48a6      	ldr	r0, [pc, #664]	; (c0d02bd8 <transaction_parse+0x7f0>)
c0d02940:	5c2a      	ldrb	r2, [r5, r0]
c0d02942:	32dc      	adds	r2, #220	; 0xdc
c0d02944:	542a      	strb	r2, [r5, r0]
                                transaction_offset_increase(8);
                            } else {
                                btchip_context_D.transactionHashOption =
                                    TRANSACTION_HASH_FULL;
                                transaction_offset_increase(36);
                                btchip_context_D.transactionHashOption = 0;
c0d02946:	2000      	movs	r0, #0
c0d02948:	970a      	str	r7, [sp, #40]	; 0x28
c0d0294a:	55e8      	strb	r0, [r5, r7]
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
    btchip_context_D.transactionBufferPointer += value;
    btchip_context_D.transactionDataRemaining -= value;
c0d0294c:	b2d0      	uxtb	r0, r2
#include "btchip_apdu_constants.h"

#define DEBUG_LONG "%ld"

void check_transaction_available(unsigned char x) {
    if (btchip_context_D.transactionDataRemaining < x) {
c0d0294e:	2807      	cmp	r0, #7
c0d02950:	d800      	bhi.n	c0d02954 <transaction_parse+0x56c>
c0d02952:	e12e      	b.n	c0d02bb2 <transaction_parse+0x7ca>
                                btchip_context_D.transactionHashOption =
                                    TRANSACTION_HASH_FULL;
                                transaction_offset_increase(36);
                                btchip_context_D.transactionHashOption = 0;
                                check_transaction_available(8); // save amount
                                os_memmove(
c0d02954:	207d      	movs	r0, #125	; 0x7d
c0d02956:	0080      	lsls	r0, r0, #2
c0d02958:	1828      	adds	r0, r5, r0
c0d0295a:	2708      	movs	r7, #8
c0d0295c:	463a      	mov	r2, r7
c0d0295e:	f001 fe28 	bl	c0d045b2 <os_memmove>
                btchip_context_D.transactionBufferPointer, value, NULL);
    }
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
c0d02962:	4638      	mov	r0, r7
c0d02964:	f7ff fcc6 	bl	c0d022f4 <transaction_offset>
    btchip_context_D.transactionBufferPointer += value;
c0d02968:	5928      	ldr	r0, [r5, r4]
c0d0296a:	3008      	adds	r0, #8
c0d0296c:	5128      	str	r0, [r5, r4]
    btchip_context_D.transactionDataRemaining -= value;
c0d0296e:	489a      	ldr	r0, [pc, #616]	; (c0d02bd8 <transaction_parse+0x7f0>)
c0d02970:	5c29      	ldrb	r1, [r5, r0]
c0d02972:	31f8      	adds	r1, #248	; 0xf8
c0d02974:	5429      	strb	r1, [r5, r0]
                                os_memmove(
                                    btchip_context_D.inputValue,
                                    btchip_context_D.transactionBufferPointer,
                                    8);
                                transaction_offset_increase(8);
                                btchip_context_D.transactionHashOption =
c0d02976:	980a      	ldr	r0, [sp, #40]	; 0x28
c0d02978:	9e12      	ldr	r6, [sp, #72]	; 0x48
c0d0297a:	542e      	strb	r6, [r5, r0]
c0d0297c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
c0d0297e:	e0a9      	b.n	c0d02ad4 <transaction_parse+0x6ec>
                                goto fail;
                            }
                            trustedInputFlag = 0;
                            break;
                        case 1:
                            if (btchip_context_D.usingSegwit) {
c0d02980:	227f      	movs	r2, #127	; 0x7f
c0d02982:	0092      	lsls	r2, r2, #2
c0d02984:	5caa      	ldrb	r2, [r5, r2]
c0d02986:	2a00      	cmp	r2, #0
c0d02988:	d000      	beq.n	c0d0298c <transaction_parse+0x5a4>
c0d0298a:	e112      	b.n	c0d02bb2 <transaction_parse+0x7ca>
                            /*
                            L_DEBUG_APP(("Clearing P2SH consumption\n"));
                            btchip_context_D.transactionContext.consumeP2SH = 0;
                            */
                        } else {
                            trustedInputLength = *(
c0d0298c:	784e      	ldrb	r6, [r1, #1]
                                btchip_context_D.transactionBufferPointer + 1);
                            if ((trustedInputLength > sizeof(trustedInput)) ||
c0d0298e:	4632      	mov	r2, r6
c0d02990:	3a08      	subs	r2, #8
c0d02992:	b2d1      	uxtb	r1, r2
c0d02994:	2930      	cmp	r1, #48	; 0x30
c0d02996:	d900      	bls.n	c0d0299a <transaction_parse+0x5b2>
c0d02998:	e10b      	b.n	c0d02bb2 <transaction_parse+0x7ca>
c0d0299a:	920c      	str	r2, [sp, #48]	; 0x30
                                (trustedInputLength < 8)) {
                                L_DEBUG_APP(("Invalid trusted input size\n"));
                                goto fail;
                            }

                            check_transaction_available(2 + trustedInputLength);
c0d0299c:	1cb1      	adds	r1, r6, #2
c0d0299e:	910f      	str	r1, [sp, #60]	; 0x3c
c0d029a0:	b2c9      	uxtb	r1, r1
#include "btchip_apdu_constants.h"

#define DEBUG_LONG "%ld"

void check_transaction_available(unsigned char x) {
    if (btchip_context_D.transactionDataRemaining < x) {
c0d029a2:	4288      	cmp	r0, r1
c0d029a4:	d200      	bcs.n	c0d029a8 <transaction_parse+0x5c0>
c0d029a6:	e104      	b.n	c0d02bb2 <transaction_parse+0x7ca>
                                L_DEBUG_APP(("Invalid trusted input size\n"));
                                goto fail;
                            }

                            check_transaction_available(2 + trustedInputLength);
                            cx_hmac_sha256(
c0d029a8:	4889      	ldr	r0, [pc, #548]	; (c0d02bd0 <transaction_parse+0x7e8>)
c0d029aa:	f003 f8a7 	bl	c0d05afc <pic>
c0d029ae:	9910      	ldr	r1, [sp, #64]	; 0x40
c0d029b0:	5869      	ldr	r1, [r5, r1]
c0d029b2:	ab22      	add	r3, sp, #136	; 0x88
c0d029b4:	9304      	str	r3, [sp, #16]
c0d029b6:	466a      	mov	r2, sp
c0d029b8:	6013      	str	r3, [r2, #0]
c0d029ba:	1c8a      	adds	r2, r1, #2
c0d029bc:	3008      	adds	r0, #8
c0d029be:	2120      	movs	r1, #32
c0d029c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
c0d029c2:	f000 fa4e 	bl	c0d02e62 <cx_hmac_sha256_X>
                                sizeof(N_btchip.bkp.trustedinput_key),
                                btchip_context_D.transactionBufferPointer + 2,
                                trustedInputLength - 8, trustedInput);
                            if (btchip_secure_memcmp(
                                    trustedInput,
                                    btchip_context_D.transactionBufferPointer +
c0d029c6:	9810      	ldr	r0, [sp, #64]	; 0x40
c0d029c8:	5828      	ldr	r0, [r5, r0]
c0d029ca:	1980      	adds	r0, r0, r6
                                        2 + trustedInputLength - 8,
c0d029cc:	19c0      	adds	r0, r0, r7
c0d029ce:	1f41      	subs	r1, r0, #5
c0d029d0:	2208      	movs	r2, #8
                            cx_hmac_sha256(
                                N_btchip.bkp.trustedinput_key,
                                sizeof(N_btchip.bkp.trustedinput_key),
                                btchip_context_D.transactionBufferPointer + 2,
                                trustedInputLength - 8, trustedInput);
                            if (btchip_secure_memcmp(
c0d029d2:	9804      	ldr	r0, [sp, #16]
c0d029d4:	f7ff fadf 	bl	c0d01f96 <btchip_secure_memcmp>
c0d029d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
c0d029da:	2800      	cmp	r0, #0
c0d029dc:	d000      	beq.n	c0d029e0 <transaction_parse+0x5f8>
c0d029de:	e0e8      	b.n	c0d02bb2 <transaction_parse+0x7ca>
                                L_DEBUG_APP(("Invalid signature\n"));
                                goto fail;
                            }
                            os_memmove(
                                trustedInput,
                                btchip_context_D.transactionBufferPointer + 2,
c0d029e0:	9810      	ldr	r0, [sp, #64]	; 0x40
c0d029e2:	5828      	ldr	r0, [r5, r0]
c0d029e4:	1c81      	adds	r1, r0, #2
c0d029e6:	ae22      	add	r6, sp, #136	; 0x88
                                        2 + trustedInputLength - 8,
                                    8) != 0) {
                                L_DEBUG_APP(("Invalid signature\n"));
                                goto fail;
                            }
                            os_memmove(
c0d029e8:	4630      	mov	r0, r6
c0d029ea:	f001 fde2 	bl	c0d045b2 <os_memmove>
                                trustedInput,
                                btchip_context_D.transactionBufferPointer + 2,
                                trustedInputLength - 8);
                            if (trustedInput[0] != MAGIC_TRUSTED_INPUT) {
c0d029ee:	7830      	ldrb	r0, [r6, #0]
c0d029f0:	2832      	cmp	r0, #50	; 0x32
c0d029f2:	d000      	beq.n	c0d029f6 <transaction_parse+0x60e>
c0d029f4:	e0dd      	b.n	c0d02bb2 <transaction_parse+0x7ca>
c0d029f6:	9413      	str	r4, [sp, #76]	; 0x4c
c0d029f8:	9c10      	ldr	r4, [sp, #64]	; 0x40
                                             "signature\n"));
                                goto fail;
                            }
                            // Update the hash with prevout data
                            savePointer =
                                btchip_context_D.transactionBufferPointer;
c0d029fa:	592e      	ldr	r6, [r5, r4]
                              L_DEBUG_APP(("Clearing P2SH consumption\n"));
                              btchip_context_D.transactionContext.consumeP2SH =
                            0;
                            }
                            */
                            btchip_context_D.transactionBufferPointer =
c0d029fc:	9814      	ldr	r0, [sp, #80]	; 0x50
c0d029fe:	5128      	str	r0, [r5, r4]
                                trustedInput + 4;
                            L_DEBUG_BUF((
                                "Trusted input hash\n",
                                btchip_context_D.transactionBufferPointer, 36));
                            transaction_offset(36);
c0d02a00:	2024      	movs	r0, #36	; 0x24
c0d02a02:	f7ff fc77 	bl	c0d022f4 <transaction_offset>
c0d02a06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c

                            btchip_context_D.transactionBufferPointer =
                                savePointer + (2 + trustedInputLength);
c0d02a08:	18b0      	adds	r0, r6, r2
                            L_DEBUG_BUF((
                                "Trusted input hash\n",
                                btchip_context_D.transactionBufferPointer, 36));
                            transaction_offset(36);

                            btchip_context_D.transactionBufferPointer =
c0d02a0a:	5128      	str	r0, [r5, r4]
                                savePointer + (2 + trustedInputLength);
                            btchip_context_D.transactionDataRemaining -=
c0d02a0c:	4872      	ldr	r0, [pc, #456]	; (c0d02bd8 <transaction_parse+0x7f0>)
c0d02a0e:	5c29      	ldrb	r1, [r5, r0]
c0d02a10:	1a89      	subs	r1, r1, r2
c0d02a12:	5429      	strb	r1, [r5, r0]
c0d02a14:	a81a      	add	r0, sp, #104	; 0x68
                                (2 + trustedInputLength);

                            // Update the amount

                            btchip_swap_bytes(amount, trustedInput + 40, 8);
c0d02a16:	2208      	movs	r2, #8
c0d02a18:	9915      	ldr	r1, [sp, #84]	; 0x54
c0d02a1a:	f7ff fba6 	bl	c0d0216a <btchip_swap_bytes>
c0d02a1e:	2000      	movs	r0, #0
c0d02a20:	4601      	mov	r1, r0
c0d02a22:	4602      	mov	r2, r0
                                        unsigned char WIDE *a,
                                        unsigned char WIDE *b) {
    unsigned char carry = 0;
    unsigned char i;
    for (i = 0; i < 8; i++) {
        unsigned short val = a[8 - 1 - i] + b[8 - 1 - i] + (carry ? 1 : 0);
c0d02a24:	463b      	mov	r3, r7
c0d02a26:	434b      	muls	r3, r1
c0d02a28:	9c16      	ldr	r4, [sp, #88]	; 0x58
c0d02a2a:	5ce6      	ldrb	r6, [r4, r3]
c0d02a2c:	18ec      	adds	r4, r5, r3
c0d02a2e:	7f23      	ldrb	r3, [r4, #28]
c0d02a30:	189a      	adds	r2, r3, r2
c0d02a32:	1993      	adds	r3, r2, r6
        carry = (val > 255);
        target[8 - 1 - i] = (val & 255);
c0d02a34:	7723      	strb	r3, [r4, #28]
                                        unsigned char WIDE *b) {
    unsigned char carry = 0;
    unsigned char i;
    for (i = 0; i < 8; i++) {
        unsigned short val = a[8 - 1 - i] + b[8 - 1 - i] + (carry ? 1 : 0);
        carry = (val > 255);
c0d02a36:	2bff      	cmp	r3, #255	; 0xff
c0d02a38:	9a11      	ldr	r2, [sp, #68]	; 0x44
c0d02a3a:	d800      	bhi.n	c0d02a3e <transaction_parse+0x656>
c0d02a3c:	4602      	mov	r2, r0
unsigned char transaction_amount_add_be(unsigned char *target,
                                        unsigned char WIDE *a,
                                        unsigned char WIDE *b) {
    unsigned char carry = 0;
    unsigned char i;
    for (i = 0; i < 8; i++) {
c0d02a3e:	1c49      	adds	r1, r1, #1
c0d02a40:	2908      	cmp	r1, #8
c0d02a42:	d1ef      	bne.n	c0d02a24 <transaction_parse+0x63c>
c0d02a44:	2601      	movs	r6, #1
                                (2 + trustedInputLength);

                            // Update the amount

                            btchip_swap_bytes(amount, trustedInput + 40, 8);
                            if (transaction_amount_add_be(
c0d02a46:	2bff      	cmp	r3, #255	; 0xff
c0d02a48:	9c13      	ldr	r4, [sp, #76]	; 0x4c
c0d02a4a:	d943      	bls.n	c0d02ad4 <transaction_parse+0x6ec>
c0d02a4c:	e0b1      	b.n	c0d02bb2 <transaction_parse+0x7ca>
c0d02a4e:	2600      	movs	r6, #0
                        if (btchip_context_D.usingSegwit) {
                            transaction_offset_increase(1);
                            check_transaction_available(
                                36); // prevout : 32 hash + 4 index
                            if (!btchip_context_D.segwitParsedOnce) {
                                cx_hash(
c0d02a50:	4668      	mov	r0, sp
c0d02a52:	6006      	str	r6, [r0, #0]
c0d02a54:	2023      	movs	r0, #35	; 0x23
c0d02a56:	00c0      	lsls	r0, r0, #3
c0d02a58:	1828      	adds	r0, r5, r0
c0d02a5a:	2424      	movs	r4, #36	; 0x24
c0d02a5c:	4631      	mov	r1, r6
c0d02a5e:	4623      	mov	r3, r4
c0d02a60:	f000 f9d8 	bl	c0d02e14 <cx_hash_X>
                btchip_context_D.transactionBufferPointer, value, NULL);
    }
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
c0d02a64:	4620      	mov	r0, r4
c0d02a66:	f7ff fc45 	bl	c0d022f4 <transaction_offset>
    btchip_context_D.transactionBufferPointer += value;
c0d02a6a:	2001      	movs	r0, #1
c0d02a6c:	900b      	str	r0, [sp, #44]	; 0x2c
c0d02a6e:	0240      	lsls	r0, r0, #9
c0d02a70:	5829      	ldr	r1, [r5, r0]
c0d02a72:	3124      	adds	r1, #36	; 0x24
c0d02a74:	5029      	str	r1, [r5, r0]
    btchip_context_D.transactionDataRemaining -= value;
c0d02a76:	4858      	ldr	r0, [pc, #352]	; (c0d02bd8 <transaction_parse+0x7f0>)
c0d02a78:	5c2a      	ldrb	r2, [r5, r0]
c0d02a7a:	32dc      	adds	r2, #220	; 0xdc
c0d02a7c:	542a      	strb	r2, [r5, r0]
c0d02a7e:	b2d0      	uxtb	r0, r2
#include "btchip_apdu_constants.h"

#define DEBUG_LONG "%ld"

void check_transaction_available(unsigned char x) {
    if (btchip_context_D.transactionDataRemaining < x) {
c0d02a80:	2807      	cmp	r0, #7
c0d02a82:	d800      	bhi.n	c0d02a86 <transaction_parse+0x69e>
c0d02a84:	e095      	b.n	c0d02bb2 <transaction_parse+0x7ca>
c0d02a86:	a81a      	add	r0, sp, #104	; 0x68
                                    0,
                                    btchip_context_D.transactionBufferPointer,
                                    36, NULL);
                                transaction_offset_increase(36);
                                check_transaction_available(8); // update amount
                                btchip_swap_bytes(
c0d02a88:	2208      	movs	r2, #8
c0d02a8a:	f7ff fb6e 	bl	c0d0216a <btchip_swap_bytes>
c0d02a8e:	4630      	mov	r0, r6
c0d02a90:	4631      	mov	r1, r6
                                        unsigned char WIDE *a,
                                        unsigned char WIDE *b) {
    unsigned char carry = 0;
    unsigned char i;
    for (i = 0; i < 8; i++) {
        unsigned short val = a[8 - 1 - i] + b[8 - 1 - i] + (carry ? 1 : 0);
c0d02a92:	463a      	mov	r2, r7
c0d02a94:	4342      	muls	r2, r0
c0d02a96:	9b16      	ldr	r3, [sp, #88]	; 0x58
c0d02a98:	5c9b      	ldrb	r3, [r3, r2]
c0d02a9a:	4634      	mov	r4, r6
c0d02a9c:	18ae      	adds	r6, r5, r2
c0d02a9e:	7f32      	ldrb	r2, [r6, #28]
c0d02aa0:	1851      	adds	r1, r2, r1
c0d02aa2:	18ca      	adds	r2, r1, r3
        carry = (val > 255);
        target[8 - 1 - i] = (val & 255);
c0d02aa4:	7732      	strb	r2, [r6, #28]
c0d02aa6:	4626      	mov	r6, r4
                                        unsigned char WIDE *b) {
    unsigned char carry = 0;
    unsigned char i;
    for (i = 0; i < 8; i++) {
        unsigned short val = a[8 - 1 - i] + b[8 - 1 - i] + (carry ? 1 : 0);
        carry = (val > 255);
c0d02aa8:	2aff      	cmp	r2, #255	; 0xff
c0d02aaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
c0d02aac:	d800      	bhi.n	c0d02ab0 <transaction_parse+0x6c8>
c0d02aae:	4631      	mov	r1, r6
unsigned char transaction_amount_add_be(unsigned char *target,
                                        unsigned char WIDE *a,
                                        unsigned char WIDE *b) {
    unsigned char carry = 0;
    unsigned char i;
    for (i = 0; i < 8; i++) {
c0d02ab0:	1c40      	adds	r0, r0, #1
c0d02ab2:	2808      	cmp	r0, #8
c0d02ab4:	d1ed      	bne.n	c0d02a92 <transaction_parse+0x6aa>
                                check_transaction_available(8); // update amount
                                btchip_swap_bytes(
                                    amount,
                                    btchip_context_D.transactionBufferPointer,
                                    8);
                                if (transaction_amount_add_be(
c0d02ab6:	2aff      	cmp	r2, #255	; 0xff
c0d02ab8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
c0d02aba:	d87a      	bhi.n	c0d02bb2 <transaction_parse+0x7ca>
c0d02abc:	2008      	movs	r0, #8
                btchip_context_D.transactionBufferPointer, value, NULL);
    }
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
c0d02abe:	f7ff fc19 	bl	c0d022f4 <transaction_offset>
c0d02ac2:	2601      	movs	r6, #1
    btchip_context_D.transactionBufferPointer += value;
c0d02ac4:	0270      	lsls	r0, r6, #9
c0d02ac6:	5829      	ldr	r1, [r5, r0]
c0d02ac8:	3108      	adds	r1, #8
c0d02aca:	5029      	str	r1, [r5, r0]
    btchip_context_D.transactionDataRemaining -= value;
c0d02acc:	4842      	ldr	r0, [pc, #264]	; (c0d02bd8 <transaction_parse+0x7f0>)
c0d02ace:	5c29      	ldrb	r1, [r5, r0]
c0d02ad0:	31f8      	adds	r1, #248	; 0xf8
c0d02ad2:	5429      	strb	r1, [r5, r0]
                                         btchip_context_D.transactionContext
                                             .transactionAmount,
                                         8));
                        }

                        if (!btchip_context_D.usingSegwit) {
c0d02ad4:	207f      	movs	r0, #127	; 0x7f
c0d02ad6:	0080      	lsls	r0, r0, #2
c0d02ad8:	5c28      	ldrb	r0, [r5, r0]
c0d02ada:	2800      	cmp	r0, #0
c0d02adc:	d103      	bne.n	c0d02ae6 <transaction_parse+0x6fe>
                            // Do not include the input script length + value in
                            // the authentication hash
                            btchip_context_D.transactionHashOption =
c0d02ade:	2045      	movs	r0, #69	; 0x45
c0d02ae0:	0080      	lsls	r0, r0, #2
c0d02ae2:	2101      	movs	r1, #1
c0d02ae4:	5429      	strb	r1, [r5, r0]
c0d02ae6:	9f19      	ldr	r7, [sp, #100]	; 0x64
                                TRANSACTION_HASH_FULL;
                        }
                    }
                    // Read the script length
                    btchip_context_D.transactionContext.scriptRemaining =
                        transaction_get_varint();
c0d02ae8:	f7ff fc2a 	bl	c0d02340 <transaction_get_varint>
                            btchip_context_D.transactionHashOption =
                                TRANSACTION_HASH_FULL;
                        }
                    }
                    // Read the script length
                    btchip_context_D.transactionContext.scriptRemaining =
c0d02aec:	6128      	str	r0, [r5, #16]
c0d02aee:	2200      	movs	r2, #0
c0d02af0:	2f02      	cmp	r7, #2
c0d02af2:	4621      	mov	r1, r4
c0d02af4:	d000      	beq.n	c0d02af8 <transaction_parse+0x710>
c0d02af6:	4611      	mov	r1, r2
                    L_DEBUG_APP(
                        ("Script to read " DEBUG_LONG "\n",
                         btchip_context_D.transactionContext.scriptRemaining));

                    if ((parseMode == PARSE_MODE_SIGNATURE) &&
                        !trustedInputFlag && !btchip_context_D.usingSegwit) {
c0d02af8:	237f      	movs	r3, #127	; 0x7f
c0d02afa:	009b      	lsls	r3, r3, #2
c0d02afc:	5ceb      	ldrb	r3, [r5, r3]
                        transaction_get_varint();
                    L_DEBUG_APP(
                        ("Script to read " DEBUG_LONG "\n",
                         btchip_context_D.transactionContext.scriptRemaining));

                    if ((parseMode == PARSE_MODE_SIGNATURE) &&
c0d02afe:	4333      	orrs	r3, r6
c0d02b00:	061b      	lsls	r3, r3, #24
c0d02b02:	4623      	mov	r3, r4
c0d02b04:	d000      	beq.n	c0d02b08 <transaction_parse+0x720>
c0d02b06:	4613      	mov	r3, r2
c0d02b08:	4019      	ands	r1, r3
                        !trustedInputFlag && !btchip_context_D.usingSegwit) {
                        // Only proceeds if this is not to be signed - so length
                        // should be null
                        if (btchip_context_D.transactionContext
                                .scriptRemaining != 0) {
c0d02b0a:	2800      	cmp	r0, #0
c0d02b0c:	d100      	bne.n	c0d02b10 <transaction_parse+0x728>
c0d02b0e:	4604      	mov	r4, r0
                        transaction_get_varint();
                    L_DEBUG_APP(
                        ("Script to read " DEBUG_LONG "\n",
                         btchip_context_D.transactionContext.scriptRemaining));

                    if ((parseMode == PARSE_MODE_SIGNATURE) &&
c0d02b10:	400c      	ands	r4, r1
c0d02b12:	9817      	ldr	r0, [sp, #92]	; 0x5c
c0d02b14:	4044      	eors	r4, r0
c0d02b16:	9f18      	ldr	r7, [sp, #96]	; 0x60
c0d02b18:	2f00      	cmp	r7, #0
c0d02b1a:	d101      	bne.n	c0d02b20 <transaction_parse+0x738>
c0d02b1c:	2c01      	cmp	r4, #1
c0d02b1e:	d148      	bne.n	c0d02bb2 <transaction_parse+0x7ca>
                                goto fail;
                            }
                        }
                    }
                    // Move on
                    btchip_context_D.transactionContext.transactionState =
c0d02b20:	2002      	movs	r0, #2
c0d02b22:	7528      	strb	r0, [r5, #20]
                case BTCHIP_TRANSACTION_INPUT_HASHING_IN_PROGRESS_INPUT_SCRIPT: {
                    unsigned char dataAvailable;
                    L_DEBUG_APP(
                        ("Process input script, remaining " DEBUG_LONG "\n",
                         btchip_context_D.transactionContext.scriptRemaining));
                    if (btchip_context_D.transactionDataRemaining < 1) {
c0d02b24:	482c      	ldr	r0, [pc, #176]	; (c0d02bd8 <transaction_parse+0x7f0>)
c0d02b26:	5c28      	ldrb	r0, [r5, r0]
c0d02b28:	2800      	cmp	r0, #0
c0d02b2a:	d033      	beq.n	c0d02b94 <transaction_parse+0x7ac>
                        goto ok;
                    }
                    // Scan for P2SH consumption - huge shortcut, but fine
                    // enough
                    // Also usable in SegWit mode
                    if (btchip_context_D.transactionContext.scriptRemaining ==
c0d02b2c:	6929      	ldr	r1, [r5, #16]
c0d02b2e:	2901      	cmp	r1, #1
c0d02b30:	d11b      	bne.n	c0d02b6a <transaction_parse+0x782>
                        1) {
                        if (*btchip_context_D.transactionBufferPointer ==
c0d02b32:	2001      	movs	r0, #1
c0d02b34:	0244      	lsls	r4, r0, #9
c0d02b36:	5929      	ldr	r1, [r5, r4]
c0d02b38:	7809      	ldrb	r1, [r1, #0]
c0d02b3a:	29ae      	cmp	r1, #174	; 0xae
c0d02b3c:	d101      	bne.n	c0d02b42 <transaction_parse+0x75a>
c0d02b3e:	2f00      	cmp	r7, #0
c0d02b40:	d007      	beq.n	c0d02b52 <transaction_parse+0x76a>
c0d02b42:	2200      	movs	r2, #0
c0d02b44:	29ae      	cmp	r1, #174	; 0xae
c0d02b46:	4601      	mov	r1, r0
c0d02b48:	d100      	bne.n	c0d02b4c <transaction_parse+0x764>
c0d02b4a:	4611      	mov	r1, r2
c0d02b4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
c0d02b4e:	4051      	eors	r1, r2
c0d02b50:	77e9      	strb	r1, [r5, #31]
                btchip_context_D.transactionBufferPointer, value, NULL);
    }
}

void transaction_offset_increase(unsigned char value) {
    transaction_offset(value);
c0d02b52:	f7ff fbcf 	bl	c0d022f4 <transaction_offset>
    btchip_context_D.transactionBufferPointer += value;
c0d02b56:	5928      	ldr	r0, [r5, r4]
c0d02b58:	1c40      	adds	r0, r0, #1
c0d02b5a:	5128      	str	r0, [r5, r4]
    btchip_context_D.transactionDataRemaining -= value;
c0d02b5c:	491e      	ldr	r1, [pc, #120]	; (c0d02bd8 <transaction_parse+0x7f0>)
c0d02b5e:	5c68      	ldrb	r0, [r5, r1]
c0d02b60:	30ff      	adds	r0, #255	; 0xff
c0d02b62:	5468      	strb	r0, [r5, r1]
                            // P2SH
                            L_DEBUG_APP(("Disabling P2SH consumption\n"));
                            btchip_context_D.transactionContext.consumeP2SH = 0;
                        }
                        transaction_offset_increase(1);
                        btchip_context_D.transactionContext.scriptRemaining--;
c0d02b64:	6929      	ldr	r1, [r5, #16]
c0d02b66:	1e49      	subs	r1, r1, #1
c0d02b68:	6129      	str	r1, [r5, #16]
                    }

                    if (btchip_context_D.transactionContext.scriptRemaining ==
c0d02b6a:	2900      	cmp	r1, #0
c0d02b6c:	d100      	bne.n	c0d02b70 <transaction_parse+0x788>
c0d02b6e:	e46e      	b.n	c0d0244e <transaction_parse+0x66>
                    }
                    // Save the last script byte for the P2SH check
                    dataAvailable =
                        (btchip_context_D.transactionDataRemaining >
                                 btchip_context_D.transactionContext
                                         .scriptRemaining -
c0d02b70:	1e4c      	subs	r4, r1, #1
                            BTCHIP_TRANSACTION_DEFINED_WAIT_INPUT;
                        continue;
                    }
                    // Save the last script byte for the P2SH check
                    dataAvailable =
                        (btchip_context_D.transactionDataRemaining >
c0d02b72:	b2c0      	uxtb	r0, r0
c0d02b74:	e008      	b.n	c0d02b88 <transaction_parse+0x7a0>
                    unsigned char trustedInputFlag = 1;
                    L_DEBUG_APP(("Process input\n"));
                    if (btchip_context_D.transactionContext
                            .transactionRemainingInputsOutputs == 0) {
                        // No more inputs to hash, move forward
                        btchip_context_D.transactionContext.transactionState =
c0d02b76:	2003      	movs	r0, #3
c0d02b78:	7528      	strb	r0, [r5, #20]
c0d02b7a:	e466      	b.n	c0d0244a <transaction_parse+0x62>
c0d02b7c:	000001ff 	.word	0x000001ff
                        btchip_context_D.transactionContext.transactionState =
                            BTCHIP_TRANSACTION_PARSED;
                        continue;
                    }

                    if (btchip_context_D.transactionDataRemaining < 1) {
c0d02b80:	4815      	ldr	r0, [pc, #84]	; (c0d02bd8 <transaction_parse+0x7f0>)
c0d02b82:	5c28      	ldrb	r0, [r5, r0]
c0d02b84:	2800      	cmp	r0, #0
c0d02b86:	d005      	beq.n	c0d02b94 <transaction_parse+0x7ac>
c0d02b88:	42a0      	cmp	r0, r4
c0d02b8a:	d800      	bhi.n	c0d02b8e <transaction_parse+0x7a6>
c0d02b8c:	4604      	mov	r4, r0
c0d02b8e:	2c00      	cmp	r4, #0
c0d02b90:	d000      	beq.n	c0d02b94 <transaction_parse+0x7ac>
c0d02b92:	e44b      	b.n	c0d0242c <transaction_parse+0x44>
            btchip_set_check_internal_structure_integrity(1);
            THROW(e);
        }
        // before the finally to restore the surrounding context if an exception
        // is raised during finally
        FINALLY {
c0d02b94:	f001 fdc6 	bl	c0d04724 <try_context_get>
c0d02b98:	a930      	add	r1, sp, #192	; 0xc0
c0d02b9a:	4288      	cmp	r0, r1
c0d02b9c:	d103      	bne.n	c0d02ba6 <transaction_parse+0x7be>
c0d02b9e:	f001 fdc3 	bl	c0d04728 <try_context_get_previous>
c0d02ba2:	f001 fc52 	bl	c0d0444a <try_context_set>
c0d02ba6:	a830      	add	r0, sp, #192	; 0xc0
            btchip_set_check_internal_structure_integrity(1);
        }
    }
    END_TRY;
c0d02ba8:	8d00      	ldrh	r0, [r0, #40]	; 0x28
c0d02baa:	2800      	cmp	r0, #0
c0d02bac:	d10b      	bne.n	c0d02bc6 <transaction_parse+0x7de>
}
c0d02bae:	b03b      	add	sp, #236	; 0xec
c0d02bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d02bb2:	2001      	movs	r0, #1
c0d02bb4:	f001 fdb1 	bl	c0d0471a <os_longjmp>
c0d02bb8:	a930      	add	r1, sp, #192	; 0xc0
c0d02bba:	2200      	movs	r2, #0
        fail:
            L_DEBUG_APP(("Transaction parse - fail\n"));
            THROW(EXCEPTION);
        ok : {}
        }
        CATCH_OTHER(e) {
c0d02bbc:	850a      	strh	r2, [r1, #40]	; 0x28
            L_DEBUG_APP(("Transaction parse - surprise fail\n"));
            btchip_context_D.transactionContext.transactionState =
c0d02bbe:	4905      	ldr	r1, [pc, #20]	; (c0d02bd4 <transaction_parse+0x7ec>)
c0d02bc0:	750a      	strb	r2, [r1, #20]
                BTCHIP_TRANSACTION_NONE;
            btchip_set_check_internal_structure_integrity(1);
            THROW(e);
c0d02bc2:	f001 fdaa 	bl	c0d0471a <os_longjmp>
        // is raised during finally
        FINALLY {
            btchip_set_check_internal_structure_integrity(1);
        }
    }
    END_TRY;
c0d02bc6:	f001 fda8 	bl	c0d0471a <os_longjmp>
c0d02bca:	46c0      	nop			; (mov r8, r8)
c0d02bcc:	20001c24 	.word	0x20001c24
c0d02bd0:	c0d08980 	.word	0xc0d08980
c0d02bd4:	20001874 	.word	0x20001874
c0d02bd8:	000001ff 	.word	0x000001ff

c0d02bdc <cashaddr_polymod_step>:

#include "cashaddr.h"

static const char *charset = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";

uint64_t cashaddr_polymod_step(uint64_t pre) {
c0d02bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d02bde:	b081      	sub	sp, #4
    uint8_t b = pre >> 35;
    return ((pre & 0x07ffffffff) << 5) ^ (-((b >> 0) & 1) & 0x98f2bc8e61UL) ^
           (-((b >> 1) & 1) & 0x79b76d99e2UL) ^
c0d02be0:	9000      	str	r0, [sp, #0]
c0d02be2:	090b      	lsrs	r3, r1, #4
c0d02be4:	2201      	movs	r2, #1
c0d02be6:	4013      	ands	r3, r2
c0d02be8:	425b      	negs	r3, r3
c0d02bea:	4c19      	ldr	r4, [pc, #100]	; (c0d02c50 <cashaddr_polymod_step+0x74>)
c0d02bec:	401c      	ands	r4, r3
#include "cashaddr.h"

static const char *charset = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";

uint64_t cashaddr_polymod_step(uint64_t pre) {
    uint8_t b = pre >> 35;
c0d02bee:	08cd      	lsrs	r5, r1, #3
    return ((pre & 0x07ffffffff) << 5) ^ (-((b >> 0) & 1) & 0x98f2bc8e61UL) ^
c0d02bf0:	4015      	ands	r5, r2
c0d02bf2:	426d      	negs	r5, r5
c0d02bf4:	4e17      	ldr	r6, [pc, #92]	; (c0d02c54 <cashaddr_polymod_step+0x78>)
c0d02bf6:	402e      	ands	r6, r5
c0d02bf8:	0147      	lsls	r7, r0, #5
c0d02bfa:	4077      	eors	r7, r6
c0d02bfc:	4067      	eors	r7, r4
           (-((b >> 1) & 1) & 0x79b76d99e2UL) ^
           (-((b >> 2) & 1) & 0xf33e5fb3c4UL) ^
c0d02bfe:	094c      	lsrs	r4, r1, #5
c0d02c00:	4014      	ands	r4, r2
c0d02c02:	4264      	negs	r4, r4
c0d02c04:	4814      	ldr	r0, [pc, #80]	; (c0d02c58 <cashaddr_polymod_step+0x7c>)
c0d02c06:	4020      	ands	r0, r4
static const char *charset = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";

uint64_t cashaddr_polymod_step(uint64_t pre) {
    uint8_t b = pre >> 35;
    return ((pre & 0x07ffffffff) << 5) ^ (-((b >> 0) & 1) & 0x98f2bc8e61UL) ^
           (-((b >> 1) & 1) & 0x79b76d99e2UL) ^
c0d02c08:	4078      	eors	r0, r7
           (-((b >> 2) & 1) & 0xf33e5fb3c4UL) ^
           (-((b >> 3) & 1) & 0xae2eabe2a8UL) ^
c0d02c0a:	098e      	lsrs	r6, r1, #6
c0d02c0c:	4016      	ands	r6, r2
c0d02c0e:	4276      	negs	r6, r6
c0d02c10:	4f12      	ldr	r7, [pc, #72]	; (c0d02c5c <cashaddr_polymod_step+0x80>)
c0d02c12:	4037      	ands	r7, r6

uint64_t cashaddr_polymod_step(uint64_t pre) {
    uint8_t b = pre >> 35;
    return ((pre & 0x07ffffffff) << 5) ^ (-((b >> 0) & 1) & 0x98f2bc8e61UL) ^
           (-((b >> 1) & 1) & 0x79b76d99e2UL) ^
           (-((b >> 2) & 1) & 0xf33e5fb3c4UL) ^
c0d02c14:	4047      	eors	r7, r0
           (-((b >> 3) & 1) & 0xae2eabe2a8UL) ^
           (-((b >> 4) & 1) & 0x1e4f43e470UL);
c0d02c16:	09c8      	lsrs	r0, r1, #7
c0d02c18:	4010      	ands	r0, r2
c0d02c1a:	4240      	negs	r0, r0
c0d02c1c:	4a10      	ldr	r2, [pc, #64]	; (c0d02c60 <cashaddr_polymod_step+0x84>)
c0d02c1e:	4002      	ands	r2, r0
uint64_t cashaddr_polymod_step(uint64_t pre) {
    uint8_t b = pre >> 35;
    return ((pre & 0x07ffffffff) << 5) ^ (-((b >> 0) & 1) & 0x98f2bc8e61UL) ^
           (-((b >> 1) & 1) & 0x79b76d99e2UL) ^
           (-((b >> 2) & 1) & 0xf33e5fb3c4UL) ^
           (-((b >> 3) & 1) & 0xae2eabe2a8UL) ^
c0d02c20:	407a      	eors	r2, r7

static const char *charset = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";

uint64_t cashaddr_polymod_step(uint64_t pre) {
    uint8_t b = pre >> 35;
    return ((pre & 0x07ffffffff) << 5) ^ (-((b >> 0) & 1) & 0x98f2bc8e61UL) ^
c0d02c22:	2798      	movs	r7, #152	; 0x98
c0d02c24:	402f      	ands	r7, r5
c0d02c26:	9d00      	ldr	r5, [sp, #0]
c0d02c28:	0eed      	lsrs	r5, r5, #27
c0d02c2a:	0149      	lsls	r1, r1, #5
c0d02c2c:	4329      	orrs	r1, r5
c0d02c2e:	b2c9      	uxtb	r1, r1
c0d02c30:	4079      	eors	r1, r7
           (-((b >> 1) & 1) & 0x79b76d99e2UL) ^
c0d02c32:	2579      	movs	r5, #121	; 0x79
c0d02c34:	401d      	ands	r5, r3

static const char *charset = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";

uint64_t cashaddr_polymod_step(uint64_t pre) {
    uint8_t b = pre >> 35;
    return ((pre & 0x07ffffffff) << 5) ^ (-((b >> 0) & 1) & 0x98f2bc8e61UL) ^
c0d02c36:	404d      	eors	r5, r1
           (-((b >> 1) & 1) & 0x79b76d99e2UL) ^
           (-((b >> 2) & 1) & 0xf33e5fb3c4UL) ^
c0d02c38:	21f3      	movs	r1, #243	; 0xf3
c0d02c3a:	4021      	ands	r1, r4
static const char *charset = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";

uint64_t cashaddr_polymod_step(uint64_t pre) {
    uint8_t b = pre >> 35;
    return ((pre & 0x07ffffffff) << 5) ^ (-((b >> 0) & 1) & 0x98f2bc8e61UL) ^
           (-((b >> 1) & 1) & 0x79b76d99e2UL) ^
c0d02c3c:	4069      	eors	r1, r5
           (-((b >> 2) & 1) & 0xf33e5fb3c4UL) ^
           (-((b >> 3) & 1) & 0xae2eabe2a8UL) ^
c0d02c3e:	23ae      	movs	r3, #174	; 0xae
c0d02c40:	4033      	ands	r3, r6

uint64_t cashaddr_polymod_step(uint64_t pre) {
    uint8_t b = pre >> 35;
    return ((pre & 0x07ffffffff) << 5) ^ (-((b >> 0) & 1) & 0x98f2bc8e61UL) ^
           (-((b >> 1) & 1) & 0x79b76d99e2UL) ^
           (-((b >> 2) & 1) & 0xf33e5fb3c4UL) ^
c0d02c42:	404b      	eors	r3, r1
           (-((b >> 3) & 1) & 0xae2eabe2a8UL) ^
           (-((b >> 4) & 1) & 0x1e4f43e470UL);
c0d02c44:	211e      	movs	r1, #30
c0d02c46:	4001      	ands	r1, r0
uint64_t cashaddr_polymod_step(uint64_t pre) {
    uint8_t b = pre >> 35;
    return ((pre & 0x07ffffffff) << 5) ^ (-((b >> 0) & 1) & 0x98f2bc8e61UL) ^
           (-((b >> 1) & 1) & 0x79b76d99e2UL) ^
           (-((b >> 2) & 1) & 0xf33e5fb3c4UL) ^
           (-((b >> 3) & 1) & 0xae2eabe2a8UL) ^
c0d02c48:	4059      	eors	r1, r3

static const char *charset = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";

uint64_t cashaddr_polymod_step(uint64_t pre) {
    uint8_t b = pre >> 35;
    return ((pre & 0x07ffffffff) << 5) ^ (-((b >> 0) & 1) & 0x98f2bc8e61UL) ^
c0d02c4a:	4610      	mov	r0, r2
c0d02c4c:	b001      	add	sp, #4
c0d02c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d02c50:	b76d99e2 	.word	0xb76d99e2
c0d02c54:	f2bc8e61 	.word	0xf2bc8e61
c0d02c58:	3e5fb3c4 	.word	0x3e5fb3c4
c0d02c5c:	2eabe2a8 	.word	0x2eabe2a8
c0d02c60:	4f43e470 	.word	0x4f43e470

c0d02c64 <PolyMod>:
           (-((b >> 2) & 1) & 0xf33e5fb3c4UL) ^
           (-((b >> 3) & 1) & 0xae2eabe2a8UL) ^
           (-((b >> 4) & 1) & 0x1e4f43e470UL);
}

uint64_t PolyMod(uint8_t *prefix, uint8_t *payload, size_t payload_length) {
c0d02c64:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d02c66:	b081      	sub	sp, #4
c0d02c68:	4615      	mov	r5, r2
c0d02c6a:	460e      	mov	r6, r1
c0d02c6c:	4607      	mov	r7, r0
    size_t i;
    uint64_t c = 1;
    while (*prefix != 0) {
c0d02c6e:	783c      	ldrb	r4, [r7, #0]
        c = cashaddr_polymod_step(c) ^ (*prefix++); // Prefix
c0d02c70:	2001      	movs	r0, #1
c0d02c72:	2100      	movs	r1, #0
c0d02c74:	9000      	str	r0, [sp, #0]
c0d02c76:	f7ff ffb1 	bl	c0d02bdc <cashaddr_polymod_step>
}

uint64_t PolyMod(uint8_t *prefix, uint8_t *payload, size_t payload_length) {
    size_t i;
    uint64_t c = 1;
    while (*prefix != 0) {
c0d02c7a:	2c00      	cmp	r4, #0
c0d02c7c:	d011      	beq.n	c0d02ca2 <PolyMod+0x3e>
        c = cashaddr_polymod_step(c) ^ (*prefix++); // Prefix
c0d02c7e:	1c7f      	adds	r7, r7, #1
c0d02c80:	b2e2      	uxtb	r2, r4
c0d02c82:	4042      	eors	r2, r0
}

uint64_t PolyMod(uint8_t *prefix, uint8_t *payload, size_t payload_length) {
    size_t i;
    uint64_t c = 1;
    while (*prefix != 0) {
c0d02c84:	783c      	ldrb	r4, [r7, #0]
        c = cashaddr_polymod_step(c) ^ (*prefix++); // Prefix
c0d02c86:	4610      	mov	r0, r2
c0d02c88:	f7ff ffa8 	bl	c0d02bdc <cashaddr_polymod_step>
}

uint64_t PolyMod(uint8_t *prefix, uint8_t *payload, size_t payload_length) {
    size_t i;
    uint64_t c = 1;
    while (*prefix != 0) {
c0d02c8c:	1c7f      	adds	r7, r7, #1
c0d02c8e:	2c00      	cmp	r4, #0
c0d02c90:	d1f6      	bne.n	c0d02c80 <PolyMod+0x1c>
c0d02c92:	e006      	b.n	c0d02ca2 <PolyMod+0x3e>
        c = cashaddr_polymod_step(c) ^ (*prefix++); // Prefix
    }
    c = cashaddr_polymod_step(c); // The zero valued separator
    for (i = 0; i < payload_length; ++i) {
        c = cashaddr_polymod_step(c) ^ (*payload++); // Hash
c0d02c94:	f7ff ffa2 	bl	c0d02bdc <cashaddr_polymod_step>
c0d02c98:	4602      	mov	r2, r0
c0d02c9a:	7830      	ldrb	r0, [r6, #0]
c0d02c9c:	4050      	eors	r0, r2
    uint64_t c = 1;
    while (*prefix != 0) {
        c = cashaddr_polymod_step(c) ^ (*prefix++); // Prefix
    }
    c = cashaddr_polymod_step(c); // The zero valued separator
    for (i = 0; i < payload_length; ++i) {
c0d02c9e:	1e6d      	subs	r5, r5, #1
        c = cashaddr_polymod_step(c) ^ (*payload++); // Hash
c0d02ca0:	1c76      	adds	r6, r6, #1
c0d02ca2:	2d00      	cmp	r5, #0
c0d02ca4:	d1f6      	bne.n	c0d02c94 <PolyMod+0x30>
c0d02ca6:	2408      	movs	r4, #8
    }
    for (i = 0; i < 8; ++i) {
        c = cashaddr_polymod_step(c); // 8 zeros for empty checksum
c0d02ca8:	f7ff ff98 	bl	c0d02bdc <cashaddr_polymod_step>
    }
    c = cashaddr_polymod_step(c); // The zero valued separator
    for (i = 0; i < payload_length; ++i) {
        c = cashaddr_polymod_step(c) ^ (*payload++); // Hash
    }
    for (i = 0; i < 8; ++i) {
c0d02cac:	1e64      	subs	r4, r4, #1
c0d02cae:	d1fb      	bne.n	c0d02ca8 <PolyMod+0x44>
        c = cashaddr_polymod_step(c); // 8 zeros for empty checksum
    }
    return c ^ 1;
c0d02cb0:	9a00      	ldr	r2, [sp, #0]
c0d02cb2:	4050      	eors	r0, r2
c0d02cb4:	b001      	add	sp, #4
c0d02cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

c0d02cb8 <create_checksum>:
    }
    return 1;
}

void create_checksum(uint8_t *payload, size_t payload_length,
                     uint8_t *checksum) {
c0d02cb8:	b570      	push	{r4, r5, r6, lr}
c0d02cba:	4614      	mov	r4, r2
c0d02cbc:	460a      	mov	r2, r1
c0d02cbe:	4601      	mov	r1, r0
    uint8_t *prefix = (uint8_t *)"bitcoincash";
    uint64_t mod = PolyMod(prefix, payload, payload_length);
c0d02cc0:	a00d      	add	r0, pc, #52	; (adr r0, c0d02cf8 <create_checksum+0x40>)
c0d02cc2:	f7ff ffcf 	bl	c0d02c64 <PolyMod>
c0d02cc6:	2223      	movs	r2, #35	; 0x23

    for (size_t i = 0; i < 8; ++i) {
        // Convert the 5-bit groups in mod to checksum values.
        *checksum++ = (mod >> (5 * (7 - i))) & 0x1f;
c0d02cc8:	4605      	mov	r5, r0
c0d02cca:	40d5      	lsrs	r5, r2
c0d02ccc:	2320      	movs	r3, #32
c0d02cce:	1a9e      	subs	r6, r3, r2
c0d02cd0:	460b      	mov	r3, r1
c0d02cd2:	40b3      	lsls	r3, r6
c0d02cd4:	432b      	orrs	r3, r5
c0d02cd6:	4616      	mov	r6, r2
c0d02cd8:	3e20      	subs	r6, #32
c0d02cda:	460d      	mov	r5, r1
c0d02cdc:	40f5      	lsrs	r5, r6
c0d02cde:	2e00      	cmp	r6, #0
c0d02ce0:	da00      	bge.n	c0d02ce4 <create_checksum+0x2c>
c0d02ce2:	461d      	mov	r5, r3
c0d02ce4:	231f      	movs	r3, #31
c0d02ce6:	402b      	ands	r3, r5
c0d02ce8:	7023      	strb	r3, [r4, #0]
void create_checksum(uint8_t *payload, size_t payload_length,
                     uint8_t *checksum) {
    uint8_t *prefix = (uint8_t *)"bitcoincash";
    uint64_t mod = PolyMod(prefix, payload, payload_length);

    for (size_t i = 0; i < 8; ++i) {
c0d02cea:	1f53      	subs	r3, r2, #5
        // Convert the 5-bit groups in mod to checksum values.
        *checksum++ = (mod >> (5 * (7 - i))) & 0x1f;
c0d02cec:	1c64      	adds	r4, r4, #1
void create_checksum(uint8_t *payload, size_t payload_length,
                     uint8_t *checksum) {
    uint8_t *prefix = (uint8_t *)"bitcoincash";
    uint64_t mod = PolyMod(prefix, payload, payload_length);

    for (size_t i = 0; i < 8; ++i) {
c0d02cee:	2a00      	cmp	r2, #0
c0d02cf0:	461a      	mov	r2, r3
c0d02cf2:	d1e9      	bne.n	c0d02cc8 <create_checksum+0x10>
        // Convert the 5-bit groups in mod to checksum values.
        *checksum++ = (mod >> (5 * (7 - i))) & 0x1f;
    }
}
c0d02cf4:	bd70      	pop	{r4, r5, r6, pc}
c0d02cf6:	46c0      	nop			; (mov r8, r8)
c0d02cf8:	63746962 	.word	0x63746962
c0d02cfc:	636e696f 	.word	0x636e696f
c0d02d00:	00687361 	.word	0x00687361

c0d02d04 <cashaddr_encode>:

int cashaddr_encode(uint8_t *hash, const size_t hash_length, uint8_t *addr,
                    const size_t max_addr_len, const unsigned short version) {
c0d02d04:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d02d06:	b099      	sub	sp, #100	; 0x64
c0d02d08:	461d      	mov	r5, r3
c0d02d0a:	4603      	mov	r3, r0
c0d02d0c:	2600      	movs	r6, #0
    uint8_t version_byte;
    uint8_t checksum[8] = {0, 0, 0, 0, 0, 0, 0, 0}; // 5-bit bytes.
c0d02d0e:	9617      	str	r6, [sp, #92]	; 0x5c
c0d02d10:	9616      	str	r6, [sp, #88]	; 0x58
c0d02d12:	9201      	str	r2, [sp, #4]
    size_t payload_length = 0;
    size_t addr_length = 0;
    size_t i;

    addr_start = addr;
    *addr_start = 0;
c0d02d14:	7016      	strb	r6, [r2, #0]

    if (hash_length != 20) // Only support 160 bit hash
c0d02d16:	2914      	cmp	r1, #20
c0d02d18:	d167      	bne.n	c0d02dea <cashaddr_encode+0xe6>
c0d02d1a:	981e      	ldr	r0, [sp, #120]	; 0x78
c0d02d1c:	2600      	movs	r6, #0
        return 0;
    if (version == CASHADDR_P2PKH) { // Support P2PKH = 0, P2SH = 1
c0d02d1e:	2800      	cmp	r0, #0
c0d02d20:	4631      	mov	r1, r6
c0d02d22:	d002      	beq.n	c0d02d2a <cashaddr_encode+0x26>
c0d02d24:	2801      	cmp	r0, #1
c0d02d26:	d160      	bne.n	c0d02dea <cashaddr_encode+0xe6>
c0d02d28:	2108      	movs	r1, #8
c0d02d2a:	af0c      	add	r7, sp, #48	; 0x30
        version_byte = 8;
    } else {
        return 0;
    }

    tmp[0] = version_byte;
c0d02d2c:	7039      	strb	r1, [r7, #0]
    os_memmove(tmp + 1, hash, hash_length);
c0d02d2e:	1c78      	adds	r0, r7, #1
c0d02d30:	2214      	movs	r2, #20
c0d02d32:	4619      	mov	r1, r3
c0d02d34:	f001 fc3d 	bl	c0d045b2 <os_memmove>
c0d02d38:	2215      	movs	r2, #21
c0d02d3a:	4631      	mov	r1, r6
c0d02d3c:	4630      	mov	r0, r6
                        const uint8_t *in, size_t inlen, int inbits, int pad) {
    uint32_t val = 0;
    int bits = 0;
    uint32_t maxv = (((uint32_t)1) << outbits) - 1;
    while (inlen--) {
        val = (val << inbits) | *(in++);
c0d02d3e:	0203      	lsls	r3, r0, #8
c0d02d40:	7838      	ldrb	r0, [r7, #0]
c0d02d42:	4318      	orrs	r0, r3
        bits += inbits;
c0d02d44:	3108      	adds	r1, #8
                        const uint8_t *in, size_t inlen, int inbits, int pad) {
    uint32_t val = 0;
    int bits = 0;
    uint32_t maxv = (((uint32_t)1) << outbits) - 1;
    while (inlen--) {
        val = (val << inbits) | *(in++);
c0d02d46:	1c7f      	adds	r7, r7, #1
static int convert_bits(uint8_t *out, size_t *outlen, int outbits,
                        const uint8_t *in, size_t inlen, int inbits, int pad) {
    uint32_t val = 0;
    int bits = 0;
    uint32_t maxv = (((uint32_t)1) << outbits) - 1;
    while (inlen--) {
c0d02d48:	1e52      	subs	r2, r2, #1
        val = (val << inbits) | *(in++);
        bits += inbits;
        while (bits >= outbits) {
c0d02d4a:	2905      	cmp	r1, #5
c0d02d4c:	db09      	blt.n	c0d02d62 <cashaddr_encode+0x5e>
            bits -= outbits;
c0d02d4e:	1f49      	subs	r1, r1, #5
            out[(*outlen)++] = (val >> bits) & maxv;
c0d02d50:	4603      	mov	r3, r0
c0d02d52:	40cb      	lsrs	r3, r1
c0d02d54:	241f      	movs	r4, #31
c0d02d56:	401c      	ands	r4, r3
c0d02d58:	ab02      	add	r3, sp, #8
c0d02d5a:	559c      	strb	r4, [r3, r6]
c0d02d5c:	1c76      	adds	r6, r6, #1
    int bits = 0;
    uint32_t maxv = (((uint32_t)1) << outbits) - 1;
    while (inlen--) {
        val = (val << inbits) | *(in++);
        bits += inbits;
        while (bits >= outbits) {
c0d02d5e:	2904      	cmp	r1, #4
c0d02d60:	dcf5      	bgt.n	c0d02d4e <cashaddr_encode+0x4a>
static int convert_bits(uint8_t *out, size_t *outlen, int outbits,
                        const uint8_t *in, size_t inlen, int inbits, int pad) {
    uint32_t val = 0;
    int bits = 0;
    uint32_t maxv = (((uint32_t)1) << outbits) - 1;
    while (inlen--) {
c0d02d62:	2a00      	cmp	r2, #0
c0d02d64:	d1eb      	bne.n	c0d02d3e <cashaddr_encode+0x3a>
            bits -= outbits;
            out[(*outlen)++] = (val >> bits) & maxv;
        }
    }
    if (pad) {
        if (bits) {
c0d02d66:	2900      	cmp	r1, #0
c0d02d68:	d007      	beq.n	c0d02d7a <cashaddr_encode+0x76>
            out[(*outlen)++] = (val << (outbits - bits)) & maxv;
c0d02d6a:	2205      	movs	r2, #5
c0d02d6c:	1a51      	subs	r1, r2, r1
c0d02d6e:	4088      	lsls	r0, r1
c0d02d70:	211f      	movs	r1, #31
c0d02d72:	4001      	ands	r1, r0
c0d02d74:	a802      	add	r0, sp, #8
c0d02d76:	5581      	strb	r1, [r0, r6]
c0d02d78:	1c76      	adds	r6, r6, #1
c0d02d7a:	a802      	add	r0, sp, #8
c0d02d7c:	aa16      	add	r2, sp, #88	; 0x58

    tmp[0] = version_byte;
    os_memmove(tmp + 1, hash, hash_length);
    convert_bits(payload, &payload_length, 5, tmp, hash_length + 1, 8, 1);

    create_checksum(payload, payload_length,
c0d02d7e:	4631      	mov	r1, r6
c0d02d80:	f7ff ff9a 	bl	c0d02cb8 <create_checksum>
c0d02d84:	2000      	movs	r0, #0
                    checksum); // Assume prefix is 'bitcoincash'

    for (i = 0; i < payload_length; ++i) {
c0d02d86:	2e00      	cmp	r6, #0
c0d02d88:	4601      	mov	r1, r0
c0d02d8a:	9a01      	ldr	r2, [sp, #4]
c0d02d8c:	d015      	beq.n	c0d02dba <cashaddr_encode+0xb6>
c0d02d8e:	a902      	add	r1, sp, #8
c0d02d90:	780a      	ldrb	r2, [r1, #0]
c0d02d92:	2700      	movs	r7, #0
        if (*payload >> 5) {
c0d02d94:	9901      	ldr	r1, [sp, #4]
c0d02d96:	19cc      	adds	r4, r1, r7
c0d02d98:	2a20      	cmp	r2, #32
c0d02d9a:	d223      	bcs.n	c0d02de4 <cashaddr_encode+0xe0>
    convert_bits(payload, &payload_length, 5, tmp, hash_length + 1, 8, 1);

    create_checksum(payload, payload_length,
                    checksum); // Assume prefix is 'bitcoincash'

    for (i = 0; i < payload_length; ++i) {
c0d02d9c:	1c79      	adds	r1, r7, #1
        if (*payload >> 5) {
            *addr_start = 0;
            return 0;
        }
        addr_length++;
        if (max_addr_len < addr_length) {
c0d02d9e:	42a9      	cmp	r1, r5
c0d02da0:	d820      	bhi.n	c0d02de4 <cashaddr_encode+0xe0>
c0d02da2:	462b      	mov	r3, r5
c0d02da4:	ad02      	add	r5, sp, #8
            *addr_start = 0;
            return 0;
        }
        *(addr++) = charset[payload[i]];
c0d02da6:	5ded      	ldrb	r5, [r5, r7]
c0d02da8:	a711      	add	r7, pc, #68	; (adr r7, c0d02df0 <cashaddr_encode+0xec>)
c0d02daa:	5d7d      	ldrb	r5, [r7, r5]
c0d02dac:	7025      	strb	r5, [r4, #0]
c0d02dae:	461d      	mov	r5, r3
    convert_bits(payload, &payload_length, 5, tmp, hash_length + 1, 8, 1);

    create_checksum(payload, payload_length,
                    checksum); // Assume prefix is 'bitcoincash'

    for (i = 0; i < payload_length; ++i) {
c0d02db0:	42b1      	cmp	r1, r6
c0d02db2:	460f      	mov	r7, r1
c0d02db4:	d3ee      	bcc.n	c0d02d94 <cashaddr_encode+0x90>
            return 0;
        }
        *(addr++) = charset[payload[i]];
    }
    for (i = 0; i < 8; ++i) {
        if (*checksum >> 5) {
c0d02db6:	9a01      	ldr	r2, [sp, #4]
c0d02db8:	1852      	adds	r2, r2, r1
c0d02dba:	a30d      	add	r3, pc, #52	; (adr r3, c0d02df0 <cashaddr_encode+0xec>)
c0d02dbc:	1816      	adds	r6, r2, r0
c0d02dbe:	ac16      	add	r4, sp, #88	; 0x58
c0d02dc0:	7824      	ldrb	r4, [r4, #0]
c0d02dc2:	2c20      	cmp	r4, #32
c0d02dc4:	d20e      	bcs.n	c0d02de4 <cashaddr_encode+0xe0>
            *addr_start = 0;
            return 0;
        }
        addr_length++;
        if (max_addr_len < addr_length) {
c0d02dc6:	180c      	adds	r4, r1, r0
c0d02dc8:	1c64      	adds	r4, r4, #1
c0d02dca:	42ac      	cmp	r4, r5
c0d02dcc:	d80a      	bhi.n	c0d02de4 <cashaddr_encode+0xe0>
c0d02dce:	ac16      	add	r4, sp, #88	; 0x58
            *addr_start = 0;
            return 0;
        }
        *(addr++) = charset[checksum[i]];
c0d02dd0:	5c24      	ldrb	r4, [r4, r0]
c0d02dd2:	5d1c      	ldrb	r4, [r3, r4]
c0d02dd4:	7034      	strb	r4, [r6, #0]
            *addr_start = 0;
            return 0;
        }
        *(addr++) = charset[payload[i]];
    }
    for (i = 0; i < 8; ++i) {
c0d02dd6:	1c40      	adds	r0, r0, #1
c0d02dd8:	2808      	cmp	r0, #8
c0d02dda:	d3ef      	bcc.n	c0d02dbc <cashaddr_encode+0xb8>
            *addr_start = 0;
            return 0;
        }
        *(addr++) = charset[checksum[i]];
    }
    *addr = 0;
c0d02ddc:	2300      	movs	r3, #0
c0d02dde:	5413      	strb	r3, [r2, r0]

    return addr_length;
c0d02de0:	180e      	adds	r6, r1, r0
c0d02de2:	e002      	b.n	c0d02dea <cashaddr_encode+0xe6>
c0d02de4:	2600      	movs	r6, #0
c0d02de6:	9801      	ldr	r0, [sp, #4]
c0d02de8:	7006      	strb	r6, [r0, #0]
}
c0d02dea:	4630      	mov	r0, r6
c0d02dec:	b019      	add	sp, #100	; 0x64
c0d02dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d02df0:	727a7071 	.word	0x727a7071
c0d02df4:	38783979 	.word	0x38783979
c0d02df8:	74326667 	.word	0x74326667
c0d02dfc:	30776476 	.word	0x30776476
c0d02e00:	6e6a3373 	.word	0x6e6a3373
c0d02e04:	686b3435 	.word	0x686b3435
c0d02e08:	6d366563 	.word	0x6d366563
c0d02e0c:	6c376175 	.word	0x6c376175
c0d02e10:	00000000 	.word	0x00000000

c0d02e14 <cx_hash_X>:
}

int cx_hash_X(cx_hash_t *hash ,
              int mode,
              unsigned char WIDE *in , unsigned int len,
              unsigned char *out) {
c0d02e14:	b570      	push	{r4, r5, r6, lr}
c0d02e16:	b082      	sub	sp, #8
c0d02e18:	7805      	ldrb	r5, [r0, #0]
c0d02e1a:	2414      	movs	r4, #20
   unsigned int hsz = 0;

    switch (hash->algo) {
c0d02e1c:	2d03      	cmp	r5, #3
c0d02e1e:	dc07      	bgt.n	c0d02e30 <cx_hash_X+0x1c>
c0d02e20:	2d01      	cmp	r5, #1
c0d02e22:	d013      	beq.n	c0d02e4c <cx_hash_X+0x38>
c0d02e24:	2d02      	cmp	r5, #2
c0d02e26:	d00e      	beq.n	c0d02e46 <cx_hash_X+0x32>
c0d02e28:	2d03      	cmp	r5, #3
c0d02e2a:	d117      	bne.n	c0d02e5c <cx_hash_X+0x48>
c0d02e2c:	2420      	movs	r4, #32
c0d02e2e:	e00d      	b.n	c0d02e4c <cx_hash_X+0x38>
c0d02e30:	1fac      	subs	r4, r5, #6
c0d02e32:	2c03      	cmp	r4, #3
c0d02e34:	d201      	bcs.n	c0d02e3a <cx_hash_X+0x26>
        hsz = 64;
        break;
    case CX_SHA3:
    case CX_KECCAK:
    case CX_SHA3_XOF:
        hsz =   ((cx_sha3_t*)hash)->output_size;
c0d02e36:	6884      	ldr	r4, [r0, #8]
c0d02e38:	e008      	b.n	c0d02e4c <cx_hash_X+0x38>
c0d02e3a:	2d04      	cmp	r5, #4
c0d02e3c:	d005      	beq.n	c0d02e4a <cx_hash_X+0x36>
c0d02e3e:	2d05      	cmp	r5, #5
c0d02e40:	d10c      	bne.n	c0d02e5c <cx_hash_X+0x48>
c0d02e42:	2440      	movs	r4, #64	; 0x40
c0d02e44:	e002      	b.n	c0d02e4c <cx_hash_X+0x38>
c0d02e46:	241c      	movs	r4, #28
c0d02e48:	e000      	b.n	c0d02e4c <cx_hash_X+0x38>
c0d02e4a:	2430      	movs	r4, #48	; 0x30
c0d02e4c:	9d06      	ldr	r5, [sp, #24]
    default:
        THROW(INVALID_PARAMETER);
        return 0;
    }

    return cx_hash(hash, mode, in, len, out, hsz);
c0d02e4e:	466e      	mov	r6, sp
c0d02e50:	6035      	str	r5, [r6, #0]
c0d02e52:	6074      	str	r4, [r6, #4]
c0d02e54:	f003 f800 	bl	c0d05e58 <cx_hash>
c0d02e58:	b002      	add	sp, #8
c0d02e5a:	bd70      	pop	{r4, r5, r6, pc}
    case CX_SHA3_XOF:
        hsz =   ((cx_sha3_t*)hash)->output_size;
        break;
    
    default:
        THROW(INVALID_PARAMETER);
c0d02e5c:	2002      	movs	r0, #2
c0d02e5e:	f001 fc5c 	bl	c0d0471a <os_longjmp>

c0d02e62 <cx_hmac_sha256_X>:
        return 0;
    }
    return cx_hmac(hmac, mode, in, len, mac, hsz);
}

int cx_hmac_sha256_X(unsigned char WIDE *key, unsigned int key_len, unsigned char WIDE *in, unsigned int len, unsigned char *out){
c0d02e62:	b5b0      	push	{r4, r5, r7, lr}
c0d02e64:	b082      	sub	sp, #8
    return cx_hmac_sha256(key, key_len, in, len, out, 32);
c0d02e66:	2420      	movs	r4, #32
c0d02e68:	466d      	mov	r5, sp
c0d02e6a:	606c      	str	r4, [r5, #4]
c0d02e6c:	9c06      	ldr	r4, [sp, #24]
c0d02e6e:	602c      	str	r4, [r5, #0]
c0d02e70:	f003 f83a 	bl	c0d05ee8 <cx_hmac_sha256>
c0d02e74:	b002      	add	sp, #8
c0d02e76:	bdb0      	pop	{r4, r5, r7, pc}

c0d02e78 <cx_ecfp_get_domain_length>:
    exponent[3] = pub_exponent>>0;

    return cx_rsa_generate_pair(modulus_len, public_key, private_key, exponent, 4, externalPQ);
}

static unsigned int cx_ecfp_get_domain_length(cx_curve_t curve) {
c0d02e78:	b580      	push	{r7, lr}
c0d02e7a:	4601      	mov	r1, r0
c0d02e7c:	2020      	movs	r0, #32
    switch(curve) {
c0d02e7e:	2928      	cmp	r1, #40	; 0x28
c0d02e80:	dd0b      	ble.n	c0d02e9a <cx_ecfp_get_domain_length+0x22>
c0d02e82:	292c      	cmp	r1, #44	; 0x2c
c0d02e84:	dd15      	ble.n	c0d02eb2 <cx_ecfp_get_domain_length+0x3a>
c0d02e86:	2941      	cmp	r1, #65	; 0x41
c0d02e88:	dd24      	ble.n	c0d02ed4 <cx_ecfp_get_domain_length+0x5c>
c0d02e8a:	2942      	cmp	r1, #66	; 0x42
c0d02e8c:	d02d      	beq.n	c0d02eea <cx_ecfp_get_domain_length+0x72>
c0d02e8e:	2961      	cmp	r1, #97	; 0x61
c0d02e90:	d02c      	beq.n	c0d02eec <cx_ecfp_get_domain_length+0x74>
c0d02e92:	2962      	cmp	r1, #98	; 0x62
c0d02e94:	d12b      	bne.n	c0d02eee <cx_ecfp_get_domain_length+0x76>
c0d02e96:	2038      	movs	r0, #56	; 0x38
    default:
        break;
    }
    THROW(INVALID_PARAMETER);
    return 0;
}
c0d02e98:	bd80      	pop	{r7, pc}
c0d02e9a:	460a      	mov	r2, r1
c0d02e9c:	2924      	cmp	r1, #36	; 0x24
c0d02e9e:	dc10      	bgt.n	c0d02ec2 <cx_ecfp_get_domain_length+0x4a>
c0d02ea0:	3a21      	subs	r2, #33	; 0x21
c0d02ea2:	2a02      	cmp	r2, #2
c0d02ea4:	d322      	bcc.n	c0d02eec <cx_ecfp_get_domain_length+0x74>
c0d02ea6:	2923      	cmp	r1, #35	; 0x23
c0d02ea8:	d009      	beq.n	c0d02ebe <cx_ecfp_get_domain_length+0x46>
c0d02eaa:	2924      	cmp	r1, #36	; 0x24
c0d02eac:	d11f      	bne.n	c0d02eee <cx_ecfp_get_domain_length+0x76>
c0d02eae:	2042      	movs	r0, #66	; 0x42
c0d02eb0:	bd80      	pop	{r7, pc}
c0d02eb2:	292a      	cmp	r1, #42	; 0x2a
c0d02eb4:	dc13      	bgt.n	c0d02ede <cx_ecfp_get_domain_length+0x66>
c0d02eb6:	2929      	cmp	r1, #41	; 0x29
c0d02eb8:	d001      	beq.n	c0d02ebe <cx_ecfp_get_domain_length+0x46>
c0d02eba:	292a      	cmp	r1, #42	; 0x2a
c0d02ebc:	d117      	bne.n	c0d02eee <cx_ecfp_get_domain_length+0x76>
c0d02ebe:	2030      	movs	r0, #48	; 0x30
c0d02ec0:	bd80      	pop	{r7, pc}
c0d02ec2:	3a25      	subs	r2, #37	; 0x25
c0d02ec4:	2a02      	cmp	r2, #2
c0d02ec6:	d311      	bcc.n	c0d02eec <cx_ecfp_get_domain_length+0x74>
c0d02ec8:	2927      	cmp	r1, #39	; 0x27
c0d02eca:	d001      	beq.n	c0d02ed0 <cx_ecfp_get_domain_length+0x58>
c0d02ecc:	2928      	cmp	r1, #40	; 0x28
c0d02ece:	d10e      	bne.n	c0d02eee <cx_ecfp_get_domain_length+0x76>
c0d02ed0:	2028      	movs	r0, #40	; 0x28
c0d02ed2:	bd80      	pop	{r7, pc}
c0d02ed4:	292d      	cmp	r1, #45	; 0x2d
c0d02ed6:	d009      	beq.n	c0d02eec <cx_ecfp_get_domain_length+0x74>
c0d02ed8:	2941      	cmp	r1, #65	; 0x41
c0d02eda:	d007      	beq.n	c0d02eec <cx_ecfp_get_domain_length+0x74>
c0d02edc:	e007      	b.n	c0d02eee <cx_ecfp_get_domain_length+0x76>
c0d02ede:	292b      	cmp	r1, #43	; 0x2b
c0d02ee0:	d001      	beq.n	c0d02ee6 <cx_ecfp_get_domain_length+0x6e>
c0d02ee2:	292c      	cmp	r1, #44	; 0x2c
c0d02ee4:	d103      	bne.n	c0d02eee <cx_ecfp_get_domain_length+0x76>
c0d02ee6:	2040      	movs	r0, #64	; 0x40
c0d02ee8:	bd80      	pop	{r7, pc}
c0d02eea:	2039      	movs	r0, #57	; 0x39
c0d02eec:	bd80      	pop	{r7, pc}
    case CX_CURVE_Curve448:
        return 56;
    default:
        break;
    }
    THROW(INVALID_PARAMETER);
c0d02eee:	2002      	movs	r0, #2
c0d02ef0:	f001 fc13 	bl	c0d0471a <os_longjmp>

c0d02ef4 <cx_ecdsa_sign_X>:
}

int cx_ecdsa_sign_X(cx_ecfp_private_key_t WIDE *pv_key,
                    int mode,  cx_md_t hashID, unsigned char  WIDE *hash, unsigned int hash_len,
                    unsigned char *sig ,
                    unsigned int *info) {
c0d02ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d02ef6:	b085      	sub	sp, #20
c0d02ef8:	461c      	mov	r4, r3
c0d02efa:	4615      	mov	r5, r2
c0d02efc:	460e      	mov	r6, r1
c0d02efe:	4607      	mov	r7, r0
    const unsigned int  domain_length =  cx_ecfp_get_domain_length(pv_key->curve);
c0d02f00:	7838      	ldrb	r0, [r7, #0]
c0d02f02:	f7ff ffb9 	bl	c0d02e78 <cx_ecfp_get_domain_length>
c0d02f06:	990c      	ldr	r1, [sp, #48]	; 0x30
    return cx_ecdsa_sign(pv_key, mode, hashID, hash, hash_len, sig,  6+2*(domain_length+1), info);
c0d02f08:	466a      	mov	r2, sp
c0d02f0a:	60d1      	str	r1, [r2, #12]
c0d02f0c:	0040      	lsls	r0, r0, #1
c0d02f0e:	3008      	adds	r0, #8
c0d02f10:	6090      	str	r0, [r2, #8]
c0d02f12:	980b      	ldr	r0, [sp, #44]	; 0x2c
c0d02f14:	6050      	str	r0, [r2, #4]
c0d02f16:	980a      	ldr	r0, [sp, #40]	; 0x28
c0d02f18:	6010      	str	r0, [r2, #0]
c0d02f1a:	4638      	mov	r0, r7
c0d02f1c:	4631      	mov	r1, r6
c0d02f1e:	462a      	mov	r2, r5
c0d02f20:	4623      	mov	r3, r4
c0d02f22:	f003 f82d 	bl	c0d05f80 <cx_ecdsa_sign>
c0d02f26:	b005      	add	sp, #20
c0d02f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

c0d02f2c <ui_display_address_nanos_prepro>:
    //{{BAGL_ICON                           , 0x00,   1,  1,   32,  32, 0, 0, 0
    //, 0xFFFFFF, 0x000000, 0, 0 }, &vars.tmpqr.icon_details, 0, 0, 0, NULL,
    //NULL, NULL },
};

unsigned int ui_display_address_nanos_prepro(const bagl_element_t *element) {
c0d02f2c:	b570      	push	{r4, r5, r6, lr}
c0d02f2e:	4605      	mov	r5, r0
    if (element->component.userid > 0) {
c0d02f30:	7868      	ldrb	r0, [r5, #1]
c0d02f32:	2401      	movs	r4, #1
c0d02f34:	2800      	cmp	r0, #0
c0d02f36:	d01f      	beq.n	c0d02f78 <ui_display_address_nanos_prepro+0x4c>
        unsigned int display = (ux_step == element->component.userid - 1);
c0d02f38:	1e41      	subs	r1, r0, #1
c0d02f3a:	4a10      	ldr	r2, [pc, #64]	; (c0d02f7c <ui_display_address_nanos_prepro+0x50>)
c0d02f3c:	6812      	ldr	r2, [r2, #0]
c0d02f3e:	2401      	movs	r4, #1
c0d02f40:	2300      	movs	r3, #0
c0d02f42:	428a      	cmp	r2, r1
c0d02f44:	d000      	beq.n	c0d02f48 <ui_display_address_nanos_prepro+0x1c>
c0d02f46:	461c      	mov	r4, r3
        if (display) {
c0d02f48:	428a      	cmp	r2, r1
c0d02f4a:	d115      	bne.n	c0d02f78 <ui_display_address_nanos_prepro+0x4c>
c0d02f4c:	267d      	movs	r6, #125	; 0x7d
c0d02f4e:	0131      	lsls	r1, r6, #4
            switch (element->component.userid) {
c0d02f50:	2801      	cmp	r0, #1
c0d02f52:	d00f      	beq.n	c0d02f74 <ui_display_address_nanos_prepro+0x48>
c0d02f54:	2802      	cmp	r0, #2
c0d02f56:	d10f      	bne.n	c0d02f78 <ui_display_address_nanos_prepro+0x4c>
            case 1:
                UX_CALLBACK_SET_INTERVAL(2000);
                break;
            case 2:
                UX_CALLBACK_SET_INTERVAL(MAX(
c0d02f58:	2107      	movs	r1, #7
c0d02f5a:	4628      	mov	r0, r5
c0d02f5c:	f001 fec8 	bl	c0d04cf0 <bagl_label_roundtrip_duration_ms>
c0d02f60:	00f6      	lsls	r6, r6, #3
c0d02f62:	1980      	adds	r0, r0, r6
c0d02f64:	4906      	ldr	r1, [pc, #24]	; (c0d02f80 <ui_display_address_nanos_prepro+0x54>)
c0d02f66:	4288      	cmp	r0, r1
c0d02f68:	d304      	bcc.n	c0d02f74 <ui_display_address_nanos_prepro+0x48>
c0d02f6a:	2107      	movs	r1, #7
c0d02f6c:	4628      	mov	r0, r5
c0d02f6e:	f001 febf 	bl	c0d04cf0 <bagl_label_roundtrip_duration_ms>
c0d02f72:	1981      	adds	r1, r0, r6
c0d02f74:	4803      	ldr	r0, [pc, #12]	; (c0d02f84 <ui_display_address_nanos_prepro+0x58>)
c0d02f76:	6141      	str	r1, [r0, #20]
            }
        }
        return display;
    }
    return 1;
}
c0d02f78:	4620      	mov	r0, r4
c0d02f7a:	bd70      	pop	{r4, r5, r6, pc}
c0d02f7c:	20001c28 	.word	0x20001c28
c0d02f80:	00000bb8 	.word	0x00000bb8
c0d02f84:	20001c2c 	.word	0x20001c2c

c0d02f88 <ui_verify_prepro>:
};
unsigned int ui_finalize_nanos_button(unsigned int button_mask,
                                      unsigned int button_mask_counter);

// display or not according to step, and adjust delay
unsigned int ui_verify_prepro(const bagl_element_t *element) {
c0d02f88:	b570      	push	{r4, r5, r6, lr}
c0d02f8a:	4605      	mov	r5, r0
    if (element->component.userid > 0) {
c0d02f8c:	7868      	ldrb	r0, [r5, #1]
c0d02f8e:	2401      	movs	r4, #1
c0d02f90:	2800      	cmp	r0, #0
c0d02f92:	d021      	beq.n	c0d02fd8 <ui_verify_prepro+0x50>
        unsigned int display = (ux_step == element->component.userid - 1);
c0d02f94:	1e41      	subs	r1, r0, #1
c0d02f96:	4a11      	ldr	r2, [pc, #68]	; (c0d02fdc <ui_verify_prepro+0x54>)
c0d02f98:	6812      	ldr	r2, [r2, #0]
c0d02f9a:	2401      	movs	r4, #1
c0d02f9c:	2300      	movs	r3, #0
c0d02f9e:	428a      	cmp	r2, r1
c0d02fa0:	d000      	beq.n	c0d02fa4 <ui_verify_prepro+0x1c>
c0d02fa2:	461c      	mov	r4, r3
        if (display) {
c0d02fa4:	428a      	cmp	r2, r1
c0d02fa6:	d117      	bne.n	c0d02fd8 <ui_verify_prepro+0x50>
c0d02fa8:	267d      	movs	r6, #125	; 0x7d
c0d02faa:	0131      	lsls	r1, r6, #4
            switch (element->component.userid) {
c0d02fac:	1e82      	subs	r2, r0, #2
c0d02fae:	2a03      	cmp	r2, #3
c0d02fb0:	d20e      	bcs.n	c0d02fd0 <ui_verify_prepro+0x48>
                UX_CALLBACK_SET_INTERVAL(2000);
                break;
            case 2:
            case 3:
            case 4:
                UX_CALLBACK_SET_INTERVAL(MAX(
c0d02fb2:	2107      	movs	r1, #7
c0d02fb4:	4628      	mov	r0, r5
c0d02fb6:	f001 fe9b 	bl	c0d04cf0 <bagl_label_roundtrip_duration_ms>
c0d02fba:	00f6      	lsls	r6, r6, #3
c0d02fbc:	1980      	adds	r0, r0, r6
c0d02fbe:	4908      	ldr	r1, [pc, #32]	; (c0d02fe0 <ui_verify_prepro+0x58>)
c0d02fc0:	4288      	cmp	r0, r1
c0d02fc2:	d307      	bcc.n	c0d02fd4 <ui_verify_prepro+0x4c>
c0d02fc4:	2107      	movs	r1, #7
c0d02fc6:	4628      	mov	r0, r5
c0d02fc8:	f001 fe92 	bl	c0d04cf0 <bagl_label_roundtrip_duration_ms>
c0d02fcc:	1981      	adds	r1, r0, r6
c0d02fce:	e001      	b.n	c0d02fd4 <ui_verify_prepro+0x4c>
c0d02fd0:	2801      	cmp	r0, #1
c0d02fd2:	d101      	bne.n	c0d02fd8 <ui_verify_prepro+0x50>
c0d02fd4:	4803      	ldr	r0, [pc, #12]	; (c0d02fe4 <ui_verify_prepro+0x5c>)
c0d02fd6:	6141      	str	r1, [r0, #20]
            }
        }
        return display;
    }
    return 1;
}
c0d02fd8:	4620      	mov	r0, r4
c0d02fda:	bd70      	pop	{r4, r5, r6, pc}
c0d02fdc:	20001c28 	.word	0x20001c28
c0d02fe0:	00000bb8 	.word	0x00000bb8
c0d02fe4:	20001c2c 	.word	0x20001c2c

c0d02fe8 <ui_verify_output_prepro>:

unsigned int ui_verify_output_prepro(const bagl_element_t *element) {
c0d02fe8:	b570      	push	{r4, r5, r6, lr}
c0d02fea:	4605      	mov	r5, r0
    if (element->component.userid > 0) {
c0d02fec:	7868      	ldrb	r0, [r5, #1]
c0d02fee:	2401      	movs	r4, #1
c0d02ff0:	2800      	cmp	r0, #0
c0d02ff2:	d021      	beq.n	c0d03038 <ui_verify_output_prepro+0x50>
        unsigned int display = (ux_step == element->component.userid - 1);
c0d02ff4:	1e41      	subs	r1, r0, #1
c0d02ff6:	4a11      	ldr	r2, [pc, #68]	; (c0d0303c <ui_verify_output_prepro+0x54>)
c0d02ff8:	6812      	ldr	r2, [r2, #0]
c0d02ffa:	2401      	movs	r4, #1
c0d02ffc:	2300      	movs	r3, #0
c0d02ffe:	428a      	cmp	r2, r1
c0d03000:	d000      	beq.n	c0d03004 <ui_verify_output_prepro+0x1c>
c0d03002:	461c      	mov	r4, r3
        if (display) {
c0d03004:	428a      	cmp	r2, r1
c0d03006:	d117      	bne.n	c0d03038 <ui_verify_output_prepro+0x50>
c0d03008:	267d      	movs	r6, #125	; 0x7d
c0d0300a:	0131      	lsls	r1, r6, #4
            switch (element->component.userid) {
c0d0300c:	1e82      	subs	r2, r0, #2
c0d0300e:	2a02      	cmp	r2, #2
c0d03010:	d20e      	bcs.n	c0d03030 <ui_verify_output_prepro+0x48>
            case 1:
                UX_CALLBACK_SET_INTERVAL(2000);
                break;
            case 2:
            case 3:
                UX_CALLBACK_SET_INTERVAL(MAX(
c0d03012:	2107      	movs	r1, #7
c0d03014:	4628      	mov	r0, r5
c0d03016:	f001 fe6b 	bl	c0d04cf0 <bagl_label_roundtrip_duration_ms>
c0d0301a:	00f6      	lsls	r6, r6, #3
c0d0301c:	1980      	adds	r0, r0, r6
c0d0301e:	4908      	ldr	r1, [pc, #32]	; (c0d03040 <ui_verify_output_prepro+0x58>)
c0d03020:	4288      	cmp	r0, r1
c0d03022:	d307      	bcc.n	c0d03034 <ui_verify_output_prepro+0x4c>
c0d03024:	2107      	movs	r1, #7
c0d03026:	4628      	mov	r0, r5
c0d03028:	f001 fe62 	bl	c0d04cf0 <bagl_label_roundtrip_duration_ms>
c0d0302c:	1981      	adds	r1, r0, r6
c0d0302e:	e001      	b.n	c0d03034 <ui_verify_output_prepro+0x4c>
c0d03030:	2801      	cmp	r0, #1
c0d03032:	d101      	bne.n	c0d03038 <ui_verify_output_prepro+0x50>
c0d03034:	4803      	ldr	r0, [pc, #12]	; (c0d03044 <ui_verify_output_prepro+0x5c>)
c0d03036:	6141      	str	r1, [r0, #20]
            }
        }
        return display;
    }
    return 1;
}
c0d03038:	4620      	mov	r0, r4
c0d0303a:	bd70      	pop	{r4, r5, r6, pc}
c0d0303c:	20001c28 	.word	0x20001c28
c0d03040:	00000bb8 	.word	0x00000bb8
c0d03044:	20001c2c 	.word	0x20001c2c

c0d03048 <ui_finalize_prepro>:

unsigned int ui_finalize_prepro(const bagl_element_t *element) {
c0d03048:	b570      	push	{r4, r5, r6, lr}
c0d0304a:	4605      	mov	r5, r0
    if (element->component.userid > 0) {
c0d0304c:	7868      	ldrb	r0, [r5, #1]
c0d0304e:	2401      	movs	r4, #1
c0d03050:	2800      	cmp	r0, #0
c0d03052:	d01f      	beq.n	c0d03094 <ui_finalize_prepro+0x4c>
        unsigned int display = (ux_step == element->component.userid - 1);
c0d03054:	1e41      	subs	r1, r0, #1
c0d03056:	4a10      	ldr	r2, [pc, #64]	; (c0d03098 <ui_finalize_prepro+0x50>)
c0d03058:	6812      	ldr	r2, [r2, #0]
c0d0305a:	2401      	movs	r4, #1
c0d0305c:	2300      	movs	r3, #0
c0d0305e:	428a      	cmp	r2, r1
c0d03060:	d000      	beq.n	c0d03064 <ui_finalize_prepro+0x1c>
c0d03062:	461c      	mov	r4, r3
        if (display) {
c0d03064:	428a      	cmp	r2, r1
c0d03066:	d115      	bne.n	c0d03094 <ui_finalize_prepro+0x4c>
c0d03068:	267d      	movs	r6, #125	; 0x7d
c0d0306a:	0131      	lsls	r1, r6, #4
            switch (element->component.userid) {
c0d0306c:	2801      	cmp	r0, #1
c0d0306e:	d00f      	beq.n	c0d03090 <ui_finalize_prepro+0x48>
c0d03070:	2802      	cmp	r0, #2
c0d03072:	d10f      	bne.n	c0d03094 <ui_finalize_prepro+0x4c>
            case 1:
                UX_CALLBACK_SET_INTERVAL(2000);
                break;
            case 2:
                UX_CALLBACK_SET_INTERVAL(MAX(
c0d03074:	2107      	movs	r1, #7
c0d03076:	4628      	mov	r0, r5
c0d03078:	f001 fe3a 	bl	c0d04cf0 <bagl_label_roundtrip_duration_ms>
c0d0307c:	00f6      	lsls	r6, r6, #3
c0d0307e:	1980      	adds	r0, r0, r6
c0d03080:	4906      	ldr	r1, [pc, #24]	; (c0d0309c <ui_finalize_prepro+0x54>)
c0d03082:	4288      	cmp	r0, r1
c0d03084:	d304      	bcc.n	c0d03090 <ui_finalize_prepro+0x48>
c0d03086:	2107      	movs	r1, #7
c0d03088:	4628      	mov	r0, r5
c0d0308a:	f001 fe31 	bl	c0d04cf0 <bagl_label_roundtrip_duration_ms>
c0d0308e:	1981      	adds	r1, r0, r6
c0d03090:	4803      	ldr	r0, [pc, #12]	; (c0d030a0 <ui_finalize_prepro+0x58>)
c0d03092:	6141      	str	r1, [r0, #20]
            }
        }
        return display;
    }
    return 1;
}
c0d03094:	4620      	mov	r0, r4
c0d03096:	bd70      	pop	{r4, r5, r6, pc}
c0d03098:	20001c28 	.word	0x20001c28
c0d0309c:	00000bb8 	.word	0x00000bb8
c0d030a0:	20001c2c 	.word	0x20001c2c

c0d030a4 <ui_verify_message_prepro>:
};
unsigned int
ui_verify_message_signature_nanos_button(unsigned int button_mask,
                                         unsigned int button_mask_counter);

unsigned int ui_verify_message_prepro(const bagl_element_t *element) {
c0d030a4:	b570      	push	{r4, r5, r6, lr}
c0d030a6:	4605      	mov	r5, r0
    if (element->component.userid > 0) {
c0d030a8:	7868      	ldrb	r0, [r5, #1]
c0d030aa:	2401      	movs	r4, #1
c0d030ac:	2800      	cmp	r0, #0
c0d030ae:	d01f      	beq.n	c0d030f0 <ui_verify_message_prepro+0x4c>
        unsigned int display = (ux_step == element->component.userid - 1);
c0d030b0:	1e41      	subs	r1, r0, #1
c0d030b2:	4a10      	ldr	r2, [pc, #64]	; (c0d030f4 <ui_verify_message_prepro+0x50>)
c0d030b4:	6812      	ldr	r2, [r2, #0]
c0d030b6:	2401      	movs	r4, #1
c0d030b8:	2300      	movs	r3, #0
c0d030ba:	428a      	cmp	r2, r1
c0d030bc:	d000      	beq.n	c0d030c0 <ui_verify_message_prepro+0x1c>
c0d030be:	461c      	mov	r4, r3
        if (display) {
c0d030c0:	428a      	cmp	r2, r1
c0d030c2:	d115      	bne.n	c0d030f0 <ui_verify_message_prepro+0x4c>
c0d030c4:	267d      	movs	r6, #125	; 0x7d
c0d030c6:	0131      	lsls	r1, r6, #4
            switch (element->component.userid) {
c0d030c8:	2801      	cmp	r0, #1
c0d030ca:	d00f      	beq.n	c0d030ec <ui_verify_message_prepro+0x48>
c0d030cc:	2802      	cmp	r0, #2
c0d030ce:	d10f      	bne.n	c0d030f0 <ui_verify_message_prepro+0x4c>
            case 1:
                UX_CALLBACK_SET_INTERVAL(2000);
                break;
            case 2:
                UX_CALLBACK_SET_INTERVAL(MAX(
c0d030d0:	2107      	movs	r1, #7
c0d030d2:	4628      	mov	r0, r5
c0d030d4:	f001 fe0c 	bl	c0d04cf0 <bagl_label_roundtrip_duration_ms>
c0d030d8:	00f6      	lsls	r6, r6, #3
c0d030da:	1980      	adds	r0, r0, r6
c0d030dc:	4906      	ldr	r1, [pc, #24]	; (c0d030f8 <ui_verify_message_prepro+0x54>)
c0d030de:	4288      	cmp	r0, r1
c0d030e0:	d304      	bcc.n	c0d030ec <ui_verify_message_prepro+0x48>
c0d030e2:	2107      	movs	r1, #7
c0d030e4:	4628      	mov	r0, r5
c0d030e6:	f001 fe03 	bl	c0d04cf0 <bagl_label_roundtrip_duration_ms>
c0d030ea:	1981      	adds	r1, r0, r6
c0d030ec:	4803      	ldr	r0, [pc, #12]	; (c0d030fc <ui_verify_message_prepro+0x58>)
c0d030ee:	6141      	str	r1, [r0, #20]
            }
        }
        return display;
    }
    return 1;
}
c0d030f0:	4620      	mov	r0, r4
c0d030f2:	bd70      	pop	{r4, r5, r6, pc}
c0d030f4:	20001c28 	.word	0x20001c28
c0d030f8:	00000bb8 	.word	0x00000bb8
c0d030fc:	20001c2c 	.word	0x20001c2c

c0d03100 <io_seproxyhal_touch_verify_cancel>:
    os_sched_exit(0);
    return 0; // DO NOT REDRAW THE BUTTON
}
#endif // TARGET_BLUE

unsigned int io_seproxyhal_touch_verify_cancel(const bagl_element_t *e) {
c0d03100:	b580      	push	{r7, lr}
    // user denied the transaction, tell the USB side
    if (!btchip_bagl_user_action(0)) {
c0d03102:	2000      	movs	r0, #0
c0d03104:	f7fd fd78 	bl	c0d00bf8 <btchip_bagl_user_action>
c0d03108:	2800      	cmp	r0, #0
c0d0310a:	d107      	bne.n	c0d0311c <io_seproxyhal_touch_verify_cancel+0x1c>
}

#endif // #if defined(TARGET_NANOS)

void ui_idle(void) {
    ux_step_count = 0;
c0d0310c:	4904      	ldr	r1, [pc, #16]	; (c0d03120 <io_seproxyhal_touch_verify_cancel+0x20>)
c0d0310e:	2000      	movs	r0, #0
c0d03110:	6008      	str	r0, [r1, #0]

#if defined(TARGET_BLUE)
    UX_DISPLAY(ui_idle_blue, NULL);
#elif defined(TARGET_NANOS)
    UX_MENU_DISPLAY(0, menu_main, NULL);
c0d03112:	4904      	ldr	r1, [pc, #16]	; (c0d03124 <io_seproxyhal_touch_verify_cancel+0x24>)
c0d03114:	4479      	add	r1, pc
c0d03116:	4602      	mov	r2, r0
c0d03118:	f002 f8b2 	bl	c0d05280 <ux_menu_display>
    // user denied the transaction, tell the USB side
    if (!btchip_bagl_user_action(0)) {
        // redraw ui
        ui_idle();
    }
    return 0; // DO NOT REDRAW THE BUTTON
c0d0311c:	2000      	movs	r0, #0
c0d0311e:	bd80      	pop	{r7, pc}
c0d03120:	20001d30 	.word	0x20001d30
c0d03124:	00004af4 	.word	0x00004af4

c0d03128 <io_seproxyhal_touch_verify_ok>:
}

unsigned int io_seproxyhal_touch_verify_ok(const bagl_element_t *e) {
c0d03128:	b580      	push	{r7, lr}
c0d0312a:	2001      	movs	r0, #1
    // user accepted the transaction, tell the USB side
    if (!btchip_bagl_user_action(1)) {
c0d0312c:	f7fd fd64 	bl	c0d00bf8 <btchip_bagl_user_action>
c0d03130:	2800      	cmp	r0, #0
c0d03132:	d107      	bne.n	c0d03144 <io_seproxyhal_touch_verify_ok+0x1c>
}

#endif // #if defined(TARGET_NANOS)

void ui_idle(void) {
    ux_step_count = 0;
c0d03134:	4904      	ldr	r1, [pc, #16]	; (c0d03148 <io_seproxyhal_touch_verify_ok+0x20>)
c0d03136:	2000      	movs	r0, #0
c0d03138:	6008      	str	r0, [r1, #0]

#if defined(TARGET_BLUE)
    UX_DISPLAY(ui_idle_blue, NULL);
#elif defined(TARGET_NANOS)
    UX_MENU_DISPLAY(0, menu_main, NULL);
c0d0313a:	4904      	ldr	r1, [pc, #16]	; (c0d0314c <io_seproxyhal_touch_verify_ok+0x24>)
c0d0313c:	4479      	add	r1, pc
c0d0313e:	4602      	mov	r2, r0
c0d03140:	f002 f89e 	bl	c0d05280 <ux_menu_display>
    // user accepted the transaction, tell the USB side
    if (!btchip_bagl_user_action(1)) {
        // redraw ui
        ui_idle();
    }
    return 0; // DO NOT REDRAW THE BUTTON
c0d03144:	2000      	movs	r0, #0
c0d03146:	bd80      	pop	{r7, pc}
c0d03148:	20001d30 	.word	0x20001d30
c0d0314c:	00004acc 	.word	0x00004acc

c0d03150 <ui_verify_nanos_button>:
    return 0; // DO NOT REDRAW THE BUTTON
}

#if defined(TARGET_NANOS)
unsigned int ui_verify_nanos_button(unsigned int button_mask,
                                    unsigned int button_mask_counter) {
c0d03150:	b580      	push	{r7, lr}
    switch (button_mask) {
c0d03152:	4906      	ldr	r1, [pc, #24]	; (c0d0316c <ui_verify_nanos_button+0x1c>)
c0d03154:	4288      	cmp	r0, r1
c0d03156:	d005      	beq.n	c0d03164 <ui_verify_nanos_button+0x14>
c0d03158:	4905      	ldr	r1, [pc, #20]	; (c0d03170 <ui_verify_nanos_button+0x20>)
c0d0315a:	4288      	cmp	r0, r1
c0d0315c:	d104      	bne.n	c0d03168 <ui_verify_nanos_button+0x18>
    case BUTTON_EVT_RELEASED | BUTTON_LEFT:
        io_seproxyhal_touch_verify_cancel(NULL);
c0d0315e:	f7ff ffcf 	bl	c0d03100 <io_seproxyhal_touch_verify_cancel>
c0d03162:	e001      	b.n	c0d03168 <ui_verify_nanos_button+0x18>
        break;

    case BUTTON_EVT_RELEASED | BUTTON_RIGHT:
        io_seproxyhal_touch_verify_ok(NULL);
c0d03164:	f7ff ffe0 	bl	c0d03128 <io_seproxyhal_touch_verify_ok>
        break;
    }
    return 0;
c0d03168:	2000      	movs	r0, #0
c0d0316a:	bd80      	pop	{r7, pc}
c0d0316c:	80000002 	.word	0x80000002
c0d03170:	80000001 	.word	0x80000001

c0d03174 <ui_verify_output_nanos_button>:
}

unsigned int ui_verify_output_nanos_button(unsigned int button_mask,
                                           unsigned int button_mask_counter) {
c0d03174:	b580      	push	{r7, lr}
    switch (button_mask) {
c0d03176:	4906      	ldr	r1, [pc, #24]	; (c0d03190 <ui_verify_output_nanos_button+0x1c>)
c0d03178:	4288      	cmp	r0, r1
c0d0317a:	d005      	beq.n	c0d03188 <ui_verify_output_nanos_button+0x14>
c0d0317c:	4905      	ldr	r1, [pc, #20]	; (c0d03194 <ui_verify_output_nanos_button+0x20>)
c0d0317e:	4288      	cmp	r0, r1
c0d03180:	d104      	bne.n	c0d0318c <ui_verify_output_nanos_button+0x18>
    case BUTTON_EVT_RELEASED | BUTTON_LEFT:
        io_seproxyhal_touch_verify_cancel(NULL);
c0d03182:	f7ff ffbd 	bl	c0d03100 <io_seproxyhal_touch_verify_cancel>
c0d03186:	e001      	b.n	c0d0318c <ui_verify_output_nanos_button+0x18>
        break;

    case BUTTON_EVT_RELEASED | BUTTON_RIGHT:
        io_seproxyhal_touch_verify_ok(NULL);
c0d03188:	f7ff ffce 	bl	c0d03128 <io_seproxyhal_touch_verify_ok>
        break;
    }
    return 0;
c0d0318c:	2000      	movs	r0, #0
c0d0318e:	bd80      	pop	{r7, pc}
c0d03190:	80000002 	.word	0x80000002
c0d03194:	80000001 	.word	0x80000001

c0d03198 <ui_finalize_nanos_button>:
}

unsigned int ui_finalize_nanos_button(unsigned int button_mask,
                                      unsigned int button_mask_counter) {
c0d03198:	b580      	push	{r7, lr}
    switch (button_mask) {
c0d0319a:	4906      	ldr	r1, [pc, #24]	; (c0d031b4 <ui_finalize_nanos_button+0x1c>)
c0d0319c:	4288      	cmp	r0, r1
c0d0319e:	d005      	beq.n	c0d031ac <ui_finalize_nanos_button+0x14>
c0d031a0:	4905      	ldr	r1, [pc, #20]	; (c0d031b8 <ui_finalize_nanos_button+0x20>)
c0d031a2:	4288      	cmp	r0, r1
c0d031a4:	d104      	bne.n	c0d031b0 <ui_finalize_nanos_button+0x18>
    case BUTTON_EVT_RELEASED | BUTTON_LEFT:
        io_seproxyhal_touch_verify_cancel(NULL);
c0d031a6:	f7ff ffab 	bl	c0d03100 <io_seproxyhal_touch_verify_cancel>
c0d031aa:	e001      	b.n	c0d031b0 <ui_finalize_nanos_button+0x18>
        break;

    case BUTTON_EVT_RELEASED | BUTTON_RIGHT:
        io_seproxyhal_touch_verify_ok(NULL);
c0d031ac:	f7ff ffbc 	bl	c0d03128 <io_seproxyhal_touch_verify_ok>
        break;
    }
    return 0;
c0d031b0:	2000      	movs	r0, #0
c0d031b2:	bd80      	pop	{r7, pc}
c0d031b4:	80000002 	.word	0x80000002
c0d031b8:	80000001 	.word	0x80000001

c0d031bc <ui_verify_message_signature_nanos_button>:
}

unsigned int
ui_verify_message_signature_nanos_button(unsigned int button_mask,
                                         unsigned int button_mask_counter) {
c0d031bc:	b510      	push	{r4, lr}
    switch (button_mask) {
c0d031be:	490f      	ldr	r1, [pc, #60]	; (c0d031fc <ui_verify_message_signature_nanos_button+0x40>)
c0d031c0:	4288      	cmp	r0, r1
c0d031c2:	d00d      	beq.n	c0d031e0 <ui_verify_message_signature_nanos_button+0x24>
c0d031c4:	490e      	ldr	r1, [pc, #56]	; (c0d03200 <ui_verify_message_signature_nanos_button+0x44>)
c0d031c6:	4288      	cmp	r0, r1
c0d031c8:	d115      	bne.n	c0d031f6 <ui_verify_message_signature_nanos_button+0x3a>
c0d031ca:	2400      	movs	r4, #0
}

unsigned int
io_seproxyhal_touch_message_signature_verify_cancel(const bagl_element_t *e) {
    // user denied the transaction, tell the USB side
    btchip_bagl_user_action_message_signing(0);
c0d031cc:	4620      	mov	r0, r4
c0d031ce:	f7fe fbdf 	bl	c0d01990 <btchip_bagl_user_action_message_signing>
}

#endif // #if defined(TARGET_NANOS)

void ui_idle(void) {
    ux_step_count = 0;
c0d031d2:	480c      	ldr	r0, [pc, #48]	; (c0d03204 <ui_verify_message_signature_nanos_button+0x48>)
c0d031d4:	6004      	str	r4, [r0, #0]

#if defined(TARGET_BLUE)
    UX_DISPLAY(ui_idle_blue, NULL);
#elif defined(TARGET_NANOS)
    UX_MENU_DISPLAY(0, menu_main, NULL);
c0d031d6:	490c      	ldr	r1, [pc, #48]	; (c0d03208 <ui_verify_message_signature_nanos_button+0x4c>)
c0d031d8:	4479      	add	r1, pc
c0d031da:	4620      	mov	r0, r4
c0d031dc:	4622      	mov	r2, r4
c0d031de:	e008      	b.n	c0d031f2 <ui_verify_message_signature_nanos_button+0x36>
}

unsigned int
io_seproxyhal_touch_message_signature_verify_ok(const bagl_element_t *e) {
    // user accepted the transaction, tell the USB side
    btchip_bagl_user_action_message_signing(1);
c0d031e0:	2001      	movs	r0, #1
c0d031e2:	f7fe fbd5 	bl	c0d01990 <btchip_bagl_user_action_message_signing>
}

#endif // #if defined(TARGET_NANOS)

void ui_idle(void) {
    ux_step_count = 0;
c0d031e6:	4907      	ldr	r1, [pc, #28]	; (c0d03204 <ui_verify_message_signature_nanos_button+0x48>)
c0d031e8:	2000      	movs	r0, #0
c0d031ea:	6008      	str	r0, [r1, #0]

#if defined(TARGET_BLUE)
    UX_DISPLAY(ui_idle_blue, NULL);
#elif defined(TARGET_NANOS)
    UX_MENU_DISPLAY(0, menu_main, NULL);
c0d031ec:	4907      	ldr	r1, [pc, #28]	; (c0d0320c <ui_verify_message_signature_nanos_button+0x50>)
c0d031ee:	4479      	add	r1, pc
c0d031f0:	4602      	mov	r2, r0
c0d031f2:	f002 f845 	bl	c0d05280 <ux_menu_display>

    case BUTTON_EVT_RELEASED | BUTTON_RIGHT:
        io_seproxyhal_touch_message_signature_verify_ok(NULL);
        break;
    }
    return 0;
c0d031f6:	2000      	movs	r0, #0
c0d031f8:	bd10      	pop	{r4, pc}
c0d031fa:	46c0      	nop			; (mov r8, r8)
c0d031fc:	80000002 	.word	0x80000002
c0d03200:	80000001 	.word	0x80000001
c0d03204:	20001d30 	.word	0x20001d30
c0d03208:	00004a30 	.word	0x00004a30
c0d0320c:	00004a1a 	.word	0x00004a1a

c0d03210 <ui_display_address_nanos_button>:
}

unsigned int ui_display_address_nanos_button(unsigned int button_mask,
                                             unsigned int button_mask_counter) {
c0d03210:	b510      	push	{r4, lr}
    switch (button_mask) {
c0d03212:	490f      	ldr	r1, [pc, #60]	; (c0d03250 <ui_display_address_nanos_button+0x40>)
c0d03214:	4288      	cmp	r0, r1
c0d03216:	d00d      	beq.n	c0d03234 <ui_display_address_nanos_button+0x24>
c0d03218:	490e      	ldr	r1, [pc, #56]	; (c0d03254 <ui_display_address_nanos_button+0x44>)
c0d0321a:	4288      	cmp	r0, r1
c0d0321c:	d115      	bne.n	c0d0324a <ui_display_address_nanos_button+0x3a>
c0d0321e:	2400      	movs	r4, #0
    return 0; // DO NOT REDRAW THE BUTTON
}

unsigned int io_seproxyhal_touch_display_cancel(const bagl_element_t *e) {
    // user denied the transaction, tell the USB side
    btchip_bagl_user_action_display(0);
c0d03220:	4620      	mov	r0, r4
c0d03222:	f7fd fa8f 	bl	c0d00744 <btchip_bagl_user_action_display>
}

#endif // #if defined(TARGET_NANOS)

void ui_idle(void) {
    ux_step_count = 0;
c0d03226:	480c      	ldr	r0, [pc, #48]	; (c0d03258 <ui_display_address_nanos_button+0x48>)
c0d03228:	6004      	str	r4, [r0, #0]

#if defined(TARGET_BLUE)
    UX_DISPLAY(ui_idle_blue, NULL);
#elif defined(TARGET_NANOS)
    UX_MENU_DISPLAY(0, menu_main, NULL);
c0d0322a:	490c      	ldr	r1, [pc, #48]	; (c0d0325c <ui_display_address_nanos_button+0x4c>)
c0d0322c:	4479      	add	r1, pc
c0d0322e:	4620      	mov	r0, r4
c0d03230:	4622      	mov	r2, r4
c0d03232:	e008      	b.n	c0d03246 <ui_display_address_nanos_button+0x36>
    return 0; // DO NOT REDRAW THE BUTTON
}

unsigned int io_seproxyhal_touch_display_ok(const bagl_element_t *e) {
    // user accepted the transaction, tell the USB side
    btchip_bagl_user_action_display(1);
c0d03234:	2001      	movs	r0, #1
c0d03236:	f7fd fa85 	bl	c0d00744 <btchip_bagl_user_action_display>
}

#endif // #if defined(TARGET_NANOS)

void ui_idle(void) {
    ux_step_count = 0;
c0d0323a:	4907      	ldr	r1, [pc, #28]	; (c0d03258 <ui_display_address_nanos_button+0x48>)
c0d0323c:	2000      	movs	r0, #0
c0d0323e:	6008      	str	r0, [r1, #0]

#if defined(TARGET_BLUE)
    UX_DISPLAY(ui_idle_blue, NULL);
#elif defined(TARGET_NANOS)
    UX_MENU_DISPLAY(0, menu_main, NULL);
c0d03240:	4907      	ldr	r1, [pc, #28]	; (c0d03260 <ui_display_address_nanos_button+0x50>)
c0d03242:	4479      	add	r1, pc
c0d03244:	4602      	mov	r2, r0
c0d03246:	f002 f81b 	bl	c0d05280 <ux_menu_display>

    case BUTTON_EVT_RELEASED | BUTTON_RIGHT:
        io_seproxyhal_touch_display_ok(NULL);
        break;
    }
    return 0;
c0d0324a:	2000      	movs	r0, #0
c0d0324c:	bd10      	pop	{r4, pc}
c0d0324e:	46c0      	nop			; (mov r8, r8)
c0d03250:	80000002 	.word	0x80000002
c0d03254:	80000001 	.word	0x80000001
c0d03258:	20001d30 	.word	0x20001d30
c0d0325c:	000049dc 	.word	0x000049dc
c0d03260:	000049c6 	.word	0x000049c6

c0d03264 <io_seproxyhal_display>:
    ui_transaction_blue_init();
}
#endif // #if defined(TARGET_BLUE)

// override point, but nothing more to do
void io_seproxyhal_display(const bagl_element_t *element) {
c0d03264:	b580      	push	{r7, lr}
    if ((element->component.type & (~BAGL_TYPE_FLAGS_MASK)) != BAGL_NONE) {
c0d03266:	7801      	ldrb	r1, [r0, #0]
c0d03268:	0649      	lsls	r1, r1, #25
c0d0326a:	d001      	beq.n	c0d03270 <io_seproxyhal_display+0xc>
        io_seproxyhal_display_default((bagl_element_t *)element);
c0d0326c:	f001 fcfe 	bl	c0d04c6c <io_seproxyhal_display_default>
    }
}
c0d03270:	bd80      	pop	{r7, pc}
	...

c0d03274 <io_exchange_al>:

unsigned short io_exchange_al(unsigned char channel, unsigned short tx_len) {
c0d03274:	b5b0      	push	{r4, r5, r7, lr}
c0d03276:	4605      	mov	r5, r0
c0d03278:	200f      	movs	r0, #15
    switch (channel & ~(IO_FLAGS)) {
c0d0327a:	4028      	ands	r0, r5
c0d0327c:	2400      	movs	r4, #0
c0d0327e:	2801      	cmp	r0, #1
c0d03280:	d013      	beq.n	c0d032aa <io_exchange_al+0x36>
c0d03282:	2802      	cmp	r0, #2
c0d03284:	d113      	bne.n	c0d032ae <io_exchange_al+0x3a>
    case CHANNEL_KEYBOARD:
        break;

    // multiplexed io exchange over a SPI channel and TLV encapsulated protocol
    case CHANNEL_SPI:
        if (tx_len) {
c0d03286:	2900      	cmp	r1, #0
c0d03288:	d008      	beq.n	c0d0329c <io_exchange_al+0x28>
            io_seproxyhal_spi_send(G_io_apdu_buffer, tx_len);
c0d0328a:	480a      	ldr	r0, [pc, #40]	; (c0d032b4 <io_exchange_al+0x40>)
c0d0328c:	f002 ff26 	bl	c0d060dc <io_seproxyhal_spi_send>

            if (channel & IO_RESET_AFTER_REPLIED) {
c0d03290:	b268      	sxtb	r0, r5
c0d03292:	2800      	cmp	r0, #0
c0d03294:	da09      	bge.n	c0d032aa <io_exchange_al+0x36>
                reset();
c0d03296:	f002 fd9d 	bl	c0d05dd4 <reset>
c0d0329a:	e006      	b.n	c0d032aa <io_exchange_al+0x36>
            }
            return 0; // nothing received from the master so far (it's a tx
                      // transaction)
        } else {
            return io_seproxyhal_spi_recv(G_io_apdu_buffer,
c0d0329c:	21ff      	movs	r1, #255	; 0xff
c0d0329e:	3152      	adds	r1, #82	; 0x52
c0d032a0:	4804      	ldr	r0, [pc, #16]	; (c0d032b4 <io_exchange_al+0x40>)
c0d032a2:	2200      	movs	r2, #0
c0d032a4:	f002 ff46 	bl	c0d06134 <io_seproxyhal_spi_recv>
c0d032a8:	4604      	mov	r4, r0

    default:
        THROW(INVALID_PARAMETER);
    }
    return 0;
}
c0d032aa:	4620      	mov	r0, r4
c0d032ac:	bdb0      	pop	{r4, r5, r7, pc}
            return io_seproxyhal_spi_recv(G_io_apdu_buffer,
                                          sizeof(G_io_apdu_buffer), 0);
        }

    default:
        THROW(INVALID_PARAMETER);
c0d032ae:	2002      	movs	r0, #2
c0d032b0:	f001 fa33 	bl	c0d0471a <os_longjmp>
c0d032b4:	20001e6c 	.word	0x20001e6c

c0d032b8 <io_event>:
    }
    return 0;
}

unsigned char io_event(unsigned char channel) {
c0d032b8:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d032ba:	b085      	sub	sp, #20
    // nothing done with the event, throw an error on the transport layer if
    // needed

    // can't have more than one tag in the reply, not supported yet.
    switch (G_io_seproxyhal_spi_buffer[0]) {
c0d032bc:	4df6      	ldr	r5, [pc, #984]	; (c0d03698 <io_event+0x3e0>)
c0d032be:	7828      	ldrb	r0, [r5, #0]
c0d032c0:	4ff6      	ldr	r7, [pc, #984]	; (c0d0369c <io_event+0x3e4>)
c0d032c2:	280c      	cmp	r0, #12
c0d032c4:	dd10      	ble.n	c0d032e8 <io_event+0x30>
c0d032c6:	280d      	cmp	r0, #13
c0d032c8:	d07a      	beq.n	c0d033c0 <io_event+0x108>
c0d032ca:	280e      	cmp	r0, #14
c0d032cc:	d100      	bne.n	c0d032d0 <io_event+0x18>
c0d032ce:	e0ba      	b.n	c0d03446 <io_event+0x18e>
c0d032d0:	2815      	cmp	r0, #21
c0d032d2:	d133      	bne.n	c0d0333c <io_event+0x84>
    case SEPROXYHAL_TAG_BUTTON_PUSH_EVENT:
        UX_BUTTON_PUSH_EVENT(G_io_seproxyhal_spi_buffer);
        break;

    case SEPROXYHAL_TAG_STATUS_EVENT:
        if (G_io_apdu_media == IO_APDU_MEDIA_USB_HID &&
c0d032d4:	48f2      	ldr	r0, [pc, #968]	; (c0d036a0 <io_event+0x3e8>)
c0d032d6:	7800      	ldrb	r0, [r0, #0]
c0d032d8:	2801      	cmp	r0, #1
c0d032da:	d12f      	bne.n	c0d0333c <io_event+0x84>
            !(U4BE(G_io_seproxyhal_spi_buffer, 3) &
c0d032dc:	79a8      	ldrb	r0, [r5, #6]
    case SEPROXYHAL_TAG_BUTTON_PUSH_EVENT:
        UX_BUTTON_PUSH_EVENT(G_io_seproxyhal_spi_buffer);
        break;

    case SEPROXYHAL_TAG_STATUS_EVENT:
        if (G_io_apdu_media == IO_APDU_MEDIA_USB_HID &&
c0d032de:	0700      	lsls	r0, r0, #28
c0d032e0:	d42c      	bmi.n	c0d0333c <io_event+0x84>
            !(U4BE(G_io_seproxyhal_spi_buffer, 3) &
              SEPROXYHAL_TAG_STATUS_EVENT_FLAG_USB_POWERED)) {
            THROW(EXCEPTION_IO_RESET);
c0d032e2:	2010      	movs	r0, #16
c0d032e4:	f001 fa19 	bl	c0d0471a <os_longjmp>
c0d032e8:	2805      	cmp	r0, #5
c0d032ea:	d100      	bne.n	c0d032ee <io_event+0x36>
c0d032ec:	e0ee      	b.n	c0d034cc <io_event+0x214>
c0d032ee:	280c      	cmp	r0, #12
c0d032f0:	d124      	bne.n	c0d0333c <io_event+0x84>
    // needed

    // can't have more than one tag in the reply, not supported yet.
    switch (G_io_seproxyhal_spi_buffer[0]) {
    case SEPROXYHAL_TAG_FINGER_EVENT:
        UX_FINGER_EVENT(G_io_seproxyhal_spi_buffer);
c0d032f2:	4cec      	ldr	r4, [pc, #944]	; (c0d036a4 <io_event+0x3ec>)
c0d032f4:	2001      	movs	r0, #1
c0d032f6:	7620      	strb	r0, [r4, #24]
c0d032f8:	2600      	movs	r6, #0
c0d032fa:	61e6      	str	r6, [r4, #28]
c0d032fc:	4620      	mov	r0, r4
c0d032fe:	3018      	adds	r0, #24
c0d03300:	f002 fec0 	bl	c0d06084 <os_ux>
c0d03304:	61e0      	str	r0, [r4, #28]
c0d03306:	f002 f841 	bl	c0d0538c <ux_check_status_default>
c0d0330a:	69e0      	ldr	r0, [r4, #28]
c0d0330c:	49fb      	ldr	r1, [pc, #1004]	; (c0d036fc <io_event+0x444>)
c0d0330e:	4288      	cmp	r0, r1
c0d03310:	d100      	bne.n	c0d03314 <io_event+0x5c>
c0d03312:	e266      	b.n	c0d037e2 <io_event+0x52a>
c0d03314:	2800      	cmp	r0, #0
c0d03316:	d100      	bne.n	c0d0331a <io_event+0x62>
c0d03318:	e263      	b.n	c0d037e2 <io_event+0x52a>
c0d0331a:	49f6      	ldr	r1, [pc, #984]	; (c0d036f4 <io_event+0x43c>)
c0d0331c:	4288      	cmp	r0, r1
c0d0331e:	d000      	beq.n	c0d03322 <io_event+0x6a>
c0d03320:	e1ee      	b.n	c0d03700 <io_event+0x448>
c0d03322:	f001 fb5d 	bl	c0d049e0 <io_seproxyhal_init_ux>
c0d03326:	60a6      	str	r6, [r4, #8]
c0d03328:	6820      	ldr	r0, [r4, #0]
c0d0332a:	2800      	cmp	r0, #0
c0d0332c:	d100      	bne.n	c0d03330 <io_event+0x78>
c0d0332e:	e258      	b.n	c0d037e2 <io_event+0x52a>
c0d03330:	69e0      	ldr	r0, [r4, #28]
c0d03332:	49f2      	ldr	r1, [pc, #968]	; (c0d036fc <io_event+0x444>)
c0d03334:	4288      	cmp	r0, r1
c0d03336:	d000      	beq.n	c0d0333a <io_event+0x82>
c0d03338:	e13a      	b.n	c0d035b0 <io_event+0x2f8>
c0d0333a:	e252      	b.n	c0d037e2 <io_event+0x52a>
              SEPROXYHAL_TAG_STATUS_EVENT_FLAG_USB_POWERED)) {
            THROW(EXCEPTION_IO_RESET);
        }
    // no break is intentional
    default:
        UX_DEFAULT_EVENT();
c0d0333c:	4cee      	ldr	r4, [pc, #952]	; (c0d036f8 <io_event+0x440>)
c0d0333e:	2001      	movs	r0, #1
c0d03340:	7620      	strb	r0, [r4, #24]
c0d03342:	2500      	movs	r5, #0
c0d03344:	61e5      	str	r5, [r4, #28]
c0d03346:	4620      	mov	r0, r4
c0d03348:	3018      	adds	r0, #24
c0d0334a:	f002 fe9b 	bl	c0d06084 <os_ux>
c0d0334e:	61e0      	str	r0, [r4, #28]
c0d03350:	f002 f81c 	bl	c0d0538c <ux_check_status_default>
c0d03354:	69e0      	ldr	r0, [r4, #28]
c0d03356:	42b8      	cmp	r0, r7
c0d03358:	d000      	beq.n	c0d0335c <io_event+0xa4>
c0d0335a:	e0db      	b.n	c0d03514 <io_event+0x25c>
c0d0335c:	f001 fb40 	bl	c0d049e0 <io_seproxyhal_init_ux>
c0d03360:	60a5      	str	r5, [r4, #8]
c0d03362:	6820      	ldr	r0, [r4, #0]
c0d03364:	2800      	cmp	r0, #0
c0d03366:	d100      	bne.n	c0d0336a <io_event+0xb2>
c0d03368:	e23b      	b.n	c0d037e2 <io_event+0x52a>
c0d0336a:	69e0      	ldr	r0, [r4, #28]
c0d0336c:	49e3      	ldr	r1, [pc, #908]	; (c0d036fc <io_event+0x444>)
c0d0336e:	4288      	cmp	r0, r1
c0d03370:	d123      	bne.n	c0d033ba <io_event+0x102>
c0d03372:	e236      	b.n	c0d037e2 <io_event+0x52a>
c0d03374:	6860      	ldr	r0, [r4, #4]
c0d03376:	4285      	cmp	r5, r0
c0d03378:	d300      	bcc.n	c0d0337c <io_event+0xc4>
c0d0337a:	e232      	b.n	c0d037e2 <io_event+0x52a>
c0d0337c:	f002 fec4 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d03380:	2800      	cmp	r0, #0
c0d03382:	d000      	beq.n	c0d03386 <io_event+0xce>
c0d03384:	e22d      	b.n	c0d037e2 <io_event+0x52a>
c0d03386:	68a0      	ldr	r0, [r4, #8]
c0d03388:	68e1      	ldr	r1, [r4, #12]
c0d0338a:	2538      	movs	r5, #56	; 0x38
c0d0338c:	4368      	muls	r0, r5
c0d0338e:	6822      	ldr	r2, [r4, #0]
c0d03390:	1810      	adds	r0, r2, r0
c0d03392:	2900      	cmp	r1, #0
c0d03394:	d002      	beq.n	c0d0339c <io_event+0xe4>
c0d03396:	4788      	blx	r1
c0d03398:	2800      	cmp	r0, #0
c0d0339a:	d00a      	beq.n	c0d033b2 <io_event+0xfa>
c0d0339c:	2801      	cmp	r0, #1
c0d0339e:	d103      	bne.n	c0d033a8 <io_event+0xf0>
c0d033a0:	68a0      	ldr	r0, [r4, #8]
c0d033a2:	4345      	muls	r5, r0
c0d033a4:	6820      	ldr	r0, [r4, #0]
c0d033a6:	1940      	adds	r0, r0, r5
}
#endif // #if defined(TARGET_BLUE)

// override point, but nothing more to do
void io_seproxyhal_display(const bagl_element_t *element) {
    if ((element->component.type & (~BAGL_TYPE_FLAGS_MASK)) != BAGL_NONE) {
c0d033a8:	7801      	ldrb	r1, [r0, #0]
c0d033aa:	0649      	lsls	r1, r1, #25
c0d033ac:	d001      	beq.n	c0d033b2 <io_event+0xfa>
        io_seproxyhal_display_default((bagl_element_t *)element);
c0d033ae:	f001 fc5d 	bl	c0d04c6c <io_seproxyhal_display_default>
              SEPROXYHAL_TAG_STATUS_EVENT_FLAG_USB_POWERED)) {
            THROW(EXCEPTION_IO_RESET);
        }
    // no break is intentional
    default:
        UX_DEFAULT_EVENT();
c0d033b2:	68a0      	ldr	r0, [r4, #8]
c0d033b4:	1c45      	adds	r5, r0, #1
c0d033b6:	60a5      	str	r5, [r4, #8]
c0d033b8:	6820      	ldr	r0, [r4, #0]
c0d033ba:	2800      	cmp	r0, #0
c0d033bc:	d1da      	bne.n	c0d03374 <io_event+0xbc>
c0d033be:	e210      	b.n	c0d037e2 <io_event+0x52a>
        break;

    case SEPROXYHAL_TAG_DISPLAY_PROCESSED_EVENT:
        UX_DISPLAYED_EVENT({});
c0d033c0:	4ccd      	ldr	r4, [pc, #820]	; (c0d036f8 <io_event+0x440>)
c0d033c2:	2001      	movs	r0, #1
c0d033c4:	7620      	strb	r0, [r4, #24]
c0d033c6:	2500      	movs	r5, #0
c0d033c8:	61e5      	str	r5, [r4, #28]
c0d033ca:	4620      	mov	r0, r4
c0d033cc:	3018      	adds	r0, #24
c0d033ce:	f002 fe59 	bl	c0d06084 <os_ux>
c0d033d2:	61e0      	str	r0, [r4, #28]
c0d033d4:	f001 ffda 	bl	c0d0538c <ux_check_status_default>
c0d033d8:	69e0      	ldr	r0, [r4, #28]
c0d033da:	49c8      	ldr	r1, [pc, #800]	; (c0d036fc <io_event+0x444>)
c0d033dc:	4288      	cmp	r0, r1
c0d033de:	d100      	bne.n	c0d033e2 <io_event+0x12a>
c0d033e0:	e1ff      	b.n	c0d037e2 <io_event+0x52a>
c0d033e2:	49c4      	ldr	r1, [pc, #784]	; (c0d036f4 <io_event+0x43c>)
c0d033e4:	4288      	cmp	r0, r1
c0d033e6:	d100      	bne.n	c0d033ea <io_event+0x132>
c0d033e8:	e149      	b.n	c0d0367e <io_event+0x3c6>
c0d033ea:	2800      	cmp	r0, #0
c0d033ec:	d100      	bne.n	c0d033f0 <io_event+0x138>
c0d033ee:	e1f8      	b.n	c0d037e2 <io_event+0x52a>
c0d033f0:	6820      	ldr	r0, [r4, #0]
c0d033f2:	2800      	cmp	r0, #0
c0d033f4:	d100      	bne.n	c0d033f8 <io_event+0x140>
c0d033f6:	e1ee      	b.n	c0d037d6 <io_event+0x51e>
c0d033f8:	68a0      	ldr	r0, [r4, #8]
c0d033fa:	6861      	ldr	r1, [r4, #4]
c0d033fc:	4288      	cmp	r0, r1
c0d033fe:	d300      	bcc.n	c0d03402 <io_event+0x14a>
c0d03400:	e1e9      	b.n	c0d037d6 <io_event+0x51e>
c0d03402:	f002 fe81 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d03406:	2800      	cmp	r0, #0
c0d03408:	d000      	beq.n	c0d0340c <io_event+0x154>
c0d0340a:	e1e4      	b.n	c0d037d6 <io_event+0x51e>
c0d0340c:	68a0      	ldr	r0, [r4, #8]
c0d0340e:	68e1      	ldr	r1, [r4, #12]
c0d03410:	2538      	movs	r5, #56	; 0x38
c0d03412:	4368      	muls	r0, r5
c0d03414:	6822      	ldr	r2, [r4, #0]
c0d03416:	1810      	adds	r0, r2, r0
c0d03418:	2900      	cmp	r1, #0
c0d0341a:	d002      	beq.n	c0d03422 <io_event+0x16a>
c0d0341c:	4788      	blx	r1
c0d0341e:	2800      	cmp	r0, #0
c0d03420:	d00a      	beq.n	c0d03438 <io_event+0x180>
c0d03422:	2801      	cmp	r0, #1
c0d03424:	d103      	bne.n	c0d0342e <io_event+0x176>
c0d03426:	68a0      	ldr	r0, [r4, #8]
c0d03428:	4345      	muls	r5, r0
c0d0342a:	6820      	ldr	r0, [r4, #0]
c0d0342c:	1940      	adds	r0, r0, r5
}
#endif // #if defined(TARGET_BLUE)

// override point, but nothing more to do
void io_seproxyhal_display(const bagl_element_t *element) {
    if ((element->component.type & (~BAGL_TYPE_FLAGS_MASK)) != BAGL_NONE) {
c0d0342e:	7801      	ldrb	r1, [r0, #0]
c0d03430:	0649      	lsls	r1, r1, #25
c0d03432:	d001      	beq.n	c0d03438 <io_event+0x180>
        io_seproxyhal_display_default((bagl_element_t *)element);
c0d03434:	f001 fc1a 	bl	c0d04c6c <io_seproxyhal_display_default>
    default:
        UX_DEFAULT_EVENT();
        break;

    case SEPROXYHAL_TAG_DISPLAY_PROCESSED_EVENT:
        UX_DISPLAYED_EVENT({});
c0d03438:	68a0      	ldr	r0, [r4, #8]
c0d0343a:	1c40      	adds	r0, r0, #1
c0d0343c:	60a0      	str	r0, [r4, #8]
c0d0343e:	6821      	ldr	r1, [r4, #0]
c0d03440:	2900      	cmp	r1, #0
c0d03442:	d1da      	bne.n	c0d033fa <io_event+0x142>
c0d03444:	e1c7      	b.n	c0d037d6 <io_event+0x51e>
        break;

    case SEPROXYHAL_TAG_TICKER_EVENT:
        UX_TICKER_EVENT(G_io_seproxyhal_spi_buffer, {
c0d03446:	4cac      	ldr	r4, [pc, #688]	; (c0d036f8 <io_event+0x440>)
c0d03448:	2001      	movs	r0, #1
c0d0344a:	7620      	strb	r0, [r4, #24]
c0d0344c:	2600      	movs	r6, #0
c0d0344e:	61e6      	str	r6, [r4, #28]
c0d03450:	4620      	mov	r0, r4
c0d03452:	3018      	adds	r0, #24
c0d03454:	f002 fe16 	bl	c0d06084 <os_ux>
c0d03458:	61e0      	str	r0, [r4, #28]
c0d0345a:	f001 ff97 	bl	c0d0538c <ux_check_status_default>
c0d0345e:	69e5      	ldr	r5, [r4, #28]
c0d03460:	42bd      	cmp	r5, r7
c0d03462:	d000      	beq.n	c0d03466 <io_event+0x1ae>
c0d03464:	e0cd      	b.n	c0d03602 <io_event+0x34a>
c0d03466:	f001 fabb 	bl	c0d049e0 <io_seproxyhal_init_ux>
c0d0346a:	2000      	movs	r0, #0
c0d0346c:	60a0      	str	r0, [r4, #8]
c0d0346e:	6821      	ldr	r1, [r4, #0]
c0d03470:	2900      	cmp	r1, #0
c0d03472:	d100      	bne.n	c0d03476 <io_event+0x1be>
c0d03474:	e1b5      	b.n	c0d037e2 <io_event+0x52a>
c0d03476:	69e1      	ldr	r1, [r4, #28]
c0d03478:	4aa0      	ldr	r2, [pc, #640]	; (c0d036fc <io_event+0x444>)
c0d0347a:	4291      	cmp	r1, r2
c0d0347c:	d123      	bne.n	c0d034c6 <io_event+0x20e>
c0d0347e:	e1b0      	b.n	c0d037e2 <io_event+0x52a>
c0d03480:	6861      	ldr	r1, [r4, #4]
c0d03482:	4288      	cmp	r0, r1
c0d03484:	d300      	bcc.n	c0d03488 <io_event+0x1d0>
c0d03486:	e1ac      	b.n	c0d037e2 <io_event+0x52a>
c0d03488:	f002 fe3e 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d0348c:	2800      	cmp	r0, #0
c0d0348e:	d000      	beq.n	c0d03492 <io_event+0x1da>
c0d03490:	e1a7      	b.n	c0d037e2 <io_event+0x52a>
c0d03492:	68a0      	ldr	r0, [r4, #8]
c0d03494:	68e1      	ldr	r1, [r4, #12]
c0d03496:	2538      	movs	r5, #56	; 0x38
c0d03498:	4368      	muls	r0, r5
c0d0349a:	6822      	ldr	r2, [r4, #0]
c0d0349c:	1810      	adds	r0, r2, r0
c0d0349e:	2900      	cmp	r1, #0
c0d034a0:	d002      	beq.n	c0d034a8 <io_event+0x1f0>
c0d034a2:	4788      	blx	r1
c0d034a4:	2800      	cmp	r0, #0
c0d034a6:	d00a      	beq.n	c0d034be <io_event+0x206>
c0d034a8:	2801      	cmp	r0, #1
c0d034aa:	d103      	bne.n	c0d034b4 <io_event+0x1fc>
c0d034ac:	68a0      	ldr	r0, [r4, #8]
c0d034ae:	4345      	muls	r5, r0
c0d034b0:	6820      	ldr	r0, [r4, #0]
c0d034b2:	1940      	adds	r0, r0, r5
}
#endif // #if defined(TARGET_BLUE)

// override point, but nothing more to do
void io_seproxyhal_display(const bagl_element_t *element) {
    if ((element->component.type & (~BAGL_TYPE_FLAGS_MASK)) != BAGL_NONE) {
c0d034b4:	7801      	ldrb	r1, [r0, #0]
c0d034b6:	0649      	lsls	r1, r1, #25
c0d034b8:	d001      	beq.n	c0d034be <io_event+0x206>
        io_seproxyhal_display_default((bagl_element_t *)element);
c0d034ba:	f001 fbd7 	bl	c0d04c6c <io_seproxyhal_display_default>
    case SEPROXYHAL_TAG_DISPLAY_PROCESSED_EVENT:
        UX_DISPLAYED_EVENT({});
        break;

    case SEPROXYHAL_TAG_TICKER_EVENT:
        UX_TICKER_EVENT(G_io_seproxyhal_spi_buffer, {
c0d034be:	68a0      	ldr	r0, [r4, #8]
c0d034c0:	1c40      	adds	r0, r0, #1
c0d034c2:	60a0      	str	r0, [r4, #8]
c0d034c4:	6821      	ldr	r1, [r4, #0]
c0d034c6:	2900      	cmp	r1, #0
c0d034c8:	d1da      	bne.n	c0d03480 <io_event+0x1c8>
c0d034ca:	e18a      	b.n	c0d037e2 <io_event+0x52a>
    case SEPROXYHAL_TAG_FINGER_EVENT:
        UX_FINGER_EVENT(G_io_seproxyhal_spi_buffer);
        break;

    case SEPROXYHAL_TAG_BUTTON_PUSH_EVENT:
        UX_BUTTON_PUSH_EVENT(G_io_seproxyhal_spi_buffer);
c0d034cc:	4ceb      	ldr	r4, [pc, #940]	; (c0d0387c <io_event+0x5c4>)
c0d034ce:	2001      	movs	r0, #1
c0d034d0:	7620      	strb	r0, [r4, #24]
c0d034d2:	2600      	movs	r6, #0
c0d034d4:	61e6      	str	r6, [r4, #28]
c0d034d6:	4620      	mov	r0, r4
c0d034d8:	3018      	adds	r0, #24
c0d034da:	f002 fdd3 	bl	c0d06084 <os_ux>
c0d034de:	61e0      	str	r0, [r4, #28]
c0d034e0:	f001 ff54 	bl	c0d0538c <ux_check_status_default>
c0d034e4:	69e0      	ldr	r0, [r4, #28]
c0d034e6:	49e7      	ldr	r1, [pc, #924]	; (c0d03884 <io_event+0x5cc>)
c0d034e8:	4288      	cmp	r0, r1
c0d034ea:	d100      	bne.n	c0d034ee <io_event+0x236>
c0d034ec:	e179      	b.n	c0d037e2 <io_event+0x52a>
c0d034ee:	2800      	cmp	r0, #0
c0d034f0:	d100      	bne.n	c0d034f4 <io_event+0x23c>
c0d034f2:	e176      	b.n	c0d037e2 <io_event+0x52a>
c0d034f4:	49e0      	ldr	r1, [pc, #896]	; (c0d03878 <io_event+0x5c0>)
c0d034f6:	4288      	cmp	r0, r1
c0d034f8:	d000      	beq.n	c0d034fc <io_event+0x244>
c0d034fa:	e13e      	b.n	c0d0377a <io_event+0x4c2>
c0d034fc:	f001 fa70 	bl	c0d049e0 <io_seproxyhal_init_ux>
c0d03500:	60a6      	str	r6, [r4, #8]
c0d03502:	6820      	ldr	r0, [r4, #0]
c0d03504:	2800      	cmp	r0, #0
c0d03506:	d100      	bne.n	c0d0350a <io_event+0x252>
c0d03508:	e16b      	b.n	c0d037e2 <io_event+0x52a>
c0d0350a:	69e0      	ldr	r0, [r4, #28]
c0d0350c:	49dd      	ldr	r1, [pc, #884]	; (c0d03884 <io_event+0x5cc>)
c0d0350e:	4288      	cmp	r0, r1
c0d03510:	d174      	bne.n	c0d035fc <io_event+0x344>
c0d03512:	e166      	b.n	c0d037e2 <io_event+0x52a>
              SEPROXYHAL_TAG_STATUS_EVENT_FLAG_USB_POWERED)) {
            THROW(EXCEPTION_IO_RESET);
        }
    // no break is intentional
    default:
        UX_DEFAULT_EVENT();
c0d03514:	6820      	ldr	r0, [r4, #0]
c0d03516:	2800      	cmp	r0, #0
c0d03518:	d100      	bne.n	c0d0351c <io_event+0x264>
c0d0351a:	e15c      	b.n	c0d037d6 <io_event+0x51e>
c0d0351c:	68a0      	ldr	r0, [r4, #8]
c0d0351e:	6861      	ldr	r1, [r4, #4]
c0d03520:	4288      	cmp	r0, r1
c0d03522:	d300      	bcc.n	c0d03526 <io_event+0x26e>
c0d03524:	e157      	b.n	c0d037d6 <io_event+0x51e>
c0d03526:	f002 fdef 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d0352a:	2800      	cmp	r0, #0
c0d0352c:	d000      	beq.n	c0d03530 <io_event+0x278>
c0d0352e:	e152      	b.n	c0d037d6 <io_event+0x51e>
c0d03530:	68a0      	ldr	r0, [r4, #8]
c0d03532:	68e1      	ldr	r1, [r4, #12]
c0d03534:	2538      	movs	r5, #56	; 0x38
c0d03536:	4368      	muls	r0, r5
c0d03538:	6822      	ldr	r2, [r4, #0]
c0d0353a:	1810      	adds	r0, r2, r0
c0d0353c:	2900      	cmp	r1, #0
c0d0353e:	d002      	beq.n	c0d03546 <io_event+0x28e>
c0d03540:	4788      	blx	r1
c0d03542:	2800      	cmp	r0, #0
c0d03544:	d00a      	beq.n	c0d0355c <io_event+0x2a4>
c0d03546:	2801      	cmp	r0, #1
c0d03548:	d103      	bne.n	c0d03552 <io_event+0x29a>
c0d0354a:	68a0      	ldr	r0, [r4, #8]
c0d0354c:	4345      	muls	r5, r0
c0d0354e:	6820      	ldr	r0, [r4, #0]
c0d03550:	1940      	adds	r0, r0, r5
}
#endif // #if defined(TARGET_BLUE)

// override point, but nothing more to do
void io_seproxyhal_display(const bagl_element_t *element) {
    if ((element->component.type & (~BAGL_TYPE_FLAGS_MASK)) != BAGL_NONE) {
c0d03552:	7801      	ldrb	r1, [r0, #0]
c0d03554:	0649      	lsls	r1, r1, #25
c0d03556:	d001      	beq.n	c0d0355c <io_event+0x2a4>
        io_seproxyhal_display_default((bagl_element_t *)element);
c0d03558:	f001 fb88 	bl	c0d04c6c <io_seproxyhal_display_default>
              SEPROXYHAL_TAG_STATUS_EVENT_FLAG_USB_POWERED)) {
            THROW(EXCEPTION_IO_RESET);
        }
    // no break is intentional
    default:
        UX_DEFAULT_EVENT();
c0d0355c:	68a0      	ldr	r0, [r4, #8]
c0d0355e:	1c40      	adds	r0, r0, #1
c0d03560:	60a0      	str	r0, [r4, #8]
c0d03562:	6821      	ldr	r1, [r4, #0]
c0d03564:	2900      	cmp	r1, #0
c0d03566:	d1da      	bne.n	c0d0351e <io_event+0x266>
c0d03568:	e135      	b.n	c0d037d6 <io_event+0x51e>
    // needed

    // can't have more than one tag in the reply, not supported yet.
    switch (G_io_seproxyhal_spi_buffer[0]) {
    case SEPROXYHAL_TAG_FINGER_EVENT:
        UX_FINGER_EVENT(G_io_seproxyhal_spi_buffer);
c0d0356a:	6860      	ldr	r0, [r4, #4]
c0d0356c:	4286      	cmp	r6, r0
c0d0356e:	d300      	bcc.n	c0d03572 <io_event+0x2ba>
c0d03570:	e137      	b.n	c0d037e2 <io_event+0x52a>
c0d03572:	f002 fdc9 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d03576:	2800      	cmp	r0, #0
c0d03578:	d000      	beq.n	c0d0357c <io_event+0x2c4>
c0d0357a:	e132      	b.n	c0d037e2 <io_event+0x52a>
c0d0357c:	68a0      	ldr	r0, [r4, #8]
c0d0357e:	68e1      	ldr	r1, [r4, #12]
c0d03580:	2538      	movs	r5, #56	; 0x38
c0d03582:	4368      	muls	r0, r5
c0d03584:	6822      	ldr	r2, [r4, #0]
c0d03586:	1810      	adds	r0, r2, r0
c0d03588:	2900      	cmp	r1, #0
c0d0358a:	d002      	beq.n	c0d03592 <io_event+0x2da>
c0d0358c:	4788      	blx	r1
c0d0358e:	2800      	cmp	r0, #0
c0d03590:	d00a      	beq.n	c0d035a8 <io_event+0x2f0>
c0d03592:	2801      	cmp	r0, #1
c0d03594:	d103      	bne.n	c0d0359e <io_event+0x2e6>
c0d03596:	68a0      	ldr	r0, [r4, #8]
c0d03598:	4345      	muls	r5, r0
c0d0359a:	6820      	ldr	r0, [r4, #0]
c0d0359c:	1940      	adds	r0, r0, r5
}
#endif // #if defined(TARGET_BLUE)

// override point, but nothing more to do
void io_seproxyhal_display(const bagl_element_t *element) {
    if ((element->component.type & (~BAGL_TYPE_FLAGS_MASK)) != BAGL_NONE) {
c0d0359e:	7801      	ldrb	r1, [r0, #0]
c0d035a0:	0649      	lsls	r1, r1, #25
c0d035a2:	d001      	beq.n	c0d035a8 <io_event+0x2f0>
        io_seproxyhal_display_default((bagl_element_t *)element);
c0d035a4:	f001 fb62 	bl	c0d04c6c <io_seproxyhal_display_default>
    // needed

    // can't have more than one tag in the reply, not supported yet.
    switch (G_io_seproxyhal_spi_buffer[0]) {
    case SEPROXYHAL_TAG_FINGER_EVENT:
        UX_FINGER_EVENT(G_io_seproxyhal_spi_buffer);
c0d035a8:	68a0      	ldr	r0, [r4, #8]
c0d035aa:	1c46      	adds	r6, r0, #1
c0d035ac:	60a6      	str	r6, [r4, #8]
c0d035ae:	6820      	ldr	r0, [r4, #0]
c0d035b0:	2800      	cmp	r0, #0
c0d035b2:	d1da      	bne.n	c0d0356a <io_event+0x2b2>
c0d035b4:	e115      	b.n	c0d037e2 <io_event+0x52a>
        break;

    case SEPROXYHAL_TAG_BUTTON_PUSH_EVENT:
        UX_BUTTON_PUSH_EVENT(G_io_seproxyhal_spi_buffer);
c0d035b6:	6860      	ldr	r0, [r4, #4]
c0d035b8:	4286      	cmp	r6, r0
c0d035ba:	d300      	bcc.n	c0d035be <io_event+0x306>
c0d035bc:	e111      	b.n	c0d037e2 <io_event+0x52a>
c0d035be:	f002 fda3 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d035c2:	2800      	cmp	r0, #0
c0d035c4:	d000      	beq.n	c0d035c8 <io_event+0x310>
c0d035c6:	e10c      	b.n	c0d037e2 <io_event+0x52a>
c0d035c8:	68a0      	ldr	r0, [r4, #8]
c0d035ca:	68e1      	ldr	r1, [r4, #12]
c0d035cc:	2538      	movs	r5, #56	; 0x38
c0d035ce:	4368      	muls	r0, r5
c0d035d0:	6822      	ldr	r2, [r4, #0]
c0d035d2:	1810      	adds	r0, r2, r0
c0d035d4:	2900      	cmp	r1, #0
c0d035d6:	d002      	beq.n	c0d035de <io_event+0x326>
c0d035d8:	4788      	blx	r1
c0d035da:	2800      	cmp	r0, #0
c0d035dc:	d00a      	beq.n	c0d035f4 <io_event+0x33c>
c0d035de:	2801      	cmp	r0, #1
c0d035e0:	d103      	bne.n	c0d035ea <io_event+0x332>
c0d035e2:	68a0      	ldr	r0, [r4, #8]
c0d035e4:	4345      	muls	r5, r0
c0d035e6:	6820      	ldr	r0, [r4, #0]
c0d035e8:	1940      	adds	r0, r0, r5
}
#endif // #if defined(TARGET_BLUE)

// override point, but nothing more to do
void io_seproxyhal_display(const bagl_element_t *element) {
    if ((element->component.type & (~BAGL_TYPE_FLAGS_MASK)) != BAGL_NONE) {
c0d035ea:	7801      	ldrb	r1, [r0, #0]
c0d035ec:	0649      	lsls	r1, r1, #25
c0d035ee:	d001      	beq.n	c0d035f4 <io_event+0x33c>
        io_seproxyhal_display_default((bagl_element_t *)element);
c0d035f0:	f001 fb3c 	bl	c0d04c6c <io_seproxyhal_display_default>
    case SEPROXYHAL_TAG_FINGER_EVENT:
        UX_FINGER_EVENT(G_io_seproxyhal_spi_buffer);
        break;

    case SEPROXYHAL_TAG_BUTTON_PUSH_EVENT:
        UX_BUTTON_PUSH_EVENT(G_io_seproxyhal_spi_buffer);
c0d035f4:	68a0      	ldr	r0, [r4, #8]
c0d035f6:	1c46      	adds	r6, r0, #1
c0d035f8:	60a6      	str	r6, [r4, #8]
c0d035fa:	6820      	ldr	r0, [r4, #0]
c0d035fc:	2800      	cmp	r0, #0
c0d035fe:	d1da      	bne.n	c0d035b6 <io_event+0x2fe>
c0d03600:	e0ef      	b.n	c0d037e2 <io_event+0x52a>
    case SEPROXYHAL_TAG_DISPLAY_PROCESSED_EVENT:
        UX_DISPLAYED_EVENT({});
        break;

    case SEPROXYHAL_TAG_TICKER_EVENT:
        UX_TICKER_EVENT(G_io_seproxyhal_spi_buffer, {
c0d03602:	6960      	ldr	r0, [r4, #20]
c0d03604:	2800      	cmp	r0, #0
c0d03606:	d008      	beq.n	c0d0361a <io_event+0x362>
c0d03608:	2164      	movs	r1, #100	; 0x64
c0d0360a:	2864      	cmp	r0, #100	; 0x64
c0d0360c:	4602      	mov	r2, r0
c0d0360e:	d300      	bcc.n	c0d03612 <io_event+0x35a>
c0d03610:	460a      	mov	r2, r1
c0d03612:	1a80      	subs	r0, r0, r2
c0d03614:	6160      	str	r0, [r4, #20]
c0d03616:	d100      	bne.n	c0d0361a <io_event+0x362>
c0d03618:	e0ec      	b.n	c0d037f4 <io_event+0x53c>
c0d0361a:	489a      	ldr	r0, [pc, #616]	; (c0d03884 <io_event+0x5cc>)
c0d0361c:	4285      	cmp	r5, r0
c0d0361e:	d100      	bne.n	c0d03622 <io_event+0x36a>
c0d03620:	e0df      	b.n	c0d037e2 <io_event+0x52a>
c0d03622:	2d00      	cmp	r5, #0
c0d03624:	d100      	bne.n	c0d03628 <io_event+0x370>
c0d03626:	e0dc      	b.n	c0d037e2 <io_event+0x52a>
c0d03628:	6820      	ldr	r0, [r4, #0]
c0d0362a:	2800      	cmp	r0, #0
c0d0362c:	d100      	bne.n	c0d03630 <io_event+0x378>
c0d0362e:	e0d2      	b.n	c0d037d6 <io_event+0x51e>
c0d03630:	68a0      	ldr	r0, [r4, #8]
c0d03632:	6861      	ldr	r1, [r4, #4]
c0d03634:	4288      	cmp	r0, r1
c0d03636:	d300      	bcc.n	c0d0363a <io_event+0x382>
c0d03638:	e0cd      	b.n	c0d037d6 <io_event+0x51e>
c0d0363a:	f002 fd65 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d0363e:	2800      	cmp	r0, #0
c0d03640:	d000      	beq.n	c0d03644 <io_event+0x38c>
c0d03642:	e0c8      	b.n	c0d037d6 <io_event+0x51e>
c0d03644:	68a0      	ldr	r0, [r4, #8]
c0d03646:	68e1      	ldr	r1, [r4, #12]
c0d03648:	2538      	movs	r5, #56	; 0x38
c0d0364a:	4368      	muls	r0, r5
c0d0364c:	6822      	ldr	r2, [r4, #0]
c0d0364e:	1810      	adds	r0, r2, r0
c0d03650:	2900      	cmp	r1, #0
c0d03652:	d002      	beq.n	c0d0365a <io_event+0x3a2>
c0d03654:	4788      	blx	r1
c0d03656:	2800      	cmp	r0, #0
c0d03658:	d00a      	beq.n	c0d03670 <io_event+0x3b8>
c0d0365a:	2801      	cmp	r0, #1
c0d0365c:	d103      	bne.n	c0d03666 <io_event+0x3ae>
c0d0365e:	68a0      	ldr	r0, [r4, #8]
c0d03660:	4345      	muls	r5, r0
c0d03662:	6820      	ldr	r0, [r4, #0]
c0d03664:	1940      	adds	r0, r0, r5
}
#endif // #if defined(TARGET_BLUE)

// override point, but nothing more to do
void io_seproxyhal_display(const bagl_element_t *element) {
    if ((element->component.type & (~BAGL_TYPE_FLAGS_MASK)) != BAGL_NONE) {
c0d03666:	7801      	ldrb	r1, [r0, #0]
c0d03668:	0649      	lsls	r1, r1, #25
c0d0366a:	d001      	beq.n	c0d03670 <io_event+0x3b8>
        io_seproxyhal_display_default((bagl_element_t *)element);
c0d0366c:	f001 fafe 	bl	c0d04c6c <io_seproxyhal_display_default>
    case SEPROXYHAL_TAG_DISPLAY_PROCESSED_EVENT:
        UX_DISPLAYED_EVENT({});
        break;

    case SEPROXYHAL_TAG_TICKER_EVENT:
        UX_TICKER_EVENT(G_io_seproxyhal_spi_buffer, {
c0d03670:	68a0      	ldr	r0, [r4, #8]
c0d03672:	1c40      	adds	r0, r0, #1
c0d03674:	60a0      	str	r0, [r4, #8]
c0d03676:	6821      	ldr	r1, [r4, #0]
c0d03678:	2900      	cmp	r1, #0
c0d0367a:	d1da      	bne.n	c0d03632 <io_event+0x37a>
c0d0367c:	e0ab      	b.n	c0d037d6 <io_event+0x51e>
    default:
        UX_DEFAULT_EVENT();
        break;

    case SEPROXYHAL_TAG_DISPLAY_PROCESSED_EVENT:
        UX_DISPLAYED_EVENT({});
c0d0367e:	f001 f9af 	bl	c0d049e0 <io_seproxyhal_init_ux>
c0d03682:	60a5      	str	r5, [r4, #8]
c0d03684:	6820      	ldr	r0, [r4, #0]
c0d03686:	2800      	cmp	r0, #0
c0d03688:	d100      	bne.n	c0d0368c <io_event+0x3d4>
c0d0368a:	e0aa      	b.n	c0d037e2 <io_event+0x52a>
c0d0368c:	69e0      	ldr	r0, [r4, #28]
c0d0368e:	497d      	ldr	r1, [pc, #500]	; (c0d03884 <io_event+0x5cc>)
c0d03690:	4288      	cmp	r0, r1
c0d03692:	d12c      	bne.n	c0d036ee <io_event+0x436>
c0d03694:	e0a5      	b.n	c0d037e2 <io_event+0x52a>
c0d03696:	46c0      	nop			; (mov r8, r8)
c0d03698:	20001d34 	.word	0x20001d34
c0d0369c:	b0105055 	.word	0xb0105055
c0d036a0:	20001fd0 	.word	0x20001fd0
c0d036a4:	20001c2c 	.word	0x20001c2c
c0d036a8:	6860      	ldr	r0, [r4, #4]
c0d036aa:	4285      	cmp	r5, r0
c0d036ac:	d300      	bcc.n	c0d036b0 <io_event+0x3f8>
c0d036ae:	e098      	b.n	c0d037e2 <io_event+0x52a>
c0d036b0:	f002 fd2a 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d036b4:	2800      	cmp	r0, #0
c0d036b6:	d000      	beq.n	c0d036ba <io_event+0x402>
c0d036b8:	e093      	b.n	c0d037e2 <io_event+0x52a>
c0d036ba:	68a0      	ldr	r0, [r4, #8]
c0d036bc:	68e1      	ldr	r1, [r4, #12]
c0d036be:	2538      	movs	r5, #56	; 0x38
c0d036c0:	4368      	muls	r0, r5
c0d036c2:	6822      	ldr	r2, [r4, #0]
c0d036c4:	1810      	adds	r0, r2, r0
c0d036c6:	2900      	cmp	r1, #0
c0d036c8:	d002      	beq.n	c0d036d0 <io_event+0x418>
c0d036ca:	4788      	blx	r1
c0d036cc:	2800      	cmp	r0, #0
c0d036ce:	d00a      	beq.n	c0d036e6 <io_event+0x42e>
c0d036d0:	2801      	cmp	r0, #1
c0d036d2:	d103      	bne.n	c0d036dc <io_event+0x424>
c0d036d4:	68a0      	ldr	r0, [r4, #8]
c0d036d6:	4345      	muls	r5, r0
c0d036d8:	6820      	ldr	r0, [r4, #0]
c0d036da:	1940      	adds	r0, r0, r5
}
#endif // #if defined(TARGET_BLUE)

// override point, but nothing more to do
void io_seproxyhal_display(const bagl_element_t *element) {
    if ((element->component.type & (~BAGL_TYPE_FLAGS_MASK)) != BAGL_NONE) {
c0d036dc:	7801      	ldrb	r1, [r0, #0]
c0d036de:	0649      	lsls	r1, r1, #25
c0d036e0:	d001      	beq.n	c0d036e6 <io_event+0x42e>
        io_seproxyhal_display_default((bagl_element_t *)element);
c0d036e2:	f001 fac3 	bl	c0d04c6c <io_seproxyhal_display_default>
    default:
        UX_DEFAULT_EVENT();
        break;

    case SEPROXYHAL_TAG_DISPLAY_PROCESSED_EVENT:
        UX_DISPLAYED_EVENT({});
c0d036e6:	68a0      	ldr	r0, [r4, #8]
c0d036e8:	1c45      	adds	r5, r0, #1
c0d036ea:	60a5      	str	r5, [r4, #8]
c0d036ec:	6820      	ldr	r0, [r4, #0]
c0d036ee:	2800      	cmp	r0, #0
c0d036f0:	d1da      	bne.n	c0d036a8 <io_event+0x3f0>
c0d036f2:	e076      	b.n	c0d037e2 <io_event+0x52a>
c0d036f4:	b0105055 	.word	0xb0105055
c0d036f8:	20001c2c 	.word	0x20001c2c
c0d036fc:	b0105044 	.word	0xb0105044
    // needed

    // can't have more than one tag in the reply, not supported yet.
    switch (G_io_seproxyhal_spi_buffer[0]) {
    case SEPROXYHAL_TAG_FINGER_EVENT:
        UX_FINGER_EVENT(G_io_seproxyhal_spi_buffer);
c0d03700:	88a0      	ldrh	r0, [r4, #4]
c0d03702:	9004      	str	r0, [sp, #16]
c0d03704:	6820      	ldr	r0, [r4, #0]
c0d03706:	9003      	str	r0, [sp, #12]
c0d03708:	79ee      	ldrb	r6, [r5, #7]
c0d0370a:	79ab      	ldrb	r3, [r5, #6]
c0d0370c:	796f      	ldrb	r7, [r5, #5]
c0d0370e:	792a      	ldrb	r2, [r5, #4]
c0d03710:	78ed      	ldrb	r5, [r5, #3]
c0d03712:	68e1      	ldr	r1, [r4, #12]
c0d03714:	4668      	mov	r0, sp
c0d03716:	6005      	str	r5, [r0, #0]
c0d03718:	6041      	str	r1, [r0, #4]
c0d0371a:	0212      	lsls	r2, r2, #8
c0d0371c:	433a      	orrs	r2, r7
c0d0371e:	021b      	lsls	r3, r3, #8
c0d03720:	4333      	orrs	r3, r6
c0d03722:	9803      	ldr	r0, [sp, #12]
c0d03724:	9904      	ldr	r1, [sp, #16]
c0d03726:	f001 f9d3 	bl	c0d04ad0 <io_seproxyhal_touch_element_callback>
c0d0372a:	6820      	ldr	r0, [r4, #0]
c0d0372c:	2800      	cmp	r0, #0
c0d0372e:	d052      	beq.n	c0d037d6 <io_event+0x51e>
c0d03730:	68a0      	ldr	r0, [r4, #8]
c0d03732:	6861      	ldr	r1, [r4, #4]
c0d03734:	4288      	cmp	r0, r1
c0d03736:	d24e      	bcs.n	c0d037d6 <io_event+0x51e>
c0d03738:	f002 fce6 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d0373c:	2800      	cmp	r0, #0
c0d0373e:	d14a      	bne.n	c0d037d6 <io_event+0x51e>
c0d03740:	68a0      	ldr	r0, [r4, #8]
c0d03742:	68e1      	ldr	r1, [r4, #12]
c0d03744:	2538      	movs	r5, #56	; 0x38
c0d03746:	4368      	muls	r0, r5
c0d03748:	6822      	ldr	r2, [r4, #0]
c0d0374a:	1810      	adds	r0, r2, r0
c0d0374c:	2900      	cmp	r1, #0
c0d0374e:	d002      	beq.n	c0d03756 <io_event+0x49e>
c0d03750:	4788      	blx	r1
c0d03752:	2800      	cmp	r0, #0
c0d03754:	d00a      	beq.n	c0d0376c <io_event+0x4b4>
c0d03756:	2801      	cmp	r0, #1
c0d03758:	d103      	bne.n	c0d03762 <io_event+0x4aa>
c0d0375a:	68a0      	ldr	r0, [r4, #8]
c0d0375c:	4345      	muls	r5, r0
c0d0375e:	6820      	ldr	r0, [r4, #0]
c0d03760:	1940      	adds	r0, r0, r5
}
#endif // #if defined(TARGET_BLUE)

// override point, but nothing more to do
void io_seproxyhal_display(const bagl_element_t *element) {
    if ((element->component.type & (~BAGL_TYPE_FLAGS_MASK)) != BAGL_NONE) {
c0d03762:	7801      	ldrb	r1, [r0, #0]
c0d03764:	0649      	lsls	r1, r1, #25
c0d03766:	d001      	beq.n	c0d0376c <io_event+0x4b4>
        io_seproxyhal_display_default((bagl_element_t *)element);
c0d03768:	f001 fa80 	bl	c0d04c6c <io_seproxyhal_display_default>
    // needed

    // can't have more than one tag in the reply, not supported yet.
    switch (G_io_seproxyhal_spi_buffer[0]) {
    case SEPROXYHAL_TAG_FINGER_EVENT:
        UX_FINGER_EVENT(G_io_seproxyhal_spi_buffer);
c0d0376c:	68a0      	ldr	r0, [r4, #8]
c0d0376e:	1c40      	adds	r0, r0, #1
c0d03770:	60a0      	str	r0, [r4, #8]
c0d03772:	6821      	ldr	r1, [r4, #0]
c0d03774:	2900      	cmp	r1, #0
c0d03776:	d1dc      	bne.n	c0d03732 <io_event+0x47a>
c0d03778:	e02d      	b.n	c0d037d6 <io_event+0x51e>
        break;

    case SEPROXYHAL_TAG_BUTTON_PUSH_EVENT:
        UX_BUTTON_PUSH_EVENT(G_io_seproxyhal_spi_buffer);
c0d0377a:	6920      	ldr	r0, [r4, #16]
c0d0377c:	2800      	cmp	r0, #0
c0d0377e:	d003      	beq.n	c0d03788 <io_event+0x4d0>
c0d03780:	78e9      	ldrb	r1, [r5, #3]
c0d03782:	0849      	lsrs	r1, r1, #1
c0d03784:	f001 fae0 	bl	c0d04d48 <io_seproxyhal_button_push>
c0d03788:	6820      	ldr	r0, [r4, #0]
c0d0378a:	2800      	cmp	r0, #0
c0d0378c:	d023      	beq.n	c0d037d6 <io_event+0x51e>
c0d0378e:	68a0      	ldr	r0, [r4, #8]
c0d03790:	6861      	ldr	r1, [r4, #4]
c0d03792:	4288      	cmp	r0, r1
c0d03794:	d21f      	bcs.n	c0d037d6 <io_event+0x51e>
c0d03796:	f002 fcb7 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d0379a:	2800      	cmp	r0, #0
c0d0379c:	d11b      	bne.n	c0d037d6 <io_event+0x51e>
c0d0379e:	68a0      	ldr	r0, [r4, #8]
c0d037a0:	68e1      	ldr	r1, [r4, #12]
c0d037a2:	2538      	movs	r5, #56	; 0x38
c0d037a4:	4368      	muls	r0, r5
c0d037a6:	6822      	ldr	r2, [r4, #0]
c0d037a8:	1810      	adds	r0, r2, r0
c0d037aa:	2900      	cmp	r1, #0
c0d037ac:	d002      	beq.n	c0d037b4 <io_event+0x4fc>
c0d037ae:	4788      	blx	r1
c0d037b0:	2800      	cmp	r0, #0
c0d037b2:	d00a      	beq.n	c0d037ca <io_event+0x512>
c0d037b4:	2801      	cmp	r0, #1
c0d037b6:	d103      	bne.n	c0d037c0 <io_event+0x508>
c0d037b8:	68a0      	ldr	r0, [r4, #8]
c0d037ba:	4345      	muls	r5, r0
c0d037bc:	6820      	ldr	r0, [r4, #0]
c0d037be:	1940      	adds	r0, r0, r5
}
#endif // #if defined(TARGET_BLUE)

// override point, but nothing more to do
void io_seproxyhal_display(const bagl_element_t *element) {
    if ((element->component.type & (~BAGL_TYPE_FLAGS_MASK)) != BAGL_NONE) {
c0d037c0:	7801      	ldrb	r1, [r0, #0]
c0d037c2:	0649      	lsls	r1, r1, #25
c0d037c4:	d001      	beq.n	c0d037ca <io_event+0x512>
        io_seproxyhal_display_default((bagl_element_t *)element);
c0d037c6:	f001 fa51 	bl	c0d04c6c <io_seproxyhal_display_default>
    case SEPROXYHAL_TAG_FINGER_EVENT:
        UX_FINGER_EVENT(G_io_seproxyhal_spi_buffer);
        break;

    case SEPROXYHAL_TAG_BUTTON_PUSH_EVENT:
        UX_BUTTON_PUSH_EVENT(G_io_seproxyhal_spi_buffer);
c0d037ca:	68a0      	ldr	r0, [r4, #8]
c0d037cc:	1c40      	adds	r0, r0, #1
c0d037ce:	60a0      	str	r0, [r4, #8]
c0d037d0:	6821      	ldr	r1, [r4, #0]
c0d037d2:	2900      	cmp	r1, #0
c0d037d4:	d1dc      	bne.n	c0d03790 <io_event+0x4d8>
c0d037d6:	6860      	ldr	r0, [r4, #4]
c0d037d8:	68a1      	ldr	r1, [r4, #8]
c0d037da:	4281      	cmp	r1, r0
c0d037dc:	d301      	bcc.n	c0d037e2 <io_event+0x52a>
c0d037de:	f002 fc93 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
        });
        break;
    }

    // close the event if not done previously (by a display or whatever)
    if (!io_seproxyhal_spi_is_status_sent()) {
c0d037e2:	f002 fc91 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d037e6:	2800      	cmp	r0, #0
c0d037e8:	d101      	bne.n	c0d037ee <io_event+0x536>
        io_seproxyhal_general_status();
c0d037ea:	f000 ffa3 	bl	c0d04734 <io_seproxyhal_general_status>
    }

    // command has been processed, DO NOT reset the current APDU transport
    return 1;
c0d037ee:	2001      	movs	r0, #1
c0d037f0:	b005      	add	sp, #20
c0d037f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    case SEPROXYHAL_TAG_DISPLAY_PROCESSED_EVENT:
        UX_DISPLAYED_EVENT({});
        break;

    case SEPROXYHAL_TAG_TICKER_EVENT:
        UX_TICKER_EVENT(G_io_seproxyhal_spi_buffer, {
c0d037f4:	4822      	ldr	r0, [pc, #136]	; (c0d03880 <io_event+0x5c8>)
c0d037f6:	6801      	ldr	r1, [r0, #0]
c0d037f8:	2900      	cmp	r1, #0
c0d037fa:	d100      	bne.n	c0d037fe <io_event+0x546>
c0d037fc:	e70d      	b.n	c0d0361a <io_event+0x362>
c0d037fe:	4821      	ldr	r0, [pc, #132]	; (c0d03884 <io_event+0x5cc>)
c0d03800:	4285      	cmp	r5, r0
c0d03802:	d0ee      	beq.n	c0d037e2 <io_event+0x52a>
c0d03804:	2d00      	cmp	r5, #0
c0d03806:	d0ec      	beq.n	c0d037e2 <io_event+0x52a>
c0d03808:	4f1f      	ldr	r7, [pc, #124]	; (c0d03888 <io_event+0x5d0>)
c0d0380a:	6838      	ldr	r0, [r7, #0]
c0d0380c:	1c40      	adds	r0, r0, #1
c0d0380e:	f003 ffb5 	bl	c0d0777c <__aeabi_uidivmod>
c0d03812:	6039      	str	r1, [r7, #0]
c0d03814:	f001 f8e4 	bl	c0d049e0 <io_seproxyhal_init_ux>
c0d03818:	60a6      	str	r6, [r4, #8]
c0d0381a:	6820      	ldr	r0, [r4, #0]
c0d0381c:	2800      	cmp	r0, #0
c0d0381e:	d100      	bne.n	c0d03822 <io_event+0x56a>
c0d03820:	e6fb      	b.n	c0d0361a <io_event+0x362>
c0d03822:	69e0      	ldr	r0, [r4, #28]
c0d03824:	4917      	ldr	r1, [pc, #92]	; (c0d03884 <io_event+0x5cc>)
c0d03826:	4288      	cmp	r0, r1
c0d03828:	d123      	bne.n	c0d03872 <io_event+0x5ba>
c0d0382a:	e6f6      	b.n	c0d0361a <io_event+0x362>
c0d0382c:	6860      	ldr	r0, [r4, #4]
c0d0382e:	4286      	cmp	r6, r0
c0d03830:	d300      	bcc.n	c0d03834 <io_event+0x57c>
c0d03832:	e6f2      	b.n	c0d0361a <io_event+0x362>
c0d03834:	f002 fc68 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d03838:	2800      	cmp	r0, #0
c0d0383a:	d000      	beq.n	c0d0383e <io_event+0x586>
c0d0383c:	e6ed      	b.n	c0d0361a <io_event+0x362>
c0d0383e:	68a0      	ldr	r0, [r4, #8]
c0d03840:	68e1      	ldr	r1, [r4, #12]
c0d03842:	2638      	movs	r6, #56	; 0x38
c0d03844:	4370      	muls	r0, r6
c0d03846:	6822      	ldr	r2, [r4, #0]
c0d03848:	1810      	adds	r0, r2, r0
c0d0384a:	2900      	cmp	r1, #0
c0d0384c:	d002      	beq.n	c0d03854 <io_event+0x59c>
c0d0384e:	4788      	blx	r1
c0d03850:	2800      	cmp	r0, #0
c0d03852:	d00a      	beq.n	c0d0386a <io_event+0x5b2>
c0d03854:	2801      	cmp	r0, #1
c0d03856:	d103      	bne.n	c0d03860 <io_event+0x5a8>
c0d03858:	68a0      	ldr	r0, [r4, #8]
c0d0385a:	4346      	muls	r6, r0
c0d0385c:	6820      	ldr	r0, [r4, #0]
c0d0385e:	1980      	adds	r0, r0, r6
}
#endif // #if defined(TARGET_BLUE)

// override point, but nothing more to do
void io_seproxyhal_display(const bagl_element_t *element) {
    if ((element->component.type & (~BAGL_TYPE_FLAGS_MASK)) != BAGL_NONE) {
c0d03860:	7801      	ldrb	r1, [r0, #0]
c0d03862:	0649      	lsls	r1, r1, #25
c0d03864:	d001      	beq.n	c0d0386a <io_event+0x5b2>
        io_seproxyhal_display_default((bagl_element_t *)element);
c0d03866:	f001 fa01 	bl	c0d04c6c <io_seproxyhal_display_default>
    case SEPROXYHAL_TAG_DISPLAY_PROCESSED_EVENT:
        UX_DISPLAYED_EVENT({});
        break;

    case SEPROXYHAL_TAG_TICKER_EVENT:
        UX_TICKER_EVENT(G_io_seproxyhal_spi_buffer, {
c0d0386a:	68a0      	ldr	r0, [r4, #8]
c0d0386c:	1c46      	adds	r6, r0, #1
c0d0386e:	60a6      	str	r6, [r4, #8]
c0d03870:	6820      	ldr	r0, [r4, #0]
c0d03872:	2800      	cmp	r0, #0
c0d03874:	d1da      	bne.n	c0d0382c <io_event+0x574>
c0d03876:	e6d0      	b.n	c0d0361a <io_event+0x362>
c0d03878:	b0105055 	.word	0xb0105055
c0d0387c:	20001c2c 	.word	0x20001c2c
c0d03880:	20001d30 	.word	0x20001d30
c0d03884:	b0105044 	.word	0xb0105044
c0d03888:	20001c28 	.word	0x20001c28

c0d0388c <prepare_fees>:

    // command has been processed, DO NOT reset the current APDU transport
    return 1;
}

uint8_t prepare_fees() {
c0d0388c:	b570      	push	{r4, r5, r6, lr}
c0d0388e:	b082      	sub	sp, #8
    if (btchip_context_D.transactionContext.relaxed) {
c0d03890:	4d1c      	ldr	r5, [pc, #112]	; (c0d03904 <prepare_fees+0x78>)
c0d03892:	7fa8      	ldrb	r0, [r5, #30]
c0d03894:	2800      	cmp	r0, #0
c0d03896:	d00b      	beq.n	c0d038b0 <prepare_fees+0x24>
        os_memmove(vars.tmp.feesAmount, "UNKNOWN", 7);
c0d03898:	4c1b      	ldr	r4, [pc, #108]	; (c0d03908 <prepare_fees+0x7c>)
c0d0389a:	4620      	mov	r0, r4
c0d0389c:	303f      	adds	r0, #63	; 0x3f
c0d0389e:	a11b      	add	r1, pc, #108	; (adr r1, c0d0390c <prepare_fees+0x80>)
c0d038a0:	2207      	movs	r2, #7
c0d038a2:	f000 fe86 	bl	c0d045b2 <os_memmove>
        vars.tmp.feesAmount[7] = '\0';
c0d038a6:	2046      	movs	r0, #70	; 0x46
c0d038a8:	2100      	movs	r1, #0
c0d038aa:	5421      	strb	r1, [r4, r0]
c0d038ac:	2001      	movs	r0, #1
c0d038ae:	e00d      	b.n	c0d038cc <prepare_fees+0x40>
    } else {
        unsigned char fees[8];
        unsigned short textSize;
        if (transaction_amount_sub_be(
c0d038b0:	4818      	ldr	r0, [pc, #96]	; (c0d03914 <prepare_fees+0x88>)
c0d038b2:	182a      	adds	r2, r5, r0
c0d038b4:	4629      	mov	r1, r5
c0d038b6:	3115      	adds	r1, #21
c0d038b8:	4668      	mov	r0, sp
c0d038ba:	f7fe fcf3 	bl	c0d022a4 <transaction_amount_sub_be>
c0d038be:	2800      	cmp	r0, #0
c0d038c0:	d006      	beq.n	c0d038d0 <prepare_fees+0x44>
                fees, btchip_context_D.transactionContext.transactionAmount,
                btchip_context_D.totalOutputAmount)) {
            PRINTF("Error : Fees not consistent");
c0d038c2:	4815      	ldr	r0, [pc, #84]	; (c0d03918 <prepare_fees+0x8c>)
c0d038c4:	4478      	add	r0, pc
c0d038c6:	f001 fd63 	bl	c0d05390 <screen_printf>
c0d038ca:	2000      	movs	r0, #0
            '\0';
    }
    return 1;
error:
    return 0;
}
c0d038cc:	b002      	add	sp, #8
c0d038ce:	bd70      	pop	{r4, r5, r6, pc}
                btchip_context_D.totalOutputAmount)) {
            PRINTF("Error : Fees not consistent");
            goto error;
        }
        os_memmove(vars.tmp.feesAmount, btchip_context_D.shortCoinId,
                   btchip_context_D.shortCoinIdLength);
c0d038d0:	2638      	movs	r6, #56	; 0x38
c0d038d2:	5daa      	ldrb	r2, [r5, r6]
                fees, btchip_context_D.transactionContext.transactionAmount,
                btchip_context_D.totalOutputAmount)) {
            PRINTF("Error : Fees not consistent");
            goto error;
        }
        os_memmove(vars.tmp.feesAmount, btchip_context_D.shortCoinId,
c0d038d4:	4c0c      	ldr	r4, [pc, #48]	; (c0d03908 <prepare_fees+0x7c>)
c0d038d6:	343f      	adds	r4, #63	; 0x3f
c0d038d8:	4629      	mov	r1, r5
c0d038da:	3132      	adds	r1, #50	; 0x32
c0d038dc:	4620      	mov	r0, r4
c0d038de:	f000 fe68 	bl	c0d045b2 <os_memmove>
                   btchip_context_D.shortCoinIdLength);
        vars.tmp.feesAmount[btchip_context_D.shortCoinIdLength] = ' ';
c0d038e2:	5da8      	ldrb	r0, [r5, r6]
c0d038e4:	2120      	movs	r1, #32
c0d038e6:	5421      	strb	r1, [r4, r0]
c0d038e8:	1820      	adds	r0, r4, r0
        btchip_context_D.tmp =
            (unsigned char *)(vars.tmp.feesAmount +
                              btchip_context_D.shortCoinIdLength + 1);
c0d038ea:	1c40      	adds	r0, r0, #1
            goto error;
        }
        os_memmove(vars.tmp.feesAmount, btchip_context_D.shortCoinId,
                   btchip_context_D.shortCoinIdLength);
        vars.tmp.feesAmount[btchip_context_D.shortCoinIdLength] = ' ';
        btchip_context_D.tmp =
c0d038ec:	2185      	movs	r1, #133	; 0x85
c0d038ee:	0089      	lsls	r1, r1, #2
c0d038f0:	5068      	str	r0, [r5, r1]
c0d038f2:	4668      	mov	r0, sp
            (unsigned char *)(vars.tmp.feesAmount +
                              btchip_context_D.shortCoinIdLength + 1);
        textSize = btchip_convert_hex_amount_to_displayable(fees);
c0d038f4:	f7fe f8fc 	bl	c0d01af0 <btchip_convert_hex_amount_to_displayable>
        vars.tmp.feesAmount[textSize + btchip_context_D.shortCoinIdLength + 1] =
c0d038f8:	5da9      	ldrb	r1, [r5, r6]
c0d038fa:	1840      	adds	r0, r0, r1
                fees, btchip_context_D.transactionContext.transactionAmount,
                btchip_context_D.totalOutputAmount)) {
            PRINTF("Error : Fees not consistent");
            goto error;
        }
        os_memmove(vars.tmp.feesAmount, btchip_context_D.shortCoinId,
c0d038fc:	1820      	adds	r0, r4, r0
        vars.tmp.feesAmount[btchip_context_D.shortCoinIdLength] = ' ';
        btchip_context_D.tmp =
            (unsigned char *)(vars.tmp.feesAmount +
                              btchip_context_D.shortCoinIdLength + 1);
        textSize = btchip_convert_hex_amount_to_displayable(fees);
        vars.tmp.feesAmount[textSize + btchip_context_D.shortCoinIdLength + 1] =
c0d038fe:	2100      	movs	r1, #0
c0d03900:	7041      	strb	r1, [r0, #1]
c0d03902:	e7d3      	b.n	c0d038ac <prepare_fees+0x20>
c0d03904:	20001874 	.word	0x20001874
c0d03908:	20001cdc 	.word	0x20001cdc
c0d0390c:	4e4b4e55 	.word	0x4e4b4e55
c0d03910:	004e574f 	.word	0x004e574f
c0d03914:	000003a5 	.word	0x000003a5
c0d03918:	000042a8 	.word	0x000042a8

c0d0391c <prepare_single_output>:
    return 1;
error:
    return 0;
}

uint8_t prepare_single_output() {
c0d0391c:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d0391e:	b0a3      	sub	sp, #140	; 0x8c
    unsigned char address[22];
    unsigned short version;
    unsigned short textSize;
    unsigned char nativeSegwit;

    vars.tmp.fullAddress[0] = '\0';
c0d03920:	4c67      	ldr	r4, [pc, #412]	; (c0d03ac0 <prepare_single_output+0x1a4>)
c0d03922:	2000      	movs	r0, #0
c0d03924:	9006      	str	r0, [sp, #24]
c0d03926:	7020      	strb	r0, [r4, #0]
c0d03928:	4866      	ldr	r0, [pc, #408]	; (c0d03ac4 <prepare_single_output+0x1a8>)
    btchip_swap_bytes(amount, btchip_context_D.currentOutput + offset, 8);
c0d0392a:	4f67      	ldr	r7, [pc, #412]	; (c0d03ac8 <prepare_single_output+0x1ac>)
c0d0392c:	1839      	adds	r1, r7, r0
c0d0392e:	a821      	add	r0, sp, #132	; 0x84
c0d03930:	2208      	movs	r2, #8
c0d03932:	f7fe fc1a 	bl	c0d0216a <btchip_swap_bytes>
    offset += 8;
    nativeSegwit = btchip_output_script_is_native_witness(
c0d03936:	4865      	ldr	r0, [pc, #404]	; (c0d03acc <prepare_single_output+0x1b0>)
c0d03938:	183e      	adds	r6, r7, r0
c0d0393a:	4630      	mov	r0, r6
c0d0393c:	f7fe fac4 	bl	c0d01ec8 <btchip_output_script_is_native_witness>
c0d03940:	4605      	mov	r5, r0
        btchip_context_D.currentOutput + offset);
    if (btchip_output_script_is_op_return(btchip_context_D.currentOutput +
c0d03942:	4630      	mov	r0, r6
c0d03944:	f7fe fae2 	bl	c0d01f0c <btchip_output_script_is_op_return>
c0d03948:	2800      	cmp	r0, #0
c0d0394a:	d01f      	beq.n	c0d0398c <prepare_single_output+0x70>
                                          offset)) {
        strcpy(vars.tmp.fullAddress, "OP_RETURN");
c0d0394c:	485c      	ldr	r0, [pc, #368]	; (c0d03ac0 <prepare_single_output+0x1a4>)
c0d0394e:	a160      	add	r1, pc, #384	; (adr r1, c0d03ad0 <prepare_single_output+0x1b4>)
c0d03950:	220a      	movs	r2, #10
c0d03952:	f003 ff1f 	bl	c0d07794 <__aeabi_memcpy>
        version = btchip_context_D.payToAddressVersion;
    } else {
        addressOffset = offset + 3;
        version = btchip_context_D.payToScriptHashVersion;
    }
    if (vars.tmp.fullAddress[0] == 0) {
c0d03956:	7820      	ldrb	r0, [r4, #0]
c0d03958:	2800      	cmp	r0, #0
c0d0395a:	d000      	beq.n	c0d0395e <prepare_single_output+0x42>
c0d0395c:	e091      	b.n	c0d03a82 <prepare_single_output+0x166>
        if (!nativeSegwit) {
c0d0395e:	2d00      	cmp	r5, #0
c0d03960:	d023      	beq.n	c0d039aa <prepare_single_output+0x8e>
                textSize = btchip_public_key_to_encoded_base58(
                    address, 20 + versionSize, (unsigned char *)tmp,
                    sizeof(tmp), version, 1);
                tmp[textSize] = '\0';
            }
        } else if (G_coin_config->native_segwit_prefix) {
c0d03962:	485e      	ldr	r0, [pc, #376]	; (c0d03adc <prepare_single_output+0x1c0>)
c0d03964:	6800      	ldr	r0, [r0, #0]
c0d03966:	6a00      	ldr	r0, [r0, #32]
c0d03968:	2800      	cmp	r0, #0
c0d0396a:	d100      	bne.n	c0d0396e <prepare_single_output+0x52>
c0d0396c:	e085      	b.n	c0d03a7a <prepare_single_output+0x15e>
            textSize = segwit_addr_encode(
                tmp, PIC(G_coin_config->native_segwit_prefix), 0,
                btchip_context_D.currentOutput + addressOffset,
c0d0396e:	18bd      	adds	r5, r7, r2
                    sizeof(tmp), version, 1);
                tmp[textSize] = '\0';
            }
        } else if (G_coin_config->native_segwit_prefix) {
            textSize = segwit_addr_encode(
                tmp, PIC(G_coin_config->native_segwit_prefix), 0,
c0d03970:	f002 f8c4 	bl	c0d05afc <pic>
c0d03974:	4601      	mov	r1, r0
                btchip_context_D.currentOutput + addressOffset,
                btchip_context_D.currentOutput[addressOffset - 1]);
c0d03976:	485d      	ldr	r0, [pc, #372]	; (c0d03aec <prepare_single_output+0x1d0>)
c0d03978:	5c28      	ldrb	r0, [r5, r0]
                    address, 20 + versionSize, (unsigned char *)tmp,
                    sizeof(tmp), version, 1);
                tmp[textSize] = '\0';
            }
        } else if (G_coin_config->native_segwit_prefix) {
            textSize = segwit_addr_encode(
c0d0397a:	466a      	mov	r2, sp
c0d0397c:	6010      	str	r0, [r2, #0]
c0d0397e:	4851      	ldr	r0, [pc, #324]	; (c0d03ac4 <prepare_single_output+0x1a8>)
                tmp, PIC(G_coin_config->native_segwit_prefix), 0,
                btchip_context_D.currentOutput + addressOffset,
c0d03980:	182b      	adds	r3, r5, r0
c0d03982:	a80d      	add	r0, sp, #52	; 0x34
c0d03984:	2200      	movs	r2, #0
                    address, 20 + versionSize, (unsigned char *)tmp,
                    sizeof(tmp), version, 1);
                tmp[textSize] = '\0';
            }
        } else if (G_coin_config->native_segwit_prefix) {
            textSize = segwit_addr_encode(
c0d03986:	f002 f98f 	bl	c0d05ca8 <segwit_addr_encode>
c0d0398a:	e076      	b.n	c0d03a7a <prepare_single_output+0x15e>
    nativeSegwit = btchip_output_script_is_native_witness(
        btchip_context_D.currentOutput + offset);
    if (btchip_output_script_is_op_return(btchip_context_D.currentOutput +
                                          offset)) {
        strcpy(vars.tmp.fullAddress, "OP_RETURN");
    } else if ((G_coin_config->kind == COIN_KIND_QTUM) &&
c0d0398c:	4853      	ldr	r0, [pc, #332]	; (c0d03adc <prepare_single_output+0x1c0>)
c0d0398e:	6800      	ldr	r0, [r0, #0]
c0d03990:	2628      	movs	r6, #40	; 0x28
c0d03992:	5d80      	ldrb	r0, [r0, r6]
c0d03994:	2812      	cmp	r0, #18
c0d03996:	d152      	bne.n	c0d03a3e <prepare_single_output+0x122>
               btchip_output_script_is_op_create(
c0d03998:	484c      	ldr	r0, [pc, #304]	; (c0d03acc <prepare_single_output+0x1b0>)
c0d0399a:	1838      	adds	r0, r7, r0
c0d0399c:	f7fe fabd 	bl	c0d01f1a <btchip_output_script_is_op_create>
    nativeSegwit = btchip_output_script_is_native_witness(
        btchip_context_D.currentOutput + offset);
    if (btchip_output_script_is_op_return(btchip_context_D.currentOutput +
                                          offset)) {
        strcpy(vars.tmp.fullAddress, "OP_RETURN");
    } else if ((G_coin_config->kind == COIN_KIND_QTUM) &&
c0d039a0:	2800      	cmp	r0, #0
c0d039a2:	d031      	beq.n	c0d03a08 <prepare_single_output+0xec>
               btchip_output_script_is_op_create(
                   btchip_context_D.currentOutput + offset)) {
        strcpy(vars.tmp.fullAddress, "OP_CREATE");
c0d039a4:	4846      	ldr	r0, [pc, #280]	; (c0d03ac0 <prepare_single_output+0x1a4>)
c0d039a6:	a14e      	add	r1, pc, #312	; (adr r1, c0d03ae0 <prepare_single_output+0x1c4>)
c0d039a8:	e7d2      	b.n	c0d03950 <prepare_single_output+0x34>
        addressOffset = offset + 3;
        version = btchip_context_D.payToScriptHashVersion;
    }
    if (vars.tmp.fullAddress[0] == 0) {
        if (!nativeSegwit) {
            if (version > 255) {
c0d039aa:	26ff      	movs	r6, #255	; 0xff
c0d039ac:	0230      	lsls	r0, r6, #8
c0d039ae:	4018      	ands	r0, r3
c0d039b0:	0a00      	lsrs	r0, r0, #8
c0d039b2:	2501      	movs	r5, #1
c0d039b4:	2800      	cmp	r0, #0
c0d039b6:	9806      	ldr	r0, [sp, #24]
c0d039b8:	d004      	beq.n	c0d039c4 <prepare_single_output+0xa8>
                versionSize = 2;
                address[0] = (version >> 8);
c0d039ba:	0a18      	lsrs	r0, r3, #8
c0d039bc:	a907      	add	r1, sp, #28
c0d039be:	7008      	strb	r0, [r1, #0]
c0d039c0:	2001      	movs	r0, #1
c0d039c2:	2502      	movs	r5, #2
c0d039c4:	a907      	add	r1, sp, #28
c0d039c6:	4308      	orrs	r0, r1
c0d039c8:	7003      	strb	r3, [r0, #0]
                address[1] = version;
            } else {
                versionSize = 1;
                address[0] = version;
            }
            os_memmove(address + versionSize,
c0d039ca:	1948      	adds	r0, r1, r5
                       btchip_context_D.currentOutput + addressOffset, 20);
c0d039cc:	18ba      	adds	r2, r7, r2
c0d039ce:	493d      	ldr	r1, [pc, #244]	; (c0d03ac4 <prepare_single_output+0x1a8>)
c0d039d0:	1851      	adds	r1, r2, r1
                address[1] = version;
            } else {
                versionSize = 1;
                address[0] = version;
            }
            os_memmove(address + versionSize,
c0d039d2:	2214      	movs	r2, #20
c0d039d4:	9004      	str	r0, [sp, #16]
c0d039d6:	9203      	str	r2, [sp, #12]
c0d039d8:	9305      	str	r3, [sp, #20]
c0d039da:	f000 fdea 	bl	c0d045b2 <os_memmove>
                       btchip_context_D.currentOutput + addressOffset, 20);

            // Prepare address
            if (btchip_context_D.usingCashAddr) {
c0d039de:	36fe      	adds	r6, #254	; 0xfe
c0d039e0:	5db8      	ldrb	r0, [r7, r6]
c0d039e2:	2800      	cmp	r0, #0
c0d039e4:	d038      	beq.n	c0d03a58 <prepare_single_output+0x13c>
                cashaddr_encode(
                    address + versionSize, 20, tmp, sizeof(tmp),
                    (version == btchip_context_D.payToScriptHashVersion
c0d039e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
c0d039e8:	9805      	ldr	r0, [sp, #20]
c0d039ea:	b283      	uxth	r3, r0
c0d039ec:	2001      	movs	r0, #1
c0d039ee:	2100      	movs	r1, #0
c0d039f0:	4293      	cmp	r3, r2
c0d039f2:	d000      	beq.n	c0d039f6 <prepare_single_output+0xda>
c0d039f4:	4608      	mov	r0, r1
            os_memmove(address + versionSize,
                       btchip_context_D.currentOutput + addressOffset, 20);

            // Prepare address
            if (btchip_context_D.usingCashAddr) {
                cashaddr_encode(
c0d039f6:	4669      	mov	r1, sp
c0d039f8:	6008      	str	r0, [r1, #0]
c0d039fa:	2114      	movs	r1, #20
c0d039fc:	aa0d      	add	r2, sp, #52	; 0x34
c0d039fe:	2350      	movs	r3, #80	; 0x50
c0d03a00:	9804      	ldr	r0, [sp, #16]
c0d03a02:	f7ff f97f 	bl	c0d02d04 <cashaddr_encode>
c0d03a06:	e038      	b.n	c0d03a7a <prepare_single_output+0x15e>
c0d03a08:	4834      	ldr	r0, [pc, #208]	; (c0d03adc <prepare_single_output+0x1c0>)
c0d03a0a:	6800      	ldr	r0, [r0, #0]
c0d03a0c:	5d80      	ldrb	r0, [r0, r6]
        strcpy(vars.tmp.fullAddress, "OP_RETURN");
    } else if ((G_coin_config->kind == COIN_KIND_QTUM) &&
               btchip_output_script_is_op_create(
                   btchip_context_D.currentOutput + offset)) {
        strcpy(vars.tmp.fullAddress, "OP_CREATE");
    } else if ((G_coin_config->kind == COIN_KIND_QTUM) &&
c0d03a0e:	2812      	cmp	r0, #18
c0d03a10:	d115      	bne.n	c0d03a3e <prepare_single_output+0x122>
               btchip_output_script_is_op_call(btchip_context_D.currentOutput +
c0d03a12:	482e      	ldr	r0, [pc, #184]	; (c0d03acc <prepare_single_output+0x1b0>)
c0d03a14:	1838      	adds	r0, r7, r0
c0d03a16:	f7fe fa9f 	bl	c0d01f58 <btchip_output_script_is_op_call>
        strcpy(vars.tmp.fullAddress, "OP_RETURN");
    } else if ((G_coin_config->kind == COIN_KIND_QTUM) &&
               btchip_output_script_is_op_create(
                   btchip_context_D.currentOutput + offset)) {
        strcpy(vars.tmp.fullAddress, "OP_CREATE");
    } else if ((G_coin_config->kind == COIN_KIND_QTUM) &&
c0d03a1a:	2800      	cmp	r0, #0
c0d03a1c:	d00f      	beq.n	c0d03a3e <prepare_single_output+0x122>
               btchip_output_script_is_op_call(btchip_context_D.currentOutput +
                                               offset)) {
        strcpy(vars.tmp.fullAddress, "OP_CALL");
c0d03a1e:	2000      	movs	r0, #0
c0d03a20:	71e0      	strb	r0, [r4, #7]
c0d03a22:	204c      	movs	r0, #76	; 0x4c
c0d03a24:	71a0      	strb	r0, [r4, #6]
c0d03a26:	7160      	strb	r0, [r4, #5]
c0d03a28:	2041      	movs	r0, #65	; 0x41
c0d03a2a:	7120      	strb	r0, [r4, #4]
c0d03a2c:	2043      	movs	r0, #67	; 0x43
c0d03a2e:	70e0      	strb	r0, [r4, #3]
c0d03a30:	205f      	movs	r0, #95	; 0x5f
c0d03a32:	70a0      	strb	r0, [r4, #2]
c0d03a34:	2050      	movs	r0, #80	; 0x50
c0d03a36:	7060      	strb	r0, [r4, #1]
c0d03a38:	204f      	movs	r0, #79	; 0x4f
c0d03a3a:	7020      	strb	r0, [r4, #0]
c0d03a3c:	e78b      	b.n	c0d03956 <prepare_single_output+0x3a>
c0d03a3e:	220b      	movs	r2, #11
    } else if (nativeSegwit) {
c0d03a40:	2d00      	cmp	r5, #0
c0d03a42:	d188      	bne.n	c0d03956 <prepare_single_output+0x3a>
c0d03a44:	4616      	mov	r6, r2
        addressOffset = offset + OUTPUT_SCRIPT_NATIVE_WITNESS_PROGRAM_OFFSET;
    } else if (btchip_output_script_is_regular(btchip_context_D.currentOutput +
c0d03a46:	4821      	ldr	r0, [pc, #132]	; (c0d03acc <prepare_single_output+0x1b0>)
c0d03a48:	1838      	adds	r0, r7, r0
c0d03a4a:	f7fe f9b7 	bl	c0d01dbc <btchip_output_script_is_regular>
c0d03a4e:	2800      	cmp	r0, #0
c0d03a50:	d032      	beq.n	c0d03ab8 <prepare_single_output+0x19c>
                                               offset)) {
        addressOffset = offset + 4;
        version = btchip_context_D.payToAddressVersion;
c0d03a52:	8c3b      	ldrh	r3, [r7, #32]
c0d03a54:	220c      	movs	r2, #12
c0d03a56:	e77e      	b.n	c0d03956 <prepare_single_output+0x3a>
                    address + versionSize, 20, tmp, sizeof(tmp),
                    (version == btchip_context_D.payToScriptHashVersion
                         ? CASHADDR_P2SH
                         : CASHADDR_P2PKH));
            } else {
                textSize = btchip_public_key_to_encoded_base58(
c0d03a58:	2001      	movs	r0, #1
c0d03a5a:	4669      	mov	r1, sp
c0d03a5c:	9a05      	ldr	r2, [sp, #20]
c0d03a5e:	b292      	uxth	r2, r2
c0d03a60:	600a      	str	r2, [r1, #0]
c0d03a62:	6048      	str	r0, [r1, #4]
                    address, 20 + versionSize, (unsigned char *)tmp,
c0d03a64:	9803      	ldr	r0, [sp, #12]
c0d03a66:	4305      	orrs	r5, r0
                    address + versionSize, 20, tmp, sizeof(tmp),
                    (version == btchip_context_D.payToScriptHashVersion
                         ? CASHADDR_P2SH
                         : CASHADDR_P2PKH));
            } else {
                textSize = btchip_public_key_to_encoded_base58(
c0d03a68:	b2a9      	uxth	r1, r5
c0d03a6a:	a807      	add	r0, sp, #28
c0d03a6c:	ad0d      	add	r5, sp, #52	; 0x34
c0d03a6e:	2350      	movs	r3, #80	; 0x50
c0d03a70:	462a      	mov	r2, r5
c0d03a72:	f7fe fb26 	bl	c0d020c2 <btchip_public_key_to_encoded_base58>
                    address, 20 + versionSize, (unsigned char *)tmp,
                    sizeof(tmp), version, 1);
                tmp[textSize] = '\0';
c0d03a76:	2100      	movs	r1, #0
c0d03a78:	5429      	strb	r1, [r5, r0]
                tmp, PIC(G_coin_config->native_segwit_prefix), 0,
                btchip_context_D.currentOutput + addressOffset,
                btchip_context_D.currentOutput[addressOffset - 1]);
        }

        strcpy(vars.tmp.fullAddress, tmp);
c0d03a7a:	4811      	ldr	r0, [pc, #68]	; (c0d03ac0 <prepare_single_output+0x1a4>)
c0d03a7c:	a90d      	add	r1, sp, #52	; 0x34
c0d03a7e:	f003 ff33 	bl	c0d078e8 <strcpy>
    }

    // Prepare amount

    os_memmove(vars.tmp.fullAmount, btchip_context_D.shortCoinId,
               btchip_context_D.shortCoinIdLength);
c0d03a82:	2538      	movs	r5, #56	; 0x38
c0d03a84:	5d7a      	ldrb	r2, [r7, r5]
        strcpy(vars.tmp.fullAddress, tmp);
    }

    // Prepare amount

    os_memmove(vars.tmp.fullAmount, btchip_context_D.shortCoinId,
c0d03a86:	342b      	adds	r4, #43	; 0x2b
c0d03a88:	4639      	mov	r1, r7
c0d03a8a:	3132      	adds	r1, #50	; 0x32
c0d03a8c:	4620      	mov	r0, r4
c0d03a8e:	f000 fd90 	bl	c0d045b2 <os_memmove>
               btchip_context_D.shortCoinIdLength);
    vars.tmp.fullAmount[btchip_context_D.shortCoinIdLength] = ' ';
c0d03a92:	5d78      	ldrb	r0, [r7, r5]
c0d03a94:	2120      	movs	r1, #32
c0d03a96:	5421      	strb	r1, [r4, r0]
c0d03a98:	1820      	adds	r0, r4, r0
    btchip_context_D.tmp =
        (unsigned char *)(vars.tmp.fullAmount +
                          btchip_context_D.shortCoinIdLength + 1);
c0d03a9a:	1c40      	adds	r0, r0, #1
    // Prepare amount

    os_memmove(vars.tmp.fullAmount, btchip_context_D.shortCoinId,
               btchip_context_D.shortCoinIdLength);
    vars.tmp.fullAmount[btchip_context_D.shortCoinIdLength] = ' ';
    btchip_context_D.tmp =
c0d03a9c:	2185      	movs	r1, #133	; 0x85
c0d03a9e:	0089      	lsls	r1, r1, #2
c0d03aa0:	5078      	str	r0, [r7, r1]
c0d03aa2:	a821      	add	r0, sp, #132	; 0x84
        (unsigned char *)(vars.tmp.fullAmount +
                          btchip_context_D.shortCoinIdLength + 1);
    textSize = btchip_convert_hex_amount_to_displayable(amount);
c0d03aa4:	f7fe f824 	bl	c0d01af0 <btchip_convert_hex_amount_to_displayable>
    vars.tmp.fullAmount[textSize + btchip_context_D.shortCoinIdLength + 1] =
c0d03aa8:	5d79      	ldrb	r1, [r7, r5]
c0d03aaa:	1840      	adds	r0, r0, r1
        strcpy(vars.tmp.fullAddress, tmp);
    }

    // Prepare amount

    os_memmove(vars.tmp.fullAmount, btchip_context_D.shortCoinId,
c0d03aac:	1820      	adds	r0, r4, r0
    vars.tmp.fullAmount[btchip_context_D.shortCoinIdLength] = ' ';
    btchip_context_D.tmp =
        (unsigned char *)(vars.tmp.fullAmount +
                          btchip_context_D.shortCoinIdLength + 1);
    textSize = btchip_convert_hex_amount_to_displayable(amount);
    vars.tmp.fullAmount[textSize + btchip_context_D.shortCoinIdLength + 1] =
c0d03aae:	9906      	ldr	r1, [sp, #24]
c0d03ab0:	7041      	strb	r1, [r0, #1]
c0d03ab2:	2001      	movs	r0, #1
        '\0';

    return 1;
c0d03ab4:	b023      	add	sp, #140	; 0x8c
c0d03ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                               offset)) {
        addressOffset = offset + 4;
        version = btchip_context_D.payToAddressVersion;
    } else {
        addressOffset = offset + 3;
        version = btchip_context_D.payToScriptHashVersion;
c0d03ab8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
c0d03aba:	4632      	mov	r2, r6
c0d03abc:	e74b      	b.n	c0d03956 <prepare_single_output+0x3a>
c0d03abe:	46c0      	nop			; (mov r8, r8)
c0d03ac0:	20001cdc 	.word	0x20001cdc
c0d03ac4:	000002cb 	.word	0x000002cb
c0d03ac8:	20001874 	.word	0x20001874
c0d03acc:	000002d3 	.word	0x000002d3
c0d03ad0:	525f504f 	.word	0x525f504f
c0d03ad4:	52555445 	.word	0x52555445
c0d03ad8:	0000004e 	.word	0x0000004e
c0d03adc:	20001c24 	.word	0x20001c24
c0d03ae0:	435f504f 	.word	0x435f504f
c0d03ae4:	54414552 	.word	0x54414552
c0d03ae8:	00000045 	.word	0x00000045
c0d03aec:	000002ca 	.word	0x000002ca

c0d03af0 <prepare_full_output>:
        '\0';

    return 1;
}

uint8_t prepare_full_output(uint8_t checkOnly) {
c0d03af0:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d03af2:	b0ad      	sub	sp, #180	; 0xb4
c0d03af4:	4606      	mov	r6, r0
    int i;
    unsigned int currentPos = 0;
    unsigned char amount[8], totalOutputAmount[8], fees[8];
    char tmp[80];
    unsigned char outputPos = 0, changeFound = 0;
    if (btchip_context_D.transactionContext.relaxed &&
c0d03af6:	4fde      	ldr	r7, [pc, #888]	; (c0d03e70 <prepare_full_output+0x380>)
        !btchip_context_D.transactionContext.consumeP2SH) {
c0d03af8:	7ff8      	ldrb	r0, [r7, #31]
    int i;
    unsigned int currentPos = 0;
    unsigned char amount[8], totalOutputAmount[8], fees[8];
    char tmp[80];
    unsigned char outputPos = 0, changeFound = 0;
    if (btchip_context_D.transactionContext.relaxed &&
c0d03afa:	7fb9      	ldrb	r1, [r7, #30]
c0d03afc:	2900      	cmp	r1, #0
c0d03afe:	d009      	beq.n	c0d03b14 <prepare_full_output+0x24>
c0d03b00:	2800      	cmp	r0, #0
c0d03b02:	d107      	bne.n	c0d03b14 <prepare_full_output+0x24>
c0d03b04:	2500      	movs	r5, #0
        !btchip_context_D.transactionContext.consumeP2SH) {
        if (!checkOnly) {
c0d03b06:	2e00      	cmp	r6, #0
c0d03b08:	d000      	beq.n	c0d03b0c <prepare_full_output+0x1c>
c0d03b0a:	e17b      	b.n	c0d03e04 <prepare_full_output+0x314>
            PRINTF("Error : Mixed inputs");
c0d03b0c:	a0fd      	add	r0, pc, #1012	; (adr r0, c0d03f04 <prepare_full_output+0x414>)
c0d03b0e:	f001 fc3f 	bl	c0d05390 <screen_printf>
c0d03b12:	e177      	b.n	c0d03e04 <prepare_full_output+0x314>
        }
        goto error;
    }
    if (btchip_context_D.transactionContext.consumeP2SH) {
c0d03b14:	2800      	cmp	r0, #0
c0d03b16:	d014      	beq.n	c0d03b42 <prepare_full_output+0x52>
c0d03b18:	2500      	movs	r5, #0
        if (checkOnly) {
c0d03b1a:	2e00      	cmp	r6, #0
c0d03b1c:	d000      	beq.n	c0d03b20 <prepare_full_output+0x30>
c0d03b1e:	e171      	b.n	c0d03e04 <prepare_full_output+0x314>
            goto error;
        }
        vars.tmp.fullAmount[0] = '\0';
c0d03b20:	202b      	movs	r0, #43	; 0x2b
c0d03b22:	49f6      	ldr	r1, [pc, #984]	; (c0d03efc <prepare_full_output+0x40c>)
c0d03b24:	2200      	movs	r2, #0
c0d03b26:	540a      	strb	r2, [r1, r0]
        vars.tmp.feesAmount[0] = '\0';
c0d03b28:	203f      	movs	r0, #63	; 0x3f
c0d03b2a:	540a      	strb	r2, [r1, r0]
        strcpy(vars.tmp.fullAddress, "P2SH");
c0d03b2c:	2048      	movs	r0, #72	; 0x48
c0d03b2e:	70c8      	strb	r0, [r1, #3]
c0d03b30:	2053      	movs	r0, #83	; 0x53
c0d03b32:	7088      	strb	r0, [r1, #2]
c0d03b34:	2032      	movs	r0, #50	; 0x32
c0d03b36:	7048      	strb	r0, [r1, #1]
c0d03b38:	2050      	movs	r0, #80	; 0x50
c0d03b3a:	7008      	strb	r0, [r1, #0]
c0d03b3c:	710a      	strb	r2, [r1, #4]
c0d03b3e:	2501      	movs	r5, #1
c0d03b40:	e160      	b.n	c0d03e04 <prepare_full_output+0x314>
c0d03b42:	a829      	add	r0, sp, #164	; 0xa4
c0d03b44:	2500      	movs	r5, #0
c0d03b46:	2208      	movs	r2, #8
        return 1;
    }
    // Parse output, locate the change output location
    os_memset(totalOutputAmount, 0, sizeof(totalOutputAmount));
c0d03b48:	4629      	mov	r1, r5
c0d03b4a:	f000 fd29 	bl	c0d045a0 <os_memset>
    numberOutputs = btchip_context_D.currentOutput[offset++];
c0d03b4e:	48f4      	ldr	r0, [pc, #976]	; (c0d03f20 <prepare_full_output+0x430>)
c0d03b50:	5c3c      	ldrb	r4, [r7, r0]
    if (numberOutputs > 3) {
c0d03b52:	2c03      	cmp	r4, #3
c0d03b54:	d906      	bls.n	c0d03b64 <prepare_full_output+0x74>
c0d03b56:	2500      	movs	r5, #0
        if (!checkOnly) {
c0d03b58:	2e00      	cmp	r6, #0
c0d03b5a:	d000      	beq.n	c0d03b5e <prepare_full_output+0x6e>
c0d03b5c:	e152      	b.n	c0d03e04 <prepare_full_output+0x314>
            PRINTF("Error : Too many outputs");
c0d03b5e:	48e8      	ldr	r0, [pc, #928]	; (c0d03f00 <prepare_full_output+0x410>)
c0d03b60:	4478      	add	r0, pc
c0d03b62:	e7d4      	b.n	c0d03b0e <prepare_full_output+0x1e>
c0d03b64:	9602      	str	r6, [sp, #8]
        }
        goto error;
    }
    for (i = 0; i < numberOutputs; i++) {
c0d03b66:	2c00      	cmp	r4, #0
c0d03b68:	9504      	str	r5, [sp, #16]
c0d03b6a:	9503      	str	r5, [sp, #12]
c0d03b6c:	9405      	str	r4, [sp, #20]
c0d03b6e:	d100      	bne.n	c0d03b72 <prepare_full_output+0x82>
c0d03b70:	e091      	b.n	c0d03c96 <prepare_full_output+0x1a6>
c0d03b72:	2000      	movs	r0, #0
c0d03b74:	2501      	movs	r5, #1
c0d03b76:	900b      	str	r0, [sp, #44]	; 0x2c
c0d03b78:	9003      	str	r0, [sp, #12]
c0d03b7a:	9007      	str	r0, [sp, #28]
c0d03b7c:	9004      	str	r0, [sp, #16]
        unsigned char nullAmount = 1;
        unsigned int j;
        unsigned char isOpReturn, isP2sh, isNativeSegwit;
        unsigned char isOpCreate, isOpCall;

        for (j = 0; j < 8; j++) {
c0d03b7e:	197e      	adds	r6, r7, r5
c0d03b80:	48e7      	ldr	r0, [pc, #924]	; (c0d03f20 <prepare_full_output+0x430>)
c0d03b82:	1830      	adds	r0, r6, r0
c0d03b84:	9907      	ldr	r1, [sp, #28]
            if (btchip_context_D.currentOutput[offset + j] != 0) {
c0d03b86:	5c42      	ldrb	r2, [r0, r1]
        unsigned char nullAmount = 1;
        unsigned int j;
        unsigned char isOpReturn, isP2sh, isNativeSegwit;
        unsigned char isOpCreate, isOpCall;

        for (j = 0; j < 8; j++) {
c0d03b88:	1c49      	adds	r1, r1, #1
            if (btchip_context_D.currentOutput[offset + j] != 0) {
c0d03b8a:	2a00      	cmp	r2, #0
c0d03b8c:	d103      	bne.n	c0d03b96 <prepare_full_output+0xa6>
c0d03b8e:	2701      	movs	r7, #1
        unsigned char nullAmount = 1;
        unsigned int j;
        unsigned char isOpReturn, isP2sh, isNativeSegwit;
        unsigned char isOpCreate, isOpCall;

        for (j = 0; j < 8; j++) {
c0d03b90:	2907      	cmp	r1, #7
c0d03b92:	d9f8      	bls.n	c0d03b86 <prepare_full_output+0x96>
c0d03b94:	e000      	b.n	c0d03b98 <prepare_full_output+0xa8>
c0d03b96:	9f07      	ldr	r7, [sp, #28]
c0d03b98:	48e1      	ldr	r0, [pc, #900]	; (c0d03f20 <prepare_full_output+0x430>)
            if (btchip_context_D.currentOutput[offset + j] != 0) {
                nullAmount = 0;
                break;
            }
        }
        btchip_swap_bytes(amount, btchip_context_D.currentOutput + offset, 8);
c0d03b9a:	1831      	adds	r1, r6, r0
c0d03b9c:	ac2b      	add	r4, sp, #172	; 0xac
c0d03b9e:	2208      	movs	r2, #8
c0d03ba0:	4620      	mov	r0, r4
c0d03ba2:	f7fe fae2 	bl	c0d0216a <btchip_swap_bytes>
c0d03ba6:	a829      	add	r0, sp, #164	; 0xa4
        transaction_amount_add_be(totalOutputAmount, totalOutputAmount, amount);
c0d03ba8:	4601      	mov	r1, r0
c0d03baa:	4622      	mov	r2, r4
c0d03bac:	f7fe fb5e 	bl	c0d0226c <transaction_amount_add_be>
        offset += 8; // skip amount
        isOpReturn = btchip_output_script_is_op_return(
            btchip_context_D.currentOutput + offset);
c0d03bb0:	48dc      	ldr	r0, [pc, #880]	; (c0d03f24 <prepare_full_output+0x434>)
c0d03bb2:	1836      	adds	r6, r6, r0
            }
        }
        btchip_swap_bytes(amount, btchip_context_D.currentOutput + offset, 8);
        transaction_amount_add_be(totalOutputAmount, totalOutputAmount, amount);
        offset += 8; // skip amount
        isOpReturn = btchip_output_script_is_op_return(
c0d03bb4:	4630      	mov	r0, r6
c0d03bb6:	f7fe f9a9 	bl	c0d01f0c <btchip_output_script_is_op_return>
c0d03bba:	900a      	str	r0, [sp, #40]	; 0x28
            btchip_context_D.currentOutput + offset);
        isP2sh = btchip_output_script_is_p2sh(btchip_context_D.currentOutput +
c0d03bbc:	4630      	mov	r0, r6
c0d03bbe:	f7fe f94b 	bl	c0d01e58 <btchip_output_script_is_p2sh>
c0d03bc2:	4604      	mov	r4, r0
                                              offset);
        isNativeSegwit = btchip_output_script_is_native_witness(
c0d03bc4:	4630      	mov	r0, r6
c0d03bc6:	f7fe f97f 	bl	c0d01ec8 <btchip_output_script_is_native_witness>
c0d03bca:	9006      	str	r0, [sp, #24]
            btchip_context_D.currentOutput + offset);
        isOpCreate = btchip_output_script_is_op_create(
c0d03bcc:	4630      	mov	r0, r6
c0d03bce:	f7fe f9a4 	bl	c0d01f1a <btchip_output_script_is_op_create>
c0d03bd2:	9009      	str	r0, [sp, #36]	; 0x24
            btchip_context_D.currentOutput + offset);
        isOpCall = btchip_output_script_is_op_call(
c0d03bd4:	4630      	mov	r0, r6
c0d03bd6:	f7fe f9bf 	bl	c0d01f58 <btchip_output_script_is_op_call>
c0d03bda:	9008      	str	r0, [sp, #32]
            btchip_context_D.currentOutput + offset);
        if (!btchip_output_script_is_regular(btchip_context_D.currentOutput +
c0d03bdc:	4630      	mov	r0, r6
c0d03bde:	f7fe f8ed 	bl	c0d01dbc <btchip_output_script_is_regular>
c0d03be2:	940c      	str	r4, [sp, #48]	; 0x30
c0d03be4:	4320      	orrs	r0, r4
c0d03be6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
                                             offset) &&
c0d03be8:	2800      	cmp	r0, #0
c0d03bea:	d10e      	bne.n	c0d03c0a <prepare_full_output+0x11a>
            !isP2sh && !(nullAmount && isOpReturn) &&
c0d03bec:	2f00      	cmp	r7, #0
c0d03bee:	d001      	beq.n	c0d03bf4 <prepare_full_output+0x104>
c0d03bf0:	2c00      	cmp	r4, #0
c0d03bf2:	d10a      	bne.n	c0d03c0a <prepare_full_output+0x11a>
            (!(G_coin_config->kind == COIN_KIND_QTUM) ||
c0d03bf4:	2028      	movs	r0, #40	; 0x28
             (!isOpCreate && !isOpCall))) {
c0d03bf6:	9908      	ldr	r1, [sp, #32]
c0d03bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
c0d03bfa:	4311      	orrs	r1, r2
        isOpCall = btchip_output_script_is_op_call(
            btchip_context_D.currentOutput + offset);
        if (!btchip_output_script_is_regular(btchip_context_D.currentOutput +
                                             offset) &&
            !isP2sh && !(nullAmount && isOpReturn) &&
            (!(G_coin_config->kind == COIN_KIND_QTUM) ||
c0d03bfc:	2900      	cmp	r1, #0
c0d03bfe:	d068      	beq.n	c0d03cd2 <prepare_full_output+0x1e2>
c0d03c00:	49c9      	ldr	r1, [pc, #804]	; (c0d03f28 <prepare_full_output+0x438>)
c0d03c02:	6809      	ldr	r1, [r1, #0]
c0d03c04:	5c08      	ldrb	r0, [r1, r0]
c0d03c06:	2812      	cmp	r0, #18
c0d03c08:	d163      	bne.n	c0d03cd2 <prepare_full_output+0x1e2>
             (!isOpCreate && !isOpCall))) {
            if (!checkOnly) {
                PRINTF("Error : Unrecognized input script");
            }
            goto error;
        } else if (!btchip_output_script_is_regular(
c0d03c0a:	4630      	mov	r0, r6
c0d03c0c:	f7fe f8d6 	bl	c0d01dbc <btchip_output_script_is_regular>
c0d03c10:	990c      	ldr	r1, [sp, #48]	; 0x30
c0d03c12:	4308      	orrs	r0, r1
                       btchip_context_D.currentOutput + offset) &&
c0d03c14:	2800      	cmp	r0, #0
c0d03c16:	d103      	bne.n	c0d03c20 <prepare_full_output+0x130>
                   !isP2sh && !(nullAmount && isOpReturn)) {
c0d03c18:	2f00      	cmp	r7, #0
c0d03c1a:	d05a      	beq.n	c0d03cd2 <prepare_full_output+0x1e2>
c0d03c1c:	2c00      	cmp	r4, #0
c0d03c1e:	d058      	beq.n	c0d03cd2 <prepare_full_output+0x1e2>
c0d03c20:	48c2      	ldr	r0, [pc, #776]	; (c0d03f2c <prepare_full_output+0x43c>)
c0d03c22:	4fbe      	ldr	r7, [pc, #760]	; (c0d03f1c <prepare_full_output+0x42c>)
c0d03c24:	5c38      	ldrb	r0, [r7, r0]
            if (!checkOnly) {
                PRINTF("Error : Unrecognized input script");
            }
            goto error;
        }
        if (((G_coin_config->kind == COIN_KIND_QTUM) &&
c0d03c26:	49c0      	ldr	r1, [pc, #768]	; (c0d03f28 <prepare_full_output+0x438>)
c0d03c28:	6809      	ldr	r1, [r1, #0]
c0d03c2a:	2228      	movs	r2, #40	; 0x28
c0d03c2c:	5c89      	ldrb	r1, [r1, r2]
c0d03c2e:	2912      	cmp	r1, #18
c0d03c30:	d106      	bne.n	c0d03c40 <prepare_full_output+0x150>
c0d03c32:	9909      	ldr	r1, [sp, #36]	; 0x24
             btchip_context_D.tmpCtx.output.changeInitialized && !isOpReturn &&
c0d03c34:	4321      	orrs	r1, r4
c0d03c36:	9a08      	ldr	r2, [sp, #32]
c0d03c38:	4311      	orrs	r1, r2
c0d03c3a:	2900      	cmp	r1, #0
c0d03c3c:	d002      	beq.n	c0d03c44 <prepare_full_output+0x154>
c0d03c3e:	e020      	b.n	c0d03c82 <prepare_full_output+0x192>
             !isOpCreate && !isOpCall) ||
            (!(G_coin_config->kind == COIN_KIND_QTUM) &&
             btchip_context_D.tmpCtx.output.changeInitialized && !isOpReturn)) {
c0d03c40:	2c00      	cmp	r4, #0
c0d03c42:	d11e      	bne.n	c0d03c82 <prepare_full_output+0x192>
c0d03c44:	2800      	cmp	r0, #0
c0d03c46:	d01c      	beq.n	c0d03c82 <prepare_full_output+0x192>
            unsigned char addressOffset =
                (isNativeSegwit ? OUTPUT_SCRIPT_NATIVE_WITNESS_PROGRAM_OFFSET
                                : isP2sh ? OUTPUT_SCRIPT_P2SH_PRE_LENGTH
c0d03c48:	2003      	movs	r0, #3
c0d03c4a:	2204      	movs	r2, #4
c0d03c4c:	990c      	ldr	r1, [sp, #48]	; 0x30
c0d03c4e:	2900      	cmp	r1, #0
c0d03c50:	4601      	mov	r1, r0
c0d03c52:	d100      	bne.n	c0d03c56 <prepare_full_output+0x166>
c0d03c54:	4611      	mov	r1, r2
             btchip_context_D.tmpCtx.output.changeInitialized && !isOpReturn &&
             !isOpCreate && !isOpCall) ||
            (!(G_coin_config->kind == COIN_KIND_QTUM) &&
             btchip_context_D.tmpCtx.output.changeInitialized && !isOpReturn)) {
            unsigned char addressOffset =
                (isNativeSegwit ? OUTPUT_SCRIPT_NATIVE_WITNESS_PROGRAM_OFFSET
c0d03c56:	9a06      	ldr	r2, [sp, #24]
c0d03c58:	2a00      	cmp	r2, #0
c0d03c5a:	d000      	beq.n	c0d03c5e <prepare_full_output+0x16e>
c0d03c5c:	4601      	mov	r1, r0
                                : isP2sh ? OUTPUT_SCRIPT_P2SH_PRE_LENGTH
                                         : OUTPUT_SCRIPT_REGULAR_PRE_LENGTH);
            if (os_memcmp(btchip_context_D.currentOutput + offset +
c0d03c5e:	1870      	adds	r0, r6, r1
c0d03c60:	49b3      	ldr	r1, [pc, #716]	; (c0d03f30 <prepare_full_output+0x440>)
c0d03c62:	1879      	adds	r1, r7, r1
c0d03c64:	2214      	movs	r2, #20
c0d03c66:	f000 fd41 	bl	c0d046ec <os_memcmp>
c0d03c6a:	2800      	cmp	r0, #0
c0d03c6c:	d002      	beq.n	c0d03c74 <prepare_full_output+0x184>
c0d03c6e:	980b      	ldr	r0, [sp, #44]	; 0x2c
c0d03c70:	9003      	str	r0, [sp, #12]
c0d03c72:	e006      	b.n	c0d03c82 <prepare_full_output+0x192>
                              addressOffset,
                          btchip_context_D.tmpCtx.output.changeAddress + 1,
                          20) == 0) {
                if (changeFound) {
c0d03c74:	9804      	ldr	r0, [sp, #16]
c0d03c76:	0600      	lsls	r0, r0, #24
c0d03c78:	2101      	movs	r1, #1
c0d03c7a:	9104      	str	r1, [sp, #16]
c0d03c7c:	2800      	cmp	r0, #0
c0d03c7e:	d000      	beq.n	c0d03c82 <prepare_full_output+0x192>
c0d03c80:	e0bc      	b.n	c0d03dfc <prepare_full_output+0x30c>
                changeFound = 1;
            } else {
                outputPos = currentPos;
            }
        }
        offset += 1 + btchip_context_D.currentOutput[offset];
c0d03c82:	7830      	ldrb	r0, [r6, #0]
c0d03c84:	182d      	adds	r5, r5, r0
c0d03c86:	3509      	adds	r5, #9
c0d03c88:	980b      	ldr	r0, [sp, #44]	; 0x2c
        if (!checkOnly) {
            PRINTF("Error : Too many outputs");
        }
        goto error;
    }
    for (i = 0; i < numberOutputs; i++) {
c0d03c8a:	1c40      	adds	r0, r0, #1
c0d03c8c:	9c05      	ldr	r4, [sp, #20]
c0d03c8e:	900b      	str	r0, [sp, #44]	; 0x2c
c0d03c90:	42a0      	cmp	r0, r4
c0d03c92:	da00      	bge.n	c0d03c96 <prepare_full_output+0x1a6>
c0d03c94:	e773      	b.n	c0d03b7e <prepare_full_output+0x8e>
            }
        }
        offset += 1 + btchip_context_D.currentOutput[offset];
        currentPos++;
    }
    if (btchip_context_D.tmpCtx.output.changeInitialized && !changeFound) {
c0d03c96:	48a5      	ldr	r0, [pc, #660]	; (c0d03f2c <prepare_full_output+0x43c>)
c0d03c98:	9904      	ldr	r1, [sp, #16]
c0d03c9a:	0609      	lsls	r1, r1, #24
c0d03c9c:	d109      	bne.n	c0d03cb2 <prepare_full_output+0x1c2>
c0d03c9e:	5c38      	ldrb	r0, [r7, r0]
c0d03ca0:	2800      	cmp	r0, #0
c0d03ca2:	d006      	beq.n	c0d03cb2 <prepare_full_output+0x1c2>
c0d03ca4:	2500      	movs	r5, #0
        if (!checkOnly) {
c0d03ca6:	9802      	ldr	r0, [sp, #8]
c0d03ca8:	2800      	cmp	r0, #0
c0d03caa:	d000      	beq.n	c0d03cae <prepare_full_output+0x1be>
c0d03cac:	e0aa      	b.n	c0d03e04 <prepare_full_output+0x314>
            PRINTF("Error : change output not found");
c0d03cae:	a0b4      	add	r0, pc, #720	; (adr r0, c0d03f80 <prepare_full_output+0x490>)
c0d03cb0:	e72d      	b.n	c0d03b0e <prepare_full_output+0x1e>
        }
        goto error;
    }
    if (transaction_amount_sub_be(
c0d03cb2:	4639      	mov	r1, r7
c0d03cb4:	3115      	adds	r1, #21
c0d03cb6:	a827      	add	r0, sp, #156	; 0x9c
c0d03cb8:	aa29      	add	r2, sp, #164	; 0xa4
c0d03cba:	f7fe faf3 	bl	c0d022a4 <transaction_amount_sub_be>
c0d03cbe:	2800      	cmp	r0, #0
c0d03cc0:	9802      	ldr	r0, [sp, #8]
c0d03cc2:	d00d      	beq.n	c0d03ce0 <prepare_full_output+0x1f0>
c0d03cc4:	2500      	movs	r5, #0
            fees, btchip_context_D.transactionContext.transactionAmount,
            totalOutputAmount)) {
        if (!checkOnly) {
c0d03cc6:	2800      	cmp	r0, #0
c0d03cc8:	d000      	beq.n	c0d03ccc <prepare_full_output+0x1dc>
c0d03cca:	e09b      	b.n	c0d03e04 <prepare_full_output+0x314>
            PRINTF("Error : Fees not consistent");
c0d03ccc:	48b6      	ldr	r0, [pc, #728]	; (c0d03fa8 <prepare_full_output+0x4b8>)
c0d03cce:	4478      	add	r0, pc
c0d03cd0:	e71d      	b.n	c0d03b0e <prepare_full_output+0x1e>
c0d03cd2:	2500      	movs	r5, #0
c0d03cd4:	9802      	ldr	r0, [sp, #8]
c0d03cd6:	2800      	cmp	r0, #0
c0d03cd8:	d000      	beq.n	c0d03cdc <prepare_full_output+0x1ec>
c0d03cda:	e093      	b.n	c0d03e04 <prepare_full_output+0x314>
c0d03cdc:	a09f      	add	r0, pc, #636	; (adr r0, c0d03f5c <prepare_full_output+0x46c>)
c0d03cde:	e716      	b.n	c0d03b0e <prepare_full_output+0x1e>
c0d03ce0:	2501      	movs	r5, #1
        }
        goto error;
    }
    if (!checkOnly) {
c0d03ce2:	2800      	cmp	r0, #0
c0d03ce4:	d000      	beq.n	c0d03ce8 <prepare_full_output+0x1f8>
c0d03ce6:	e08d      	b.n	c0d03e04 <prepare_full_output+0x314>
        // Format validation message
        currentPos = 0;
        offset = 1;
        btchip_context_D.tmp = (unsigned char *)tmp;
c0d03ce8:	2085      	movs	r0, #133	; 0x85
c0d03cea:	0081      	lsls	r1, r0, #2
c0d03cec:	a813      	add	r0, sp, #76	; 0x4c
c0d03cee:	9107      	str	r1, [sp, #28]
c0d03cf0:	5078      	str	r0, [r7, r1]
        for (i = 0; i < numberOutputs; i++) {
c0d03cf2:	2c00      	cmp	r4, #0
c0d03cf4:	d100      	bne.n	c0d03cf8 <prepare_full_output+0x208>
c0d03cf6:	e085      	b.n	c0d03e04 <prepare_full_output+0x314>
c0d03cf8:	9803      	ldr	r0, [sp, #12]
c0d03cfa:	b2c0      	uxtb	r0, r0
c0d03cfc:	900a      	str	r0, [sp, #40]	; 0x28
c0d03cfe:	2700      	movs	r7, #0
c0d03d00:	2601      	movs	r6, #1
c0d03d02:	9009      	str	r0, [sp, #36]	; 0x24
c0d03d04:	920c      	str	r2, [sp, #48]	; 0x30
            if (((G_coin_config->kind == COIN_KIND_QTUM) &&
c0d03d06:	4888      	ldr	r0, [pc, #544]	; (c0d03f28 <prepare_full_output+0x438>)
c0d03d08:	6800      	ldr	r0, [r0, #0]
c0d03d0a:	2428      	movs	r4, #40	; 0x28
c0d03d0c:	5d00      	ldrb	r0, [r0, r4]
c0d03d0e:	2812      	cmp	r0, #18
c0d03d10:	d115      	bne.n	c0d03d3e <prepare_full_output+0x24e>
                 !btchip_output_script_is_op_return(
                     btchip_context_D.currentOutput + offset + 8) &&
c0d03d12:	4882      	ldr	r0, [pc, #520]	; (c0d03f1c <prepare_full_output+0x42c>)
c0d03d14:	1980      	adds	r0, r0, r6
c0d03d16:	4982      	ldr	r1, [pc, #520]	; (c0d03f20 <prepare_full_output+0x430>)
c0d03d18:	1841      	adds	r1, r0, r1
c0d03d1a:	910b      	str	r1, [sp, #44]	; 0x2c
c0d03d1c:	4981      	ldr	r1, [pc, #516]	; (c0d03f24 <prepare_full_output+0x434>)
c0d03d1e:	1845      	adds	r5, r0, r1
        currentPos = 0;
        offset = 1;
        btchip_context_D.tmp = (unsigned char *)tmp;
        for (i = 0; i < numberOutputs; i++) {
            if (((G_coin_config->kind == COIN_KIND_QTUM) &&
                 !btchip_output_script_is_op_return(
c0d03d20:	4628      	mov	r0, r5
c0d03d22:	f7fe f8f3 	bl	c0d01f0c <btchip_output_script_is_op_return>
                     btchip_context_D.currentOutput + offset + 8) &&
c0d03d26:	2800      	cmp	r0, #0
c0d03d28:	d109      	bne.n	c0d03d3e <prepare_full_output+0x24e>
                 !btchip_output_script_is_op_create(
c0d03d2a:	4628      	mov	r0, r5
c0d03d2c:	f7fe f8f5 	bl	c0d01f1a <btchip_output_script_is_op_create>
                     btchip_context_D.currentOutput + offset + 8) &&
c0d03d30:	2800      	cmp	r0, #0
c0d03d32:	d104      	bne.n	c0d03d3e <prepare_full_output+0x24e>
                 !btchip_output_script_is_op_call(
c0d03d34:	4628      	mov	r0, r5
c0d03d36:	f7fe f90f 	bl	c0d01f58 <btchip_output_script_is_op_call>
                     btchip_context_D.currentOutput + offset + 8)) ||
c0d03d3a:	2800      	cmp	r0, #0
c0d03d3c:	d011      	beq.n	c0d03d62 <prepare_full_output+0x272>
                (!(G_coin_config->kind == COIN_KIND_QTUM) &&
c0d03d3e:	487a      	ldr	r0, [pc, #488]	; (c0d03f28 <prepare_full_output+0x438>)
c0d03d40:	6800      	ldr	r0, [r0, #0]
c0d03d42:	5d00      	ldrb	r0, [r0, r4]
c0d03d44:	2812      	cmp	r0, #18
c0d03d46:	d00a      	beq.n	c0d03d5e <prepare_full_output+0x26e>
                 !btchip_output_script_is_op_return(
                     btchip_context_D.currentOutput + offset + 8))) {
c0d03d48:	4874      	ldr	r0, [pc, #464]	; (c0d03f1c <prepare_full_output+0x42c>)
c0d03d4a:	1980      	adds	r0, r0, r6
c0d03d4c:	4974      	ldr	r1, [pc, #464]	; (c0d03f20 <prepare_full_output+0x430>)
c0d03d4e:	1841      	adds	r1, r0, r1
c0d03d50:	910b      	str	r1, [sp, #44]	; 0x2c
c0d03d52:	4974      	ldr	r1, [pc, #464]	; (c0d03f24 <prepare_full_output+0x434>)
c0d03d54:	1840      	adds	r0, r0, r1
                 !btchip_output_script_is_op_create(
                     btchip_context_D.currentOutput + offset + 8) &&
                 !btchip_output_script_is_op_call(
                     btchip_context_D.currentOutput + offset + 8)) ||
                (!(G_coin_config->kind == COIN_KIND_QTUM) &&
                 !btchip_output_script_is_op_return(
c0d03d56:	f7fe f8d9 	bl	c0d01f0c <btchip_output_script_is_op_return>
        // Format validation message
        currentPos = 0;
        offset = 1;
        btchip_context_D.tmp = (unsigned char *)tmp;
        for (i = 0; i < numberOutputs; i++) {
            if (((G_coin_config->kind == COIN_KIND_QTUM) &&
c0d03d5a:	2800      	cmp	r0, #0
c0d03d5c:	d001      	beq.n	c0d03d62 <prepare_full_output+0x272>
                                    btchip_context_D.shortCoinIdLength + 1] =
                        '\0';
                    break;
                }
            } else {
                offset += 8;
c0d03d5e:	3608      	adds	r6, #8
c0d03d60:	e03f      	b.n	c0d03de2 <prepare_full_output+0x2f2>
c0d03d62:	a82b      	add	r0, sp, #172	; 0xac
c0d03d64:	2208      	movs	r2, #8
                unsigned char versionSize;
                int addressOffset;
                unsigned char address[22];
                unsigned short version;
                unsigned char isNativeSegwit;
                btchip_swap_bytes(amount,
c0d03d66:	990b      	ldr	r1, [sp, #44]	; 0x2c
c0d03d68:	f7fe f9ff 	bl	c0d0216a <btchip_swap_bytes>
                                  btchip_context_D.currentOutput + offset, 8);
                offset += 8;
c0d03d6c:	4634      	mov	r4, r6
c0d03d6e:	3408      	adds	r4, #8
                isNativeSegwit = btchip_output_script_is_native_witness(
                    btchip_context_D.currentOutput + offset);
c0d03d70:	486a      	ldr	r0, [pc, #424]	; (c0d03f1c <prepare_full_output+0x42c>)
c0d03d72:	1900      	adds	r0, r0, r4
c0d03d74:	496a      	ldr	r1, [pc, #424]	; (c0d03f20 <prepare_full_output+0x430>)
c0d03d76:	1840      	adds	r0, r0, r1
c0d03d78:	900b      	str	r0, [sp, #44]	; 0x2c
                unsigned short version;
                unsigned char isNativeSegwit;
                btchip_swap_bytes(amount,
                                  btchip_context_D.currentOutput + offset, 8);
                offset += 8;
                isNativeSegwit = btchip_output_script_is_native_witness(
c0d03d7a:	f7fe f8a5 	bl	c0d01ec8 <btchip_output_script_is_native_witness>
c0d03d7e:	4605      	mov	r5, r0
                    btchip_context_D.currentOutput + offset);
                if (!isNativeSegwit) {
c0d03d80:	2d00      	cmp	r5, #0
c0d03d82:	d12a      	bne.n	c0d03dda <prepare_full_output+0x2ea>
                    if (btchip_output_script_is_regular(
c0d03d84:	980b      	ldr	r0, [sp, #44]	; 0x2c
c0d03d86:	f7fe f819 	bl	c0d01dbc <btchip_output_script_is_regular>
c0d03d8a:	210b      	movs	r1, #11
c0d03d8c:	220c      	movs	r2, #12
c0d03d8e:	2800      	cmp	r0, #0
c0d03d90:	d000      	beq.n	c0d03d94 <prepare_full_output+0x2a4>
c0d03d92:	4611      	mov	r1, r2
c0d03d94:	1989      	adds	r1, r1, r6
c0d03d96:	9108      	str	r1, [sp, #32]
c0d03d98:	4a60      	ldr	r2, [pc, #384]	; (c0d03f1c <prepare_full_output+0x42c>)
c0d03d9a:	4613      	mov	r3, r2
c0d03d9c:	3222      	adds	r2, #34	; 0x22
c0d03d9e:	3320      	adds	r3, #32
c0d03da0:	2800      	cmp	r0, #0
c0d03da2:	d000      	beq.n	c0d03da6 <prepare_full_output+0x2b6>
c0d03da4:	461a      	mov	r2, r3
c0d03da6:	8810      	ldrh	r0, [r2, #0]
c0d03da8:	9009      	str	r0, [sp, #36]	; 0x24
                        version = btchip_context_D.payToAddressVersion;
                    } else {
                        addressOffset = offset + 3;
                        version = btchip_context_D.payToScriptHashVersion;
                    }
                    if (version > 255) {
c0d03daa:	0a02      	lsrs	r2, r0, #8
c0d03dac:	2000      	movs	r0, #0
c0d03dae:	2101      	movs	r1, #1
c0d03db0:	2a00      	cmp	r2, #0
c0d03db2:	d003      	beq.n	c0d03dbc <prepare_full_output+0x2cc>
c0d03db4:	a80d      	add	r0, sp, #52	; 0x34
                        versionSize = 2;
                        address[0] = (version >> 8);
c0d03db6:	7002      	strb	r2, [r0, #0]
c0d03db8:	2001      	movs	r0, #1
c0d03dba:	2102      	movs	r1, #2
c0d03dbc:	aa0d      	add	r2, sp, #52	; 0x34
c0d03dbe:	4310      	orrs	r0, r2
c0d03dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
c0d03dc2:	7003      	strb	r3, [r0, #0]
c0d03dc4:	910c      	str	r1, [sp, #48]	; 0x30
                        address[1] = version;
                    } else {
                        versionSize = 1;
                        address[0] = version;
                    }
                    os_memmove(address + versionSize,
c0d03dc6:	b2c8      	uxtb	r0, r1
c0d03dc8:	1810      	adds	r0, r2, r0
                               btchip_context_D.currentOutput + addressOffset,
c0d03dca:	4a54      	ldr	r2, [pc, #336]	; (c0d03f1c <prepare_full_output+0x42c>)
c0d03dcc:	9908      	ldr	r1, [sp, #32]
c0d03dce:	1851      	adds	r1, r2, r1
c0d03dd0:	4a53      	ldr	r2, [pc, #332]	; (c0d03f20 <prepare_full_output+0x430>)
c0d03dd2:	1889      	adds	r1, r1, r2
                        address[1] = version;
                    } else {
                        versionSize = 1;
                        address[0] = version;
                    }
                    os_memmove(address + versionSize,
c0d03dd4:	2214      	movs	r2, #20
c0d03dd6:	f000 fbec 	bl	c0d045b2 <os_memmove>
                               btchip_context_D.currentOutput + addressOffset,
                               20);
                }
                if (currentPos == outputPos) {
c0d03dda:	980a      	ldr	r0, [sp, #40]	; 0x28
c0d03ddc:	42b8      	cmp	r0, r7
c0d03dde:	d016      	beq.n	c0d03e0e <prepare_full_output+0x31e>
c0d03de0:	4626      	mov	r6, r4
c0d03de2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
                    break;
                }
            } else {
                offset += 8;
            }
            offset += 1 + btchip_context_D.currentOutput[offset];
c0d03de4:	484d      	ldr	r0, [pc, #308]	; (c0d03f1c <prepare_full_output+0x42c>)
c0d03de6:	1980      	adds	r0, r0, r6
c0d03de8:	494d      	ldr	r1, [pc, #308]	; (c0d03f20 <prepare_full_output+0x430>)
c0d03dea:	5c40      	ldrb	r0, [r0, r1]
c0d03dec:	1830      	adds	r0, r6, r0
c0d03dee:	1c46      	adds	r6, r0, #1
    if (!checkOnly) {
        // Format validation message
        currentPos = 0;
        offset = 1;
        btchip_context_D.tmp = (unsigned char *)tmp;
        for (i = 0; i < numberOutputs; i++) {
c0d03df0:	1c7f      	adds	r7, r7, #1
c0d03df2:	2501      	movs	r5, #1
c0d03df4:	9805      	ldr	r0, [sp, #20]
c0d03df6:	4287      	cmp	r7, r0
c0d03df8:	db84      	blt.n	c0d03d04 <prepare_full_output+0x214>
c0d03dfa:	e003      	b.n	c0d03e04 <prepare_full_output+0x314>
c0d03dfc:	2500      	movs	r5, #0
            if (os_memcmp(btchip_context_D.currentOutput + offset +
                              addressOffset,
                          btchip_context_D.tmpCtx.output.changeAddress + 1,
                          20) == 0) {
                if (changeFound) {
                    if (!checkOnly) {
c0d03dfe:	9802      	ldr	r0, [sp, #8]
c0d03e00:	2800      	cmp	r0, #0
c0d03e02:	d002      	beq.n	c0d03e0a <prepare_full_output+0x31a>
        }
    }
    return 1;
error:
    return 0;
}
c0d03e04:	4628      	mov	r0, r5
c0d03e06:	b02d      	add	sp, #180	; 0xb4
c0d03e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
                              addressOffset,
                          btchip_context_D.tmpCtx.output.changeAddress + 1,
                          20) == 0) {
                if (changeFound) {
                    if (!checkOnly) {
                        PRINTF("Error : Multiple change output found");
c0d03e0a:	a04a      	add	r0, pc, #296	; (adr r0, c0d03f34 <prepare_full_output+0x444>)
c0d03e0c:	e67f      	b.n	c0d03b0e <prepare_full_output+0x1e>
                               btchip_context_D.currentOutput + addressOffset,
                               20);
                }
                if (currentPos == outputPos) {
                    unsigned short textSize = 0;
                    if (!isNativeSegwit) {
c0d03e0e:	2d00      	cmp	r5, #0
c0d03e10:	990c      	ldr	r1, [sp, #48]	; 0x30
c0d03e12:	d014      	beq.n	c0d03e3e <prepare_full_output+0x34e>
                            textSize = btchip_public_key_to_encoded_base58(
                                address, 20 + versionSize, (unsigned char *)tmp,
                                sizeof(tmp), version, 1);
                            tmp[textSize] = '\0';
                        }
                    } else if (G_coin_config->native_segwit_prefix) {
c0d03e14:	4844      	ldr	r0, [pc, #272]	; (c0d03f28 <prepare_full_output+0x438>)
c0d03e16:	6800      	ldr	r0, [r0, #0]
c0d03e18:	6a00      	ldr	r0, [r0, #32]
c0d03e1a:	2800      	cmp	r0, #0
c0d03e1c:	d039      	beq.n	c0d03e92 <prepare_full_output+0x3a2>
                        textSize = segwit_addr_encode(
                            tmp, PIC(G_coin_config->native_segwit_prefix), 0,
                            btchip_context_D.currentOutput + offset +
                                OUTPUT_SCRIPT_NATIVE_WITNESS_PROGRAM_OFFSET,
                            btchip_context_D.currentOutput
c0d03e1e:	493f      	ldr	r1, [pc, #252]	; (c0d03f1c <prepare_full_output+0x42c>)
c0d03e20:	198c      	adds	r4, r1, r6
                                sizeof(tmp), version, 1);
                            tmp[textSize] = '\0';
                        }
                    } else if (G_coin_config->native_segwit_prefix) {
                        textSize = segwit_addr_encode(
                            tmp, PIC(G_coin_config->native_segwit_prefix), 0,
c0d03e22:	f001 fe6b 	bl	c0d05afc <pic>
c0d03e26:	4601      	mov	r1, r0
                            btchip_context_D.currentOutput + offset +
                                OUTPUT_SCRIPT_NATIVE_WITNESS_PROGRAM_OFFSET,
                            btchip_context_D.currentOutput
c0d03e28:	485d      	ldr	r0, [pc, #372]	; (c0d03fa0 <prepare_full_output+0x4b0>)
c0d03e2a:	5c20      	ldrb	r0, [r4, r0]
                                address, 20 + versionSize, (unsigned char *)tmp,
                                sizeof(tmp), version, 1);
                            tmp[textSize] = '\0';
                        }
                    } else if (G_coin_config->native_segwit_prefix) {
                        textSize = segwit_addr_encode(
c0d03e2c:	466a      	mov	r2, sp
c0d03e2e:	6010      	str	r0, [r2, #0]
                            tmp, PIC(G_coin_config->native_segwit_prefix), 0,
                            btchip_context_D.currentOutput + offset +
c0d03e30:	980b      	ldr	r0, [sp, #44]	; 0x2c
c0d03e32:	1cc3      	adds	r3, r0, #3
c0d03e34:	a813      	add	r0, sp, #76	; 0x4c
c0d03e36:	2200      	movs	r2, #0
                                address, 20 + versionSize, (unsigned char *)tmp,
                                sizeof(tmp), version, 1);
                            tmp[textSize] = '\0';
                        }
                    } else if (G_coin_config->native_segwit_prefix) {
                        textSize = segwit_addr_encode(
c0d03e38:	f001 ff36 	bl	c0d05ca8 <segwit_addr_encode>
c0d03e3c:	e029      	b.n	c0d03e92 <prepare_full_output+0x3a2>
                }
                if (currentPos == outputPos) {
                    unsigned short textSize = 0;
                    if (!isNativeSegwit) {
                        // Prepare address
                        if (btchip_context_D.usingCashAddr) {
c0d03e3e:	20ff      	movs	r0, #255	; 0xff
c0d03e40:	30fe      	adds	r0, #254	; 0xfe
c0d03e42:	4a36      	ldr	r2, [pc, #216]	; (c0d03f1c <prepare_full_output+0x42c>)
c0d03e44:	5c10      	ldrb	r0, [r2, r0]
c0d03e46:	b2c9      	uxtb	r1, r1
c0d03e48:	2800      	cmp	r0, #0
c0d03e4a:	d013      	beq.n	c0d03e74 <prepare_full_output+0x384>
                            cashaddr_encode(
                                address + versionSize, 20, tmp, sizeof(tmp),
                                (version ==
                                         btchip_context_D.payToScriptHashVersion
c0d03e4c:	8c53      	ldrh	r3, [r2, #34]	; 0x22
                    if (!isNativeSegwit) {
                        // Prepare address
                        if (btchip_context_D.usingCashAddr) {
                            cashaddr_encode(
                                address + versionSize, 20, tmp, sizeof(tmp),
                                (version ==
c0d03e4e:	9809      	ldr	r0, [sp, #36]	; 0x24
c0d03e50:	b284      	uxth	r4, r0
c0d03e52:	2001      	movs	r0, #1
c0d03e54:	2200      	movs	r2, #0
c0d03e56:	429c      	cmp	r4, r3
c0d03e58:	d000      	beq.n	c0d03e5c <prepare_full_output+0x36c>
c0d03e5a:	4610      	mov	r0, r2
                if (currentPos == outputPos) {
                    unsigned short textSize = 0;
                    if (!isNativeSegwit) {
                        // Prepare address
                        if (btchip_context_D.usingCashAddr) {
                            cashaddr_encode(
c0d03e5c:	466a      	mov	r2, sp
c0d03e5e:	6010      	str	r0, [r2, #0]
c0d03e60:	a80d      	add	r0, sp, #52	; 0x34
                                address + versionSize, 20, tmp, sizeof(tmp),
c0d03e62:	1840      	adds	r0, r0, r1
                if (currentPos == outputPos) {
                    unsigned short textSize = 0;
                    if (!isNativeSegwit) {
                        // Prepare address
                        if (btchip_context_D.usingCashAddr) {
                            cashaddr_encode(
c0d03e64:	2114      	movs	r1, #20
c0d03e66:	aa13      	add	r2, sp, #76	; 0x4c
c0d03e68:	2350      	movs	r3, #80	; 0x50
c0d03e6a:	f7fe ff4b 	bl	c0d02d04 <cashaddr_encode>
c0d03e6e:	e010      	b.n	c0d03e92 <prepare_full_output+0x3a2>
c0d03e70:	20001874 	.word	0x20001874
                                (version ==
                                         btchip_context_D.payToScriptHashVersion
                                     ? CASHADDR_P2SH
                                     : CASHADDR_P2PKH));
                        } else {
                            textSize = btchip_public_key_to_encoded_base58(
c0d03e74:	2001      	movs	r0, #1
c0d03e76:	466a      	mov	r2, sp
c0d03e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
c0d03e7a:	b29b      	uxth	r3, r3
c0d03e7c:	6013      	str	r3, [r2, #0]
c0d03e7e:	6050      	str	r0, [r2, #4]
                                address, 20 + versionSize, (unsigned char *)tmp,
c0d03e80:	3114      	adds	r1, #20
c0d03e82:	a80d      	add	r0, sp, #52	; 0x34
c0d03e84:	ac13      	add	r4, sp, #76	; 0x4c
                                (version ==
                                         btchip_context_D.payToScriptHashVersion
                                     ? CASHADDR_P2SH
                                     : CASHADDR_P2PKH));
                        } else {
                            textSize = btchip_public_key_to_encoded_base58(
c0d03e86:	2350      	movs	r3, #80	; 0x50
c0d03e88:	4622      	mov	r2, r4
c0d03e8a:	f7fe f91a 	bl	c0d020c2 <btchip_public_key_to_encoded_base58>
                                address, 20 + versionSize, (unsigned char *)tmp,
                                sizeof(tmp), version, 1);
                            tmp[textSize] = '\0';
c0d03e8e:	2100      	movs	r1, #0
c0d03e90:	5421      	strb	r1, [r4, r0]
                                [offset +
                                 OUTPUT_SCRIPT_NATIVE_WITNESS_PROGRAM_OFFSET -
                                 1]);
                    }

                    strcpy(vars.tmp.fullAddress, tmp);
c0d03e92:	4c44      	ldr	r4, [pc, #272]	; (c0d03fa4 <prepare_full_output+0x4b4>)
c0d03e94:	a913      	add	r1, sp, #76	; 0x4c
c0d03e96:	4620      	mov	r0, r4
c0d03e98:	f003 fd26 	bl	c0d078e8 <strcpy>

                    // Prepare amount

                    os_memmove(vars.tmp.fullAmount,
                               btchip_context_D.shortCoinId,
                               btchip_context_D.shortCoinIdLength);
c0d03e9c:	2538      	movs	r5, #56	; 0x38
c0d03e9e:	4f1f      	ldr	r7, [pc, #124]	; (c0d03f1c <prepare_full_output+0x42c>)
c0d03ea0:	5d7a      	ldrb	r2, [r7, r5]

                    strcpy(vars.tmp.fullAddress, tmp);

                    // Prepare amount

                    os_memmove(vars.tmp.fullAmount,
c0d03ea2:	4626      	mov	r6, r4
c0d03ea4:	362b      	adds	r6, #43	; 0x2b
c0d03ea6:	4639      	mov	r1, r7
c0d03ea8:	3132      	adds	r1, #50	; 0x32
c0d03eaa:	910c      	str	r1, [sp, #48]	; 0x30
c0d03eac:	4630      	mov	r0, r6
c0d03eae:	f000 fb80 	bl	c0d045b2 <os_memmove>
                               btchip_context_D.shortCoinId,
                               btchip_context_D.shortCoinIdLength);
                    vars.tmp.fullAmount[btchip_context_D.shortCoinIdLength] =
c0d03eb2:	5d78      	ldrb	r0, [r7, r5]
c0d03eb4:	2120      	movs	r1, #32
c0d03eb6:	910b      	str	r1, [sp, #44]	; 0x2c
c0d03eb8:	5431      	strb	r1, [r6, r0]
c0d03eba:	1830      	adds	r0, r6, r0
                        ' ';
                    btchip_context_D.tmp =
                        (unsigned char *)(vars.tmp.fullAmount +
                                          btchip_context_D.shortCoinIdLength +
c0d03ebc:	1c40      	adds	r0, r0, #1
                    os_memmove(vars.tmp.fullAmount,
                               btchip_context_D.shortCoinId,
                               btchip_context_D.shortCoinIdLength);
                    vars.tmp.fullAmount[btchip_context_D.shortCoinIdLength] =
                        ' ';
                    btchip_context_D.tmp =
c0d03ebe:	9907      	ldr	r1, [sp, #28]
c0d03ec0:	5078      	str	r0, [r7, r1]
c0d03ec2:	a82b      	add	r0, sp, #172	; 0xac
                        (unsigned char *)(vars.tmp.fullAmount +
                                          btchip_context_D.shortCoinIdLength +
                                          1);
                    textSize = btchip_convert_hex_amount_to_displayable(amount);
c0d03ec4:	f7fd fe14 	bl	c0d01af0 <btchip_convert_hex_amount_to_displayable>
                    vars.tmp
                        .fullAmount[textSize +
                                    btchip_context_D.shortCoinIdLength + 1] =
c0d03ec8:	5d7a      	ldrb	r2, [r7, r5]
                        (unsigned char *)(vars.tmp.fullAmount +
                                          btchip_context_D.shortCoinIdLength +
                                          1);
                    textSize = btchip_convert_hex_amount_to_displayable(amount);
                    vars.tmp
                        .fullAmount[textSize +
c0d03eca:	1880      	adds	r0, r0, r2

                    strcpy(vars.tmp.fullAddress, tmp);

                    // Prepare amount

                    os_memmove(vars.tmp.fullAmount,
c0d03ecc:	1830      	adds	r0, r6, r0
                                          btchip_context_D.shortCoinIdLength +
                                          1);
                    textSize = btchip_convert_hex_amount_to_displayable(amount);
                    vars.tmp
                        .fullAmount[textSize +
                                    btchip_context_D.shortCoinIdLength + 1] =
c0d03ece:	2600      	movs	r6, #0
c0d03ed0:	7046      	strb	r6, [r0, #1]
                        '\0';

                    // prepare fee display
                    os_memmove(vars.tmp.feesAmount,
c0d03ed2:	343f      	adds	r4, #63	; 0x3f
c0d03ed4:	4620      	mov	r0, r4
c0d03ed6:	990c      	ldr	r1, [sp, #48]	; 0x30
c0d03ed8:	f000 fb6b 	bl	c0d045b2 <os_memmove>
                               btchip_context_D.shortCoinId,
                               btchip_context_D.shortCoinIdLength);
                    vars.tmp.feesAmount[btchip_context_D.shortCoinIdLength] =
c0d03edc:	5d78      	ldrb	r0, [r7, r5]
c0d03ede:	990b      	ldr	r1, [sp, #44]	; 0x2c
c0d03ee0:	5421      	strb	r1, [r4, r0]
c0d03ee2:	1820      	adds	r0, r4, r0
                        ' ';
                    btchip_context_D.tmp =
                        (unsigned char *)(vars.tmp.feesAmount +
                                          btchip_context_D.shortCoinIdLength +
c0d03ee4:	1c40      	adds	r0, r0, #1
                    os_memmove(vars.tmp.feesAmount,
                               btchip_context_D.shortCoinId,
                               btchip_context_D.shortCoinIdLength);
                    vars.tmp.feesAmount[btchip_context_D.shortCoinIdLength] =
                        ' ';
                    btchip_context_D.tmp =
c0d03ee6:	9907      	ldr	r1, [sp, #28]
c0d03ee8:	5078      	str	r0, [r7, r1]
c0d03eea:	a827      	add	r0, sp, #156	; 0x9c
                        (unsigned char *)(vars.tmp.feesAmount +
                                          btchip_context_D.shortCoinIdLength +
                                          1);
                    textSize = btchip_convert_hex_amount_to_displayable(fees);
c0d03eec:	f7fd fe00 	bl	c0d01af0 <btchip_convert_hex_amount_to_displayable>
                    vars.tmp
                        .feesAmount[textSize +
                                    btchip_context_D.shortCoinIdLength + 1] =
c0d03ef0:	5d79      	ldrb	r1, [r7, r5]
                        (unsigned char *)(vars.tmp.feesAmount +
                                          btchip_context_D.shortCoinIdLength +
                                          1);
                    textSize = btchip_convert_hex_amount_to_displayable(fees);
                    vars.tmp
                        .feesAmount[textSize +
c0d03ef2:	1840      	adds	r0, r0, r1
                        .fullAmount[textSize +
                                    btchip_context_D.shortCoinIdLength + 1] =
                        '\0';

                    // prepare fee display
                    os_memmove(vars.tmp.feesAmount,
c0d03ef4:	1820      	adds	r0, r4, r0
                                          btchip_context_D.shortCoinIdLength +
                                          1);
                    textSize = btchip_convert_hex_amount_to_displayable(fees);
                    vars.tmp
                        .feesAmount[textSize +
                                    btchip_context_D.shortCoinIdLength + 1] =
c0d03ef6:	7046      	strb	r6, [r0, #1]
c0d03ef8:	2501      	movs	r5, #1
c0d03efa:	e783      	b.n	c0d03e04 <prepare_full_output+0x314>
c0d03efc:	20001cdc 	.word	0x20001cdc
c0d03f00:	0000402d 	.word	0x0000402d
c0d03f04:	6f727245 	.word	0x6f727245
c0d03f08:	203a2072 	.word	0x203a2072
c0d03f0c:	6578694d 	.word	0x6578694d
c0d03f10:	6e692064 	.word	0x6e692064
c0d03f14:	73747570 	.word	0x73747570
c0d03f18:	00000000 	.word	0x00000000
c0d03f1c:	20001874 	.word	0x20001874
c0d03f20:	000002cb 	.word	0x000002cb
c0d03f24:	000002d3 	.word	0x000002d3
c0d03f28:	20001c24 	.word	0x20001c24
c0d03f2c:	000002c7 	.word	0x000002c7
c0d03f30:	000002b3 	.word	0x000002b3
c0d03f34:	6f727245 	.word	0x6f727245
c0d03f38:	203a2072 	.word	0x203a2072
c0d03f3c:	746c754d 	.word	0x746c754d
c0d03f40:	656c7069 	.word	0x656c7069
c0d03f44:	61686320 	.word	0x61686320
c0d03f48:	2065676e 	.word	0x2065676e
c0d03f4c:	7074756f 	.word	0x7074756f
c0d03f50:	66207475 	.word	0x66207475
c0d03f54:	646e756f 	.word	0x646e756f
c0d03f58:	00000000 	.word	0x00000000
c0d03f5c:	6f727245 	.word	0x6f727245
c0d03f60:	203a2072 	.word	0x203a2072
c0d03f64:	65726e55 	.word	0x65726e55
c0d03f68:	6e676f63 	.word	0x6e676f63
c0d03f6c:	64657a69 	.word	0x64657a69
c0d03f70:	706e6920 	.word	0x706e6920
c0d03f74:	73207475 	.word	0x73207475
c0d03f78:	70697263 	.word	0x70697263
c0d03f7c:	00000074 	.word	0x00000074
c0d03f80:	6f727245 	.word	0x6f727245
c0d03f84:	203a2072 	.word	0x203a2072
c0d03f88:	6e616863 	.word	0x6e616863
c0d03f8c:	6f206567 	.word	0x6f206567
c0d03f90:	75707475 	.word	0x75707475
c0d03f94:	6f6e2074 	.word	0x6f6e2074
c0d03f98:	6f662074 	.word	0x6f662074
c0d03f9c:	00646e75 	.word	0x00646e75
c0d03fa0:	000002d5 	.word	0x000002d5
c0d03fa4:	20001cdc 	.word	0x20001cdc
c0d03fa8:	00003e9e 	.word	0x00003e9e

c0d03fac <prepare_message_signature>:
error:
    return 0;
}

#define HASH_LENGTH 4
uint8_t prepare_message_signature() {
c0d03fac:	b570      	push	{r4, r5, r6, lr}
c0d03fae:	b084      	sub	sp, #16
    cx_hash(&btchip_context_D.transactionHashAuthorization.header, CX_LAST,
c0d03fb0:	4c0d      	ldr	r4, [pc, #52]	; (c0d03fe8 <prepare_message_signature+0x3c>)
c0d03fb2:	4626      	mov	r6, r4
c0d03fb4:	362b      	adds	r6, #43	; 0x2b
c0d03fb6:	4668      	mov	r0, sp
c0d03fb8:	6006      	str	r6, [r0, #0]
c0d03fba:	480c      	ldr	r0, [pc, #48]	; (c0d03fec <prepare_message_signature+0x40>)
c0d03fbc:	30a8      	adds	r0, #168	; 0xa8
c0d03fbe:	2501      	movs	r5, #1
c0d03fc0:	2300      	movs	r3, #0
c0d03fc2:	4629      	mov	r1, r5
c0d03fc4:	4632      	mov	r2, r6
c0d03fc6:	f7fe ff25 	bl	c0d02e14 <cx_hash_X>
            vars.tmp.fullAmount, 0, vars.tmp.fullAmount);
    snprintf(vars.tmp.fullAddress, sizeof(vars.tmp.fullAddress), "%.*H...%.*H",
c0d03fca:	4620      	mov	r0, r4
c0d03fcc:	3043      	adds	r0, #67	; 0x43
c0d03fce:	4669      	mov	r1, sp
c0d03fd0:	2308      	movs	r3, #8
c0d03fd2:	600e      	str	r6, [r1, #0]
c0d03fd4:	604b      	str	r3, [r1, #4]
c0d03fd6:	6088      	str	r0, [r1, #8]
c0d03fd8:	212b      	movs	r1, #43	; 0x2b
c0d03fda:	a205      	add	r2, pc, #20	; (adr r2, c0d03ff0 <prepare_message_signature+0x44>)
c0d03fdc:	4620      	mov	r0, r4
c0d03fde:	f001 fb7d 	bl	c0d056dc <snprintf>
             8, vars.tmp.fullAmount, 8, vars.tmp.fullAmount + 32 - 8);
    return 1;
c0d03fe2:	4628      	mov	r0, r5
c0d03fe4:	b004      	add	sp, #16
c0d03fe6:	bd70      	pop	{r4, r5, r6, pc}
c0d03fe8:	20001cdc 	.word	0x20001cdc
c0d03fec:	20001874 	.word	0x20001874
c0d03ff0:	482a2e25 	.word	0x482a2e25
c0d03ff4:	252e2e2e 	.word	0x252e2e2e
c0d03ff8:	00482a2e 	.word	0x00482a2e

c0d03ffc <btchip_bagl_confirm_full_output>:
}

unsigned int btchip_bagl_confirm_full_output() {
c0d03ffc:	b570      	push	{r4, r5, r6, lr}
c0d03ffe:	2400      	movs	r4, #0
    if (!prepare_full_output(0)) {
c0d04000:	4620      	mov	r0, r4
c0d04002:	f7ff fd75 	bl	c0d03af0 <prepare_full_output>
c0d04006:	2800      	cmp	r0, #0
c0d04008:	d04a      	beq.n	c0d040a0 <btchip_bagl_confirm_full_output+0xa4>
    }

#if defined(TARGET_BLUE)
    ui_transaction_full_blue_init();
#elif defined(TARGET_NANOS)
    ux_step = 0;
c0d0400a:	4826      	ldr	r0, [pc, #152]	; (c0d040a4 <btchip_bagl_confirm_full_output+0xa8>)
c0d0400c:	2600      	movs	r6, #0
c0d0400e:	6006      	str	r6, [r0, #0]
    ux_step_count = 4;
c0d04010:	4825      	ldr	r0, [pc, #148]	; (c0d040a8 <btchip_bagl_confirm_full_output+0xac>)
c0d04012:	2104      	movs	r1, #4
c0d04014:	6001      	str	r1, [r0, #0]
    UX_DISPLAY(ui_verify_nanos, ui_verify_prepro);
c0d04016:	4d25      	ldr	r5, [pc, #148]	; (c0d040ac <btchip_bagl_confirm_full_output+0xb0>)
c0d04018:	4826      	ldr	r0, [pc, #152]	; (c0d040b4 <btchip_bagl_confirm_full_output+0xb8>)
c0d0401a:	4478      	add	r0, pc
c0d0401c:	6028      	str	r0, [r5, #0]
c0d0401e:	200b      	movs	r0, #11
c0d04020:	6068      	str	r0, [r5, #4]
c0d04022:	4825      	ldr	r0, [pc, #148]	; (c0d040b8 <btchip_bagl_confirm_full_output+0xbc>)
c0d04024:	4478      	add	r0, pc
c0d04026:	6128      	str	r0, [r5, #16]
c0d04028:	4824      	ldr	r0, [pc, #144]	; (c0d040bc <btchip_bagl_confirm_full_output+0xc0>)
c0d0402a:	4478      	add	r0, pc
c0d0402c:	60e8      	str	r0, [r5, #12]
c0d0402e:	2003      	movs	r0, #3
c0d04030:	7628      	strb	r0, [r5, #24]
c0d04032:	61ee      	str	r6, [r5, #28]
c0d04034:	4628      	mov	r0, r5
c0d04036:	3018      	adds	r0, #24
c0d04038:	f002 f824 	bl	c0d06084 <os_ux>
c0d0403c:	61e8      	str	r0, [r5, #28]
c0d0403e:	f001 f9a5 	bl	c0d0538c <ux_check_status_default>
c0d04042:	f000 fccd 	bl	c0d049e0 <io_seproxyhal_init_ux>
c0d04046:	60ae      	str	r6, [r5, #8]
c0d04048:	6828      	ldr	r0, [r5, #0]
c0d0404a:	2401      	movs	r4, #1
c0d0404c:	2800      	cmp	r0, #0
c0d0404e:	d027      	beq.n	c0d040a0 <btchip_bagl_confirm_full_output+0xa4>
c0d04050:	69e8      	ldr	r0, [r5, #28]
c0d04052:	4917      	ldr	r1, [pc, #92]	; (c0d040b0 <btchip_bagl_confirm_full_output+0xb4>)
c0d04054:	4288      	cmp	r0, r1
c0d04056:	d121      	bne.n	c0d0409c <btchip_bagl_confirm_full_output+0xa0>
c0d04058:	e022      	b.n	c0d040a0 <btchip_bagl_confirm_full_output+0xa4>
c0d0405a:	6868      	ldr	r0, [r5, #4]
c0d0405c:	4286      	cmp	r6, r0
c0d0405e:	d21f      	bcs.n	c0d040a0 <btchip_bagl_confirm_full_output+0xa4>
c0d04060:	f002 f852 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d04064:	2800      	cmp	r0, #0
c0d04066:	d11b      	bne.n	c0d040a0 <btchip_bagl_confirm_full_output+0xa4>
c0d04068:	68a8      	ldr	r0, [r5, #8]
c0d0406a:	68e9      	ldr	r1, [r5, #12]
c0d0406c:	2638      	movs	r6, #56	; 0x38
c0d0406e:	4370      	muls	r0, r6
c0d04070:	682a      	ldr	r2, [r5, #0]
c0d04072:	1810      	adds	r0, r2, r0
c0d04074:	2900      	cmp	r1, #0
c0d04076:	d002      	beq.n	c0d0407e <btchip_bagl_confirm_full_output+0x82>
c0d04078:	4788      	blx	r1
c0d0407a:	2800      	cmp	r0, #0
c0d0407c:	d00a      	beq.n	c0d04094 <btchip_bagl_confirm_full_output+0x98>
c0d0407e:	2801      	cmp	r0, #1
c0d04080:	d103      	bne.n	c0d0408a <btchip_bagl_confirm_full_output+0x8e>
c0d04082:	68a8      	ldr	r0, [r5, #8]
c0d04084:	4346      	muls	r6, r0
c0d04086:	6828      	ldr	r0, [r5, #0]
c0d04088:	1980      	adds	r0, r0, r6
}
#endif // #if defined(TARGET_BLUE)

// override point, but nothing more to do
void io_seproxyhal_display(const bagl_element_t *element) {
    if ((element->component.type & (~BAGL_TYPE_FLAGS_MASK)) != BAGL_NONE) {
c0d0408a:	7801      	ldrb	r1, [r0, #0]
c0d0408c:	0649      	lsls	r1, r1, #25
c0d0408e:	d001      	beq.n	c0d04094 <btchip_bagl_confirm_full_output+0x98>
        io_seproxyhal_display_default((bagl_element_t *)element);
c0d04090:	f000 fdec 	bl	c0d04c6c <io_seproxyhal_display_default>
#if defined(TARGET_BLUE)
    ui_transaction_full_blue_init();
#elif defined(TARGET_NANOS)
    ux_step = 0;
    ux_step_count = 4;
    UX_DISPLAY(ui_verify_nanos, ui_verify_prepro);
c0d04094:	68a8      	ldr	r0, [r5, #8]
c0d04096:	1c46      	adds	r6, r0, #1
c0d04098:	60ae      	str	r6, [r5, #8]
c0d0409a:	6828      	ldr	r0, [r5, #0]
c0d0409c:	2800      	cmp	r0, #0
c0d0409e:	d1dc      	bne.n	c0d0405a <btchip_bagl_confirm_full_output+0x5e>
#endif // #if TARGET_ID
    return 1;
}
c0d040a0:	4620      	mov	r0, r4
c0d040a2:	bd70      	pop	{r4, r5, r6, pc}
c0d040a4:	20001c28 	.word	0x20001c28
c0d040a8:	20001d30 	.word	0x20001d30
c0d040ac:	20001c2c 	.word	0x20001c2c
c0d040b0:	b0105044 	.word	0xb0105044
c0d040b4:	00003de6 	.word	0x00003de6
c0d040b8:	fffff129 	.word	0xfffff129
c0d040bc:	ffffef5b 	.word	0xffffef5b

c0d040c0 <btchip_bagl_confirm_single_output>:

unsigned int btchip_bagl_confirm_single_output() {
c0d040c0:	b5b0      	push	{r4, r5, r7, lr}
        ui_transaction_p2sh_blue_init();
        return 1;
    }
#endif

    if (!prepare_single_output()) {
c0d040c2:	f7ff fc2b 	bl	c0d0391c <prepare_single_output>
        return 0;
    }

    snprintf(vars.tmp.feesAmount, sizeof(vars.tmp.feesAmount), "output #%d",
             btchip_context_D.totalOutputs - btchip_context_D.remainingOutputs +
c0d040c6:	2073      	movs	r0, #115	; 0x73
c0d040c8:	00c0      	lsls	r0, r0, #3
c0d040ca:	492c      	ldr	r1, [pc, #176]	; (c0d0417c <btchip_bagl_confirm_single_output+0xbc>)
c0d040cc:	5808      	ldr	r0, [r1, r0]
c0d040ce:	22e7      	movs	r2, #231	; 0xe7
c0d040d0:	0092      	lsls	r2, r2, #2
c0d040d2:	5889      	ldr	r1, [r1, r2]
c0d040d4:	1c49      	adds	r1, r1, #1
c0d040d6:	1a0b      	subs	r3, r1, r0

    if (!prepare_single_output()) {
        return 0;
    }

    snprintf(vars.tmp.feesAmount, sizeof(vars.tmp.feesAmount), "output #%d",
c0d040d8:	4829      	ldr	r0, [pc, #164]	; (c0d04180 <btchip_bagl_confirm_single_output+0xc0>)
c0d040da:	303f      	adds	r0, #63	; 0x3f
c0d040dc:	2114      	movs	r1, #20
c0d040de:	a229      	add	r2, pc, #164	; (adr r2, c0d04184 <btchip_bagl_confirm_single_output+0xc4>)
c0d040e0:	f001 fafc 	bl	c0d056dc <snprintf>
                 1);

#if defined(TARGET_BLUE)
    ui_transaction_output_blue_init();
#elif defined(TARGET_NANOS)
    ux_step = 0;
c0d040e4:	482a      	ldr	r0, [pc, #168]	; (c0d04190 <btchip_bagl_confirm_single_output+0xd0>)
c0d040e6:	2500      	movs	r5, #0
c0d040e8:	6005      	str	r5, [r0, #0]
    ux_step_count = 3;
c0d040ea:	482a      	ldr	r0, [pc, #168]	; (c0d04194 <btchip_bagl_confirm_single_output+0xd4>)
c0d040ec:	2103      	movs	r1, #3
c0d040ee:	6001      	str	r1, [r0, #0]
    UX_DISPLAY(ui_verify_output_nanos, ui_verify_output_prepro);
c0d040f0:	4c29      	ldr	r4, [pc, #164]	; (c0d04198 <btchip_bagl_confirm_single_output+0xd8>)
c0d040f2:	482b      	ldr	r0, [pc, #172]	; (c0d041a0 <btchip_bagl_confirm_single_output+0xe0>)
c0d040f4:	4478      	add	r0, pc
c0d040f6:	6020      	str	r0, [r4, #0]
c0d040f8:	2009      	movs	r0, #9
c0d040fa:	6060      	str	r0, [r4, #4]
c0d040fc:	4829      	ldr	r0, [pc, #164]	; (c0d041a4 <btchip_bagl_confirm_single_output+0xe4>)
c0d040fe:	4478      	add	r0, pc
c0d04100:	6120      	str	r0, [r4, #16]
c0d04102:	4829      	ldr	r0, [pc, #164]	; (c0d041a8 <btchip_bagl_confirm_single_output+0xe8>)
c0d04104:	4478      	add	r0, pc
c0d04106:	60e0      	str	r0, [r4, #12]
c0d04108:	7621      	strb	r1, [r4, #24]
c0d0410a:	61e5      	str	r5, [r4, #28]
c0d0410c:	4620      	mov	r0, r4
c0d0410e:	3018      	adds	r0, #24
c0d04110:	f001 ffb8 	bl	c0d06084 <os_ux>
c0d04114:	61e0      	str	r0, [r4, #28]
c0d04116:	f001 f939 	bl	c0d0538c <ux_check_status_default>
c0d0411a:	f000 fc61 	bl	c0d049e0 <io_seproxyhal_init_ux>
c0d0411e:	60a5      	str	r5, [r4, #8]
c0d04120:	6820      	ldr	r0, [r4, #0]
c0d04122:	2800      	cmp	r0, #0
c0d04124:	d027      	beq.n	c0d04176 <btchip_bagl_confirm_single_output+0xb6>
c0d04126:	69e0      	ldr	r0, [r4, #28]
c0d04128:	491c      	ldr	r1, [pc, #112]	; (c0d0419c <btchip_bagl_confirm_single_output+0xdc>)
c0d0412a:	4288      	cmp	r0, r1
c0d0412c:	d121      	bne.n	c0d04172 <btchip_bagl_confirm_single_output+0xb2>
c0d0412e:	e022      	b.n	c0d04176 <btchip_bagl_confirm_single_output+0xb6>
c0d04130:	6860      	ldr	r0, [r4, #4]
c0d04132:	4285      	cmp	r5, r0
c0d04134:	d21f      	bcs.n	c0d04176 <btchip_bagl_confirm_single_output+0xb6>
c0d04136:	f001 ffe7 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d0413a:	2800      	cmp	r0, #0
c0d0413c:	d11b      	bne.n	c0d04176 <btchip_bagl_confirm_single_output+0xb6>
c0d0413e:	68a0      	ldr	r0, [r4, #8]
c0d04140:	68e1      	ldr	r1, [r4, #12]
c0d04142:	2538      	movs	r5, #56	; 0x38
c0d04144:	4368      	muls	r0, r5
c0d04146:	6822      	ldr	r2, [r4, #0]
c0d04148:	1810      	adds	r0, r2, r0
c0d0414a:	2900      	cmp	r1, #0
c0d0414c:	d002      	beq.n	c0d04154 <btchip_bagl_confirm_single_output+0x94>
c0d0414e:	4788      	blx	r1
c0d04150:	2800      	cmp	r0, #0
c0d04152:	d00a      	beq.n	c0d0416a <btchip_bagl_confirm_single_output+0xaa>
c0d04154:	2801      	cmp	r0, #1
c0d04156:	d103      	bne.n	c0d04160 <btchip_bagl_confirm_single_output+0xa0>
c0d04158:	68a0      	ldr	r0, [r4, #8]
c0d0415a:	4345      	muls	r5, r0
c0d0415c:	6820      	ldr	r0, [r4, #0]
c0d0415e:	1940      	adds	r0, r0, r5
}
#endif // #if defined(TARGET_BLUE)

// override point, but nothing more to do
void io_seproxyhal_display(const bagl_element_t *element) {
    if ((element->component.type & (~BAGL_TYPE_FLAGS_MASK)) != BAGL_NONE) {
c0d04160:	7801      	ldrb	r1, [r0, #0]
c0d04162:	0649      	lsls	r1, r1, #25
c0d04164:	d001      	beq.n	c0d0416a <btchip_bagl_confirm_single_output+0xaa>
        io_seproxyhal_display_default((bagl_element_t *)element);
c0d04166:	f000 fd81 	bl	c0d04c6c <io_seproxyhal_display_default>
#if defined(TARGET_BLUE)
    ui_transaction_output_blue_init();
#elif defined(TARGET_NANOS)
    ux_step = 0;
    ux_step_count = 3;
    UX_DISPLAY(ui_verify_output_nanos, ui_verify_output_prepro);
c0d0416a:	68a0      	ldr	r0, [r4, #8]
c0d0416c:	1c45      	adds	r5, r0, #1
c0d0416e:	60a5      	str	r5, [r4, #8]
c0d04170:	6820      	ldr	r0, [r4, #0]
c0d04172:	2800      	cmp	r0, #0
c0d04174:	d1dc      	bne.n	c0d04130 <btchip_bagl_confirm_single_output+0x70>
#endif // #if TARGET_ID
    return 1;
}
c0d04176:	2001      	movs	r0, #1
c0d04178:	bdb0      	pop	{r4, r5, r7, pc}
c0d0417a:	46c0      	nop			; (mov r8, r8)
c0d0417c:	20001874 	.word	0x20001874
c0d04180:	20001cdc 	.word	0x20001cdc
c0d04184:	7074756f 	.word	0x7074756f
c0d04188:	23207475 	.word	0x23207475
c0d0418c:	00006425 	.word	0x00006425
c0d04190:	20001c28 	.word	0x20001c28
c0d04194:	20001d30 	.word	0x20001d30
c0d04198:	20001c2c 	.word	0x20001c2c
c0d0419c:	b0105044 	.word	0xb0105044
c0d041a0:	00003f74 	.word	0x00003f74
c0d041a4:	fffff073 	.word	0xfffff073
c0d041a8:	ffffeee1 	.word	0xffffeee1

c0d041ac <btchip_bagl_finalize_tx>:

unsigned int btchip_bagl_finalize_tx() {
c0d041ac:	b570      	push	{r4, r5, r6, lr}
    if (!prepare_fees()) {
c0d041ae:	f7ff fb6d 	bl	c0d0388c <prepare_fees>
c0d041b2:	2400      	movs	r4, #0
c0d041b4:	2800      	cmp	r0, #0
c0d041b6:	d04a      	beq.n	c0d0424e <btchip_bagl_finalize_tx+0xa2>
    }

#if defined(TARGET_BLUE)
    ui_transaction_finalize_blue_init();
#elif defined(TARGET_NANOS)
    ux_step = 0;
c0d041b8:	4826      	ldr	r0, [pc, #152]	; (c0d04254 <btchip_bagl_finalize_tx+0xa8>)
c0d041ba:	2600      	movs	r6, #0
c0d041bc:	6006      	str	r6, [r0, #0]
    ux_step_count = 2;
c0d041be:	4826      	ldr	r0, [pc, #152]	; (c0d04258 <btchip_bagl_finalize_tx+0xac>)
c0d041c0:	2102      	movs	r1, #2
c0d041c2:	6001      	str	r1, [r0, #0]
    UX_DISPLAY(ui_finalize_nanos, ui_finalize_prepro);
c0d041c4:	4d25      	ldr	r5, [pc, #148]	; (c0d0425c <btchip_bagl_finalize_tx+0xb0>)
c0d041c6:	4827      	ldr	r0, [pc, #156]	; (c0d04264 <btchip_bagl_finalize_tx+0xb8>)
c0d041c8:	4478      	add	r0, pc
c0d041ca:	6028      	str	r0, [r5, #0]
c0d041cc:	2007      	movs	r0, #7
c0d041ce:	6068      	str	r0, [r5, #4]
c0d041d0:	4825      	ldr	r0, [pc, #148]	; (c0d04268 <btchip_bagl_finalize_tx+0xbc>)
c0d041d2:	4478      	add	r0, pc
c0d041d4:	6128      	str	r0, [r5, #16]
c0d041d6:	4825      	ldr	r0, [pc, #148]	; (c0d0426c <btchip_bagl_finalize_tx+0xc0>)
c0d041d8:	4478      	add	r0, pc
c0d041da:	60e8      	str	r0, [r5, #12]
c0d041dc:	2003      	movs	r0, #3
c0d041de:	7628      	strb	r0, [r5, #24]
c0d041e0:	61ee      	str	r6, [r5, #28]
c0d041e2:	4628      	mov	r0, r5
c0d041e4:	3018      	adds	r0, #24
c0d041e6:	f001 ff4d 	bl	c0d06084 <os_ux>
c0d041ea:	61e8      	str	r0, [r5, #28]
c0d041ec:	f001 f8ce 	bl	c0d0538c <ux_check_status_default>
c0d041f0:	f000 fbf6 	bl	c0d049e0 <io_seproxyhal_init_ux>
c0d041f4:	60ae      	str	r6, [r5, #8]
c0d041f6:	6828      	ldr	r0, [r5, #0]
c0d041f8:	2401      	movs	r4, #1
c0d041fa:	2800      	cmp	r0, #0
c0d041fc:	d027      	beq.n	c0d0424e <btchip_bagl_finalize_tx+0xa2>
c0d041fe:	69e8      	ldr	r0, [r5, #28]
c0d04200:	4917      	ldr	r1, [pc, #92]	; (c0d04260 <btchip_bagl_finalize_tx+0xb4>)
c0d04202:	4288      	cmp	r0, r1
c0d04204:	d121      	bne.n	c0d0424a <btchip_bagl_finalize_tx+0x9e>
c0d04206:	e022      	b.n	c0d0424e <btchip_bagl_finalize_tx+0xa2>
c0d04208:	6868      	ldr	r0, [r5, #4]
c0d0420a:	4286      	cmp	r6, r0
c0d0420c:	d21f      	bcs.n	c0d0424e <btchip_bagl_finalize_tx+0xa2>
c0d0420e:	f001 ff7b 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d04212:	2800      	cmp	r0, #0
c0d04214:	d11b      	bne.n	c0d0424e <btchip_bagl_finalize_tx+0xa2>
c0d04216:	68a8      	ldr	r0, [r5, #8]
c0d04218:	68e9      	ldr	r1, [r5, #12]
c0d0421a:	2638      	movs	r6, #56	; 0x38
c0d0421c:	4370      	muls	r0, r6
c0d0421e:	682a      	ldr	r2, [r5, #0]
c0d04220:	1810      	adds	r0, r2, r0
c0d04222:	2900      	cmp	r1, #0
c0d04224:	d002      	beq.n	c0d0422c <btchip_bagl_finalize_tx+0x80>
c0d04226:	4788      	blx	r1
c0d04228:	2800      	cmp	r0, #0
c0d0422a:	d00a      	beq.n	c0d04242 <btchip_bagl_finalize_tx+0x96>
c0d0422c:	2801      	cmp	r0, #1
c0d0422e:	d103      	bne.n	c0d04238 <btchip_bagl_finalize_tx+0x8c>
c0d04230:	68a8      	ldr	r0, [r5, #8]
c0d04232:	4346      	muls	r6, r0
c0d04234:	6828      	ldr	r0, [r5, #0]
c0d04236:	1980      	adds	r0, r0, r6
}
#endif // #if defined(TARGET_BLUE)

// override point, but nothing more to do
void io_seproxyhal_display(const bagl_element_t *element) {
    if ((element->component.type & (~BAGL_TYPE_FLAGS_MASK)) != BAGL_NONE) {
c0d04238:	7801      	ldrb	r1, [r0, #0]
c0d0423a:	0649      	lsls	r1, r1, #25
c0d0423c:	d001      	beq.n	c0d04242 <btchip_bagl_finalize_tx+0x96>
        io_seproxyhal_display_default((bagl_element_t *)element);
c0d0423e:	f000 fd15 	bl	c0d04c6c <io_seproxyhal_display_default>
#if defined(TARGET_BLUE)
    ui_transaction_finalize_blue_init();
#elif defined(TARGET_NANOS)
    ux_step = 0;
    ux_step_count = 2;
    UX_DISPLAY(ui_finalize_nanos, ui_finalize_prepro);
c0d04242:	68a8      	ldr	r0, [r5, #8]
c0d04244:	1c46      	adds	r6, r0, #1
c0d04246:	60ae      	str	r6, [r5, #8]
c0d04248:	6828      	ldr	r0, [r5, #0]
c0d0424a:	2800      	cmp	r0, #0
c0d0424c:	d1dc      	bne.n	c0d04208 <btchip_bagl_finalize_tx+0x5c>
#endif // #if TARGET_ID
    return 1;
}
c0d0424e:	4620      	mov	r0, r4
c0d04250:	bd70      	pop	{r4, r5, r6, pc}
c0d04252:	46c0      	nop			; (mov r8, r8)
c0d04254:	20001c28 	.word	0x20001c28
c0d04258:	20001d30 	.word	0x20001d30
c0d0425c:	20001c2c 	.word	0x20001c2c
c0d04260:	b0105044 	.word	0xb0105044
c0d04264:	00004098 	.word	0x00004098
c0d04268:	ffffefc3 	.word	0xffffefc3
c0d0426c:	ffffee6d 	.word	0xffffee6d

c0d04270 <btchip_bagl_confirm_message_signature>:

void btchip_bagl_confirm_message_signature() {
c0d04270:	b5b0      	push	{r4, r5, r7, lr}
    if (!prepare_message_signature()) {
c0d04272:	f7ff fe9b 	bl	c0d03fac <prepare_message_signature>
    }

#if defined(TARGET_BLUE)
    ui_message_signature_blue_init();
#elif defined(TARGET_NANOS)
    ux_step = 0;
c0d04276:	4825      	ldr	r0, [pc, #148]	; (c0d0430c <btchip_bagl_confirm_message_signature+0x9c>)
c0d04278:	2500      	movs	r5, #0
c0d0427a:	6005      	str	r5, [r0, #0]
    ux_step_count = 2;
c0d0427c:	4824      	ldr	r0, [pc, #144]	; (c0d04310 <btchip_bagl_confirm_message_signature+0xa0>)
c0d0427e:	2102      	movs	r1, #2
c0d04280:	6001      	str	r1, [r0, #0]
    UX_DISPLAY(ui_verify_message_signature_nanos, ui_verify_message_prepro);
c0d04282:	4c24      	ldr	r4, [pc, #144]	; (c0d04314 <btchip_bagl_confirm_message_signature+0xa4>)
c0d04284:	4825      	ldr	r0, [pc, #148]	; (c0d0431c <btchip_bagl_confirm_message_signature+0xac>)
c0d04286:	4478      	add	r0, pc
c0d04288:	6020      	str	r0, [r4, #0]
c0d0428a:	2007      	movs	r0, #7
c0d0428c:	6060      	str	r0, [r4, #4]
c0d0428e:	4824      	ldr	r0, [pc, #144]	; (c0d04320 <btchip_bagl_confirm_message_signature+0xb0>)
c0d04290:	4478      	add	r0, pc
c0d04292:	6120      	str	r0, [r4, #16]
c0d04294:	4823      	ldr	r0, [pc, #140]	; (c0d04324 <btchip_bagl_confirm_message_signature+0xb4>)
c0d04296:	4478      	add	r0, pc
c0d04298:	60e0      	str	r0, [r4, #12]
c0d0429a:	2003      	movs	r0, #3
c0d0429c:	7620      	strb	r0, [r4, #24]
c0d0429e:	61e5      	str	r5, [r4, #28]
c0d042a0:	4620      	mov	r0, r4
c0d042a2:	3018      	adds	r0, #24
c0d042a4:	f001 feee 	bl	c0d06084 <os_ux>
c0d042a8:	61e0      	str	r0, [r4, #28]
c0d042aa:	f001 f86f 	bl	c0d0538c <ux_check_status_default>
c0d042ae:	f000 fb97 	bl	c0d049e0 <io_seproxyhal_init_ux>
c0d042b2:	60a5      	str	r5, [r4, #8]
c0d042b4:	6820      	ldr	r0, [r4, #0]
c0d042b6:	2800      	cmp	r0, #0
c0d042b8:	d027      	beq.n	c0d0430a <btchip_bagl_confirm_message_signature+0x9a>
c0d042ba:	69e0      	ldr	r0, [r4, #28]
c0d042bc:	4916      	ldr	r1, [pc, #88]	; (c0d04318 <btchip_bagl_confirm_message_signature+0xa8>)
c0d042be:	4288      	cmp	r0, r1
c0d042c0:	d121      	bne.n	c0d04306 <btchip_bagl_confirm_message_signature+0x96>
c0d042c2:	e022      	b.n	c0d0430a <btchip_bagl_confirm_message_signature+0x9a>
c0d042c4:	6860      	ldr	r0, [r4, #4]
c0d042c6:	4285      	cmp	r5, r0
c0d042c8:	d21f      	bcs.n	c0d0430a <btchip_bagl_confirm_message_signature+0x9a>
c0d042ca:	f001 ff1d 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d042ce:	2800      	cmp	r0, #0
c0d042d0:	d11b      	bne.n	c0d0430a <btchip_bagl_confirm_message_signature+0x9a>
c0d042d2:	68a0      	ldr	r0, [r4, #8]
c0d042d4:	68e1      	ldr	r1, [r4, #12]
c0d042d6:	2538      	movs	r5, #56	; 0x38
c0d042d8:	4368      	muls	r0, r5
c0d042da:	6822      	ldr	r2, [r4, #0]
c0d042dc:	1810      	adds	r0, r2, r0
c0d042de:	2900      	cmp	r1, #0
c0d042e0:	d002      	beq.n	c0d042e8 <btchip_bagl_confirm_message_signature+0x78>
c0d042e2:	4788      	blx	r1
c0d042e4:	2800      	cmp	r0, #0
c0d042e6:	d00a      	beq.n	c0d042fe <btchip_bagl_confirm_message_signature+0x8e>
c0d042e8:	2801      	cmp	r0, #1
c0d042ea:	d103      	bne.n	c0d042f4 <btchip_bagl_confirm_message_signature+0x84>
c0d042ec:	68a0      	ldr	r0, [r4, #8]
c0d042ee:	4345      	muls	r5, r0
c0d042f0:	6820      	ldr	r0, [r4, #0]
c0d042f2:	1940      	adds	r0, r0, r5
}
#endif // #if defined(TARGET_BLUE)

// override point, but nothing more to do
void io_seproxyhal_display(const bagl_element_t *element) {
    if ((element->component.type & (~BAGL_TYPE_FLAGS_MASK)) != BAGL_NONE) {
c0d042f4:	7801      	ldrb	r1, [r0, #0]
c0d042f6:	0649      	lsls	r1, r1, #25
c0d042f8:	d001      	beq.n	c0d042fe <btchip_bagl_confirm_message_signature+0x8e>
        io_seproxyhal_display_default((bagl_element_t *)element);
c0d042fa:	f000 fcb7 	bl	c0d04c6c <io_seproxyhal_display_default>
#if defined(TARGET_BLUE)
    ui_message_signature_blue_init();
#elif defined(TARGET_NANOS)
    ux_step = 0;
    ux_step_count = 2;
    UX_DISPLAY(ui_verify_message_signature_nanos, ui_verify_message_prepro);
c0d042fe:	68a0      	ldr	r0, [r4, #8]
c0d04300:	1c45      	adds	r5, r0, #1
c0d04302:	60a5      	str	r5, [r4, #8]
c0d04304:	6820      	ldr	r0, [r4, #0]
c0d04306:	2800      	cmp	r0, #0
c0d04308:	d1dc      	bne.n	c0d042c4 <btchip_bagl_confirm_message_signature+0x54>
#endif // #if TARGET_ID
}
c0d0430a:	bdb0      	pop	{r4, r5, r7, pc}
c0d0430c:	20001c28 	.word	0x20001c28
c0d04310:	20001d30 	.word	0x20001d30
c0d04314:	20001c2c 	.word	0x20001c2c
c0d04318:	b0105044 	.word	0xb0105044
c0d0431c:	00004162 	.word	0x00004162
c0d04320:	ffffef29 	.word	0xffffef29
c0d04324:	ffffee0b 	.word	0xffffee0b

c0d04328 <btchip_bagl_display_public_key>:

unsigned int btchip_bagl_display_public_key() {
c0d04328:	b570      	push	{r4, r5, r6, lr}
    // setup qrcode of the address in the apdu buffer
    strcat(G_io_apdu_buffer + 200, " ");
c0d0432a:	4e2c      	ldr	r6, [pc, #176]	; (c0d043dc <btchip_bagl_display_public_key+0xb4>)
c0d0432c:	4634      	mov	r4, r6
c0d0432e:	34c8      	adds	r4, #200	; 0xc8
c0d04330:	4620      	mov	r0, r4
c0d04332:	f003 fae1 	bl	c0d078f8 <strlen>
c0d04336:	2120      	movs	r1, #32
c0d04338:	5421      	strb	r1, [r4, r0]
c0d0433a:	1820      	adds	r0, r4, r0
c0d0433c:	2500      	movs	r5, #0
c0d0433e:	7045      	strb	r5, [r0, #1]
    }

    UX_DISPLAY(ui_display_address_blue, ui_display_address_blue_prepro);
#elif defined(TARGET_NANOS)
    // append and prepend a white space to the address
    G_io_apdu_buffer[199] = ' ';
c0d04340:	20c7      	movs	r0, #199	; 0xc7
c0d04342:	5431      	strb	r1, [r6, r0]
    ux_step = 0;
c0d04344:	4826      	ldr	r0, [pc, #152]	; (c0d043e0 <btchip_bagl_display_public_key+0xb8>)
c0d04346:	6005      	str	r5, [r0, #0]
    ux_step_count = 2;
c0d04348:	4826      	ldr	r0, [pc, #152]	; (c0d043e4 <btchip_bagl_display_public_key+0xbc>)
c0d0434a:	2102      	movs	r1, #2
c0d0434c:	6001      	str	r1, [r0, #0]
    UX_DISPLAY(ui_display_address_nanos, ui_display_address_nanos_prepro);
c0d0434e:	4c26      	ldr	r4, [pc, #152]	; (c0d043e8 <btchip_bagl_display_public_key+0xc0>)
c0d04350:	4827      	ldr	r0, [pc, #156]	; (c0d043f0 <btchip_bagl_display_public_key+0xc8>)
c0d04352:	4478      	add	r0, pc
c0d04354:	6020      	str	r0, [r4, #0]
c0d04356:	2007      	movs	r0, #7
c0d04358:	6060      	str	r0, [r4, #4]
c0d0435a:	4826      	ldr	r0, [pc, #152]	; (c0d043f4 <btchip_bagl_display_public_key+0xcc>)
c0d0435c:	4478      	add	r0, pc
c0d0435e:	6120      	str	r0, [r4, #16]
c0d04360:	4825      	ldr	r0, [pc, #148]	; (c0d043f8 <btchip_bagl_display_public_key+0xd0>)
c0d04362:	4478      	add	r0, pc
c0d04364:	60e0      	str	r0, [r4, #12]
c0d04366:	2003      	movs	r0, #3
c0d04368:	7620      	strb	r0, [r4, #24]
c0d0436a:	61e5      	str	r5, [r4, #28]
c0d0436c:	4620      	mov	r0, r4
c0d0436e:	3018      	adds	r0, #24
c0d04370:	f001 fe88 	bl	c0d06084 <os_ux>
c0d04374:	61e0      	str	r0, [r4, #28]
c0d04376:	f001 f809 	bl	c0d0538c <ux_check_status_default>
c0d0437a:	f000 fb31 	bl	c0d049e0 <io_seproxyhal_init_ux>
c0d0437e:	60a5      	str	r5, [r4, #8]
c0d04380:	6820      	ldr	r0, [r4, #0]
c0d04382:	2800      	cmp	r0, #0
c0d04384:	d027      	beq.n	c0d043d6 <btchip_bagl_display_public_key+0xae>
c0d04386:	69e0      	ldr	r0, [r4, #28]
c0d04388:	4918      	ldr	r1, [pc, #96]	; (c0d043ec <btchip_bagl_display_public_key+0xc4>)
c0d0438a:	4288      	cmp	r0, r1
c0d0438c:	d121      	bne.n	c0d043d2 <btchip_bagl_display_public_key+0xaa>
c0d0438e:	e022      	b.n	c0d043d6 <btchip_bagl_display_public_key+0xae>
c0d04390:	6860      	ldr	r0, [r4, #4]
c0d04392:	4285      	cmp	r5, r0
c0d04394:	d21f      	bcs.n	c0d043d6 <btchip_bagl_display_public_key+0xae>
c0d04396:	f001 feb7 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d0439a:	2800      	cmp	r0, #0
c0d0439c:	d11b      	bne.n	c0d043d6 <btchip_bagl_display_public_key+0xae>
c0d0439e:	68a0      	ldr	r0, [r4, #8]
c0d043a0:	68e1      	ldr	r1, [r4, #12]
c0d043a2:	2538      	movs	r5, #56	; 0x38
c0d043a4:	4368      	muls	r0, r5
c0d043a6:	6822      	ldr	r2, [r4, #0]
c0d043a8:	1810      	adds	r0, r2, r0
c0d043aa:	2900      	cmp	r1, #0
c0d043ac:	d002      	beq.n	c0d043b4 <btchip_bagl_display_public_key+0x8c>
c0d043ae:	4788      	blx	r1
c0d043b0:	2800      	cmp	r0, #0
c0d043b2:	d00a      	beq.n	c0d043ca <btchip_bagl_display_public_key+0xa2>
c0d043b4:	2801      	cmp	r0, #1
c0d043b6:	d103      	bne.n	c0d043c0 <btchip_bagl_display_public_key+0x98>
c0d043b8:	68a0      	ldr	r0, [r4, #8]
c0d043ba:	4345      	muls	r5, r0
c0d043bc:	6820      	ldr	r0, [r4, #0]
c0d043be:	1940      	adds	r0, r0, r5
}
#endif // #if defined(TARGET_BLUE)

// override point, but nothing more to do
void io_seproxyhal_display(const bagl_element_t *element) {
    if ((element->component.type & (~BAGL_TYPE_FLAGS_MASK)) != BAGL_NONE) {
c0d043c0:	7801      	ldrb	r1, [r0, #0]
c0d043c2:	0649      	lsls	r1, r1, #25
c0d043c4:	d001      	beq.n	c0d043ca <btchip_bagl_display_public_key+0xa2>
        io_seproxyhal_display_default((bagl_element_t *)element);
c0d043c6:	f000 fc51 	bl	c0d04c6c <io_seproxyhal_display_default>
#elif defined(TARGET_NANOS)
    // append and prepend a white space to the address
    G_io_apdu_buffer[199] = ' ';
    ux_step = 0;
    ux_step_count = 2;
    UX_DISPLAY(ui_display_address_nanos, ui_display_address_nanos_prepro);
c0d043ca:	68a0      	ldr	r0, [r4, #8]
c0d043cc:	1c45      	adds	r5, r0, #1
c0d043ce:	60a5      	str	r5, [r4, #8]
c0d043d0:	6820      	ldr	r0, [r4, #0]
c0d043d2:	2800      	cmp	r0, #0
c0d043d4:	d1dc      	bne.n	c0d04390 <btchip_bagl_display_public_key+0x68>
#endif // #if TARGET_ID
    return 1;
c0d043d6:	2001      	movs	r0, #1
c0d043d8:	bd70      	pop	{r4, r5, r6, pc}
c0d043da:	46c0      	nop			; (mov r8, r8)
c0d043dc:	20001e6c 	.word	0x20001e6c
c0d043e0:	20001c28 	.word	0x20001c28
c0d043e4:	20001d30 	.word	0x20001d30
c0d043e8:	20001c2c 	.word	0x20001c2c
c0d043ec:	b0105044 	.word	0xb0105044
c0d043f0:	00003926 	.word	0x00003926
c0d043f4:	ffffeeb1 	.word	0xffffeeb1
c0d043f8:	ffffebc7 	.word	0xffffebc7

c0d043fc <app_exit>:
}

void app_exit(void) {
c0d043fc:	b510      	push	{r4, lr}
c0d043fe:	b08c      	sub	sp, #48	; 0x30
c0d04400:	ac01      	add	r4, sp, #4
    BEGIN_TRY_L(exit) {
        TRY_L(exit) {
c0d04402:	4620      	mov	r0, r4
c0d04404:	f003 fa56 	bl	c0d078b4 <setjmp>
c0d04408:	8520      	strh	r0, [r4, #40]	; 0x28
c0d0440a:	490d      	ldr	r1, [pc, #52]	; (c0d04440 <app_exit+0x44>)
c0d0440c:	4208      	tst	r0, r1
c0d0440e:	d106      	bne.n	c0d0441e <app_exit+0x22>
c0d04410:	a801      	add	r0, sp, #4
c0d04412:	f000 f81a 	bl	c0d0444a <try_context_set>
            os_sched_exit(-1);
c0d04416:	2000      	movs	r0, #0
c0d04418:	43c0      	mvns	r0, r0
c0d0441a:	f001 fe1d 	bl	c0d06058 <os_sched_exit>
        }
        FINALLY_L(exit) {
c0d0441e:	f000 f981 	bl	c0d04724 <try_context_get>
c0d04422:	a901      	add	r1, sp, #4
c0d04424:	4288      	cmp	r0, r1
c0d04426:	d103      	bne.n	c0d04430 <app_exit+0x34>
c0d04428:	f000 f97e 	bl	c0d04728 <try_context_get_previous>
c0d0442c:	f000 f80d 	bl	c0d0444a <try_context_set>
c0d04430:	a801      	add	r0, sp, #4
        }
    }
    END_TRY_L(exit);
c0d04432:	8d00      	ldrh	r0, [r0, #40]	; 0x28
c0d04434:	2800      	cmp	r0, #0
c0d04436:	d101      	bne.n	c0d0443c <app_exit+0x40>
}
c0d04438:	b00c      	add	sp, #48	; 0x30
c0d0443a:	bd10      	pop	{r4, pc}
            os_sched_exit(-1);
        }
        FINALLY_L(exit) {
        }
    }
    END_TRY_L(exit);
c0d0443c:	f000 f96d 	bl	c0d0471a <os_longjmp>
c0d04440:	0000ffff 	.word	0x0000ffff

c0d04444 <os_boot>:
  //                ^ platform register
  return (try_context_t*) current_ctx->jmp_buf[5];
}

void try_context_set(try_context_t* ctx) {
  __asm volatile ("mov r9, %0"::"r"(ctx));
c0d04444:	2000      	movs	r0, #0
c0d04446:	4681      	mov	r9, r0
void os_boot(void) {
  // TODO patch entry point when romming (f)

  // set the default try context to nothing
  try_context_set(NULL);
}
c0d04448:	4770      	bx	lr

c0d0444a <try_context_set>:
  //                ^ platform register
  return (try_context_t*) current_ctx->jmp_buf[5];
}

void try_context_set(try_context_t* ctx) {
  __asm volatile ("mov r9, %0"::"r"(ctx));
c0d0444a:	4681      	mov	r9, r0
}
c0d0444c:	4770      	bx	lr
	...

c0d04450 <io_usb_hid_receive>:
volatile unsigned int   G_io_usb_hid_channel;
volatile unsigned int   G_io_usb_hid_remaining_length;
volatile unsigned int   G_io_usb_hid_sequence_number;
volatile unsigned char* G_io_usb_hid_current_buffer;

io_usb_hid_receive_status_t io_usb_hid_receive (io_send_t sndfct, unsigned char* buffer, unsigned short l) {
c0d04450:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d04452:	b081      	sub	sp, #4
c0d04454:	9200      	str	r2, [sp, #0]
c0d04456:	460f      	mov	r7, r1
c0d04458:	4605      	mov	r5, r0
  // avoid over/under flows
  if (buffer != G_io_usb_ep_buffer) {
c0d0445a:	4b48      	ldr	r3, [pc, #288]	; (c0d0457c <io_usb_hid_receive+0x12c>)
c0d0445c:	429f      	cmp	r7, r3
c0d0445e:	d00f      	beq.n	c0d04480 <io_usb_hid_receive+0x30>
}

void os_memset(void * dst, unsigned char c, unsigned int length) {
#define DSTCHAR ((unsigned char *)dst)
  while(length--) {
    DSTCHAR[length] = c;
c0d04460:	4c46      	ldr	r4, [pc, #280]	; (c0d0457c <io_usb_hid_receive+0x12c>)
c0d04462:	2640      	movs	r6, #64	; 0x40
c0d04464:	4620      	mov	r0, r4
c0d04466:	4631      	mov	r1, r6
c0d04468:	f003 f98e 	bl	c0d07788 <__aeabi_memclr>
c0d0446c:	9800      	ldr	r0, [sp, #0]

io_usb_hid_receive_status_t io_usb_hid_receive (io_send_t sndfct, unsigned char* buffer, unsigned short l) {
  // avoid over/under flows
  if (buffer != G_io_usb_ep_buffer) {
    os_memset(G_io_usb_ep_buffer, 0, sizeof(G_io_usb_ep_buffer));
    os_memmove(G_io_usb_ep_buffer, buffer, MIN(l, sizeof(G_io_usb_ep_buffer)));
c0d0446e:	2840      	cmp	r0, #64	; 0x40
c0d04470:	4602      	mov	r2, r0
c0d04472:	d300      	bcc.n	c0d04476 <io_usb_hid_receive+0x26>
c0d04474:	4632      	mov	r2, r6
c0d04476:	4620      	mov	r0, r4
c0d04478:	4639      	mov	r1, r7
c0d0447a:	f000 f89a 	bl	c0d045b2 <os_memmove>
c0d0447e:	4b3f      	ldr	r3, [pc, #252]	; (c0d0457c <io_usb_hid_receive+0x12c>)
c0d04480:	7898      	ldrb	r0, [r3, #2]
  }

  // process the chunk content
  switch(G_io_usb_ep_buffer[2]) {
c0d04482:	2801      	cmp	r0, #1
c0d04484:	dc0b      	bgt.n	c0d0449e <io_usb_hid_receive+0x4e>
c0d04486:	2800      	cmp	r0, #0
c0d04488:	d02b      	beq.n	c0d044e2 <io_usb_hid_receive+0x92>
c0d0448a:	2801      	cmp	r0, #1
c0d0448c:	d169      	bne.n	c0d04562 <io_usb_hid_receive+0x112>
    // await for the next chunk
    goto apdu_reset;

  case 0x01: // ALLOCATE CHANNEL
    // do not reset the current apdu reception if any
    cx_rng(G_io_usb_ep_buffer+3, 4);
c0d0448e:	1cd8      	adds	r0, r3, #3
c0d04490:	2104      	movs	r1, #4
c0d04492:	461c      	mov	r4, r3
c0d04494:	f001 fcc8 	bl	c0d05e28 <cx_rng>
    // send the response
    sndfct(G_io_usb_ep_buffer, IO_HID_EP_LENGTH);
c0d04498:	2140      	movs	r1, #64	; 0x40
c0d0449a:	4620      	mov	r0, r4
c0d0449c:	e02c      	b.n	c0d044f8 <io_usb_hid_receive+0xa8>
c0d0449e:	2802      	cmp	r0, #2
c0d044a0:	d028      	beq.n	c0d044f4 <io_usb_hid_receive+0xa4>
c0d044a2:	2805      	cmp	r0, #5
c0d044a4:	d15d      	bne.n	c0d04562 <io_usb_hid_receive+0x112>

  // process the chunk content
  switch(G_io_usb_ep_buffer[2]) {
  case 0x05:
    // ensure sequence idx is 0 for the first chunk ! 
    if (U2BE(G_io_usb_ep_buffer, 3) != G_io_usb_hid_sequence_number) {
c0d044a6:	7918      	ldrb	r0, [r3, #4]
c0d044a8:	78d9      	ldrb	r1, [r3, #3]
c0d044aa:	0209      	lsls	r1, r1, #8
c0d044ac:	4301      	orrs	r1, r0
c0d044ae:	4a34      	ldr	r2, [pc, #208]	; (c0d04580 <io_usb_hid_receive+0x130>)
c0d044b0:	6810      	ldr	r0, [r2, #0]
c0d044b2:	2400      	movs	r4, #0
c0d044b4:	4281      	cmp	r1, r0
c0d044b6:	d15a      	bne.n	c0d0456e <io_usb_hid_receive+0x11e>
c0d044b8:	4e32      	ldr	r6, [pc, #200]	; (c0d04584 <io_usb_hid_receive+0x134>)
      // ignore packet
      goto apdu_reset;
    }
    // cid, tag, seq
    l -= 2+1+2;
c0d044ba:	9800      	ldr	r0, [sp, #0]
c0d044bc:	1980      	adds	r0, r0, r6
c0d044be:	1f07      	subs	r7, r0, #4
    
    // append the received chunk to the current command apdu
    if (G_io_usb_hid_sequence_number == 0) {
c0d044c0:	6810      	ldr	r0, [r2, #0]
c0d044c2:	2800      	cmp	r0, #0
c0d044c4:	d01b      	beq.n	c0d044fe <io_usb_hid_receive+0xae>
c0d044c6:	4614      	mov	r4, r2
      // copy data
      os_memmove((void*)G_io_usb_hid_current_buffer, G_io_usb_ep_buffer+7, l);
    }
    else {
      // check for invalid length encoding (more data in chunk that announced in the total apdu)
      if (l > G_io_usb_hid_remaining_length) {
c0d044c8:	4639      	mov	r1, r7
c0d044ca:	4031      	ands	r1, r6
c0d044cc:	482e      	ldr	r0, [pc, #184]	; (c0d04588 <io_usb_hid_receive+0x138>)
c0d044ce:	6802      	ldr	r2, [r0, #0]
c0d044d0:	4291      	cmp	r1, r2
c0d044d2:	d900      	bls.n	c0d044d6 <io_usb_hid_receive+0x86>
        l = G_io_usb_hid_remaining_length;
c0d044d4:	6807      	ldr	r7, [r0, #0]
      }

      /// This is a following chunk
      // append content
      os_memmove((void*)G_io_usb_hid_current_buffer, G_io_usb_ep_buffer+5, l);
c0d044d6:	463a      	mov	r2, r7
c0d044d8:	4032      	ands	r2, r6
c0d044da:	482c      	ldr	r0, [pc, #176]	; (c0d0458c <io_usb_hid_receive+0x13c>)
c0d044dc:	6800      	ldr	r0, [r0, #0]
c0d044de:	1d59      	adds	r1, r3, #5
c0d044e0:	e031      	b.n	c0d04546 <io_usb_hid_receive+0xf6>
c0d044e2:	2400      	movs	r4, #0
}

void os_memset(void * dst, unsigned char c, unsigned int length) {
#define DSTCHAR ((unsigned char *)dst)
  while(length--) {
    DSTCHAR[length] = c;
c0d044e4:	719c      	strb	r4, [r3, #6]
c0d044e6:	715c      	strb	r4, [r3, #5]
c0d044e8:	711c      	strb	r4, [r3, #4]
c0d044ea:	70dc      	strb	r4, [r3, #3]

  case 0x00: // get version ID
    // do not reset the current apdu reception if any
    os_memset(G_io_usb_ep_buffer+3, 0, 4); // PROTOCOL VERSION is 0
    // send the response
    sndfct(G_io_usb_ep_buffer, IO_HID_EP_LENGTH);
c0d044ec:	2140      	movs	r1, #64	; 0x40
c0d044ee:	4618      	mov	r0, r3
c0d044f0:	47a8      	blx	r5
c0d044f2:	e03c      	b.n	c0d0456e <io_usb_hid_receive+0x11e>
    goto apdu_reset;

  case 0x02: // ECHO|PING
    // do not reset the current apdu reception if any
    // send the response
    sndfct(G_io_usb_ep_buffer, IO_HID_EP_LENGTH);
c0d044f4:	4821      	ldr	r0, [pc, #132]	; (c0d0457c <io_usb_hid_receive+0x12c>)
c0d044f6:	2140      	movs	r1, #64	; 0x40
c0d044f8:	47a8      	blx	r5
c0d044fa:	2400      	movs	r4, #0
c0d044fc:	e037      	b.n	c0d0456e <io_usb_hid_receive+0x11e>
    
    // append the received chunk to the current command apdu
    if (G_io_usb_hid_sequence_number == 0) {
      /// This is the apdu first chunk
      // total apdu size to receive
      G_io_usb_hid_total_length = U2BE(G_io_usb_ep_buffer, 5); //(G_io_usb_ep_buffer[5]<<8)+(G_io_usb_ep_buffer[6]&0xFF);
c0d044fe:	7998      	ldrb	r0, [r3, #6]
c0d04500:	7959      	ldrb	r1, [r3, #5]
c0d04502:	0209      	lsls	r1, r1, #8
c0d04504:	4301      	orrs	r1, r0
c0d04506:	4822      	ldr	r0, [pc, #136]	; (c0d04590 <io_usb_hid_receive+0x140>)
c0d04508:	6001      	str	r1, [r0, #0]
      // check for invalid length encoding (more data in chunk that announced in the total apdu)
      if (G_io_usb_hid_total_length > sizeof(G_io_apdu_buffer)) {
c0d0450a:	6801      	ldr	r1, [r0, #0]
c0d0450c:	0849      	lsrs	r1, r1, #1
c0d0450e:	29a8      	cmp	r1, #168	; 0xa8
c0d04510:	d82d      	bhi.n	c0d0456e <io_usb_hid_receive+0x11e>
c0d04512:	4614      	mov	r4, r2
        goto apdu_reset;
      }
      // seq and total length
      l -= 2;
      // compute remaining size to receive
      G_io_usb_hid_remaining_length = G_io_usb_hid_total_length;
c0d04514:	6801      	ldr	r1, [r0, #0]
c0d04516:	481c      	ldr	r0, [pc, #112]	; (c0d04588 <io_usb_hid_receive+0x138>)
c0d04518:	6001      	str	r1, [r0, #0]
      G_io_usb_hid_current_buffer = G_io_apdu_buffer;
c0d0451a:	491c      	ldr	r1, [pc, #112]	; (c0d0458c <io_usb_hid_receive+0x13c>)
c0d0451c:	4a1d      	ldr	r2, [pc, #116]	; (c0d04594 <io_usb_hid_receive+0x144>)
c0d0451e:	600a      	str	r2, [r1, #0]

      // retain the channel id to use for the reply
      G_io_usb_hid_channel = U2BE(G_io_usb_ep_buffer, 0);
c0d04520:	7859      	ldrb	r1, [r3, #1]
c0d04522:	781a      	ldrb	r2, [r3, #0]
c0d04524:	0212      	lsls	r2, r2, #8
c0d04526:	430a      	orrs	r2, r1
c0d04528:	491b      	ldr	r1, [pc, #108]	; (c0d04598 <io_usb_hid_receive+0x148>)
c0d0452a:	600a      	str	r2, [r1, #0]
      // check for invalid length encoding (more data in chunk that announced in the total apdu)
      if (G_io_usb_hid_total_length > sizeof(G_io_apdu_buffer)) {
        goto apdu_reset;
      }
      // seq and total length
      l -= 2;
c0d0452c:	491b      	ldr	r1, [pc, #108]	; (c0d0459c <io_usb_hid_receive+0x14c>)
c0d0452e:	9a00      	ldr	r2, [sp, #0]
c0d04530:	1857      	adds	r7, r2, r1
      G_io_usb_hid_current_buffer = G_io_apdu_buffer;

      // retain the channel id to use for the reply
      G_io_usb_hid_channel = U2BE(G_io_usb_ep_buffer, 0);

      if (l > G_io_usb_hid_remaining_length) {
c0d04532:	4639      	mov	r1, r7
c0d04534:	4031      	ands	r1, r6
c0d04536:	6802      	ldr	r2, [r0, #0]
c0d04538:	4291      	cmp	r1, r2
c0d0453a:	d900      	bls.n	c0d0453e <io_usb_hid_receive+0xee>
        l = G_io_usb_hid_remaining_length;
c0d0453c:	6807      	ldr	r7, [r0, #0]
      }
      // copy data
      os_memmove((void*)G_io_usb_hid_current_buffer, G_io_usb_ep_buffer+7, l);
c0d0453e:	463a      	mov	r2, r7
c0d04540:	4032      	ands	r2, r6
c0d04542:	1dd9      	adds	r1, r3, #7
c0d04544:	4813      	ldr	r0, [pc, #76]	; (c0d04594 <io_usb_hid_receive+0x144>)
c0d04546:	f000 f834 	bl	c0d045b2 <os_memmove>
      /// This is a following chunk
      // append content
      os_memmove((void*)G_io_usb_hid_current_buffer, G_io_usb_ep_buffer+5, l);
    }
    // factorize (f)
    G_io_usb_hid_current_buffer += l;
c0d0454a:	4037      	ands	r7, r6
c0d0454c:	480f      	ldr	r0, [pc, #60]	; (c0d0458c <io_usb_hid_receive+0x13c>)
c0d0454e:	6801      	ldr	r1, [r0, #0]
c0d04550:	19c9      	adds	r1, r1, r7
c0d04552:	6001      	str	r1, [r0, #0]
    G_io_usb_hid_remaining_length -= l;
c0d04554:	480c      	ldr	r0, [pc, #48]	; (c0d04588 <io_usb_hid_receive+0x138>)
c0d04556:	6801      	ldr	r1, [r0, #0]
c0d04558:	1bc9      	subs	r1, r1, r7
c0d0455a:	6001      	str	r1, [r0, #0]
    G_io_usb_hid_sequence_number++;
c0d0455c:	6820      	ldr	r0, [r4, #0]
c0d0455e:	1c40      	adds	r0, r0, #1
c0d04560:	6020      	str	r0, [r4, #0]
    // await for the next chunk
    goto apdu_reset;
  }

  // if more data to be received, notify it
  if (G_io_usb_hid_remaining_length) {
c0d04562:	4809      	ldr	r0, [pc, #36]	; (c0d04588 <io_usb_hid_receive+0x138>)
c0d04564:	6801      	ldr	r1, [r0, #0]
c0d04566:	2001      	movs	r0, #1
c0d04568:	2402      	movs	r4, #2
c0d0456a:	2900      	cmp	r1, #0
c0d0456c:	d103      	bne.n	c0d04576 <io_usb_hid_receive+0x126>
  io_usb_hid_init();
  return IO_USB_APDU_RESET;
}

void io_usb_hid_init(void) {
  G_io_usb_hid_sequence_number = 0; 
c0d0456e:	4804      	ldr	r0, [pc, #16]	; (c0d04580 <io_usb_hid_receive+0x130>)
c0d04570:	2100      	movs	r1, #0
c0d04572:	6001      	str	r1, [r0, #0]
c0d04574:	4620      	mov	r0, r4
  return IO_USB_APDU_RECEIVED;

apdu_reset:
  io_usb_hid_init();
  return IO_USB_APDU_RESET;
}
c0d04576:	b2c0      	uxtb	r0, r0
c0d04578:	b001      	add	sp, #4
c0d0457a:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d0457c:	20002070 	.word	0x20002070
c0d04580:	20001e60 	.word	0x20001e60
c0d04584:	0000ffff 	.word	0x0000ffff
c0d04588:	20001e68 	.word	0x20001e68
c0d0458c:	20001fc0 	.word	0x20001fc0
c0d04590:	20001e64 	.word	0x20001e64
c0d04594:	20001e6c 	.word	0x20001e6c
c0d04598:	20001fc4 	.word	0x20001fc4
c0d0459c:	0001fff9 	.word	0x0001fff9

c0d045a0 <os_memset>:
    }
  }
#undef DSTCHAR
}

void os_memset(void * dst, unsigned char c, unsigned int length) {
c0d045a0:	b580      	push	{r7, lr}
c0d045a2:	460b      	mov	r3, r1
#define DSTCHAR ((unsigned char *)dst)
  while(length--) {
c0d045a4:	2a00      	cmp	r2, #0
c0d045a6:	d003      	beq.n	c0d045b0 <os_memset+0x10>
    DSTCHAR[length] = c;
c0d045a8:	4611      	mov	r1, r2
c0d045aa:	461a      	mov	r2, r3
c0d045ac:	f003 f8f6 	bl	c0d0779c <__aeabi_memset>
  }
#undef DSTCHAR
}
c0d045b0:	bd80      	pop	{r7, pc}

c0d045b2 <os_memmove>:
    }
  }
}
#endif // HAVE_USB_APDU

REENTRANT(void os_memmove(void * dst, const void WIDE * src, unsigned int length)) {
c0d045b2:	b5b0      	push	{r4, r5, r7, lr}
#define DSTCHAR ((unsigned char *)dst)
#define SRCCHAR ((unsigned char WIDE *)src)
  if (dst > src) {
c0d045b4:	4288      	cmp	r0, r1
c0d045b6:	d90d      	bls.n	c0d045d4 <os_memmove+0x22>
    while(length--) {
c0d045b8:	2a00      	cmp	r2, #0
c0d045ba:	d014      	beq.n	c0d045e6 <os_memmove+0x34>
c0d045bc:	1e49      	subs	r1, r1, #1
c0d045be:	4252      	negs	r2, r2
c0d045c0:	1e40      	subs	r0, r0, #1
c0d045c2:	2300      	movs	r3, #0
c0d045c4:	43db      	mvns	r3, r3
      DSTCHAR[length] = SRCCHAR[length];
c0d045c6:	461c      	mov	r4, r3
c0d045c8:	4354      	muls	r4, r2
c0d045ca:	5d0d      	ldrb	r5, [r1, r4]
c0d045cc:	5505      	strb	r5, [r0, r4]

REENTRANT(void os_memmove(void * dst, const void WIDE * src, unsigned int length)) {
#define DSTCHAR ((unsigned char *)dst)
#define SRCCHAR ((unsigned char WIDE *)src)
  if (dst > src) {
    while(length--) {
c0d045ce:	1c52      	adds	r2, r2, #1
c0d045d0:	d1f9      	bne.n	c0d045c6 <os_memmove+0x14>
c0d045d2:	e008      	b.n	c0d045e6 <os_memmove+0x34>
      DSTCHAR[length] = SRCCHAR[length];
    }
  }
  else {
    unsigned short l = 0;
    while (length--) {
c0d045d4:	2a00      	cmp	r2, #0
c0d045d6:	d006      	beq.n	c0d045e6 <os_memmove+0x34>
c0d045d8:	2300      	movs	r3, #0
      DSTCHAR[l] = SRCCHAR[l];
c0d045da:	b29c      	uxth	r4, r3
c0d045dc:	5d0d      	ldrb	r5, [r1, r4]
c0d045de:	5505      	strb	r5, [r0, r4]
      l++;
c0d045e0:	1c5b      	adds	r3, r3, #1
      DSTCHAR[length] = SRCCHAR[length];
    }
  }
  else {
    unsigned short l = 0;
    while (length--) {
c0d045e2:	1e52      	subs	r2, r2, #1
c0d045e4:	d1f9      	bne.n	c0d045da <os_memmove+0x28>
      DSTCHAR[l] = SRCCHAR[l];
      l++;
    }
  }
#undef DSTCHAR
}
c0d045e6:	bdb0      	pop	{r4, r5, r7, pc}

c0d045e8 <io_usb_hid_init>:
  io_usb_hid_init();
  return IO_USB_APDU_RESET;
}

void io_usb_hid_init(void) {
  G_io_usb_hid_sequence_number = 0; 
c0d045e8:	4801      	ldr	r0, [pc, #4]	; (c0d045f0 <io_usb_hid_init+0x8>)
c0d045ea:	2100      	movs	r1, #0
c0d045ec:	6001      	str	r1, [r0, #0]
  //G_io_usb_hid_remaining_length = 0; // not really needed
  //G_io_usb_hid_total_length = 0; // not really needed
  //G_io_usb_hid_current_buffer = G_io_apdu_buffer; // not really needed
}
c0d045ee:	4770      	bx	lr
c0d045f0:	20001e60 	.word	0x20001e60

c0d045f4 <io_usb_hid_exchange>:

unsigned short io_usb_hid_exchange(io_send_t sndfct, unsigned short sndlength,
                                   io_recv_t rcvfct,
                                   unsigned char flags) {
c0d045f4:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d045f6:	b085      	sub	sp, #20
c0d045f8:	9301      	str	r3, [sp, #4]
c0d045fa:	9200      	str	r2, [sp, #0]
c0d045fc:	460e      	mov	r6, r1
c0d045fe:	9003      	str	r0, [sp, #12]
  unsigned char l;

  // perform send
  if (sndlength) {
c0d04600:	2e00      	cmp	r6, #0
c0d04602:	d047      	beq.n	c0d04694 <io_usb_hid_exchange+0xa0>
    G_io_usb_hid_sequence_number = 0; 
c0d04604:	4c32      	ldr	r4, [pc, #200]	; (c0d046d0 <io_usb_hid_exchange+0xdc>)
c0d04606:	2000      	movs	r0, #0
c0d04608:	6020      	str	r0, [r4, #0]
    G_io_usb_hid_current_buffer = G_io_apdu_buffer;
c0d0460a:	4932      	ldr	r1, [pc, #200]	; (c0d046d4 <io_usb_hid_exchange+0xe0>)
c0d0460c:	4832      	ldr	r0, [pc, #200]	; (c0d046d8 <io_usb_hid_exchange+0xe4>)
c0d0460e:	6008      	str	r0, [r1, #0]
c0d04610:	4f32      	ldr	r7, [pc, #200]	; (c0d046dc <io_usb_hid_exchange+0xe8>)
}

void os_memset(void * dst, unsigned char c, unsigned int length) {
#define DSTCHAR ((unsigned char *)dst)
  while(length--) {
    DSTCHAR[length] = c;
c0d04612:	1d78      	adds	r0, r7, #5
c0d04614:	2539      	movs	r5, #57	; 0x39
c0d04616:	9002      	str	r0, [sp, #8]
c0d04618:	4629      	mov	r1, r5
c0d0461a:	f003 f8b5 	bl	c0d07788 <__aeabi_memclr>
c0d0461e:	4830      	ldr	r0, [pc, #192]	; (c0d046e0 <io_usb_hid_exchange+0xec>)
c0d04620:	4601      	mov	r1, r0

    // fill the chunk
    os_memset(G_io_usb_ep_buffer, 0, IO_HID_EP_LENGTH-2);

    // keep the channel identifier
    G_io_usb_ep_buffer[0] = (G_io_usb_hid_channel>>8)&0xFF;
c0d04622:	6808      	ldr	r0, [r1, #0]
c0d04624:	0a00      	lsrs	r0, r0, #8
c0d04626:	7038      	strb	r0, [r7, #0]
    G_io_usb_ep_buffer[1] = G_io_usb_hid_channel&0xFF;
c0d04628:	6808      	ldr	r0, [r1, #0]
c0d0462a:	7078      	strb	r0, [r7, #1]
c0d0462c:	2005      	movs	r0, #5
    G_io_usb_ep_buffer[2] = 0x05;
c0d0462e:	70b8      	strb	r0, [r7, #2]
    G_io_usb_ep_buffer[3] = G_io_usb_hid_sequence_number>>8;
c0d04630:	6820      	ldr	r0, [r4, #0]
c0d04632:	0a00      	lsrs	r0, r0, #8
c0d04634:	70f8      	strb	r0, [r7, #3]
    G_io_usb_ep_buffer[4] = G_io_usb_hid_sequence_number;
c0d04636:	6820      	ldr	r0, [r4, #0]
c0d04638:	7138      	strb	r0, [r7, #4]
c0d0463a:	b2b1      	uxth	r1, r6

    if (G_io_usb_hid_sequence_number == 0) {
c0d0463c:	6820      	ldr	r0, [r4, #0]
c0d0463e:	2800      	cmp	r0, #0
c0d04640:	9104      	str	r1, [sp, #16]
c0d04642:	d00a      	beq.n	c0d0465a <io_usb_hid_exchange+0x66>
      G_io_usb_hid_current_buffer += l;
      sndlength -= l;
      l += 7;
    }
    else {
      l = ((sndlength>IO_HID_EP_LENGTH-5) ? IO_HID_EP_LENGTH-5 : sndlength);
c0d04644:	203b      	movs	r0, #59	; 0x3b
c0d04646:	293b      	cmp	r1, #59	; 0x3b
c0d04648:	460e      	mov	r6, r1
c0d0464a:	d300      	bcc.n	c0d0464e <io_usb_hid_exchange+0x5a>
c0d0464c:	4606      	mov	r6, r0
c0d0464e:	4821      	ldr	r0, [pc, #132]	; (c0d046d4 <io_usb_hid_exchange+0xe0>)
c0d04650:	4602      	mov	r2, r0
      os_memmove(G_io_usb_ep_buffer+5, (const void*)G_io_usb_hid_current_buffer, l);
c0d04652:	6811      	ldr	r1, [r2, #0]
c0d04654:	9802      	ldr	r0, [sp, #8]
c0d04656:	4615      	mov	r5, r2
c0d04658:	e009      	b.n	c0d0466e <io_usb_hid_exchange+0x7a>
    G_io_usb_ep_buffer[3] = G_io_usb_hid_sequence_number>>8;
    G_io_usb_ep_buffer[4] = G_io_usb_hid_sequence_number;

    if (G_io_usb_hid_sequence_number == 0) {
      l = ((sndlength>IO_HID_EP_LENGTH-7) ? IO_HID_EP_LENGTH-7 : sndlength);
      G_io_usb_ep_buffer[5] = sndlength>>8;
c0d0465a:	0a30      	lsrs	r0, r6, #8
c0d0465c:	7178      	strb	r0, [r7, #5]
      G_io_usb_ep_buffer[6] = sndlength;
c0d0465e:	71be      	strb	r6, [r7, #6]
    G_io_usb_ep_buffer[2] = 0x05;
    G_io_usb_ep_buffer[3] = G_io_usb_hid_sequence_number>>8;
    G_io_usb_ep_buffer[4] = G_io_usb_hid_sequence_number;

    if (G_io_usb_hid_sequence_number == 0) {
      l = ((sndlength>IO_HID_EP_LENGTH-7) ? IO_HID_EP_LENGTH-7 : sndlength);
c0d04660:	2939      	cmp	r1, #57	; 0x39
c0d04662:	460e      	mov	r6, r1
c0d04664:	d300      	bcc.n	c0d04668 <io_usb_hid_exchange+0x74>
c0d04666:	462e      	mov	r6, r5
c0d04668:	4d1a      	ldr	r5, [pc, #104]	; (c0d046d4 <io_usb_hid_exchange+0xe0>)
      G_io_usb_ep_buffer[5] = sndlength>>8;
      G_io_usb_ep_buffer[6] = sndlength;
      os_memmove(G_io_usb_ep_buffer+7, (const void*)G_io_usb_hid_current_buffer, l);
c0d0466a:	6829      	ldr	r1, [r5, #0]
c0d0466c:	1df8      	adds	r0, r7, #7
c0d0466e:	4632      	mov	r2, r6
c0d04670:	f7ff ff9f 	bl	c0d045b2 <os_memmove>
c0d04674:	4c16      	ldr	r4, [pc, #88]	; (c0d046d0 <io_usb_hid_exchange+0xdc>)
c0d04676:	6828      	ldr	r0, [r5, #0]
c0d04678:	1980      	adds	r0, r0, r6
      G_io_usb_hid_current_buffer += l;
c0d0467a:	6028      	str	r0, [r5, #0]
      G_io_usb_hid_current_buffer += l;
      sndlength -= l;
      l += 5;
    }
    // prepare next chunk numbering
    G_io_usb_hid_sequence_number++;
c0d0467c:	6820      	ldr	r0, [r4, #0]
c0d0467e:	1c40      	adds	r0, r0, #1
c0d04680:	6020      	str	r0, [r4, #0]
    // send the chunk
    // always pad :)
    sndfct(G_io_usb_ep_buffer, sizeof(G_io_usb_ep_buffer));
c0d04682:	2140      	movs	r1, #64	; 0x40
c0d04684:	4638      	mov	r0, r7
c0d04686:	9a03      	ldr	r2, [sp, #12]
c0d04688:	4790      	blx	r2
c0d0468a:	9804      	ldr	r0, [sp, #16]
c0d0468c:	1b86      	subs	r6, r0, r6
c0d0468e:	4815      	ldr	r0, [pc, #84]	; (c0d046e4 <io_usb_hid_exchange+0xf0>)
  // perform send
  if (sndlength) {
    G_io_usb_hid_sequence_number = 0; 
    G_io_usb_hid_current_buffer = G_io_apdu_buffer;
  }
  while(sndlength) {
c0d04690:	4206      	tst	r6, r0
c0d04692:	d1be      	bne.n	c0d04612 <io_usb_hid_exchange+0x1e>
  io_usb_hid_init();
  return IO_USB_APDU_RESET;
}

void io_usb_hid_init(void) {
  G_io_usb_hid_sequence_number = 0; 
c0d04694:	480e      	ldr	r0, [pc, #56]	; (c0d046d0 <io_usb_hid_exchange+0xdc>)
c0d04696:	2400      	movs	r4, #0
c0d04698:	6004      	str	r4, [r0, #0]
  }

  // prepare for next apdu
  io_usb_hid_init();

  if (flags & IO_RESET_AFTER_REPLIED) {
c0d0469a:	2080      	movs	r0, #128	; 0x80
c0d0469c:	9d01      	ldr	r5, [sp, #4]
c0d0469e:	4205      	tst	r5, r0
c0d046a0:	d001      	beq.n	c0d046a6 <io_usb_hid_exchange+0xb2>
    reset();
c0d046a2:	f001 fb97 	bl	c0d05dd4 <reset>
  }

  if (flags & IO_RETURN_AFTER_TX ) {
c0d046a6:	06a8      	lsls	r0, r5, #26
c0d046a8:	d40f      	bmi.n	c0d046ca <io_usb_hid_exchange+0xd6>
c0d046aa:	4c0c      	ldr	r4, [pc, #48]	; (c0d046dc <io_usb_hid_exchange+0xe8>)
c0d046ac:	9d00      	ldr	r5, [sp, #0]
  }

  // receive the next command
  for(;;) {
    // receive a hid chunk
    l = rcvfct(G_io_usb_ep_buffer, sizeof(G_io_usb_ep_buffer));
c0d046ae:	2140      	movs	r1, #64	; 0x40
c0d046b0:	4620      	mov	r0, r4
c0d046b2:	47a8      	blx	r5
    // check for wrongly sized tlvs
    if (l > sizeof(G_io_usb_ep_buffer)) {
c0d046b4:	b2c2      	uxtb	r2, r0
c0d046b6:	2a40      	cmp	r2, #64	; 0x40
c0d046b8:	d8f9      	bhi.n	c0d046ae <io_usb_hid_exchange+0xba>
      continue;
    }

    // call the chunk reception
    switch(io_usb_hid_receive(sndfct, G_io_usb_ep_buffer, l)) {
c0d046ba:	9803      	ldr	r0, [sp, #12]
c0d046bc:	4621      	mov	r1, r4
c0d046be:	f7ff fec7 	bl	c0d04450 <io_usb_hid_receive>
c0d046c2:	2802      	cmp	r0, #2
c0d046c4:	d1f3      	bne.n	c0d046ae <io_usb_hid_exchange+0xba>
      default:
        continue;

      case IO_USB_APDU_RECEIVED:

        return G_io_usb_hid_total_length;
c0d046c6:	4808      	ldr	r0, [pc, #32]	; (c0d046e8 <io_usb_hid_exchange+0xf4>)
c0d046c8:	6804      	ldr	r4, [r0, #0]
    }
  }
}
c0d046ca:	b2a0      	uxth	r0, r4
c0d046cc:	b005      	add	sp, #20
c0d046ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d046d0:	20001e60 	.word	0x20001e60
c0d046d4:	20001fc0 	.word	0x20001fc0
c0d046d8:	20001e6c 	.word	0x20001e6c
c0d046dc:	20002070 	.word	0x20002070
c0d046e0:	20001fc4 	.word	0x20001fc4
c0d046e4:	0000ffff 	.word	0x0000ffff
c0d046e8:	20001e64 	.word	0x20001e64

c0d046ec <os_memcmp>:
    DSTCHAR[length] = c;
  }
#undef DSTCHAR
}

char os_memcmp(const void WIDE * buf1, const void WIDE * buf2, unsigned int length) {
c0d046ec:	b570      	push	{r4, r5, r6, lr}
#define BUF1 ((unsigned char const WIDE *)buf1)
#define BUF2 ((unsigned char const WIDE *)buf2)
  while(length--) {
c0d046ee:	1e43      	subs	r3, r0, #1
c0d046f0:	1e49      	subs	r1, r1, #1
c0d046f2:	4252      	negs	r2, r2
c0d046f4:	2000      	movs	r0, #0
c0d046f6:	43c4      	mvns	r4, r0
c0d046f8:	2a00      	cmp	r2, #0
c0d046fa:	d00c      	beq.n	c0d04716 <os_memcmp+0x2a>
    if (BUF1[length] != BUF2[length]) {
c0d046fc:	4626      	mov	r6, r4
c0d046fe:	4356      	muls	r6, r2
c0d04700:	5d8d      	ldrb	r5, [r1, r6]
c0d04702:	5d9e      	ldrb	r6, [r3, r6]
c0d04704:	1c52      	adds	r2, r2, #1
c0d04706:	42ae      	cmp	r6, r5
c0d04708:	d0f6      	beq.n	c0d046f8 <os_memcmp+0xc>
      return (BUF1[length] > BUF2[length])? 1:-1;
c0d0470a:	2000      	movs	r0, #0
c0d0470c:	43c1      	mvns	r1, r0
c0d0470e:	2001      	movs	r0, #1
c0d04710:	42ae      	cmp	r6, r5
c0d04712:	d800      	bhi.n	c0d04716 <os_memcmp+0x2a>
c0d04714:	4608      	mov	r0, r1
  }
  return 0;
#undef BUF1
#undef BUF2

}
c0d04716:	b2c0      	uxtb	r0, r0
c0d04718:	bd70      	pop	{r4, r5, r6, pc}

c0d0471a <os_longjmp>:
void try_context_set(try_context_t* ctx) {
  __asm volatile ("mov r9, %0"::"r"(ctx));
}

#ifndef HAVE_BOLOS
void os_longjmp(unsigned int exception) {
c0d0471a:	b580      	push	{r7, lr}
c0d0471c:	4601      	mov	r1, r0
  return xoracc;
}

try_context_t* try_context_get(void) {
  try_context_t* current_ctx;
  __asm volatile ("mov %0, r9":"=r"(current_ctx));
c0d0471e:	4648      	mov	r0, r9
  __asm volatile ("mov r9, %0"::"r"(ctx));
}

#ifndef HAVE_BOLOS
void os_longjmp(unsigned int exception) {
  longjmp(try_context_get()->jmp_buf, exception);
c0d04720:	f003 f8d4 	bl	c0d078cc <longjmp>

c0d04724 <try_context_get>:
  return xoracc;
}

try_context_t* try_context_get(void) {
  try_context_t* current_ctx;
  __asm volatile ("mov %0, r9":"=r"(current_ctx));
c0d04724:	4648      	mov	r0, r9
  return current_ctx;
c0d04726:	4770      	bx	lr

c0d04728 <try_context_get_previous>:
}

try_context_t* try_context_get_previous(void) {
c0d04728:	2000      	movs	r0, #0
  try_context_t* current_ctx;
  __asm volatile ("mov %0, r9":"=r"(current_ctx));
c0d0472a:	4649      	mov	r1, r9

  // first context reached ?
  if (current_ctx == NULL) {
c0d0472c:	2900      	cmp	r1, #0
c0d0472e:	d000      	beq.n	c0d04732 <try_context_get_previous+0xa>
  }

  // return r9 content saved on the current context. It links to the previous context.
  // r4 r5 r6 r7 r8 r9 r10 r11 sp lr
  //                ^ platform register
  return (try_context_t*) current_ctx->jmp_buf[5];
c0d04730:	6948      	ldr	r0, [r1, #20]
}
c0d04732:	4770      	bx	lr

c0d04734 <io_seproxyhal_general_status>:
  if (G_io_timeout) {
    G_io_timeout = timeout_ms;
  }
}

void io_seproxyhal_general_status(void) {
c0d04734:	b580      	push	{r7, lr}
  // avoid troubles
  if (io_seproxyhal_spi_is_status_sent()) {
c0d04736:	f001 fce7 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d0473a:	2800      	cmp	r0, #0
c0d0473c:	d10b      	bne.n	c0d04756 <io_seproxyhal_general_status+0x22>
    return;
  }
  // send the general status
  G_io_seproxyhal_spi_buffer[0] = SEPROXYHAL_TAG_GENERAL_STATUS;
c0d0473e:	4806      	ldr	r0, [pc, #24]	; (c0d04758 <io_seproxyhal_general_status+0x24>)
c0d04740:	2160      	movs	r1, #96	; 0x60
c0d04742:	7001      	strb	r1, [r0, #0]
  G_io_seproxyhal_spi_buffer[1] = 0;
c0d04744:	2100      	movs	r1, #0
c0d04746:	7041      	strb	r1, [r0, #1]
  G_io_seproxyhal_spi_buffer[2] = 2;
c0d04748:	2202      	movs	r2, #2
c0d0474a:	7082      	strb	r2, [r0, #2]
  G_io_seproxyhal_spi_buffer[3] = SEPROXYHAL_TAG_GENERAL_STATUS_LAST_COMMAND>>8;
c0d0474c:	70c1      	strb	r1, [r0, #3]
  G_io_seproxyhal_spi_buffer[4] = SEPROXYHAL_TAG_GENERAL_STATUS_LAST_COMMAND;
c0d0474e:	7101      	strb	r1, [r0, #4]
  io_seproxyhal_spi_send(G_io_seproxyhal_spi_buffer, 5);
c0d04750:	2105      	movs	r1, #5
c0d04752:	f001 fcc3 	bl	c0d060dc <io_seproxyhal_spi_send>
}
c0d04756:	bd80      	pop	{r7, pc}
c0d04758:	20001d34 	.word	0x20001d34

c0d0475c <io_seproxyhal_handle_usb_event>:
static volatile unsigned char G_io_usb_ep_xfer_len[IO_USB_MAX_ENDPOINTS];
#include "usbd_def.h"
#include "usbd_core.h"
extern USBD_HandleTypeDef USBD_Device;

void io_seproxyhal_handle_usb_event(void) {
c0d0475c:	b510      	push	{r4, lr}
  switch(G_io_seproxyhal_spi_buffer[3]) {
c0d0475e:	4813      	ldr	r0, [pc, #76]	; (c0d047ac <io_seproxyhal_handle_usb_event+0x50>)
c0d04760:	78c0      	ldrb	r0, [r0, #3]
c0d04762:	2803      	cmp	r0, #3
c0d04764:	dc07      	bgt.n	c0d04776 <io_seproxyhal_handle_usb_event+0x1a>
c0d04766:	2801      	cmp	r0, #1
c0d04768:	d00d      	beq.n	c0d04786 <io_seproxyhal_handle_usb_event+0x2a>
c0d0476a:	2802      	cmp	r0, #2
c0d0476c:	d11d      	bne.n	c0d047aa <io_seproxyhal_handle_usb_event+0x4e>
      if (G_io_apdu_media != IO_APDU_MEDIA_NONE) {
        THROW(EXCEPTION_IO_RESET);
      }
      break;
    case SEPROXYHAL_TAG_USB_EVENT_SOF:
      USBD_LL_SOF(&USBD_Device);
c0d0476e:	4810      	ldr	r0, [pc, #64]	; (c0d047b0 <io_seproxyhal_handle_usb_event+0x54>)
c0d04770:	f002 fb2c 	bl	c0d06dcc <USBD_LL_SOF>
      break;
    case SEPROXYHAL_TAG_USB_EVENT_RESUMED:
      USBD_LL_Resume(&USBD_Device);
      break;
  }
}
c0d04774:	bd10      	pop	{r4, pc}
c0d04776:	2804      	cmp	r0, #4
c0d04778:	d014      	beq.n	c0d047a4 <io_seproxyhal_handle_usb_event+0x48>
c0d0477a:	2808      	cmp	r0, #8
c0d0477c:	d115      	bne.n	c0d047aa <io_seproxyhal_handle_usb_event+0x4e>
      break;
    case SEPROXYHAL_TAG_USB_EVENT_SUSPENDED:
      USBD_LL_Suspend(&USBD_Device);
      break;
    case SEPROXYHAL_TAG_USB_EVENT_RESUMED:
      USBD_LL_Resume(&USBD_Device);
c0d0477e:	480c      	ldr	r0, [pc, #48]	; (c0d047b0 <io_seproxyhal_handle_usb_event+0x54>)
c0d04780:	f002 fb22 	bl	c0d06dc8 <USBD_LL_Resume>
      break;
  }
}
c0d04784:	bd10      	pop	{r4, pc}
extern USBD_HandleTypeDef USBD_Device;

void io_seproxyhal_handle_usb_event(void) {
  switch(G_io_seproxyhal_spi_buffer[3]) {
    case SEPROXYHAL_TAG_USB_EVENT_RESET:
      USBD_LL_SetSpeed(&USBD_Device, USBD_SPEED_FULL);  
c0d04786:	4c0a      	ldr	r4, [pc, #40]	; (c0d047b0 <io_seproxyhal_handle_usb_event+0x54>)
c0d04788:	2101      	movs	r1, #1
c0d0478a:	4620      	mov	r0, r4
c0d0478c:	f002 fb17 	bl	c0d06dbe <USBD_LL_SetSpeed>
      USBD_LL_Reset(&USBD_Device);
c0d04790:	4620      	mov	r0, r4
c0d04792:	f002 faf4 	bl	c0d06d7e <USBD_LL_Reset>
      // ongoing APDU detected, throw a reset, even if not the media. to avoid potential troubles.
      if (G_io_apdu_media != IO_APDU_MEDIA_NONE) {
c0d04796:	4807      	ldr	r0, [pc, #28]	; (c0d047b4 <io_seproxyhal_handle_usb_event+0x58>)
c0d04798:	7800      	ldrb	r0, [r0, #0]
c0d0479a:	2800      	cmp	r0, #0
c0d0479c:	d005      	beq.n	c0d047aa <io_seproxyhal_handle_usb_event+0x4e>
        THROW(EXCEPTION_IO_RESET);
c0d0479e:	2010      	movs	r0, #16
c0d047a0:	f7ff ffbb 	bl	c0d0471a <os_longjmp>
      break;
    case SEPROXYHAL_TAG_USB_EVENT_SOF:
      USBD_LL_SOF(&USBD_Device);
      break;
    case SEPROXYHAL_TAG_USB_EVENT_SUSPENDED:
      USBD_LL_Suspend(&USBD_Device);
c0d047a4:	4802      	ldr	r0, [pc, #8]	; (c0d047b0 <io_seproxyhal_handle_usb_event+0x54>)
c0d047a6:	f002 fb0d 	bl	c0d06dc4 <USBD_LL_Suspend>
      break;
    case SEPROXYHAL_TAG_USB_EVENT_RESUMED:
      USBD_LL_Resume(&USBD_Device);
      break;
  }
}
c0d047aa:	bd10      	pop	{r4, pc}
c0d047ac:	20001d34 	.word	0x20001d34
c0d047b0:	200020b8 	.word	0x200020b8
c0d047b4:	20001fd0 	.word	0x20001fd0

c0d047b8 <io_seproxyhal_get_ep_rx_size>:

uint16_t io_seproxyhal_get_ep_rx_size(uint8_t epnum) {
  return G_io_usb_ep_xfer_len[epnum&0x7F];
c0d047b8:	217f      	movs	r1, #127	; 0x7f
c0d047ba:	4001      	ands	r1, r0
c0d047bc:	4801      	ldr	r0, [pc, #4]	; (c0d047c4 <io_seproxyhal_get_ep_rx_size+0xc>)
c0d047be:	5c40      	ldrb	r0, [r0, r1]
c0d047c0:	4770      	bx	lr
c0d047c2:	46c0      	nop			; (mov r8, r8)
c0d047c4:	20001fd1 	.word	0x20001fd1

c0d047c8 <io_seproxyhal_handle_usb_ep_xfer_event>:
}

void io_seproxyhal_handle_usb_ep_xfer_event(void) {
c0d047c8:	b580      	push	{r7, lr}
  switch(G_io_seproxyhal_spi_buffer[4]) {
c0d047ca:	4810      	ldr	r0, [pc, #64]	; (c0d0480c <io_seproxyhal_handle_usb_ep_xfer_event+0x44>)
c0d047cc:	7901      	ldrb	r1, [r0, #4]
c0d047ce:	2904      	cmp	r1, #4
c0d047d0:	d008      	beq.n	c0d047e4 <io_seproxyhal_handle_usb_ep_xfer_event+0x1c>
c0d047d2:	2902      	cmp	r1, #2
c0d047d4:	d011      	beq.n	c0d047fa <io_seproxyhal_handle_usb_ep_xfer_event+0x32>
c0d047d6:	2901      	cmp	r1, #1
c0d047d8:	d10e      	bne.n	c0d047f8 <io_seproxyhal_handle_usb_ep_xfer_event+0x30>
    /* This event is received when a new SETUP token had been received on a control endpoint */
    case SEPROXYHAL_TAG_USB_EP_XFER_SETUP:
      // assume length of setup packet, and that it is on endpoint 0
      USBD_LL_SetupStage(&USBD_Device, &G_io_seproxyhal_spi_buffer[6]);
c0d047da:	1d81      	adds	r1, r0, #6
c0d047dc:	480d      	ldr	r0, [pc, #52]	; (c0d04814 <io_seproxyhal_handle_usb_ep_xfer_event+0x4c>)
c0d047de:	f002 f9d0 	bl	c0d06b82 <USBD_LL_SetupStage>
      // saved just in case it is needed ...
      G_io_usb_ep_xfer_len[G_io_seproxyhal_spi_buffer[3]&0x7F] = G_io_seproxyhal_spi_buffer[5];
      USBD_LL_DataOutStage(&USBD_Device, G_io_seproxyhal_spi_buffer[3]&0x7F, &G_io_seproxyhal_spi_buffer[6]);
      break;
  }
}
c0d047e2:	bd80      	pop	{r7, pc}
      break;

    /* This event is received when a new DATA token is received on an endpoint */
    case SEPROXYHAL_TAG_USB_EP_XFER_OUT:
      // saved just in case it is needed ...
      G_io_usb_ep_xfer_len[G_io_seproxyhal_spi_buffer[3]&0x7F] = G_io_seproxyhal_spi_buffer[5];
c0d047e4:	78c2      	ldrb	r2, [r0, #3]
c0d047e6:	217f      	movs	r1, #127	; 0x7f
c0d047e8:	4011      	ands	r1, r2
c0d047ea:	7942      	ldrb	r2, [r0, #5]
c0d047ec:	4b08      	ldr	r3, [pc, #32]	; (c0d04810 <io_seproxyhal_handle_usb_ep_xfer_event+0x48>)
c0d047ee:	545a      	strb	r2, [r3, r1]
      USBD_LL_DataOutStage(&USBD_Device, G_io_seproxyhal_spi_buffer[3]&0x7F, &G_io_seproxyhal_spi_buffer[6]);
c0d047f0:	1d82      	adds	r2, r0, #6
c0d047f2:	4808      	ldr	r0, [pc, #32]	; (c0d04814 <io_seproxyhal_handle_usb_ep_xfer_event+0x4c>)
c0d047f4:	f002 f9f3 	bl	c0d06bde <USBD_LL_DataOutStage>
      break;
  }
}
c0d047f8:	bd80      	pop	{r7, pc}
      USBD_LL_SetupStage(&USBD_Device, &G_io_seproxyhal_spi_buffer[6]);
      break;

    /* This event is received after the prepare data packet has been flushed to the usb host */
    case SEPROXYHAL_TAG_USB_EP_XFER_IN:
      USBD_LL_DataInStage(&USBD_Device, G_io_seproxyhal_spi_buffer[3]&0x7F, &G_io_seproxyhal_spi_buffer[6]);
c0d047fa:	78c2      	ldrb	r2, [r0, #3]
c0d047fc:	217f      	movs	r1, #127	; 0x7f
c0d047fe:	4011      	ands	r1, r2
c0d04800:	1d82      	adds	r2, r0, #6
c0d04802:	4804      	ldr	r0, [pc, #16]	; (c0d04814 <io_seproxyhal_handle_usb_ep_xfer_event+0x4c>)
c0d04804:	f002 fa45 	bl	c0d06c92 <USBD_LL_DataInStage>
      // saved just in case it is needed ...
      G_io_usb_ep_xfer_len[G_io_seproxyhal_spi_buffer[3]&0x7F] = G_io_seproxyhal_spi_buffer[5];
      USBD_LL_DataOutStage(&USBD_Device, G_io_seproxyhal_spi_buffer[3]&0x7F, &G_io_seproxyhal_spi_buffer[6]);
      break;
  }
}
c0d04808:	bd80      	pop	{r7, pc}
c0d0480a:	46c0      	nop			; (mov r8, r8)
c0d0480c:	20001d34 	.word	0x20001d34
c0d04810:	20001fd1 	.word	0x20001fd1
c0d04814:	200020b8 	.word	0x200020b8

c0d04818 <io_usb_send_ep>:
}

#endif // HAVE_L4_USBLIB

// TODO, refactor this using the USB DataIn event like for the U2F tunnel
void io_usb_send_ep(unsigned int ep, unsigned char* buffer, unsigned short length, unsigned int timeout) {
c0d04818:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d0481a:	b081      	sub	sp, #4
c0d0481c:	4614      	mov	r4, r2
c0d0481e:	4605      	mov	r5, r0
  if (timeout) {
    timeout++;
  }

  // won't send if overflowing seproxyhal buffer format
  if (length > 255) {
c0d04820:	2cff      	cmp	r4, #255	; 0xff
c0d04822:	d83b      	bhi.n	c0d0489c <io_usb_send_ep+0x84>
    return;
  }
  
  G_io_seproxyhal_spi_buffer[0] = SEPROXYHAL_TAG_USB_EP_PREPARE;
c0d04824:	4e20      	ldr	r6, [pc, #128]	; (c0d048a8 <io_usb_send_ep+0x90>)
c0d04826:	2050      	movs	r0, #80	; 0x50
c0d04828:	7030      	strb	r0, [r6, #0]
  G_io_seproxyhal_spi_buffer[1] = (3+length)>>8;
c0d0482a:	1ce0      	adds	r0, r4, #3
c0d0482c:	9100      	str	r1, [sp, #0]
c0d0482e:	0a01      	lsrs	r1, r0, #8
c0d04830:	7071      	strb	r1, [r6, #1]
  G_io_seproxyhal_spi_buffer[2] = (3+length);
c0d04832:	70b0      	strb	r0, [r6, #2]
  G_io_seproxyhal_spi_buffer[3] = ep|0x80;
c0d04834:	2080      	movs	r0, #128	; 0x80
c0d04836:	4305      	orrs	r5, r0
c0d04838:	70f5      	strb	r5, [r6, #3]
  G_io_seproxyhal_spi_buffer[4] = SEPROXYHAL_TAG_USB_EP_PREPARE_DIR_IN;
c0d0483a:	2020      	movs	r0, #32
c0d0483c:	7130      	strb	r0, [r6, #4]
  G_io_seproxyhal_spi_buffer[5] = length;
c0d0483e:	7174      	strb	r4, [r6, #5]
  io_seproxyhal_spi_send(G_io_seproxyhal_spi_buffer, 6);
c0d04840:	2106      	movs	r1, #6
c0d04842:	4630      	mov	r0, r6
c0d04844:	461f      	mov	r7, r3
c0d04846:	f001 fc49 	bl	c0d060dc <io_seproxyhal_spi_send>
  io_seproxyhal_spi_send(buffer, length);
c0d0484a:	9800      	ldr	r0, [sp, #0]
c0d0484c:	4621      	mov	r1, r4
c0d0484e:	f001 fc45 	bl	c0d060dc <io_seproxyhal_spi_send>

  // if timeout is requested
  if(timeout) {
c0d04852:	1c78      	adds	r0, r7, #1
c0d04854:	2802      	cmp	r0, #2
c0d04856:	d321      	bcc.n	c0d0489c <io_usb_send_ep+0x84>
c0d04858:	e006      	b.n	c0d04868 <io_usb_send_ep+0x50>
          THROW(EXCEPTION_IO_RESET);
        }
        */

        // link disconnected ?
        if(G_io_seproxyhal_spi_buffer[0] == SEPROXYHAL_TAG_STATUS_EVENT) {
c0d0485a:	2915      	cmp	r1, #21
c0d0485c:	d102      	bne.n	c0d04864 <io_usb_send_ep+0x4c>
          if (!(U4BE(G_io_seproxyhal_spi_buffer, 3) & SEPROXYHAL_TAG_STATUS_EVENT_FLAG_USB_POWERED)) {
c0d0485e:	79b0      	ldrb	r0, [r6, #6]
c0d04860:	0700      	lsls	r0, r0, #28
c0d04862:	d51d      	bpl.n	c0d048a0 <io_usb_send_ep+0x88>
        
        // usb reset ?
        //io_seproxyhal_handle_usb_event();
        // also process other transfer requests if any (useful for HID keyboard while playing with CAPS lock key, side effect on LED status)
        // also handle IO timeout in a centralized and configurable way
        io_seproxyhal_handle_event();
c0d04864:	f000 f822 	bl	c0d048ac <io_seproxyhal_handle_event>
  io_seproxyhal_spi_send(buffer, length);

  // if timeout is requested
  if(timeout) {
    for (;;) {
      if (!io_seproxyhal_spi_is_status_sent()) {
c0d04868:	f001 fc4e 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d0486c:	2800      	cmp	r0, #0
c0d0486e:	d101      	bne.n	c0d04874 <io_usb_send_ep+0x5c>
        io_seproxyhal_general_status();
c0d04870:	f7ff ff60 	bl	c0d04734 <io_seproxyhal_general_status>
      }

      rx_len = io_seproxyhal_spi_recv(G_io_seproxyhal_spi_buffer, sizeof(G_io_seproxyhal_spi_buffer), 0);
c0d04874:	204b      	movs	r0, #75	; 0x4b
c0d04876:	0081      	lsls	r1, r0, #2
c0d04878:	2200      	movs	r2, #0
c0d0487a:	4630      	mov	r0, r6
c0d0487c:	f001 fc5a 	bl	c0d06134 <io_seproxyhal_spi_recv>

      // wait for ack of the seproxyhal
      // discard if not an acknowledgment
      if (G_io_seproxyhal_spi_buffer[0] != SEPROXYHAL_TAG_USB_EP_XFER_EVENT
c0d04880:	7831      	ldrb	r1, [r6, #0]
        || rx_len != 6 
c0d04882:	2806      	cmp	r0, #6
c0d04884:	d1e9      	bne.n	c0d0485a <io_usb_send_ep+0x42>
c0d04886:	2910      	cmp	r1, #16
c0d04888:	d1e7      	bne.n	c0d0485a <io_usb_send_ep+0x42>
        || G_io_seproxyhal_spi_buffer[3] != (ep|0x80)
c0d0488a:	78f0      	ldrb	r0, [r6, #3]
        || G_io_seproxyhal_spi_buffer[4] != SEPROXYHAL_TAG_USB_EP_XFER_IN
c0d0488c:	42a8      	cmp	r0, r5
c0d0488e:	d1e4      	bne.n	c0d0485a <io_usb_send_ep+0x42>
c0d04890:	7930      	ldrb	r0, [r6, #4]
c0d04892:	2802      	cmp	r0, #2
c0d04894:	d1e1      	bne.n	c0d0485a <io_usb_send_ep+0x42>
        || G_io_seproxyhal_spi_buffer[5] != length) {
c0d04896:	7970      	ldrb	r0, [r6, #5]

      rx_len = io_seproxyhal_spi_recv(G_io_seproxyhal_spi_buffer, sizeof(G_io_seproxyhal_spi_buffer), 0);

      // wait for ack of the seproxyhal
      // discard if not an acknowledgment
      if (G_io_seproxyhal_spi_buffer[0] != SEPROXYHAL_TAG_USB_EP_XFER_EVENT
c0d04898:	42a0      	cmp	r0, r4
c0d0489a:	d1de      	bne.n	c0d0485a <io_usb_send_ep+0x42>

      // chunk sending succeeded
      break;
    }
  }
}
c0d0489c:	b001      	add	sp, #4
c0d0489e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        */

        // link disconnected ?
        if(G_io_seproxyhal_spi_buffer[0] == SEPROXYHAL_TAG_STATUS_EVENT) {
          if (!(U4BE(G_io_seproxyhal_spi_buffer, 3) & SEPROXYHAL_TAG_STATUS_EVENT_FLAG_USB_POWERED)) {
           THROW(EXCEPTION_IO_RESET);
c0d048a0:	2010      	movs	r0, #16
c0d048a2:	f7ff ff3a 	bl	c0d0471a <os_longjmp>
c0d048a6:	46c0      	nop			; (mov r8, r8)
c0d048a8:	20001d34 	.word	0x20001d34

c0d048ac <io_seproxyhal_handle_event>:
    // copy apdu to apdu buffer
    os_memmove(G_io_apdu_buffer, G_io_seproxyhal_spi_buffer+3, G_io_apdu_length);
  }
}

unsigned int io_seproxyhal_handle_event(void) {
c0d048ac:	b580      	push	{r7, lr}
  unsigned int rx_len = U2BE(G_io_seproxyhal_spi_buffer, 1);
c0d048ae:	481e      	ldr	r0, [pc, #120]	; (c0d04928 <io_seproxyhal_handle_event+0x7c>)
c0d048b0:	7882      	ldrb	r2, [r0, #2]
c0d048b2:	7841      	ldrb	r1, [r0, #1]
c0d048b4:	0209      	lsls	r1, r1, #8
c0d048b6:	4311      	orrs	r1, r2
c0d048b8:	7800      	ldrb	r0, [r0, #0]

  switch(G_io_seproxyhal_spi_buffer[0]) {
c0d048ba:	280f      	cmp	r0, #15
c0d048bc:	dc0a      	bgt.n	c0d048d4 <io_seproxyhal_handle_event+0x28>
c0d048be:	280e      	cmp	r0, #14
c0d048c0:	d010      	beq.n	c0d048e4 <io_seproxyhal_handle_event+0x38>
c0d048c2:	280f      	cmp	r0, #15
c0d048c4:	d11d      	bne.n	c0d04902 <io_seproxyhal_handle_event+0x56>
c0d048c6:	2000      	movs	r0, #0
  #ifdef HAVE_IO_USB
    case SEPROXYHAL_TAG_USB_EVENT:
      if (rx_len != 3+1) {
c0d048c8:	2904      	cmp	r1, #4
c0d048ca:	d121      	bne.n	c0d04910 <io_seproxyhal_handle_event+0x64>
        return 0;
      }
      io_seproxyhal_handle_usb_event();
c0d048cc:	f7ff ff46 	bl	c0d0475c <io_seproxyhal_handle_usb_event>
c0d048d0:	2001      	movs	r0, #1
    default:
      return io_event(CHANNEL_SPI);
  }
  // defaulty return as not processed
  return 0;
}
c0d048d2:	bd80      	pop	{r7, pc}
c0d048d4:	2810      	cmp	r0, #16
c0d048d6:	d018      	beq.n	c0d0490a <io_seproxyhal_handle_event+0x5e>
c0d048d8:	2816      	cmp	r0, #22
c0d048da:	d112      	bne.n	c0d04902 <io_seproxyhal_handle_event+0x56>
      io_seproxyhal_handle_bluenrg_event();
      return 1;
  #endif // HAVE_BLE

    case SEPROXYHAL_TAG_CAPDU_EVENT:
      io_seproxyhal_handle_capdu_event();
c0d048dc:	f000 f832 	bl	c0d04944 <io_seproxyhal_handle_capdu_event>
c0d048e0:	2001      	movs	r0, #1
    default:
      return io_event(CHANNEL_SPI);
  }
  // defaulty return as not processed
  return 0;
}
c0d048e2:	bd80      	pop	{r7, pc}
      return 1;

      // ask the user if not processed here
    case SEPROXYHAL_TAG_TICKER_EVENT:
      // process ticker events to timeout the IO transfers, and forward to the user io_event function too
      if(G_io_timeout) {
c0d048e4:	4811      	ldr	r0, [pc, #68]	; (c0d0492c <io_seproxyhal_handle_event+0x80>)
c0d048e6:	6801      	ldr	r1, [r0, #0]
c0d048e8:	2900      	cmp	r1, #0
c0d048ea:	d00a      	beq.n	c0d04902 <io_seproxyhal_handle_event+0x56>
        G_io_timeout-=MIN(G_io_timeout, 100);
c0d048ec:	6802      	ldr	r2, [r0, #0]
c0d048ee:	2164      	movs	r1, #100	; 0x64
c0d048f0:	2a63      	cmp	r2, #99	; 0x63
c0d048f2:	d800      	bhi.n	c0d048f6 <io_seproxyhal_handle_event+0x4a>
c0d048f4:	6801      	ldr	r1, [r0, #0]
c0d048f6:	6802      	ldr	r2, [r0, #0]
c0d048f8:	1a51      	subs	r1, r2, r1
c0d048fa:	6001      	str	r1, [r0, #0]
        #warning TODO use real ticker event interval here instead of the x100ms multiplier
        if (!G_io_timeout) {
c0d048fc:	6800      	ldr	r0, [r0, #0]
c0d048fe:	2800      	cmp	r0, #0
c0d04900:	d00b      	beq.n	c0d0491a <io_seproxyhal_handle_event+0x6e>
          G_io_apdu_state = APDU_IDLE;
          THROW(EXCEPTION_IO_RESET);
        }
      }
    default:
      return io_event(CHANNEL_SPI);
c0d04902:	2002      	movs	r0, #2
c0d04904:	f7fe fcd8 	bl	c0d032b8 <io_event>
  }
  // defaulty return as not processed
  return 0;
}
c0d04908:	bd80      	pop	{r7, pc}
c0d0490a:	2000      	movs	r0, #0
      }
      io_seproxyhal_handle_usb_event();
      return 1;

    case SEPROXYHAL_TAG_USB_EP_XFER_EVENT:
      if (rx_len < 3+3) {
c0d0490c:	2906      	cmp	r1, #6
c0d0490e:	d200      	bcs.n	c0d04912 <io_seproxyhal_handle_event+0x66>
    default:
      return io_event(CHANNEL_SPI);
  }
  // defaulty return as not processed
  return 0;
}
c0d04910:	bd80      	pop	{r7, pc}
    case SEPROXYHAL_TAG_USB_EP_XFER_EVENT:
      if (rx_len < 3+3) {
        // error !
        return 0;
      }
      io_seproxyhal_handle_usb_ep_xfer_event();
c0d04912:	f7ff ff59 	bl	c0d047c8 <io_seproxyhal_handle_usb_ep_xfer_event>
c0d04916:	2001      	movs	r0, #1
    default:
      return io_event(CHANNEL_SPI);
  }
  // defaulty return as not processed
  return 0;
}
c0d04918:	bd80      	pop	{r7, pc}
      if(G_io_timeout) {
        G_io_timeout-=MIN(G_io_timeout, 100);
        #warning TODO use real ticker event interval here instead of the x100ms multiplier
        if (!G_io_timeout) {
          // timeout !
          G_io_apdu_state = APDU_IDLE;
c0d0491a:	4805      	ldr	r0, [pc, #20]	; (c0d04930 <io_seproxyhal_handle_event+0x84>)
c0d0491c:	2100      	movs	r1, #0
c0d0491e:	7001      	strb	r1, [r0, #0]
          THROW(EXCEPTION_IO_RESET);
c0d04920:	2010      	movs	r0, #16
c0d04922:	f7ff fefa 	bl	c0d0471a <os_longjmp>
c0d04926:	46c0      	nop			; (mov r8, r8)
c0d04928:	20001d34 	.word	0x20001d34
c0d0492c:	20001fcc 	.word	0x20001fcc
c0d04930:	20001fd7 	.word	0x20001fd7

c0d04934 <io_usb_send_apdu_data>:
      break;
    }
  }
}

void io_usb_send_apdu_data(unsigned char* buffer, unsigned short length) {
c0d04934:	b580      	push	{r7, lr}
c0d04936:	460a      	mov	r2, r1
c0d04938:	4601      	mov	r1, r0
  // wait for 20 events before hanging up and timeout (~2 seconds of timeout)
  io_usb_send_ep(0x82, buffer, length, 20);
c0d0493a:	2082      	movs	r0, #130	; 0x82
c0d0493c:	2314      	movs	r3, #20
c0d0493e:	f7ff ff6b 	bl	c0d04818 <io_usb_send_ep>
}
c0d04942:	bd80      	pop	{r7, pc}

c0d04944 <io_seproxyhal_handle_capdu_event>:

}
#endif


void io_seproxyhal_handle_capdu_event(void) {
c0d04944:	b580      	push	{r7, lr}
  if(G_io_apdu_state == APDU_IDLE) 
c0d04946:	480b      	ldr	r0, [pc, #44]	; (c0d04974 <io_seproxyhal_handle_capdu_event+0x30>)
c0d04948:	7801      	ldrb	r1, [r0, #0]
c0d0494a:	2900      	cmp	r1, #0
c0d0494c:	d110      	bne.n	c0d04970 <io_seproxyhal_handle_capdu_event+0x2c>
  {
    G_io_apdu_media = IO_APDU_MEDIA_RAW; // for application code
c0d0494e:	490a      	ldr	r1, [pc, #40]	; (c0d04978 <io_seproxyhal_handle_capdu_event+0x34>)
c0d04950:	2205      	movs	r2, #5
c0d04952:	700a      	strb	r2, [r1, #0]
    G_io_apdu_state = APDU_RAW; // for next call to io_exchange
c0d04954:	210a      	movs	r1, #10
c0d04956:	7001      	strb	r1, [r0, #0]
    G_io_apdu_length = U2BE(G_io_seproxyhal_spi_buffer, 1);
c0d04958:	4808      	ldr	r0, [pc, #32]	; (c0d0497c <io_seproxyhal_handle_capdu_event+0x38>)
c0d0495a:	7881      	ldrb	r1, [r0, #2]
c0d0495c:	7842      	ldrb	r2, [r0, #1]
c0d0495e:	0212      	lsls	r2, r2, #8
c0d04960:	430a      	orrs	r2, r1
c0d04962:	4907      	ldr	r1, [pc, #28]	; (c0d04980 <io_seproxyhal_handle_capdu_event+0x3c>)
c0d04964:	800a      	strh	r2, [r1, #0]
    // copy apdu to apdu buffer
    os_memmove(G_io_apdu_buffer, G_io_seproxyhal_spi_buffer+3, G_io_apdu_length);
c0d04966:	880a      	ldrh	r2, [r1, #0]
c0d04968:	1cc1      	adds	r1, r0, #3
c0d0496a:	4806      	ldr	r0, [pc, #24]	; (c0d04984 <io_seproxyhal_handle_capdu_event+0x40>)
c0d0496c:	f7ff fe21 	bl	c0d045b2 <os_memmove>
  }
}
c0d04970:	bd80      	pop	{r7, pc}
c0d04972:	46c0      	nop			; (mov r8, r8)
c0d04974:	20001fd7 	.word	0x20001fd7
c0d04978:	20001fd0 	.word	0x20001fd0
c0d0497c:	20001d34 	.word	0x20001d34
c0d04980:	20001fd8 	.word	0x20001fd8
c0d04984:	20001e6c 	.word	0x20001e6c

c0d04988 <io_seproxyhal_init>:
#ifdef HAVE_BOLOS_APP_STACK_CANARY
#define APP_STACK_CANARY_MAGIC 0xDEAD0031
extern unsigned int app_stack_canary;
#endif // HAVE_BOLOS_APP_STACK_CANARY

void io_seproxyhal_init(void) {
c0d04988:	b510      	push	{r4, lr}
  // Enforce OS compatibility
  check_api_level(CX_COMPAT_APILEVEL);
c0d0498a:	2008      	movs	r0, #8
c0d0498c:	f001 fa0c 	bl	c0d05da8 <check_api_level>

#ifdef HAVE_BOLOS_APP_STACK_CANARY
  app_stack_canary = APP_STACK_CANARY_MAGIC;
#endif // HAVE_BOLOS_APP_STACK_CANARY  

  G_io_apdu_state = APDU_IDLE;
c0d04990:	480a      	ldr	r0, [pc, #40]	; (c0d049bc <io_seproxyhal_init+0x34>)
c0d04992:	2400      	movs	r4, #0
c0d04994:	7004      	strb	r4, [r0, #0]
  G_io_apdu_offset = 0;
c0d04996:	480a      	ldr	r0, [pc, #40]	; (c0d049c0 <io_seproxyhal_init+0x38>)
c0d04998:	8004      	strh	r4, [r0, #0]
  G_io_apdu_length = 0;
c0d0499a:	480a      	ldr	r0, [pc, #40]	; (c0d049c4 <io_seproxyhal_init+0x3c>)
c0d0499c:	8004      	strh	r4, [r0, #0]
  G_io_apdu_seq = 0;
c0d0499e:	480a      	ldr	r0, [pc, #40]	; (c0d049c8 <io_seproxyhal_init+0x40>)
c0d049a0:	8004      	strh	r4, [r0, #0]
  G_io_apdu_media = IO_APDU_MEDIA_NONE;
c0d049a2:	480a      	ldr	r0, [pc, #40]	; (c0d049cc <io_seproxyhal_init+0x44>)
c0d049a4:	7004      	strb	r4, [r0, #0]
  G_io_timeout_limit = NO_TIMEOUT;
c0d049a6:	480a      	ldr	r0, [pc, #40]	; (c0d049d0 <io_seproxyhal_init+0x48>)
c0d049a8:	6004      	str	r4, [r0, #0]
  debug_apdus_offset = 0;
  #endif // DEBUG_APDU


  #ifdef HAVE_USB_APDU
  io_usb_hid_init();
c0d049aa:	f7ff fe1d 	bl	c0d045e8 <io_usb_hid_init>
  io_seproxyhal_init_button();
}

void io_seproxyhal_init_ux(void) {
  // initialize the touch part
  G_bagl_last_touched_not_released_component = NULL;
c0d049ae:	4809      	ldr	r0, [pc, #36]	; (c0d049d4 <io_seproxyhal_init+0x4c>)
c0d049b0:	6004      	str	r4, [r0, #0]

}

void io_seproxyhal_init_button(void) {
  // no button push so far
  G_button_mask = 0;
c0d049b2:	4809      	ldr	r0, [pc, #36]	; (c0d049d8 <io_seproxyhal_init+0x50>)
c0d049b4:	6004      	str	r4, [r0, #0]
  G_button_same_mask_counter = 0;
c0d049b6:	4809      	ldr	r0, [pc, #36]	; (c0d049dc <io_seproxyhal_init+0x54>)
c0d049b8:	6004      	str	r4, [r0, #0]
  io_usb_hid_init();
  #endif // HAVE_USB_APDU

  io_seproxyhal_init_ux();
  io_seproxyhal_init_button();
}
c0d049ba:	bd10      	pop	{r4, pc}
c0d049bc:	20001fd7 	.word	0x20001fd7
c0d049c0:	20001fda 	.word	0x20001fda
c0d049c4:	20001fd8 	.word	0x20001fd8
c0d049c8:	20001fdc 	.word	0x20001fdc
c0d049cc:	20001fd0 	.word	0x20001fd0
c0d049d0:	20001fc8 	.word	0x20001fc8
c0d049d4:	20001fe0 	.word	0x20001fe0
c0d049d8:	20001fe4 	.word	0x20001fe4
c0d049dc:	20001fe8 	.word	0x20001fe8

c0d049e0 <io_seproxyhal_init_ux>:

void io_seproxyhal_init_ux(void) {
  // initialize the touch part
  G_bagl_last_touched_not_released_component = NULL;
c0d049e0:	4801      	ldr	r0, [pc, #4]	; (c0d049e8 <io_seproxyhal_init_ux+0x8>)
c0d049e2:	2100      	movs	r1, #0
c0d049e4:	6001      	str	r1, [r0, #0]

}
c0d049e6:	4770      	bx	lr
c0d049e8:	20001fe0 	.word	0x20001fe0

c0d049ec <io_seproxyhal_touch_out>:
  G_button_same_mask_counter = 0;
}

#ifdef HAVE_BAGL

unsigned int io_seproxyhal_touch_out(const bagl_element_t* element, bagl_element_callback_t before_display) {
c0d049ec:	b5b0      	push	{r4, r5, r7, lr}
c0d049ee:	460d      	mov	r5, r1
c0d049f0:	4604      	mov	r4, r0
  const bagl_element_t* el;
  if (element->out != NULL) {
c0d049f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
c0d049f4:	2800      	cmp	r0, #0
c0d049f6:	d00c      	beq.n	c0d04a12 <io_seproxyhal_touch_out+0x26>
    el = (const bagl_element_t*)PIC(((bagl_element_callback_t)PIC(element->out))(element));
c0d049f8:	f001 f880 	bl	c0d05afc <pic>
c0d049fc:	4601      	mov	r1, r0
c0d049fe:	4620      	mov	r0, r4
c0d04a00:	4788      	blx	r1
c0d04a02:	f001 f87b 	bl	c0d05afc <pic>
c0d04a06:	2100      	movs	r1, #0
    // backward compatible with samples and such
    if (! el) {
c0d04a08:	2800      	cmp	r0, #0
c0d04a0a:	d010      	beq.n	c0d04a2e <io_seproxyhal_touch_out+0x42>
c0d04a0c:	2801      	cmp	r0, #1
c0d04a0e:	d000      	beq.n	c0d04a12 <io_seproxyhal_touch_out+0x26>
c0d04a10:	4604      	mov	r4, r0
      element = el;
    }
  }

  // out function might have triggered a draw of its own during a display callback
  if (before_display) {
c0d04a12:	2d00      	cmp	r5, #0
c0d04a14:	d007      	beq.n	c0d04a26 <io_seproxyhal_touch_out+0x3a>
    el = before_display(element);
c0d04a16:	4620      	mov	r0, r4
c0d04a18:	47a8      	blx	r5
c0d04a1a:	2100      	movs	r1, #0
    if (!el) {
c0d04a1c:	2800      	cmp	r0, #0
c0d04a1e:	d006      	beq.n	c0d04a2e <io_seproxyhal_touch_out+0x42>
c0d04a20:	2801      	cmp	r0, #1
c0d04a22:	d000      	beq.n	c0d04a26 <io_seproxyhal_touch_out+0x3a>
c0d04a24:	4604      	mov	r4, r0
    if ((unsigned int)el != 1) {
      element = el;
    }
  }

  io_seproxyhal_display(element);
c0d04a26:	4620      	mov	r0, r4
c0d04a28:	f7fe fc1c 	bl	c0d03264 <io_seproxyhal_display>
c0d04a2c:	2101      	movs	r1, #1
  return 1;
}
c0d04a2e:	4608      	mov	r0, r1
c0d04a30:	bdb0      	pop	{r4, r5, r7, pc}

c0d04a32 <io_seproxyhal_touch_over>:

unsigned int io_seproxyhal_touch_over(const bagl_element_t* element, bagl_element_callback_t before_display) {
c0d04a32:	b5b0      	push	{r4, r5, r7, lr}
c0d04a34:	b08e      	sub	sp, #56	; 0x38
c0d04a36:	460c      	mov	r4, r1
c0d04a38:	4605      	mov	r5, r0
  bagl_element_t e;
  const bagl_element_t* el;
  if (element->over != NULL) {
c0d04a3a:	6b68      	ldr	r0, [r5, #52]	; 0x34
c0d04a3c:	2800      	cmp	r0, #0
c0d04a3e:	d00c      	beq.n	c0d04a5a <io_seproxyhal_touch_over+0x28>
    el = (const bagl_element_t*)PIC(((bagl_element_callback_t)PIC(element->over))(element));
c0d04a40:	f001 f85c 	bl	c0d05afc <pic>
c0d04a44:	4601      	mov	r1, r0
c0d04a46:	4628      	mov	r0, r5
c0d04a48:	4788      	blx	r1
c0d04a4a:	f001 f857 	bl	c0d05afc <pic>
c0d04a4e:	2100      	movs	r1, #0
    // backward compatible with samples and such
    if (!el) {
c0d04a50:	2800      	cmp	r0, #0
c0d04a52:	d016      	beq.n	c0d04a82 <io_seproxyhal_touch_over+0x50>
c0d04a54:	2801      	cmp	r0, #1
c0d04a56:	d000      	beq.n	c0d04a5a <io_seproxyhal_touch_over+0x28>
c0d04a58:	4605      	mov	r5, r0
c0d04a5a:	4668      	mov	r0, sp
      element = el;
    }
  }

  // over function might have triggered a draw of its own during a display callback
  os_memmove(&e, (void*)element, sizeof(bagl_element_t));
c0d04a5c:	2238      	movs	r2, #56	; 0x38
c0d04a5e:	4629      	mov	r1, r5
c0d04a60:	f7ff fda7 	bl	c0d045b2 <os_memmove>
  e.component.fgcolor = element->overfgcolor;
c0d04a64:	6a68      	ldr	r0, [r5, #36]	; 0x24
c0d04a66:	9004      	str	r0, [sp, #16]
  e.component.bgcolor = element->overbgcolor;
c0d04a68:	6aa8      	ldr	r0, [r5, #40]	; 0x28
c0d04a6a:	9005      	str	r0, [sp, #20]

  //element = &e; // for INARRAY checks, it disturbs a bit. avoid it

  if (before_display) {
c0d04a6c:	2c00      	cmp	r4, #0
c0d04a6e:	d004      	beq.n	c0d04a7a <io_seproxyhal_touch_over+0x48>
    el = before_display(element);
c0d04a70:	4628      	mov	r0, r5
c0d04a72:	47a0      	blx	r4
c0d04a74:	2100      	movs	r1, #0
    element = &e;
    if (!el) {
c0d04a76:	2800      	cmp	r0, #0
c0d04a78:	d003      	beq.n	c0d04a82 <io_seproxyhal_touch_over+0x50>
c0d04a7a:	4668      	mov	r0, sp
  //else 
  {
    element = &e;
  }

  io_seproxyhal_display(element);
c0d04a7c:	f7fe fbf2 	bl	c0d03264 <io_seproxyhal_display>
c0d04a80:	2101      	movs	r1, #1
  return 1;
}
c0d04a82:	4608      	mov	r0, r1
c0d04a84:	b00e      	add	sp, #56	; 0x38
c0d04a86:	bdb0      	pop	{r4, r5, r7, pc}

c0d04a88 <io_seproxyhal_touch_tap>:

unsigned int io_seproxyhal_touch_tap(const bagl_element_t* element, bagl_element_callback_t before_display) {
c0d04a88:	b5b0      	push	{r4, r5, r7, lr}
c0d04a8a:	460d      	mov	r5, r1
c0d04a8c:	4604      	mov	r4, r0
  const bagl_element_t* el;
  if (element->tap != NULL) {
c0d04a8e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
c0d04a90:	2800      	cmp	r0, #0
c0d04a92:	d00c      	beq.n	c0d04aae <io_seproxyhal_touch_tap+0x26>
    el = (const bagl_element_t*)PIC(((bagl_element_callback_t)PIC(element->tap))(element));
c0d04a94:	f001 f832 	bl	c0d05afc <pic>
c0d04a98:	4601      	mov	r1, r0
c0d04a9a:	4620      	mov	r0, r4
c0d04a9c:	4788      	blx	r1
c0d04a9e:	f001 f82d 	bl	c0d05afc <pic>
c0d04aa2:	2100      	movs	r1, #0
    // backward compatible with samples and such
    if (!el) {
c0d04aa4:	2800      	cmp	r0, #0
c0d04aa6:	d010      	beq.n	c0d04aca <io_seproxyhal_touch_tap+0x42>
c0d04aa8:	2801      	cmp	r0, #1
c0d04aaa:	d000      	beq.n	c0d04aae <io_seproxyhal_touch_tap+0x26>
c0d04aac:	4604      	mov	r4, r0
      element = el;
    }
  }

  // tap function might have triggered a draw of its own during a display callback
  if (before_display) {
c0d04aae:	2d00      	cmp	r5, #0
c0d04ab0:	d007      	beq.n	c0d04ac2 <io_seproxyhal_touch_tap+0x3a>
    el = before_display(element);
c0d04ab2:	4620      	mov	r0, r4
c0d04ab4:	47a8      	blx	r5
c0d04ab6:	2100      	movs	r1, #0
    if (!el) {
c0d04ab8:	2800      	cmp	r0, #0
c0d04aba:	d006      	beq.n	c0d04aca <io_seproxyhal_touch_tap+0x42>
c0d04abc:	2801      	cmp	r0, #1
c0d04abe:	d000      	beq.n	c0d04ac2 <io_seproxyhal_touch_tap+0x3a>
c0d04ac0:	4604      	mov	r4, r0
    }
    if ((unsigned int)el != 1) {
      element = el;
    }
  }
  io_seproxyhal_display(element);
c0d04ac2:	4620      	mov	r0, r4
c0d04ac4:	f7fe fbce 	bl	c0d03264 <io_seproxyhal_display>
c0d04ac8:	2101      	movs	r1, #1
  return 1;
}
c0d04aca:	4608      	mov	r0, r1
c0d04acc:	bdb0      	pop	{r4, r5, r7, pc}
	...

c0d04ad0 <io_seproxyhal_touch_element_callback>:
  io_seproxyhal_touch_element_callback(elements, element_count, x, y, event_kind, NULL);  
}

// browse all elements and until an element has changed state, continue browsing
// return if processed or not
void io_seproxyhal_touch_element_callback(const bagl_element_t* elements, unsigned short element_count, unsigned short x, unsigned short y, unsigned char event_kind, bagl_element_callback_t before_display) {
c0d04ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d04ad2:	b087      	sub	sp, #28
c0d04ad4:	9302      	str	r3, [sp, #8]
c0d04ad6:	9203      	str	r2, [sp, #12]
c0d04ad8:	9105      	str	r1, [sp, #20]
  unsigned char comp_idx;
  unsigned char last_touched_not_released_component_was_in_current_array = 0;

  // find the first empty entry
  for (comp_idx=0; comp_idx < element_count; comp_idx++) {
c0d04ada:	2900      	cmp	r1, #0
c0d04adc:	d077      	beq.n	c0d04bce <io_seproxyhal_touch_element_callback+0xfe>
c0d04ade:	9004      	str	r0, [sp, #16]
c0d04ae0:	980d      	ldr	r0, [sp, #52]	; 0x34
c0d04ae2:	9001      	str	r0, [sp, #4]
c0d04ae4:	980c      	ldr	r0, [sp, #48]	; 0x30
c0d04ae6:	9000      	str	r0, [sp, #0]
c0d04ae8:	2500      	movs	r5, #0
c0d04aea:	4b3c      	ldr	r3, [pc, #240]	; (c0d04bdc <io_seproxyhal_touch_element_callback+0x10c>)
c0d04aec:	9506      	str	r5, [sp, #24]
c0d04aee:	462f      	mov	r7, r5
c0d04af0:	461e      	mov	r6, r3
    // process all components matching the x/y/w/h (no break) => fishy for the released out of zone
    // continue processing only if a status has not been sent
    if (io_seproxyhal_spi_is_status_sent()) {
c0d04af2:	f001 fb09 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d04af6:	2800      	cmp	r0, #0
c0d04af8:	d155      	bne.n	c0d04ba6 <io_seproxyhal_touch_element_callback+0xd6>
      // continue instead of return to process all elemnts and therefore discard last touched element
      break;
    }

    // only perform out callback when element was in the current array, else, leave it be
    if (&elements[comp_idx] == G_bagl_last_touched_not_released_component) {
c0d04afa:	2038      	movs	r0, #56	; 0x38
c0d04afc:	4368      	muls	r0, r5
c0d04afe:	9c04      	ldr	r4, [sp, #16]
c0d04b00:	1825      	adds	r5, r4, r0
c0d04b02:	4633      	mov	r3, r6
c0d04b04:	681a      	ldr	r2, [r3, #0]
c0d04b06:	2101      	movs	r1, #1
c0d04b08:	4295      	cmp	r5, r2
c0d04b0a:	d000      	beq.n	c0d04b0e <io_seproxyhal_touch_element_callback+0x3e>
c0d04b0c:	9906      	ldr	r1, [sp, #24]
c0d04b0e:	9106      	str	r1, [sp, #24]
      last_touched_not_released_component_was_in_current_array = 1;
    }

    // the first component drawn with a 
    if ((elements[comp_idx].component.type & BAGL_FLAG_TOUCHABLE) 
c0d04b10:	5620      	ldrsb	r0, [r4, r0]
        && elements[comp_idx].component.x-elements[comp_idx].touch_area_brim <= x && x<elements[comp_idx].component.x+elements[comp_idx].component.width+elements[comp_idx].touch_area_brim
c0d04b12:	2800      	cmp	r0, #0
c0d04b14:	da41      	bge.n	c0d04b9a <io_seproxyhal_touch_element_callback+0xca>
c0d04b16:	2020      	movs	r0, #32
c0d04b18:	5c28      	ldrb	r0, [r5, r0]
c0d04b1a:	2102      	movs	r1, #2
c0d04b1c:	5e69      	ldrsh	r1, [r5, r1]
c0d04b1e:	1a0a      	subs	r2, r1, r0
c0d04b20:	9c03      	ldr	r4, [sp, #12]
c0d04b22:	42a2      	cmp	r2, r4
c0d04b24:	dc39      	bgt.n	c0d04b9a <io_seproxyhal_touch_element_callback+0xca>
c0d04b26:	1841      	adds	r1, r0, r1
c0d04b28:	88ea      	ldrh	r2, [r5, #6]
c0d04b2a:	1889      	adds	r1, r1, r2
        && elements[comp_idx].component.y-elements[comp_idx].touch_area_brim <= y && y<elements[comp_idx].component.y+elements[comp_idx].component.height+elements[comp_idx].touch_area_brim) {
c0d04b2c:	9a03      	ldr	r2, [sp, #12]
c0d04b2e:	428a      	cmp	r2, r1
c0d04b30:	da33      	bge.n	c0d04b9a <io_seproxyhal_touch_element_callback+0xca>
c0d04b32:	2104      	movs	r1, #4
c0d04b34:	5e6c      	ldrsh	r4, [r5, r1]
c0d04b36:	1a22      	subs	r2, r4, r0
c0d04b38:	9902      	ldr	r1, [sp, #8]
c0d04b3a:	428a      	cmp	r2, r1
c0d04b3c:	dc2d      	bgt.n	c0d04b9a <io_seproxyhal_touch_element_callback+0xca>
c0d04b3e:	1820      	adds	r0, r4, r0
c0d04b40:	8929      	ldrh	r1, [r5, #8]
c0d04b42:	1840      	adds	r0, r0, r1
    if (&elements[comp_idx] == G_bagl_last_touched_not_released_component) {
      last_touched_not_released_component_was_in_current_array = 1;
    }

    // the first component drawn with a 
    if ((elements[comp_idx].component.type & BAGL_FLAG_TOUCHABLE) 
c0d04b44:	9902      	ldr	r1, [sp, #8]
c0d04b46:	4281      	cmp	r1, r0
c0d04b48:	da27      	bge.n	c0d04b9a <io_seproxyhal_touch_element_callback+0xca>
        && elements[comp_idx].component.x-elements[comp_idx].touch_area_brim <= x && x<elements[comp_idx].component.x+elements[comp_idx].component.width+elements[comp_idx].touch_area_brim
        && elements[comp_idx].component.y-elements[comp_idx].touch_area_brim <= y && y<elements[comp_idx].component.y+elements[comp_idx].component.height+elements[comp_idx].touch_area_brim) {

      // outing the previous over'ed component
      if (&elements[comp_idx] != G_bagl_last_touched_not_released_component 
c0d04b4a:	6818      	ldr	r0, [r3, #0]
              && G_bagl_last_touched_not_released_component != NULL) {
c0d04b4c:	4285      	cmp	r5, r0
c0d04b4e:	d010      	beq.n	c0d04b72 <io_seproxyhal_touch_element_callback+0xa2>
c0d04b50:	6818      	ldr	r0, [r3, #0]
    if ((elements[comp_idx].component.type & BAGL_FLAG_TOUCHABLE) 
        && elements[comp_idx].component.x-elements[comp_idx].touch_area_brim <= x && x<elements[comp_idx].component.x+elements[comp_idx].component.width+elements[comp_idx].touch_area_brim
        && elements[comp_idx].component.y-elements[comp_idx].touch_area_brim <= y && y<elements[comp_idx].component.y+elements[comp_idx].component.height+elements[comp_idx].touch_area_brim) {

      // outing the previous over'ed component
      if (&elements[comp_idx] != G_bagl_last_touched_not_released_component 
c0d04b52:	2800      	cmp	r0, #0
c0d04b54:	d00d      	beq.n	c0d04b72 <io_seproxyhal_touch_element_callback+0xa2>
              && G_bagl_last_touched_not_released_component != NULL) {
        // only out the previous element if the newly matching will be displayed 
        if (!before_display || before_display(&elements[comp_idx])) {
c0d04b56:	9801      	ldr	r0, [sp, #4]
c0d04b58:	2800      	cmp	r0, #0
c0d04b5a:	d005      	beq.n	c0d04b68 <io_seproxyhal_touch_element_callback+0x98>
c0d04b5c:	4628      	mov	r0, r5
c0d04b5e:	9901      	ldr	r1, [sp, #4]
c0d04b60:	4788      	blx	r1
c0d04b62:	4633      	mov	r3, r6
c0d04b64:	2800      	cmp	r0, #0
c0d04b66:	d018      	beq.n	c0d04b9a <io_seproxyhal_touch_element_callback+0xca>
          if (io_seproxyhal_touch_out(G_bagl_last_touched_not_released_component, before_display)) {
c0d04b68:	6818      	ldr	r0, [r3, #0]
c0d04b6a:	9901      	ldr	r1, [sp, #4]
c0d04b6c:	f7ff ff3e 	bl	c0d049ec <io_seproxyhal_touch_out>
c0d04b70:	e008      	b.n	c0d04b84 <io_seproxyhal_touch_element_callback+0xb4>
c0d04b72:	9800      	ldr	r0, [sp, #0]
        continue;
      }
      */
      
      // callback the hal to notify the component impacted by the user input
      else if (event_kind == SEPROXYHAL_TAG_FINGER_EVENT_RELEASE) {
c0d04b74:	2801      	cmp	r0, #1
c0d04b76:	d009      	beq.n	c0d04b8c <io_seproxyhal_touch_element_callback+0xbc>
c0d04b78:	2802      	cmp	r0, #2
c0d04b7a:	d10e      	bne.n	c0d04b9a <io_seproxyhal_touch_element_callback+0xca>
        if (io_seproxyhal_touch_tap(&elements[comp_idx], before_display)) {
c0d04b7c:	4628      	mov	r0, r5
c0d04b7e:	9901      	ldr	r1, [sp, #4]
c0d04b80:	f7ff ff82 	bl	c0d04a88 <io_seproxyhal_touch_tap>
c0d04b84:	4633      	mov	r3, r6
c0d04b86:	2800      	cmp	r0, #0
c0d04b88:	d007      	beq.n	c0d04b9a <io_seproxyhal_touch_element_callback+0xca>
c0d04b8a:	e022      	b.n	c0d04bd2 <io_seproxyhal_touch_element_callback+0x102>
          return;
        }
      }
      else if (event_kind == SEPROXYHAL_TAG_FINGER_EVENT_TOUCH) {
        // ask for overing
        if (io_seproxyhal_touch_over(&elements[comp_idx], before_display)) {
c0d04b8c:	4628      	mov	r0, r5
c0d04b8e:	9901      	ldr	r1, [sp, #4]
c0d04b90:	f7ff ff4f 	bl	c0d04a32 <io_seproxyhal_touch_over>
c0d04b94:	4633      	mov	r3, r6
c0d04b96:	2800      	cmp	r0, #0
c0d04b98:	d11e      	bne.n	c0d04bd8 <io_seproxyhal_touch_element_callback+0x108>
void io_seproxyhal_touch_element_callback(const bagl_element_t* elements, unsigned short element_count, unsigned short x, unsigned short y, unsigned char event_kind, bagl_element_callback_t before_display) {
  unsigned char comp_idx;
  unsigned char last_touched_not_released_component_was_in_current_array = 0;

  // find the first empty entry
  for (comp_idx=0; comp_idx < element_count; comp_idx++) {
c0d04b9a:	1c7f      	adds	r7, r7, #1
c0d04b9c:	b2fd      	uxtb	r5, r7
c0d04b9e:	9805      	ldr	r0, [sp, #20]
c0d04ba0:	4285      	cmp	r5, r0
c0d04ba2:	d3a5      	bcc.n	c0d04af0 <io_seproxyhal_touch_element_callback+0x20>
c0d04ba4:	e000      	b.n	c0d04ba8 <io_seproxyhal_touch_element_callback+0xd8>
c0d04ba6:	4633      	mov	r3, r6
    }
  }

  // if overing out of component or over another component, the out event is sent after the over event of the previous component
  if(last_touched_not_released_component_was_in_current_array 
    && G_bagl_last_touched_not_released_component != NULL) {
c0d04ba8:	9806      	ldr	r0, [sp, #24]
c0d04baa:	0600      	lsls	r0, r0, #24
c0d04bac:	d00f      	beq.n	c0d04bce <io_seproxyhal_touch_element_callback+0xfe>
c0d04bae:	6818      	ldr	r0, [r3, #0]
      }
    }
  }

  // if overing out of component or over another component, the out event is sent after the over event of the previous component
  if(last_touched_not_released_component_was_in_current_array 
c0d04bb0:	2800      	cmp	r0, #0
c0d04bb2:	d00c      	beq.n	c0d04bce <io_seproxyhal_touch_element_callback+0xfe>
    && G_bagl_last_touched_not_released_component != NULL) {

    // we won't be able to notify the out, don't do it, in case a diplay refused the dra of the relased element and the position matched another element of the array (in autocomplete for example)
    if (io_seproxyhal_spi_is_status_sent()) {
c0d04bb4:	f001 faa8 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d04bb8:	4631      	mov	r1, r6
c0d04bba:	2800      	cmp	r0, #0
c0d04bbc:	d107      	bne.n	c0d04bce <io_seproxyhal_touch_element_callback+0xfe>
      return;
    }
    
    if (io_seproxyhal_touch_out(G_bagl_last_touched_not_released_component, before_display)) {
c0d04bbe:	6808      	ldr	r0, [r1, #0]
c0d04bc0:	9901      	ldr	r1, [sp, #4]
c0d04bc2:	f7ff ff13 	bl	c0d049ec <io_seproxyhal_touch_out>
c0d04bc6:	2800      	cmp	r0, #0
c0d04bc8:	d001      	beq.n	c0d04bce <io_seproxyhal_touch_element_callback+0xfe>
      // ok component out has been emitted
      G_bagl_last_touched_not_released_component = NULL;
c0d04bca:	2000      	movs	r0, #0
c0d04bcc:	6030      	str	r0, [r6, #0]
    }
  }

  // not processed
}
c0d04bce:	b007      	add	sp, #28
c0d04bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d04bd2:	2000      	movs	r0, #0
c0d04bd4:	6018      	str	r0, [r3, #0]
c0d04bd6:	e7fa      	b.n	c0d04bce <io_seproxyhal_touch_element_callback+0xfe>
      }
      else if (event_kind == SEPROXYHAL_TAG_FINGER_EVENT_TOUCH) {
        // ask for overing
        if (io_seproxyhal_touch_over(&elements[comp_idx], before_display)) {
          // remember the last touched component
          G_bagl_last_touched_not_released_component = (bagl_element_t*)&elements[comp_idx];
c0d04bd8:	601d      	str	r5, [r3, #0]
c0d04bda:	e7f8      	b.n	c0d04bce <io_seproxyhal_touch_element_callback+0xfe>
c0d04bdc:	20001fe0 	.word	0x20001fe0

c0d04be0 <io_seproxyhal_display_icon>:
  // remaining length of bitmap bits to be displayed
  return len;
}
#endif // SEPROXYHAL_TAG_SCREEN_DISPLAY_RAW_STATUS

void io_seproxyhal_display_icon(bagl_component_t* icon_component, bagl_icon_details_t* icon_details) {
c0d04be0:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d04be2:	b089      	sub	sp, #36	; 0x24
c0d04be4:	460c      	mov	r4, r1
c0d04be6:	4601      	mov	r1, r0
c0d04be8:	ad02      	add	r5, sp, #8
c0d04bea:	221c      	movs	r2, #28
  bagl_component_t icon_component_mod;
  // ensure not being out of bounds in the icon component agianst the declared icon real size
  os_memmove(&icon_component_mod, icon_component, sizeof(bagl_component_t));
c0d04bec:	4628      	mov	r0, r5
c0d04bee:	9201      	str	r2, [sp, #4]
c0d04bf0:	f7ff fcdf 	bl	c0d045b2 <os_memmove>
  icon_component_mod.width = icon_details->width;
c0d04bf4:	6821      	ldr	r1, [r4, #0]
c0d04bf6:	80e9      	strh	r1, [r5, #6]
  icon_component_mod.height = icon_details->height;
c0d04bf8:	6862      	ldr	r2, [r4, #4]
c0d04bfa:	812a      	strh	r2, [r5, #8]
  // component type = ICON, provided bitmap
  // => bitmap transmitted


  // color index size
  unsigned int h = (1<<(icon_details->bpp))*sizeof(unsigned int); 
c0d04bfc:	68a0      	ldr	r0, [r4, #8]
  unsigned int w = ((icon_component->width*icon_component->height*icon_details->bpp)/8)+((icon_component->width*icon_component->height*icon_details->bpp)%8?1:0);
  unsigned short length = sizeof(bagl_component_t)
                          +1 /* bpp */
                          +h /* color index */
                          +w; /* image bitmap size */
  G_io_seproxyhal_spi_buffer[0] = SEPROXYHAL_TAG_SCREEN_DISPLAY_STATUS;
c0d04bfe:	4f1a      	ldr	r7, [pc, #104]	; (c0d04c68 <io_seproxyhal_display_icon+0x88>)
c0d04c00:	2365      	movs	r3, #101	; 0x65
c0d04c02:	703b      	strb	r3, [r7, #0]


  // color index size
  unsigned int h = (1<<(icon_details->bpp))*sizeof(unsigned int); 
  // bitmap size
  unsigned int w = ((icon_component->width*icon_component->height*icon_details->bpp)/8)+((icon_component->width*icon_component->height*icon_details->bpp)%8?1:0);
c0d04c04:	b292      	uxth	r2, r2
c0d04c06:	4342      	muls	r2, r0
c0d04c08:	b28b      	uxth	r3, r1
c0d04c0a:	4353      	muls	r3, r2
c0d04c0c:	08d9      	lsrs	r1, r3, #3
c0d04c0e:	1c4e      	adds	r6, r1, #1
c0d04c10:	2207      	movs	r2, #7
c0d04c12:	4213      	tst	r3, r2
c0d04c14:	d100      	bne.n	c0d04c18 <io_seproxyhal_display_icon+0x38>
c0d04c16:	460e      	mov	r6, r1
c0d04c18:	4631      	mov	r1, r6
c0d04c1a:	9100      	str	r1, [sp, #0]
c0d04c1c:	2604      	movs	r6, #4
  // component type = ICON, provided bitmap
  // => bitmap transmitted


  // color index size
  unsigned int h = (1<<(icon_details->bpp))*sizeof(unsigned int); 
c0d04c1e:	4086      	lsls	r6, r0
  // bitmap size
  unsigned int w = ((icon_component->width*icon_component->height*icon_details->bpp)/8)+((icon_component->width*icon_component->height*icon_details->bpp)%8?1:0);
  unsigned short length = sizeof(bagl_component_t)
                          +1 /* bpp */
                          +h /* color index */
c0d04c20:	1870      	adds	r0, r6, r1
                          +w; /* image bitmap size */
c0d04c22:	301d      	adds	r0, #29
  G_io_seproxyhal_spi_buffer[0] = SEPROXYHAL_TAG_SCREEN_DISPLAY_STATUS;
  G_io_seproxyhal_spi_buffer[1] = length>>8;
c0d04c24:	0a01      	lsrs	r1, r0, #8
c0d04c26:	7079      	strb	r1, [r7, #1]
  G_io_seproxyhal_spi_buffer[2] = length;
c0d04c28:	70b8      	strb	r0, [r7, #2]
c0d04c2a:	2103      	movs	r1, #3
  io_seproxyhal_spi_send(G_io_seproxyhal_spi_buffer, 3);
c0d04c2c:	4638      	mov	r0, r7
c0d04c2e:	f001 fa55 	bl	c0d060dc <io_seproxyhal_spi_send>
  io_seproxyhal_spi_send((unsigned char*)icon_component, sizeof(bagl_component_t));
c0d04c32:	4628      	mov	r0, r5
c0d04c34:	9901      	ldr	r1, [sp, #4]
c0d04c36:	f001 fa51 	bl	c0d060dc <io_seproxyhal_spi_send>
  G_io_seproxyhal_spi_buffer[0] = icon_details->bpp;
c0d04c3a:	68a0      	ldr	r0, [r4, #8]
c0d04c3c:	7038      	strb	r0, [r7, #0]
c0d04c3e:	2101      	movs	r1, #1
  io_seproxyhal_spi_send(G_io_seproxyhal_spi_buffer, 1);
c0d04c40:	4638      	mov	r0, r7
c0d04c42:	f001 fa4b 	bl	c0d060dc <io_seproxyhal_spi_send>
  io_seproxyhal_spi_send((unsigned char*)PIC(icon_details->colors), h);
c0d04c46:	68e0      	ldr	r0, [r4, #12]
c0d04c48:	f000 ff58 	bl	c0d05afc <pic>
c0d04c4c:	b2b1      	uxth	r1, r6
c0d04c4e:	f001 fa45 	bl	c0d060dc <io_seproxyhal_spi_send>
  io_seproxyhal_spi_send((unsigned char*)PIC(icon_details->bitmap), w);
c0d04c52:	9800      	ldr	r0, [sp, #0]
c0d04c54:	b285      	uxth	r5, r0
c0d04c56:	6920      	ldr	r0, [r4, #16]
c0d04c58:	f000 ff50 	bl	c0d05afc <pic>
c0d04c5c:	4629      	mov	r1, r5
c0d04c5e:	f001 fa3d 	bl	c0d060dc <io_seproxyhal_spi_send>
#endif // !SEPROXYHAL_TAG_SCREEN_DISPLAY_RAW_STATUS
}
c0d04c62:	b009      	add	sp, #36	; 0x24
c0d04c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d04c66:	46c0      	nop			; (mov r8, r8)
c0d04c68:	20001d34 	.word	0x20001d34

c0d04c6c <io_seproxyhal_display_default>:

void io_seproxyhal_display_default(const bagl_element_t * element) {
c0d04c6c:	b570      	push	{r4, r5, r6, lr}
c0d04c6e:	4604      	mov	r4, r0
  // process automagically address from rom and from ram
  unsigned int type = (element->component.type & ~(BAGL_FLAG_TOUCHABLE));
c0d04c70:	7820      	ldrb	r0, [r4, #0]
c0d04c72:	267f      	movs	r6, #127	; 0x7f
c0d04c74:	4006      	ands	r6, r0

  // avoid sending another status :), fixes a lot of bugs in the end
  if (io_seproxyhal_spi_is_status_sent()) {
c0d04c76:	f001 fa47 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d04c7a:	2800      	cmp	r0, #0
c0d04c7c:	d130      	bne.n	c0d04ce0 <io_seproxyhal_display_default+0x74>
c0d04c7e:	2e00      	cmp	r6, #0
c0d04c80:	d02e      	beq.n	c0d04ce0 <io_seproxyhal_display_default+0x74>
    return;
  }

  if (type != BAGL_NONE) {
    if (element->text != NULL) {
c0d04c82:	69e0      	ldr	r0, [r4, #28]
c0d04c84:	2800      	cmp	r0, #0
c0d04c86:	d01d      	beq.n	c0d04cc4 <io_seproxyhal_display_default+0x58>
      unsigned int text_adr = PIC((unsigned int)element->text);
c0d04c88:	f000 ff38 	bl	c0d05afc <pic>
c0d04c8c:	4605      	mov	r5, r0
      // consider an icon details descriptor is pointed by the context
      if (type == BAGL_ICON && element->component.icon_id == 0) {
c0d04c8e:	2e05      	cmp	r6, #5
c0d04c90:	d102      	bne.n	c0d04c98 <io_seproxyhal_display_default+0x2c>
c0d04c92:	7ea0      	ldrb	r0, [r4, #26]
c0d04c94:	2800      	cmp	r0, #0
c0d04c96:	d024      	beq.n	c0d04ce2 <io_seproxyhal_display_default+0x76>
        io_seproxyhal_display_icon(&element->component, (bagl_icon_details_t*)text_adr);
      }
      else {
        unsigned short length = sizeof(bagl_component_t)+strlen((const char*)text_adr);
c0d04c98:	4628      	mov	r0, r5
c0d04c9a:	f002 fe2d 	bl	c0d078f8 <strlen>
c0d04c9e:	4606      	mov	r6, r0
        G_io_seproxyhal_spi_buffer[0] = SEPROXYHAL_TAG_SCREEN_DISPLAY_STATUS;
c0d04ca0:	4812      	ldr	r0, [pc, #72]	; (c0d04cec <io_seproxyhal_display_default+0x80>)
c0d04ca2:	2165      	movs	r1, #101	; 0x65
c0d04ca4:	7001      	strb	r1, [r0, #0]
      // consider an icon details descriptor is pointed by the context
      if (type == BAGL_ICON && element->component.icon_id == 0) {
        io_seproxyhal_display_icon(&element->component, (bagl_icon_details_t*)text_adr);
      }
      else {
        unsigned short length = sizeof(bagl_component_t)+strlen((const char*)text_adr);
c0d04ca6:	4631      	mov	r1, r6
c0d04ca8:	311c      	adds	r1, #28
        G_io_seproxyhal_spi_buffer[0] = SEPROXYHAL_TAG_SCREEN_DISPLAY_STATUS;
        G_io_seproxyhal_spi_buffer[1] = length>>8;
c0d04caa:	0a0a      	lsrs	r2, r1, #8
c0d04cac:	7042      	strb	r2, [r0, #1]
        G_io_seproxyhal_spi_buffer[2] = length;
c0d04cae:	7081      	strb	r1, [r0, #2]
        io_seproxyhal_spi_send(G_io_seproxyhal_spi_buffer, 3);
c0d04cb0:	2103      	movs	r1, #3
c0d04cb2:	f001 fa13 	bl	c0d060dc <io_seproxyhal_spi_send>
c0d04cb6:	211c      	movs	r1, #28
        io_seproxyhal_spi_send((unsigned char*)&element->component, sizeof(bagl_component_t));
c0d04cb8:	4620      	mov	r0, r4
c0d04cba:	f001 fa0f 	bl	c0d060dc <io_seproxyhal_spi_send>
        io_seproxyhal_spi_send((unsigned char*)text_adr, length-sizeof(bagl_component_t));
c0d04cbe:	b2b1      	uxth	r1, r6
c0d04cc0:	4628      	mov	r0, r5
c0d04cc2:	e00b      	b.n	c0d04cdc <io_seproxyhal_display_default+0x70>
      }
    }
    else {
      unsigned short length = sizeof(bagl_component_t);
      G_io_seproxyhal_spi_buffer[0] = SEPROXYHAL_TAG_SCREEN_DISPLAY_STATUS;
c0d04cc4:	4809      	ldr	r0, [pc, #36]	; (c0d04cec <io_seproxyhal_display_default+0x80>)
c0d04cc6:	2165      	movs	r1, #101	; 0x65
c0d04cc8:	7001      	strb	r1, [r0, #0]
      G_io_seproxyhal_spi_buffer[1] = length>>8;
c0d04cca:	2100      	movs	r1, #0
c0d04ccc:	7041      	strb	r1, [r0, #1]
c0d04cce:	251c      	movs	r5, #28
      G_io_seproxyhal_spi_buffer[2] = length;
c0d04cd0:	7085      	strb	r5, [r0, #2]
      io_seproxyhal_spi_send(G_io_seproxyhal_spi_buffer, 3);
c0d04cd2:	2103      	movs	r1, #3
c0d04cd4:	f001 fa02 	bl	c0d060dc <io_seproxyhal_spi_send>
      io_seproxyhal_spi_send((unsigned char*)&element->component, sizeof(bagl_component_t));
c0d04cd8:	4620      	mov	r0, r4
c0d04cda:	4629      	mov	r1, r5
c0d04cdc:	f001 f9fe 	bl	c0d060dc <io_seproxyhal_spi_send>
    }
  }
}
c0d04ce0:	bd70      	pop	{r4, r5, r6, pc}
  if (type != BAGL_NONE) {
    if (element->text != NULL) {
      unsigned int text_adr = PIC((unsigned int)element->text);
      // consider an icon details descriptor is pointed by the context
      if (type == BAGL_ICON && element->component.icon_id == 0) {
        io_seproxyhal_display_icon(&element->component, (bagl_icon_details_t*)text_adr);
c0d04ce2:	4620      	mov	r0, r4
c0d04ce4:	4629      	mov	r1, r5
c0d04ce6:	f7ff ff7b 	bl	c0d04be0 <io_seproxyhal_display_icon>
      G_io_seproxyhal_spi_buffer[2] = length;
      io_seproxyhal_spi_send(G_io_seproxyhal_spi_buffer, 3);
      io_seproxyhal_spi_send((unsigned char*)&element->component, sizeof(bagl_component_t));
    }
  }
}
c0d04cea:	bd70      	pop	{r4, r5, r6, pc}
c0d04cec:	20001d34 	.word	0x20001d34

c0d04cf0 <bagl_label_roundtrip_duration_ms>:

unsigned int bagl_label_roundtrip_duration_ms(const bagl_element_t* e, unsigned int average_char_width) {
c0d04cf0:	b580      	push	{r7, lr}
c0d04cf2:	460a      	mov	r2, r1
  return bagl_label_roundtrip_duration_ms_buf(e, e->text, average_char_width);
c0d04cf4:	69c1      	ldr	r1, [r0, #28]
c0d04cf6:	f000 f801 	bl	c0d04cfc <bagl_label_roundtrip_duration_ms_buf>
c0d04cfa:	bd80      	pop	{r7, pc}

c0d04cfc <bagl_label_roundtrip_duration_ms_buf>:
}

unsigned int bagl_label_roundtrip_duration_ms_buf(const bagl_element_t* e, const char* str, unsigned int average_char_width) {
c0d04cfc:	b570      	push	{r4, r5, r6, lr}
c0d04cfe:	4616      	mov	r6, r2
c0d04d00:	4604      	mov	r4, r0
c0d04d02:	2500      	movs	r5, #0
  // not a scrollable label
  if (e == NULL || (e->component.type != BAGL_LABEL && e->component.type != BAGL_LABELINE)) {
c0d04d04:	2c00      	cmp	r4, #0
c0d04d06:	d01c      	beq.n	c0d04d42 <bagl_label_roundtrip_duration_ms_buf+0x46>
c0d04d08:	7820      	ldrb	r0, [r4, #0]
c0d04d0a:	2807      	cmp	r0, #7
c0d04d0c:	d001      	beq.n	c0d04d12 <bagl_label_roundtrip_duration_ms_buf+0x16>
c0d04d0e:	2802      	cmp	r0, #2
c0d04d10:	d117      	bne.n	c0d04d42 <bagl_label_roundtrip_duration_ms_buf+0x46>
    return 0;
  }
  
  unsigned int text_adr = PIC((unsigned int)str);
c0d04d12:	4608      	mov	r0, r1
c0d04d14:	f000 fef2 	bl	c0d05afc <pic>
  unsigned int textlen = 0;
  
  // no delay, no text to display
  if (!text_adr) {
c0d04d18:	2800      	cmp	r0, #0
c0d04d1a:	d012      	beq.n	c0d04d42 <bagl_label_roundtrip_duration_ms_buf+0x46>
    return 0;
  }
  textlen = strlen((const char*)text_adr);
c0d04d1c:	f002 fdec 	bl	c0d078f8 <strlen>
  
  // no delay, all text fits
  textlen = textlen * average_char_width;
c0d04d20:	4346      	muls	r6, r0
  if (textlen <= e->component.width) {
c0d04d22:	88e0      	ldrh	r0, [r4, #6]
c0d04d24:	4286      	cmp	r6, r0
c0d04d26:	d90c      	bls.n	c0d04d42 <bagl_label_roundtrip_duration_ms_buf+0x46>
    return 0; 
  }
  
  // compute scrolled text length
  return 2*(textlen - e->component.width)*1000/e->component.icon_id + 2*(e->component.stroke & ~(0x80))*100;
c0d04d28:	1a31      	subs	r1, r6, r0
c0d04d2a:	207d      	movs	r0, #125	; 0x7d
c0d04d2c:	0100      	lsls	r0, r0, #4
c0d04d2e:	4348      	muls	r0, r1
c0d04d30:	7ea1      	ldrb	r1, [r4, #26]
c0d04d32:	f002 fc9d 	bl	c0d07670 <__aeabi_uidiv>
c0d04d36:	7aa1      	ldrb	r1, [r4, #10]
c0d04d38:	0049      	lsls	r1, r1, #1
c0d04d3a:	b2c9      	uxtb	r1, r1
c0d04d3c:	2264      	movs	r2, #100	; 0x64
c0d04d3e:	434a      	muls	r2, r1
c0d04d40:	1815      	adds	r5, r2, r0
}
c0d04d42:	4628      	mov	r0, r5
c0d04d44:	bd70      	pop	{r4, r5, r6, pc}
	...

c0d04d48 <io_seproxyhal_button_push>:
  G_io_seproxyhal_spi_buffer[3] = (backlight_percentage?0x80:0)|(flags & 0x7F); // power on
  G_io_seproxyhal_spi_buffer[4] = backlight_percentage;
  io_seproxyhal_spi_send(G_io_seproxyhal_spi_buffer, 5);
}

void io_seproxyhal_button_push(button_push_callback_t button_callback, unsigned int new_button_mask) {
c0d04d48:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d04d4a:	b081      	sub	sp, #4
c0d04d4c:	4604      	mov	r4, r0
  if (button_callback) {
c0d04d4e:	2c00      	cmp	r4, #0
c0d04d50:	d02b      	beq.n	c0d04daa <io_seproxyhal_button_push+0x62>
    unsigned int button_mask;
    unsigned int button_same_mask_counter;
    // enable speeded up long push
    if (new_button_mask == G_button_mask) {
c0d04d52:	4817      	ldr	r0, [pc, #92]	; (c0d04db0 <io_seproxyhal_button_push+0x68>)
c0d04d54:	6802      	ldr	r2, [r0, #0]
c0d04d56:	428a      	cmp	r2, r1
c0d04d58:	d103      	bne.n	c0d04d62 <io_seproxyhal_button_push+0x1a>
      // each 100ms ~
      G_button_same_mask_counter++;
c0d04d5a:	4a16      	ldr	r2, [pc, #88]	; (c0d04db4 <io_seproxyhal_button_push+0x6c>)
c0d04d5c:	6813      	ldr	r3, [r2, #0]
c0d04d5e:	1c5b      	adds	r3, r3, #1
c0d04d60:	6013      	str	r3, [r2, #0]
    }

    // append the button mask
    button_mask = G_button_mask | new_button_mask;
c0d04d62:	6806      	ldr	r6, [r0, #0]
c0d04d64:	430e      	orrs	r6, r1

    // pre reset variable due to os_sched_exit
    button_same_mask_counter = G_button_same_mask_counter;
c0d04d66:	4a13      	ldr	r2, [pc, #76]	; (c0d04db4 <io_seproxyhal_button_push+0x6c>)
c0d04d68:	6815      	ldr	r5, [r2, #0]
c0d04d6a:	4f13      	ldr	r7, [pc, #76]	; (c0d04db8 <io_seproxyhal_button_push+0x70>)

    // reset button mask
    if (new_button_mask == 0) {
c0d04d6c:	2900      	cmp	r1, #0
c0d04d6e:	d001      	beq.n	c0d04d74 <io_seproxyhal_button_push+0x2c>

      // notify button released event
      button_mask |= BUTTON_EVT_RELEASED;
    }
    else {
      G_button_mask = button_mask;
c0d04d70:	6006      	str	r6, [r0, #0]
c0d04d72:	e004      	b.n	c0d04d7e <io_seproxyhal_button_push+0x36>
c0d04d74:	2300      	movs	r3, #0
    button_same_mask_counter = G_button_same_mask_counter;

    // reset button mask
    if (new_button_mask == 0) {
      // reset next state when button are released
      G_button_mask = 0;
c0d04d76:	6003      	str	r3, [r0, #0]
      G_button_same_mask_counter=0;
c0d04d78:	6013      	str	r3, [r2, #0]

      // notify button released event
      button_mask |= BUTTON_EVT_RELEASED;
c0d04d7a:	1c7b      	adds	r3, r7, #1
c0d04d7c:	431e      	orrs	r6, r3
    else {
      G_button_mask = button_mask;
    }

    // reset counter when button mask changes
    if (new_button_mask != G_button_mask) {
c0d04d7e:	6800      	ldr	r0, [r0, #0]
c0d04d80:	4288      	cmp	r0, r1
c0d04d82:	d001      	beq.n	c0d04d88 <io_seproxyhal_button_push+0x40>
      G_button_same_mask_counter=0;
c0d04d84:	2000      	movs	r0, #0
c0d04d86:	6010      	str	r0, [r2, #0]
    }

    if (button_same_mask_counter >= BUTTON_FAST_THRESHOLD_CS) {
c0d04d88:	2d08      	cmp	r5, #8
c0d04d8a:	d30b      	bcc.n	c0d04da4 <io_seproxyhal_button_push+0x5c>
      // fast bit when pressing and timing is right
      if ((button_same_mask_counter%BUTTON_FAST_ACTION_CS) == 0) {
c0d04d8c:	2103      	movs	r1, #3
c0d04d8e:	4628      	mov	r0, r5
c0d04d90:	f002 fcf4 	bl	c0d0777c <__aeabi_uidivmod>
        button_mask |= BUTTON_EVT_FAST;
c0d04d94:	2001      	movs	r0, #1
c0d04d96:	0780      	lsls	r0, r0, #30
c0d04d98:	4330      	orrs	r0, r6
      G_button_same_mask_counter=0;
    }

    if (button_same_mask_counter >= BUTTON_FAST_THRESHOLD_CS) {
      // fast bit when pressing and timing is right
      if ((button_same_mask_counter%BUTTON_FAST_ACTION_CS) == 0) {
c0d04d9a:	2900      	cmp	r1, #0
c0d04d9c:	d000      	beq.n	c0d04da0 <io_seproxyhal_button_push+0x58>
c0d04d9e:	4630      	mov	r0, r6
      }
      */

      // discard the release event after a fastskip has been detected, to avoid strange at release behavior
      // and also to enable user to cancel an operation by starting triggering the fast skip
      button_mask &= ~BUTTON_EVT_RELEASED;
c0d04da0:	4038      	ands	r0, r7
c0d04da2:	e000      	b.n	c0d04da6 <io_seproxyhal_button_push+0x5e>
c0d04da4:	4630      	mov	r0, r6
    }

    // indicate if button have been released
    button_callback(button_mask, button_same_mask_counter);
c0d04da6:	4629      	mov	r1, r5
c0d04da8:	47a0      	blx	r4
  }
}
c0d04daa:	b001      	add	sp, #4
c0d04dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d04dae:	46c0      	nop			; (mov r8, r8)
c0d04db0:	20001fe4 	.word	0x20001fe4
c0d04db4:	20001fe8 	.word	0x20001fe8
c0d04db8:	7fffffff 	.word	0x7fffffff

c0d04dbc <io_exchange>:

#ifdef HAVE_IO_U2F
u2f_service_t G_io_u2f;
#endif // HAVE_IO_U2F

unsigned short io_exchange(unsigned char channel, unsigned short tx_len) {
c0d04dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d04dbe:	b083      	sub	sp, #12
c0d04dc0:	460d      	mov	r5, r1
c0d04dc2:	4604      	mov	r4, r0
    }
  }
  after_debug:
#endif // DEBUG_APDU

  switch(channel&~(IO_FLAGS)) {
c0d04dc4:	200f      	movs	r0, #15
c0d04dc6:	4204      	tst	r4, r0
c0d04dc8:	d007      	beq.n	c0d04dda <io_exchange+0x1e>
      }
    }
    break;

  default:
    return io_exchange_al(channel, tx_len);
c0d04dca:	4620      	mov	r0, r4
c0d04dcc:	4629      	mov	r1, r5
c0d04dce:	f7fe fa51 	bl	c0d03274 <io_exchange_al>
c0d04dd2:	4605      	mov	r5, r0
  }
}
c0d04dd4:	b2a8      	uxth	r0, r5
c0d04dd6:	b003      	add	sp, #12
c0d04dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

  switch(channel&~(IO_FLAGS)) {
  case CHANNEL_APDU:
    // TODO work up the spi state machine over the HAL proxy until an APDU is available

    if (tx_len && !(channel&IO_ASYNCH_REPLY)) {
c0d04dda:	2710      	movs	r7, #16
c0d04ddc:	4027      	ands	r7, r4
            LOG("invalid state for APDU reply\n");
            THROW(INVALID_STATE);
            break;

          case APDU_RAW:
            if (tx_len > sizeof(G_io_apdu_buffer)) {
c0d04dde:	204b      	movs	r0, #75	; 0x4b
c0d04de0:	0086      	lsls	r6, r0, #2
c0d04de2:	4968      	ldr	r1, [pc, #416]	; (c0d04f84 <io_exchange+0x1c8>)

  switch(channel&~(IO_FLAGS)) {
  case CHANNEL_APDU:
    // TODO work up the spi state machine over the HAL proxy until an APDU is available

    if (tx_len && !(channel&IO_ASYNCH_REPLY)) {
c0d04de4:	2d00      	cmp	r5, #0
c0d04de6:	d06e      	beq.n	c0d04ec6 <io_exchange+0x10a>
c0d04de8:	2f00      	cmp	r7, #0
c0d04dea:	d16c      	bne.n	c0d04ec6 <io_exchange+0x10a>
c0d04dec:	9102      	str	r1, [sp, #8]
      // prepare response timeout
      G_io_timeout = IO_RAPDU_TRANSMIT_TIMEOUT_MS;
c0d04dee:	207d      	movs	r0, #125	; 0x7d
c0d04df0:	0100      	lsls	r0, r0, #4
c0d04df2:	4965      	ldr	r1, [pc, #404]	; (c0d04f88 <io_exchange+0x1cc>)
c0d04df4:	6008      	str	r0, [r1, #0]

      // until the whole RAPDU is transmitted, send chunks using the current mode for communication
      for (;;) {
        switch(G_io_apdu_state) {
c0d04df6:	4865      	ldr	r0, [pc, #404]	; (c0d04f8c <io_exchange+0x1d0>)
c0d04df8:	7800      	ldrb	r0, [r0, #0]
c0d04dfa:	2808      	cmp	r0, #8
c0d04dfc:	dd17      	ble.n	c0d04e2e <io_exchange+0x72>
c0d04dfe:	2809      	cmp	r0, #9
c0d04e00:	d01f      	beq.n	c0d04e42 <io_exchange+0x86>
c0d04e02:	280a      	cmp	r0, #10
c0d04e04:	d144      	bne.n	c0d04e90 <io_exchange+0xd4>
            LOG("invalid state for APDU reply\n");
            THROW(INVALID_STATE);
            break;

          case APDU_RAW:
            if (tx_len > sizeof(G_io_apdu_buffer)) {
c0d04e06:	4630      	mov	r0, r6
c0d04e08:	3025      	adds	r0, #37	; 0x25
c0d04e0a:	b280      	uxth	r0, r0
c0d04e0c:	4285      	cmp	r5, r0
c0d04e0e:	d900      	bls.n	c0d04e12 <io_exchange+0x56>
c0d04e10:	e0b5      	b.n	c0d04f7e <io_exchange+0x1c2>
              THROW(INVALID_PARAMETER);
            }
            // reply the RAW APDU over SEPROXYHAL protocol
            G_io_seproxyhal_spi_buffer[0]  = SEPROXYHAL_TAG_RAPDU;
c0d04e12:	4861      	ldr	r0, [pc, #388]	; (c0d04f98 <io_exchange+0x1dc>)
c0d04e14:	2153      	movs	r1, #83	; 0x53
c0d04e16:	7001      	strb	r1, [r0, #0]
            G_io_seproxyhal_spi_buffer[1]  = (tx_len)>>8;
c0d04e18:	0a29      	lsrs	r1, r5, #8
c0d04e1a:	7041      	strb	r1, [r0, #1]
            G_io_seproxyhal_spi_buffer[2]  = (tx_len);
c0d04e1c:	7085      	strb	r5, [r0, #2]
            io_seproxyhal_spi_send(G_io_seproxyhal_spi_buffer, 3);
c0d04e1e:	2103      	movs	r1, #3
c0d04e20:	f001 f95c 	bl	c0d060dc <io_seproxyhal_spi_send>
            io_seproxyhal_spi_send(G_io_apdu_buffer, tx_len);
c0d04e24:	485a      	ldr	r0, [pc, #360]	; (c0d04f90 <io_exchange+0x1d4>)
c0d04e26:	4629      	mov	r1, r5
c0d04e28:	f001 f958 	bl	c0d060dc <io_seproxyhal_spi_send>
c0d04e2c:	e02c      	b.n	c0d04e88 <io_exchange+0xcc>
c0d04e2e:	2807      	cmp	r0, #7
c0d04e30:	d12c      	bne.n	c0d04e8c <io_exchange+0xd0>
            goto break_send;

#ifdef HAVE_USB_APDU
          case APDU_USB_HID:
            // only send, don't perform synchronous reception of the next command (will be done later by the seproxyhal packet processing)
            io_usb_hid_exchange(io_usb_send_apdu_data, tx_len, NULL, IO_RETURN_AFTER_TX);
c0d04e32:	485f      	ldr	r0, [pc, #380]	; (c0d04fb0 <io_exchange+0x1f4>)
c0d04e34:	4478      	add	r0, pc
c0d04e36:	2200      	movs	r2, #0
c0d04e38:	2320      	movs	r3, #32
c0d04e3a:	4629      	mov	r1, r5
c0d04e3c:	f7ff fbda 	bl	c0d045f4 <io_usb_hid_exchange>
c0d04e40:	e022      	b.n	c0d04e88 <io_exchange+0xcc>
          // case to handle U2F channels. u2f apdu to be dispatched in the upper layers
          case APDU_U2F:
            // prepare reply, the remaining segments will be pumped during USB/BLE events handling while waiting for the next APDU

            // user presence + counter + rapdu + sw must fit the apdu buffer
            if (1+ 4+ tx_len +2 > sizeof(G_io_apdu_buffer)) {
c0d04e42:	1de8      	adds	r0, r5, #7
c0d04e44:	9001      	str	r0, [sp, #4]
c0d04e46:	0840      	lsrs	r0, r0, #1
c0d04e48:	28a9      	cmp	r0, #169	; 0xa9
c0d04e4a:	d300      	bcc.n	c0d04e4e <io_exchange+0x92>
c0d04e4c:	e097      	b.n	c0d04f7e <io_exchange+0x1c2>
              THROW(INVALID_PARAMETER);
            }

            // u2F tunnel needs the status words to be included in the signature response BLOB, do it now.
            // always return 9000 in the signature to avoid error @ transport level in u2f layers. 
            G_io_apdu_buffer[tx_len] = 0x90; //G_io_apdu_buffer[tx_len-2];
c0d04e4e:	207c      	movs	r0, #124	; 0x7c
c0d04e50:	43c0      	mvns	r0, r0
c0d04e52:	300d      	adds	r0, #13
c0d04e54:	494e      	ldr	r1, [pc, #312]	; (c0d04f90 <io_exchange+0x1d4>)
c0d04e56:	5548      	strb	r0, [r1, r5]
c0d04e58:	1948      	adds	r0, r1, r5
c0d04e5a:	2200      	movs	r2, #0
            G_io_apdu_buffer[tx_len+1] = 0x00; //G_io_apdu_buffer[tx_len-1];
c0d04e5c:	9200      	str	r2, [sp, #0]
c0d04e5e:	7042      	strb	r2, [r0, #1]
            tx_len += 2;
            os_memmove(G_io_apdu_buffer+5, G_io_apdu_buffer, tx_len);
c0d04e60:	9802      	ldr	r0, [sp, #8]
c0d04e62:	1d00      	adds	r0, r0, #4

            // u2F tunnel needs the status words to be included in the signature response BLOB, do it now.
            // always return 9000 in the signature to avoid error @ transport level in u2f layers. 
            G_io_apdu_buffer[tx_len] = 0x90; //G_io_apdu_buffer[tx_len-2];
            G_io_apdu_buffer[tx_len+1] = 0x00; //G_io_apdu_buffer[tx_len-1];
            tx_len += 2;
c0d04e64:	1caa      	adds	r2, r5, #2
            os_memmove(G_io_apdu_buffer+5, G_io_apdu_buffer, tx_len);
c0d04e66:	4002      	ands	r2, r0
c0d04e68:	1d48      	adds	r0, r1, #5
c0d04e6a:	460d      	mov	r5, r1
c0d04e6c:	f7ff fba1 	bl	c0d045b2 <os_memmove>
c0d04e70:	2205      	movs	r2, #5
            // zeroize user presence and counter
            os_memset(G_io_apdu_buffer, 0, 5);
c0d04e72:	4628      	mov	r0, r5
c0d04e74:	9900      	ldr	r1, [sp, #0]
c0d04e76:	f7ff fb93 	bl	c0d045a0 <os_memset>
            u2f_message_reply(&G_io_u2f, U2F_CMD_MSG, G_io_apdu_buffer, tx_len+5);
c0d04e7a:	9801      	ldr	r0, [sp, #4]
c0d04e7c:	b283      	uxth	r3, r0
c0d04e7e:	4845      	ldr	r0, [pc, #276]	; (c0d04f94 <io_exchange+0x1d8>)
c0d04e80:	2183      	movs	r1, #131	; 0x83
c0d04e82:	462a      	mov	r2, r5
c0d04e84:	f001 fcd2 	bl	c0d0682c <u2f_message_reply>
c0d04e88:	4940      	ldr	r1, [pc, #256]	; (c0d04f8c <io_exchange+0x1d0>)
c0d04e8a:	e008      	b.n	c0d04e9e <io_exchange+0xe2>
c0d04e8c:	2800      	cmp	r0, #0
c0d04e8e:	d073      	beq.n	c0d04f78 <io_exchange+0x1bc>
      // until the whole RAPDU is transmitted, send chunks using the current mode for communication
      for (;;) {
        switch(G_io_apdu_state) {
          default: 
            // delegate to the hal in case of not generic transport mode (or asynch)
            if (io_exchange_al(channel, tx_len) == 0) {
c0d04e90:	4620      	mov	r0, r4
c0d04e92:	4629      	mov	r1, r5
c0d04e94:	f7fe f9ee 	bl	c0d03274 <io_exchange_al>
c0d04e98:	493c      	ldr	r1, [pc, #240]	; (c0d04f8c <io_exchange+0x1d0>)
c0d04e9a:	2800      	cmp	r0, #0
c0d04e9c:	d16c      	bne.n	c0d04f78 <io_exchange+0x1bc>
c0d04e9e:	2500      	movs	r5, #0
        }
        continue;

      break_send:
        // reset apdu state
        G_io_apdu_state = APDU_IDLE;
c0d04ea0:	700d      	strb	r5, [r1, #0]
        G_io_apdu_offset = 0;
c0d04ea2:	483e      	ldr	r0, [pc, #248]	; (c0d04f9c <io_exchange+0x1e0>)
c0d04ea4:	8005      	strh	r5, [r0, #0]
        G_io_apdu_length = 0;
c0d04ea6:	483e      	ldr	r0, [pc, #248]	; (c0d04fa0 <io_exchange+0x1e4>)
c0d04ea8:	8005      	strh	r5, [r0, #0]
        G_io_apdu_seq = 0;
c0d04eaa:	483e      	ldr	r0, [pc, #248]	; (c0d04fa4 <io_exchange+0x1e8>)
c0d04eac:	8005      	strh	r5, [r0, #0]
        G_io_apdu_media = IO_APDU_MEDIA_NONE;
c0d04eae:	483e      	ldr	r0, [pc, #248]	; (c0d04fa8 <io_exchange+0x1ec>)
c0d04eb0:	7005      	strb	r5, [r0, #0]

        // continue sending commands, don't issue status yet
        if (channel & IO_RETURN_AFTER_TX) {
c0d04eb2:	06a0      	lsls	r0, r4, #26
c0d04eb4:	d48e      	bmi.n	c0d04dd4 <io_exchange+0x18>
          return 0;
        }
        // acknowledge the write request (general status OK) and no more command to follow (wait until another APDU container is received to continue unwrapping)
        io_seproxyhal_general_status();
c0d04eb6:	f7ff fc3d 	bl	c0d04734 <io_seproxyhal_general_status>
        break;
      }

      // perform reset after io exchange
      if (channel & IO_RESET_AFTER_REPLIED) {
c0d04eba:	0620      	lsls	r0, r4, #24
c0d04ebc:	9902      	ldr	r1, [sp, #8]
c0d04ebe:	d502      	bpl.n	c0d04ec6 <io_exchange+0x10a>
        reset();
c0d04ec0:	f000 ff88 	bl	c0d05dd4 <reset>
c0d04ec4:	9902      	ldr	r1, [sp, #8]
      }
    }

    if (!(channel&IO_ASYNCH_REPLY)) {
c0d04ec6:	2f00      	cmp	r7, #0
c0d04ec8:	d10c      	bne.n	c0d04ee4 <io_exchange+0x128>
      
      // already received the data of the apdu when received the whole apdu
      if ((channel & (CHANNEL_APDU|IO_RECEIVE_DATA)) == (CHANNEL_APDU|IO_RECEIVE_DATA)) {
c0d04eca:	0660      	lsls	r0, r4, #25
c0d04ecc:	d450      	bmi.n	c0d04f70 <io_exchange+0x1b4>
        // return apdu data - header
        return G_io_apdu_length-5;
      }

      // reply has ended, proceed to next apdu reception (reset status only after asynch reply)
      G_io_apdu_state = APDU_IDLE;
c0d04ece:	482f      	ldr	r0, [pc, #188]	; (c0d04f8c <io_exchange+0x1d0>)
c0d04ed0:	2100      	movs	r1, #0
c0d04ed2:	7001      	strb	r1, [r0, #0]
      G_io_apdu_offset = 0;
c0d04ed4:	4831      	ldr	r0, [pc, #196]	; (c0d04f9c <io_exchange+0x1e0>)
c0d04ed6:	8001      	strh	r1, [r0, #0]
      G_io_apdu_length = 0;
c0d04ed8:	4831      	ldr	r0, [pc, #196]	; (c0d04fa0 <io_exchange+0x1e4>)
c0d04eda:	8001      	strh	r1, [r0, #0]
      G_io_apdu_seq = 0;
c0d04edc:	4831      	ldr	r0, [pc, #196]	; (c0d04fa4 <io_exchange+0x1e8>)
c0d04ede:	8001      	strh	r1, [r0, #0]
      G_io_apdu_media = IO_APDU_MEDIA_NONE;
c0d04ee0:	4831      	ldr	r0, [pc, #196]	; (c0d04fa8 <io_exchange+0x1ec>)
c0d04ee2:	7001      	strb	r1, [r0, #0]
c0d04ee4:	4c2c      	ldr	r4, [pc, #176]	; (c0d04f98 <io_exchange+0x1dc>)
c0d04ee6:	4f2e      	ldr	r7, [pc, #184]	; (c0d04fa0 <io_exchange+0x1e4>)
c0d04ee8:	e002      	b.n	c0d04ef0 <io_exchange+0x134>
          break;
#endif // HAVE_IO_USB

        default:
          // tell the application that a non-apdu packet has been received
          io_event(CHANNEL_SPI);
c0d04eea:	2002      	movs	r0, #2
c0d04eec:	f7fe f9e4 	bl	c0d032b8 <io_event>

    // ensure ready to receive an event (after an apdu processing with asynch flag, it may occur if the channel is not correctly managed)

    // until a new whole CAPDU is received
    for (;;) {
      if (!io_seproxyhal_spi_is_status_sent()) {
c0d04ef0:	f001 f90a 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d04ef4:	2800      	cmp	r0, #0
c0d04ef6:	d101      	bne.n	c0d04efc <io_exchange+0x140>
        io_seproxyhal_general_status();
c0d04ef8:	f7ff fc1c 	bl	c0d04734 <io_seproxyhal_general_status>
      }

      // wait until a SPI packet is available
      // NOTE: on ST31, dual wait ISO & RF (ISO instead of SPI)
      rx_len = io_seproxyhal_spi_recv(G_io_seproxyhal_spi_buffer, sizeof(G_io_seproxyhal_spi_buffer), 0);
c0d04efc:	b2b1      	uxth	r1, r6
c0d04efe:	2500      	movs	r5, #0
c0d04f00:	4620      	mov	r0, r4
c0d04f02:	462a      	mov	r2, r5
c0d04f04:	f001 f916 	bl	c0d06134 <io_seproxyhal_spi_recv>

      // can't process split TLV, continue
      if (rx_len-3 != U2(G_io_seproxyhal_spi_buffer[1],G_io_seproxyhal_spi_buffer[2])) {
c0d04f08:	1ec1      	subs	r1, r0, #3
c0d04f0a:	78a2      	ldrb	r2, [r4, #2]
c0d04f0c:	7863      	ldrb	r3, [r4, #1]
c0d04f0e:	021b      	lsls	r3, r3, #8
c0d04f10:	4313      	orrs	r3, r2
c0d04f12:	4299      	cmp	r1, r3
c0d04f14:	d115      	bne.n	c0d04f42 <io_exchange+0x186>
      send_last_command:
        continue;
      }

      // if an apdu is already ongoing, then discard packet as a new packet
      if (G_io_apdu_media != IO_APDU_MEDIA_NONE) {
c0d04f16:	4924      	ldr	r1, [pc, #144]	; (c0d04fa8 <io_exchange+0x1ec>)
c0d04f18:	7809      	ldrb	r1, [r1, #0]
c0d04f1a:	2900      	cmp	r1, #0
c0d04f1c:	d002      	beq.n	c0d04f24 <io_exchange+0x168>
        io_seproxyhal_handle_event();
c0d04f1e:	f7ff fcc5 	bl	c0d048ac <io_seproxyhal_handle_event>
c0d04f22:	e7e5      	b.n	c0d04ef0 <io_exchange+0x134>
        continue;
      }

      // depending on received TAG
      switch(G_io_seproxyhal_spi_buffer[0]) {
c0d04f24:	7821      	ldrb	r1, [r4, #0]
c0d04f26:	290f      	cmp	r1, #15
c0d04f28:	d006      	beq.n	c0d04f38 <io_exchange+0x17c>
c0d04f2a:	2910      	cmp	r1, #16
c0d04f2c:	d012      	beq.n	c0d04f54 <io_exchange+0x198>
c0d04f2e:	2916      	cmp	r1, #22
c0d04f30:	d1db      	bne.n	c0d04eea <io_exchange+0x12e>

        case SEPROXYHAL_TAG_CAPDU_EVENT:
          io_seproxyhal_handle_capdu_event();
c0d04f32:	f7ff fd07 	bl	c0d04944 <io_seproxyhal_handle_capdu_event>
c0d04f36:	e012      	b.n	c0d04f5e <io_exchange+0x1a2>
          goto send_last_command;
#endif // HAVE_BLE

#ifdef HAVE_IO_USB
        case SEPROXYHAL_TAG_USB_EVENT:
          if (rx_len != 3+1) {
c0d04f38:	2804      	cmp	r0, #4
c0d04f3a:	d102      	bne.n	c0d04f42 <io_exchange+0x186>
            // invalid length, not processable
            goto invalid_apdu_packet;
          }
          io_seproxyhal_handle_usb_event();
c0d04f3c:	f7ff fc0e 	bl	c0d0475c <io_seproxyhal_handle_usb_event>
c0d04f40:	e7d6      	b.n	c0d04ef0 <io_exchange+0x134>
c0d04f42:	2000      	movs	r0, #0

      // can't process split TLV, continue
      if (rx_len-3 != U2(G_io_seproxyhal_spi_buffer[1],G_io_seproxyhal_spi_buffer[2])) {
        LOG("invalid TLV format\n");
      invalid_apdu_packet:
        G_io_apdu_state = APDU_IDLE;
c0d04f44:	4911      	ldr	r1, [pc, #68]	; (c0d04f8c <io_exchange+0x1d0>)
c0d04f46:	7008      	strb	r0, [r1, #0]
        G_io_apdu_offset = 0;
c0d04f48:	4914      	ldr	r1, [pc, #80]	; (c0d04f9c <io_exchange+0x1e0>)
c0d04f4a:	8008      	strh	r0, [r1, #0]
        G_io_apdu_length = 0;
c0d04f4c:	8038      	strh	r0, [r7, #0]
        G_io_apdu_seq = 0;
c0d04f4e:	4915      	ldr	r1, [pc, #84]	; (c0d04fa4 <io_exchange+0x1e8>)
c0d04f50:	8008      	strh	r0, [r1, #0]
c0d04f52:	e7cd      	b.n	c0d04ef0 <io_exchange+0x134>

          // no state change, we're not dealing with an apdu yet
          goto send_last_command;

        case SEPROXYHAL_TAG_USB_EP_XFER_EVENT:
          if (rx_len < 3+3) {
c0d04f54:	2806      	cmp	r0, #6
c0d04f56:	d200      	bcs.n	c0d04f5a <io_exchange+0x19e>
c0d04f58:	e73c      	b.n	c0d04dd4 <io_exchange+0x18>
            // error !
            return 0;
          }
          io_seproxyhal_handle_usb_ep_xfer_event();
c0d04f5a:	f7ff fc35 	bl	c0d047c8 <io_seproxyhal_handle_usb_ep_xfer_event>
c0d04f5e:	8838      	ldrh	r0, [r7, #0]
c0d04f60:	2800      	cmp	r0, #0
c0d04f62:	d0c5      	beq.n	c0d04ef0 <io_exchange+0x134>
c0d04f64:	4811      	ldr	r0, [pc, #68]	; (c0d04fac <io_exchange+0x1f0>)
c0d04f66:	6800      	ldr	r0, [r0, #0]
c0d04f68:	4907      	ldr	r1, [pc, #28]	; (c0d04f88 <io_exchange+0x1cc>)
c0d04f6a:	6008      	str	r0, [r1, #0]
c0d04f6c:	883d      	ldrh	r5, [r7, #0]
c0d04f6e:	e731      	b.n	c0d04dd4 <io_exchange+0x18>
    if (!(channel&IO_ASYNCH_REPLY)) {
      
      // already received the data of the apdu when received the whole apdu
      if ((channel & (CHANNEL_APDU|IO_RECEIVE_DATA)) == (CHANNEL_APDU|IO_RECEIVE_DATA)) {
        // return apdu data - header
        return G_io_apdu_length-5;
c0d04f70:	480b      	ldr	r0, [pc, #44]	; (c0d04fa0 <io_exchange+0x1e4>)
c0d04f72:	8800      	ldrh	r0, [r0, #0]
c0d04f74:	1845      	adds	r5, r0, r1
c0d04f76:	e72d      	b.n	c0d04dd4 <io_exchange+0x18>
            if (io_exchange_al(channel, tx_len) == 0) {
              goto break_send;
            }
          case APDU_IDLE:
            LOG("invalid state for APDU reply\n");
            THROW(INVALID_STATE);
c0d04f78:	2009      	movs	r0, #9
c0d04f7a:	f7ff fbce 	bl	c0d0471a <os_longjmp>
c0d04f7e:	2002      	movs	r0, #2
c0d04f80:	f7ff fbcb 	bl	c0d0471a <os_longjmp>
c0d04f84:	0000fffb 	.word	0x0000fffb
c0d04f88:	20001fcc 	.word	0x20001fcc
c0d04f8c:	20001fd7 	.word	0x20001fd7
c0d04f90:	20001e6c 	.word	0x20001e6c
c0d04f94:	20001fec 	.word	0x20001fec
c0d04f98:	20001d34 	.word	0x20001d34
c0d04f9c:	20001fda 	.word	0x20001fda
c0d04fa0:	20001fd8 	.word	0x20001fd8
c0d04fa4:	20001fdc 	.word	0x20001fdc
c0d04fa8:	20001fd0 	.word	0x20001fd0
c0d04fac:	20001fc8 	.word	0x20001fc8
c0d04fb0:	fffffafd 	.word	0xfffffafd

c0d04fb4 <screen_printc>:

  return ret;
} 

// so unoptimized
void screen_printc(unsigned char c) {
c0d04fb4:	b5b0      	push	{r4, r5, r7, lr}
c0d04fb6:	b082      	sub	sp, #8
c0d04fb8:	ac01      	add	r4, sp, #4
  unsigned char buf[4];
  buf[0] = SEPROXYHAL_TAG_PRINTF_STATUS;
c0d04fba:	2166      	movs	r1, #102	; 0x66
c0d04fbc:	7021      	strb	r1, [r4, #0]
c0d04fbe:	2500      	movs	r5, #0
  buf[1] = 0;
c0d04fc0:	7065      	strb	r5, [r4, #1]
c0d04fc2:	2101      	movs	r1, #1
  buf[2] = 1;
c0d04fc4:	70a1      	strb	r1, [r4, #2]
  buf[3] = c;
c0d04fc6:	70e0      	strb	r0, [r4, #3]
  io_seproxyhal_spi_send(buf, 4);
c0d04fc8:	2104      	movs	r1, #4
c0d04fca:	4620      	mov	r0, r4
c0d04fcc:	f001 f886 	bl	c0d060dc <io_seproxyhal_spi_send>
c0d04fd0:	2103      	movs	r1, #3
#ifndef IO_SEPROXYHAL_DEBUG
  // wait printf ack (no race kthx)
  io_seproxyhal_spi_recv(buf, 3, 0);
c0d04fd2:	4620      	mov	r0, r4
c0d04fd4:	462a      	mov	r2, r5
c0d04fd6:	f001 f8ad 	bl	c0d06134 <io_seproxyhal_spi_recv>
  buf[0] = 0; // consume tag to avoid misinterpretation (due to IO_CACHE)
#endif // IO_SEPROXYHAL_DEBUG
}
c0d04fda:	b002      	add	sp, #8
c0d04fdc:	bdb0      	pop	{r4, r5, r7, pc}
	...

c0d04fe0 <ux_menu_element_preprocessor>:
    return ux_menu.menu_iterator(entry_idx);
  } 
  return &ux_menu.menu_entries[entry_idx];
} 

const bagl_element_t* ux_menu_element_preprocessor(const bagl_element_t* element) {
c0d04fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d04fe2:	b081      	sub	sp, #4
c0d04fe4:	4607      	mov	r7, r0
  //todo avoid center alignment when text_x or icon_x AND text_x are not 0
  os_memmove(&ux_menu.tmp_element, element, sizeof(bagl_element_t));
c0d04fe6:	4c5f      	ldr	r4, [pc, #380]	; (c0d05164 <ux_menu_element_preprocessor+0x184>)
c0d04fe8:	4625      	mov	r5, r4
c0d04fea:	3514      	adds	r5, #20
c0d04fec:	2238      	movs	r2, #56	; 0x38
c0d04fee:	4628      	mov	r0, r5
c0d04ff0:	4639      	mov	r1, r7
c0d04ff2:	f7ff fade 	bl	c0d045b2 <os_memmove>
  {{BAGL_LABELINE                       , 0x22,  14,  26, 100,  12, 0, 0, 0        , 0xFFFFFF, 0x000000, BAGL_FONT_OPEN_SANS_EXTRABOLD_11px|BAGL_FONT_ALIGNMENT_CENTER, 0  }, NULL, 0, 0, 0, NULL, NULL, NULL },

};

const ux_menu_entry_t* ux_menu_get_entry (unsigned int entry_idx) {
  if (ux_menu.menu_iterator) {
c0d04ff6:	6921      	ldr	r1, [r4, #16]
const bagl_element_t* ux_menu_element_preprocessor(const bagl_element_t* element) {
  //todo avoid center alignment when text_x or icon_x AND text_x are not 0
  os_memmove(&ux_menu.tmp_element, element, sizeof(bagl_element_t));

  // ask the current entry first, to setup other entries
  const ux_menu_entry_t* current_entry = ux_menu_get_entry(ux_menu.current_entry);
c0d04ff8:	68a0      	ldr	r0, [r4, #8]
  {{BAGL_LABELINE                       , 0x22,  14,  26, 100,  12, 0, 0, 0        , 0xFFFFFF, 0x000000, BAGL_FONT_OPEN_SANS_EXTRABOLD_11px|BAGL_FONT_ALIGNMENT_CENTER, 0  }, NULL, 0, 0, 0, NULL, NULL, NULL },

};

const ux_menu_entry_t* ux_menu_get_entry (unsigned int entry_idx) {
  if (ux_menu.menu_iterator) {
c0d04ffa:	2900      	cmp	r1, #0
c0d04ffc:	d003      	beq.n	c0d05006 <ux_menu_element_preprocessor+0x26>
    return ux_menu.menu_iterator(entry_idx);
c0d04ffe:	4788      	blx	r1
c0d05000:	4603      	mov	r3, r0
c0d05002:	68a0      	ldr	r0, [r4, #8]
c0d05004:	e003      	b.n	c0d0500e <ux_menu_element_preprocessor+0x2e>
  } 
  return &ux_menu.menu_entries[entry_idx];
c0d05006:	211c      	movs	r1, #28
c0d05008:	4341      	muls	r1, r0
c0d0500a:	6822      	ldr	r2, [r4, #0]
c0d0500c:	1853      	adds	r3, r2, r1
c0d0500e:	2600      	movs	r6, #0

  // ask the current entry first, to setup other entries
  const ux_menu_entry_t* current_entry = ux_menu_get_entry(ux_menu.current_entry);

  const ux_menu_entry_t* previous_entry = NULL;
  if (ux_menu.current_entry) {
c0d05010:	2800      	cmp	r0, #0
c0d05012:	d010      	beq.n	c0d05036 <ux_menu_element_preprocessor+0x56>
  {{BAGL_LABELINE                       , 0x22,  14,  26, 100,  12, 0, 0, 0        , 0xFFFFFF, 0x000000, BAGL_FONT_OPEN_SANS_EXTRABOLD_11px|BAGL_FONT_ALIGNMENT_CENTER, 0  }, NULL, 0, 0, 0, NULL, NULL, NULL },

};

const ux_menu_entry_t* ux_menu_get_entry (unsigned int entry_idx) {
  if (ux_menu.menu_iterator) {
c0d05014:	6922      	ldr	r2, [r4, #16]
  // ask the current entry first, to setup other entries
  const ux_menu_entry_t* current_entry = ux_menu_get_entry(ux_menu.current_entry);

  const ux_menu_entry_t* previous_entry = NULL;
  if (ux_menu.current_entry) {
    previous_entry = ux_menu_get_entry(ux_menu.current_entry-1);
c0d05016:	1e41      	subs	r1, r0, #1
  {{BAGL_LABELINE                       , 0x22,  14,  26, 100,  12, 0, 0, 0        , 0xFFFFFF, 0x000000, BAGL_FONT_OPEN_SANS_EXTRABOLD_11px|BAGL_FONT_ALIGNMENT_CENTER, 0  }, NULL, 0, 0, 0, NULL, NULL, NULL },

};

const ux_menu_entry_t* ux_menu_get_entry (unsigned int entry_idx) {
  if (ux_menu.menu_iterator) {
c0d05018:	2a00      	cmp	r2, #0
c0d0501a:	d00f      	beq.n	c0d0503c <ux_menu_element_preprocessor+0x5c>
    return ux_menu.menu_iterator(entry_idx);
c0d0501c:	4608      	mov	r0, r1
c0d0501e:	9700      	str	r7, [sp, #0]
c0d05020:	4637      	mov	r7, r6
c0d05022:	462e      	mov	r6, r5
c0d05024:	461d      	mov	r5, r3
c0d05026:	4790      	blx	r2
c0d05028:	462b      	mov	r3, r5
c0d0502a:	4635      	mov	r5, r6
c0d0502c:	463e      	mov	r6, r7
c0d0502e:	9f00      	ldr	r7, [sp, #0]
c0d05030:	4602      	mov	r2, r0
c0d05032:	68a0      	ldr	r0, [r4, #8]
c0d05034:	e006      	b.n	c0d05044 <ux_menu_element_preprocessor+0x64>
  const ux_menu_entry_t* previous_entry = NULL;
  if (ux_menu.current_entry) {
    previous_entry = ux_menu_get_entry(ux_menu.current_entry-1);
  }
  const ux_menu_entry_t* next_entry = NULL;
  if (ux_menu.current_entry < ux_menu.menu_entries_count-1) {
c0d05036:	4630      	mov	r0, r6
c0d05038:	4632      	mov	r2, r6
c0d0503a:	e003      	b.n	c0d05044 <ux_menu_element_preprocessor+0x64>

const ux_menu_entry_t* ux_menu_get_entry (unsigned int entry_idx) {
  if (ux_menu.menu_iterator) {
    return ux_menu.menu_iterator(entry_idx);
  } 
  return &ux_menu.menu_entries[entry_idx];
c0d0503c:	221c      	movs	r2, #28
c0d0503e:	434a      	muls	r2, r1
c0d05040:	6821      	ldr	r1, [r4, #0]
c0d05042:	188a      	adds	r2, r1, r2
  const ux_menu_entry_t* previous_entry = NULL;
  if (ux_menu.current_entry) {
    previous_entry = ux_menu_get_entry(ux_menu.current_entry-1);
  }
  const ux_menu_entry_t* next_entry = NULL;
  if (ux_menu.current_entry < ux_menu.menu_entries_count-1) {
c0d05044:	6861      	ldr	r1, [r4, #4]
c0d05046:	1e49      	subs	r1, r1, #1
c0d05048:	4288      	cmp	r0, r1
c0d0504a:	d210      	bcs.n	c0d0506e <ux_menu_element_preprocessor+0x8e>
  {{BAGL_LABELINE                       , 0x22,  14,  26, 100,  12, 0, 0, 0        , 0xFFFFFF, 0x000000, BAGL_FONT_OPEN_SANS_EXTRABOLD_11px|BAGL_FONT_ALIGNMENT_CENTER, 0  }, NULL, 0, 0, 0, NULL, NULL, NULL },

};

const ux_menu_entry_t* ux_menu_get_entry (unsigned int entry_idx) {
  if (ux_menu.menu_iterator) {
c0d0504c:	6921      	ldr	r1, [r4, #16]
  if (ux_menu.current_entry) {
    previous_entry = ux_menu_get_entry(ux_menu.current_entry-1);
  }
  const ux_menu_entry_t* next_entry = NULL;
  if (ux_menu.current_entry < ux_menu.menu_entries_count-1) {
    next_entry = ux_menu_get_entry(ux_menu.current_entry+1);
c0d0504e:	1c40      	adds	r0, r0, #1
  {{BAGL_LABELINE                       , 0x22,  14,  26, 100,  12, 0, 0, 0        , 0xFFFFFF, 0x000000, BAGL_FONT_OPEN_SANS_EXTRABOLD_11px|BAGL_FONT_ALIGNMENT_CENTER, 0  }, NULL, 0, 0, 0, NULL, NULL, NULL },

};

const ux_menu_entry_t* ux_menu_get_entry (unsigned int entry_idx) {
  if (ux_menu.menu_iterator) {
c0d05050:	2900      	cmp	r1, #0
c0d05052:	d008      	beq.n	c0d05066 <ux_menu_element_preprocessor+0x86>
c0d05054:	9500      	str	r5, [sp, #0]
c0d05056:	461d      	mov	r5, r3
c0d05058:	4616      	mov	r6, r2
    return ux_menu.menu_iterator(entry_idx);
c0d0505a:	4788      	blx	r1
c0d0505c:	4632      	mov	r2, r6
c0d0505e:	462b      	mov	r3, r5
c0d05060:	9d00      	ldr	r5, [sp, #0]
c0d05062:	4606      	mov	r6, r0
c0d05064:	e003      	b.n	c0d0506e <ux_menu_element_preprocessor+0x8e>
  } 
  return &ux_menu.menu_entries[entry_idx];
c0d05066:	211c      	movs	r1, #28
c0d05068:	4341      	muls	r1, r0
c0d0506a:	6820      	ldr	r0, [r4, #0]
c0d0506c:	1846      	adds	r6, r0, r1
c0d0506e:	7878      	ldrb	r0, [r7, #1]
  const ux_menu_entry_t* next_entry = NULL;
  if (ux_menu.current_entry < ux_menu.menu_entries_count-1) {
    next_entry = ux_menu_get_entry(ux_menu.current_entry+1);
  }

  switch(element->component.userid) {
c0d05070:	2840      	cmp	r0, #64	; 0x40
c0d05072:	dc0a      	bgt.n	c0d0508a <ux_menu_element_preprocessor+0xaa>
c0d05074:	2820      	cmp	r0, #32
c0d05076:	dc22      	bgt.n	c0d050be <ux_menu_element_preprocessor+0xde>
c0d05078:	2810      	cmp	r0, #16
c0d0507a:	d034      	beq.n	c0d050e6 <ux_menu_element_preprocessor+0x106>
c0d0507c:	2820      	cmp	r0, #32
c0d0507e:	d167      	bne.n	c0d05150 <ux_menu_element_preprocessor+0x170>
      if (current_entry->icon_x) {
        ux_menu.tmp_element.component.x = current_entry->icon_x;
      }
      break;
    case 0x20:
      if (current_entry->line2 != NULL) {
c0d05080:	6959      	ldr	r1, [r3, #20]
c0d05082:	2000      	movs	r0, #0
c0d05084:	2900      	cmp	r1, #0
c0d05086:	d16b      	bne.n	c0d05160 <ux_menu_element_preprocessor+0x180>
c0d05088:	e051      	b.n	c0d0512e <ux_menu_element_preprocessor+0x14e>
c0d0508a:	2880      	cmp	r0, #128	; 0x80
c0d0508c:	dc22      	bgt.n	c0d050d4 <ux_menu_element_preprocessor+0xf4>
c0d0508e:	2841      	cmp	r0, #65	; 0x41
c0d05090:	d033      	beq.n	c0d050fa <ux_menu_element_preprocessor+0x11a>
c0d05092:	2842      	cmp	r0, #66	; 0x42
c0d05094:	d15c      	bne.n	c0d05150 <ux_menu_element_preprocessor+0x170>
      }
      ux_menu.tmp_element.text = previous_entry->line1;
      break;
    // next setting name
    case 0x42:
      if (current_entry->line2 != NULL 
c0d05096:	6959      	ldr	r1, [r3, #20]
c0d05098:	2000      	movs	r0, #0
        || current_entry->icon != NULL
c0d0509a:	2900      	cmp	r1, #0
c0d0509c:	d160      	bne.n	c0d05160 <ux_menu_element_preprocessor+0x180>
c0d0509e:	68d9      	ldr	r1, [r3, #12]
        || ux_menu.current_entry == ux_menu.menu_entries_count-1
c0d050a0:	2900      	cmp	r1, #0
c0d050a2:	d15d      	bne.n	c0d05160 <ux_menu_element_preprocessor+0x180>
c0d050a4:	6862      	ldr	r2, [r4, #4]
c0d050a6:	1e51      	subs	r1, r2, #1
        || ux_menu.menu_entries_count == 1
c0d050a8:	2a01      	cmp	r2, #1
c0d050aa:	d059      	beq.n	c0d05160 <ux_menu_element_preprocessor+0x180>
      break;
    // next setting name
    case 0x42:
      if (current_entry->line2 != NULL 
        || current_entry->icon != NULL
        || ux_menu.current_entry == ux_menu.menu_entries_count-1
c0d050ac:	68a2      	ldr	r2, [r4, #8]
c0d050ae:	428a      	cmp	r2, r1
c0d050b0:	d056      	beq.n	c0d05160 <ux_menu_element_preprocessor+0x180>
        || ux_menu.menu_entries_count == 1
        || next_entry->icon != NULL) {
c0d050b2:	68f1      	ldr	r1, [r6, #12]
      }
      ux_menu.tmp_element.text = previous_entry->line1;
      break;
    // next setting name
    case 0x42:
      if (current_entry->line2 != NULL 
c0d050b4:	2900      	cmp	r1, #0
c0d050b6:	d153      	bne.n	c0d05160 <ux_menu_element_preprocessor+0x180>
        || ux_menu.current_entry == ux_menu.menu_entries_count-1
        || ux_menu.menu_entries_count == 1
        || next_entry->icon != NULL) {
        return NULL;
      }
      ux_menu.tmp_element.text = next_entry->line1;
c0d050b8:	6930      	ldr	r0, [r6, #16]
c0d050ba:	6320      	str	r0, [r4, #48]	; 0x30
c0d050bc:	e048      	b.n	c0d05150 <ux_menu_element_preprocessor+0x170>
c0d050be:	2821      	cmp	r0, #33	; 0x21
c0d050c0:	d031      	beq.n	c0d05126 <ux_menu_element_preprocessor+0x146>
c0d050c2:	2822      	cmp	r0, #34	; 0x22
c0d050c4:	d144      	bne.n	c0d05150 <ux_menu_element_preprocessor+0x170>
        return NULL;
      }
      ux_menu.tmp_element.text = current_entry->line1;
      goto adjust_text_x;
    case 0x22:
      if (current_entry->line2 == NULL) {
c0d050c6:	4619      	mov	r1, r3
c0d050c8:	3114      	adds	r1, #20
c0d050ca:	695a      	ldr	r2, [r3, #20]
c0d050cc:	2000      	movs	r0, #0
c0d050ce:	2a00      	cmp	r2, #0
c0d050d0:	d12f      	bne.n	c0d05132 <ux_menu_element_preprocessor+0x152>
c0d050d2:	e045      	b.n	c0d05160 <ux_menu_element_preprocessor+0x180>
c0d050d4:	2882      	cmp	r0, #130	; 0x82
c0d050d6:	d035      	beq.n	c0d05144 <ux_menu_element_preprocessor+0x164>
c0d050d8:	2881      	cmp	r0, #129	; 0x81
c0d050da:	d139      	bne.n	c0d05150 <ux_menu_element_preprocessor+0x170>
    next_entry = ux_menu_get_entry(ux_menu.current_entry+1);
  }

  switch(element->component.userid) {
    case 0x81:
      if (ux_menu.current_entry == 0) {
c0d050dc:	68a1      	ldr	r1, [r4, #8]
c0d050de:	2000      	movs	r0, #0
c0d050e0:	2900      	cmp	r1, #0
c0d050e2:	d135      	bne.n	c0d05150 <ux_menu_element_preprocessor+0x170>
c0d050e4:	e03c      	b.n	c0d05160 <ux_menu_element_preprocessor+0x180>
        return NULL;
      }
      ux_menu.tmp_element.text = next_entry->line1;
      break;
    case 0x10:
      if (current_entry->icon == NULL) {
c0d050e6:	68d9      	ldr	r1, [r3, #12]
c0d050e8:	2000      	movs	r0, #0
c0d050ea:	2900      	cmp	r1, #0
c0d050ec:	d038      	beq.n	c0d05160 <ux_menu_element_preprocessor+0x180>
        return NULL;
      }
      ux_menu.tmp_element.text = (const char*)current_entry->icon;
c0d050ee:	6321      	str	r1, [r4, #48]	; 0x30
      if (current_entry->icon_x) {
c0d050f0:	7e58      	ldrb	r0, [r3, #25]
c0d050f2:	2800      	cmp	r0, #0
c0d050f4:	d02c      	beq.n	c0d05150 <ux_menu_element_preprocessor+0x170>
        ux_menu.tmp_element.component.x = current_entry->icon_x;
c0d050f6:	82e0      	strh	r0, [r4, #22]
c0d050f8:	e02a      	b.n	c0d05150 <ux_menu_element_preprocessor+0x170>
        return NULL;
      }
      break;
    // previous setting name
    case 0x41:
      if (current_entry->line2 != NULL 
c0d050fa:	6959      	ldr	r1, [r3, #20]
c0d050fc:	2000      	movs	r0, #0
        || current_entry->icon != NULL
c0d050fe:	2900      	cmp	r1, #0
c0d05100:	d12e      	bne.n	c0d05160 <ux_menu_element_preprocessor+0x180>
c0d05102:	68d9      	ldr	r1, [r3, #12]
        || ux_menu.current_entry == 0
c0d05104:	2900      	cmp	r1, #0
c0d05106:	d12b      	bne.n	c0d05160 <ux_menu_element_preprocessor+0x180>
c0d05108:	68a1      	ldr	r1, [r4, #8]
c0d0510a:	2900      	cmp	r1, #0
c0d0510c:	d028      	beq.n	c0d05160 <ux_menu_element_preprocessor+0x180>
        || ux_menu.menu_entries_count == 1 
c0d0510e:	6861      	ldr	r1, [r4, #4]
c0d05110:	2901      	cmp	r1, #1
c0d05112:	d025      	beq.n	c0d05160 <ux_menu_element_preprocessor+0x180>
        || previous_entry->icon != NULL
c0d05114:	68d1      	ldr	r1, [r2, #12]
        || previous_entry->line2 != NULL) {
c0d05116:	2900      	cmp	r1, #0
c0d05118:	d122      	bne.n	c0d05160 <ux_menu_element_preprocessor+0x180>
c0d0511a:	6951      	ldr	r1, [r2, #20]
        return NULL;
      }
      break;
    // previous setting name
    case 0x41:
      if (current_entry->line2 != NULL 
c0d0511c:	2900      	cmp	r1, #0
c0d0511e:	d11f      	bne.n	c0d05160 <ux_menu_element_preprocessor+0x180>
        || ux_menu.menu_entries_count == 1 
        || previous_entry->icon != NULL
        || previous_entry->line2 != NULL) {
        return 0;
      }
      ux_menu.tmp_element.text = previous_entry->line1;
c0d05120:	6910      	ldr	r0, [r2, #16]
c0d05122:	6320      	str	r0, [r4, #48]	; 0x30
c0d05124:	e014      	b.n	c0d05150 <ux_menu_element_preprocessor+0x170>
        return NULL;
      }
      ux_menu.tmp_element.text = current_entry->line1;
      goto adjust_text_x;
    case 0x21:
      if (current_entry->line2 == NULL) {
c0d05126:	6959      	ldr	r1, [r3, #20]
c0d05128:	2000      	movs	r0, #0
c0d0512a:	2900      	cmp	r1, #0
c0d0512c:	d018      	beq.n	c0d05160 <ux_menu_element_preprocessor+0x180>
c0d0512e:	4619      	mov	r1, r3
c0d05130:	3110      	adds	r1, #16
c0d05132:	6808      	ldr	r0, [r1, #0]
c0d05134:	6320      	str	r0, [r4, #48]	; 0x30
      if (current_entry->line2 == NULL) {
        return NULL;
      }
      ux_menu.tmp_element.text = current_entry->line2;
    adjust_text_x:
      if (current_entry->text_x) {
c0d05136:	7e18      	ldrb	r0, [r3, #24]
c0d05138:	2800      	cmp	r0, #0
c0d0513a:	d009      	beq.n	c0d05150 <ux_menu_element_preprocessor+0x170>
        ux_menu.tmp_element.component.x = current_entry->text_x;
c0d0513c:	82e0      	strh	r0, [r4, #22]
        // discard the 'center' flag
        ux_menu.tmp_element.component.font_id = BAGL_FONT_OPEN_SANS_EXTRABOLD_11px;
c0d0513e:	2008      	movs	r0, #8
c0d05140:	85a0      	strh	r0, [r4, #44]	; 0x2c
c0d05142:	e005      	b.n	c0d05150 <ux_menu_element_preprocessor+0x170>
      if (ux_menu.current_entry == 0) {
        return NULL;
      }
      break;
    case 0x82:
      if (ux_menu.current_entry == ux_menu.menu_entries_count-1) {
c0d05144:	6860      	ldr	r0, [r4, #4]
c0d05146:	68a1      	ldr	r1, [r4, #8]
c0d05148:	1e42      	subs	r2, r0, #1
c0d0514a:	2000      	movs	r0, #0
c0d0514c:	4291      	cmp	r1, r2
c0d0514e:	d007      	beq.n	c0d05160 <ux_menu_element_preprocessor+0x180>
        ux_menu.tmp_element.component.font_id = BAGL_FONT_OPEN_SANS_EXTRABOLD_11px;
      }
      break;
  }
  // ensure prepro agrees to the element to be displayed
  if (ux_menu.menu_entry_preprocessor) {
c0d05150:	68e2      	ldr	r2, [r4, #12]
c0d05152:	2a00      	cmp	r2, #0
c0d05154:	4628      	mov	r0, r5
c0d05156:	d003      	beq.n	c0d05160 <ux_menu_element_preprocessor+0x180>
    // menu is denied by the menu entry preprocessor
    return ux_menu.menu_entry_preprocessor(current_entry, &ux_menu.tmp_element);
c0d05158:	3414      	adds	r4, #20
c0d0515a:	4618      	mov	r0, r3
c0d0515c:	4621      	mov	r1, r4
c0d0515e:	4790      	blx	r2
  }

  return &ux_menu.tmp_element;
}
c0d05160:	b001      	add	sp, #4
c0d05162:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d05164:	20002024 	.word	0x20002024

c0d05168 <ux_menu_elements_button>:

unsigned int ux_menu_elements_button (unsigned int button_mask, unsigned int button_mask_counter) {
c0d05168:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d0516a:	b081      	sub	sp, #4
c0d0516c:	4605      	mov	r5, r0
  UNUSED(button_mask_counter);

  const ux_menu_entry_t* current_entry = ux_menu_get_entry(ux_menu.current_entry);
c0d0516e:	4f3b      	ldr	r7, [pc, #236]	; (c0d0525c <ux_menu_elements_button+0xf4>)
  {{BAGL_LABELINE                       , 0x22,  14,  26, 100,  12, 0, 0, 0        , 0xFFFFFF, 0x000000, BAGL_FONT_OPEN_SANS_EXTRABOLD_11px|BAGL_FONT_ALIGNMENT_CENTER, 0  }, NULL, 0, 0, 0, NULL, NULL, NULL },

};

const ux_menu_entry_t* ux_menu_get_entry (unsigned int entry_idx) {
  if (ux_menu.menu_iterator) {
c0d05170:	6939      	ldr	r1, [r7, #16]
}

unsigned int ux_menu_elements_button (unsigned int button_mask, unsigned int button_mask_counter) {
  UNUSED(button_mask_counter);

  const ux_menu_entry_t* current_entry = ux_menu_get_entry(ux_menu.current_entry);
c0d05172:	68b8      	ldr	r0, [r7, #8]
  {{BAGL_LABELINE                       , 0x22,  14,  26, 100,  12, 0, 0, 0        , 0xFFFFFF, 0x000000, BAGL_FONT_OPEN_SANS_EXTRABOLD_11px|BAGL_FONT_ALIGNMENT_CENTER, 0  }, NULL, 0, 0, 0, NULL, NULL, NULL },

};

const ux_menu_entry_t* ux_menu_get_entry (unsigned int entry_idx) {
  if (ux_menu.menu_iterator) {
c0d05174:	2900      	cmp	r1, #0
c0d05176:	d002      	beq.n	c0d0517e <ux_menu_elements_button+0x16>
    return ux_menu.menu_iterator(entry_idx);
c0d05178:	4788      	blx	r1
c0d0517a:	4606      	mov	r6, r0
c0d0517c:	e003      	b.n	c0d05186 <ux_menu_elements_button+0x1e>
  } 
  return &ux_menu.menu_entries[entry_idx];
c0d0517e:	211c      	movs	r1, #28
c0d05180:	4341      	muls	r1, r0
c0d05182:	6838      	ldr	r0, [r7, #0]
c0d05184:	1846      	adds	r6, r0, r1
c0d05186:	2401      	movs	r4, #1
unsigned int ux_menu_elements_button (unsigned int button_mask, unsigned int button_mask_counter) {
  UNUSED(button_mask_counter);

  const ux_menu_entry_t* current_entry = ux_menu_get_entry(ux_menu.current_entry);

  switch (button_mask) {
c0d05188:	4835      	ldr	r0, [pc, #212]	; (c0d05260 <ux_menu_elements_button+0xf8>)
c0d0518a:	4285      	cmp	r5, r0
c0d0518c:	dd14      	ble.n	c0d051b8 <ux_menu_elements_button+0x50>
c0d0518e:	4835      	ldr	r0, [pc, #212]	; (c0d05264 <ux_menu_elements_button+0xfc>)
c0d05190:	4285      	cmp	r5, r0
c0d05192:	d017      	beq.n	c0d051c4 <ux_menu_elements_button+0x5c>
c0d05194:	4834      	ldr	r0, [pc, #208]	; (c0d05268 <ux_menu_elements_button+0x100>)
c0d05196:	4285      	cmp	r5, r0
c0d05198:	d01c      	beq.n	c0d051d4 <ux_menu_elements_button+0x6c>
c0d0519a:	4834      	ldr	r0, [pc, #208]	; (c0d0526c <ux_menu_elements_button+0x104>)
c0d0519c:	4285      	cmp	r5, r0
c0d0519e:	d15a      	bne.n	c0d05256 <ux_menu_elements_button+0xee>
    // enter menu or exit menu
    case BUTTON_EVT_RELEASED|BUTTON_LEFT|BUTTON_RIGHT:
      // menu is priority 1
      if (current_entry->menu) {
c0d051a0:	6830      	ldr	r0, [r6, #0]
c0d051a2:	2800      	cmp	r0, #0
c0d051a4:	d04e      	beq.n	c0d05244 <ux_menu_elements_button+0xdc>
        // use userid as the pointer to current entry in the parent menu
        UX_MENU_DISPLAY(current_entry->userid, (const ux_menu_entry_t*)PIC(current_entry->menu), ux_menu.menu_entry_preprocessor);
c0d051a6:	68b4      	ldr	r4, [r6, #8]
c0d051a8:	f000 fca8 	bl	c0d05afc <pic>
c0d051ac:	4601      	mov	r1, r0
c0d051ae:	68fa      	ldr	r2, [r7, #12]
c0d051b0:	4620      	mov	r0, r4
c0d051b2:	f000 f865 	bl	c0d05280 <ux_menu_display>
c0d051b6:	e04d      	b.n	c0d05254 <ux_menu_elements_button+0xec>
c0d051b8:	482d      	ldr	r0, [pc, #180]	; (c0d05270 <ux_menu_elements_button+0x108>)
c0d051ba:	4285      	cmp	r5, r0
c0d051bc:	d00a      	beq.n	c0d051d4 <ux_menu_elements_button+0x6c>
c0d051be:	4828      	ldr	r0, [pc, #160]	; (c0d05260 <ux_menu_elements_button+0xf8>)
c0d051c0:	4285      	cmp	r5, r0
c0d051c2:	d148      	bne.n	c0d05256 <ux_menu_elements_button+0xee>
      goto redraw;

    case BUTTON_EVT_FAST|BUTTON_RIGHT:
    case BUTTON_EVT_RELEASED|BUTTON_RIGHT:
      // entry 0 is the number of entries in the menu list
      if (ux_menu.current_entry >= ux_menu.menu_entries_count-1) {
c0d051c4:	6879      	ldr	r1, [r7, #4]
c0d051c6:	68b8      	ldr	r0, [r7, #8]
c0d051c8:	1e4a      	subs	r2, r1, #1
c0d051ca:	2400      	movs	r4, #0
c0d051cc:	2101      	movs	r1, #1
c0d051ce:	4290      	cmp	r0, r2
c0d051d0:	d305      	bcc.n	c0d051de <ux_menu_elements_button+0x76>
c0d051d2:	e040      	b.n	c0d05256 <ux_menu_elements_button+0xee>
c0d051d4:	2400      	movs	r4, #0
c0d051d6:	43e1      	mvns	r1, r4
      break;

    case BUTTON_EVT_FAST|BUTTON_LEFT:
    case BUTTON_EVT_RELEASED|BUTTON_LEFT:
      // entry 0 is the number of entries in the menu list
      if (ux_menu.current_entry == 0) {
c0d051d8:	68b8      	ldr	r0, [r7, #8]
c0d051da:	2800      	cmp	r0, #0
c0d051dc:	d03b      	beq.n	c0d05256 <ux_menu_elements_button+0xee>
c0d051de:	1840      	adds	r0, r0, r1
c0d051e0:	60b8      	str	r0, [r7, #8]
  io_seproxyhal_init_button();
}

void io_seproxyhal_init_ux(void) {
  // initialize the touch part
  G_bagl_last_touched_not_released_component = NULL;
c0d051e2:	4824      	ldr	r0, [pc, #144]	; (c0d05274 <ux_menu_elements_button+0x10c>)
c0d051e4:	2400      	movs	r4, #0
c0d051e6:	6004      	str	r4, [r0, #0]
      ux_menu.current_entry++;
    redraw:
#ifdef HAVE_BOLOS_UX
      screen_display_init(0);
#else
      UX_REDISPLAY();
c0d051e8:	4d23      	ldr	r5, [pc, #140]	; (c0d05278 <ux_menu_elements_button+0x110>)
c0d051ea:	60ac      	str	r4, [r5, #8]
c0d051ec:	6828      	ldr	r0, [r5, #0]
c0d051ee:	2800      	cmp	r0, #0
c0d051f0:	d031      	beq.n	c0d05256 <ux_menu_elements_button+0xee>
c0d051f2:	69e8      	ldr	r0, [r5, #28]
c0d051f4:	4921      	ldr	r1, [pc, #132]	; (c0d0527c <ux_menu_elements_button+0x114>)
c0d051f6:	4288      	cmp	r0, r1
c0d051f8:	d02d      	beq.n	c0d05256 <ux_menu_elements_button+0xee>
c0d051fa:	2800      	cmp	r0, #0
c0d051fc:	d02b      	beq.n	c0d05256 <ux_menu_elements_button+0xee>
c0d051fe:	2400      	movs	r4, #0
c0d05200:	4620      	mov	r0, r4
c0d05202:	6869      	ldr	r1, [r5, #4]
c0d05204:	4288      	cmp	r0, r1
c0d05206:	d226      	bcs.n	c0d05256 <ux_menu_elements_button+0xee>
c0d05208:	f000 ff7e 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d0520c:	2800      	cmp	r0, #0
c0d0520e:	d122      	bne.n	c0d05256 <ux_menu_elements_button+0xee>
c0d05210:	68a8      	ldr	r0, [r5, #8]
c0d05212:	68e9      	ldr	r1, [r5, #12]
c0d05214:	2638      	movs	r6, #56	; 0x38
c0d05216:	4370      	muls	r0, r6
c0d05218:	682a      	ldr	r2, [r5, #0]
c0d0521a:	1810      	adds	r0, r2, r0
c0d0521c:	2900      	cmp	r1, #0
c0d0521e:	d002      	beq.n	c0d05226 <ux_menu_elements_button+0xbe>
c0d05220:	4788      	blx	r1
c0d05222:	2800      	cmp	r0, #0
c0d05224:	d007      	beq.n	c0d05236 <ux_menu_elements_button+0xce>
c0d05226:	2801      	cmp	r0, #1
c0d05228:	d103      	bne.n	c0d05232 <ux_menu_elements_button+0xca>
c0d0522a:	68a8      	ldr	r0, [r5, #8]
c0d0522c:	4346      	muls	r6, r0
c0d0522e:	6828      	ldr	r0, [r5, #0]
c0d05230:	1980      	adds	r0, r0, r6
c0d05232:	f7fe f817 	bl	c0d03264 <io_seproxyhal_display>
c0d05236:	68a8      	ldr	r0, [r5, #8]
c0d05238:	1c40      	adds	r0, r0, #1
c0d0523a:	60a8      	str	r0, [r5, #8]
c0d0523c:	6829      	ldr	r1, [r5, #0]
c0d0523e:	2900      	cmp	r1, #0
c0d05240:	d1df      	bne.n	c0d05202 <ux_menu_elements_button+0x9a>
c0d05242:	e008      	b.n	c0d05256 <ux_menu_elements_button+0xee>
        // use userid as the pointer to current entry in the parent menu
        UX_MENU_DISPLAY(current_entry->userid, (const ux_menu_entry_t*)PIC(current_entry->menu), ux_menu.menu_entry_preprocessor);
        return 0;
      }
      // else callback
      else if (current_entry->callback) {
c0d05244:	6870      	ldr	r0, [r6, #4]
c0d05246:	2800      	cmp	r0, #0
c0d05248:	d005      	beq.n	c0d05256 <ux_menu_elements_button+0xee>
        ((ux_menu_callback_t)PIC(current_entry->callback))(current_entry->userid);
c0d0524a:	f000 fc57 	bl	c0d05afc <pic>
c0d0524e:	4601      	mov	r1, r0
c0d05250:	68b0      	ldr	r0, [r6, #8]
c0d05252:	4788      	blx	r1
c0d05254:	2400      	movs	r4, #0
      UX_REDISPLAY();
#endif
      return 0;
  }
  return 1;
}
c0d05256:	4620      	mov	r0, r4
c0d05258:	b001      	add	sp, #4
c0d0525a:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d0525c:	20002024 	.word	0x20002024
c0d05260:	80000002 	.word	0x80000002
c0d05264:	40000002 	.word	0x40000002
c0d05268:	40000001 	.word	0x40000001
c0d0526c:	80000003 	.word	0x80000003
c0d05270:	80000001 	.word	0x80000001
c0d05274:	20001fe0 	.word	0x20001fe0
c0d05278:	20001c2c 	.word	0x20001c2c
c0d0527c:	b0105044 	.word	0xb0105044

c0d05280 <ux_menu_display>:

const ux_menu_entry_t UX_MENU_END_ENTRY = UX_MENU_END;

void ux_menu_display(unsigned int current_entry, 
                     const ux_menu_entry_t* menu_entries,
                     ux_menu_preprocessor_t menu_entry_preprocessor) {
c0d05280:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d05282:	b083      	sub	sp, #12
c0d05284:	9202      	str	r2, [sp, #8]
c0d05286:	460d      	mov	r5, r1
c0d05288:	9001      	str	r0, [sp, #4]
  // reset to first entry
  ux_menu.menu_entries_count = 0;
c0d0528a:	4e37      	ldr	r6, [pc, #220]	; (c0d05368 <ux_menu_display+0xe8>)
c0d0528c:	2000      	movs	r0, #0
c0d0528e:	9000      	str	r0, [sp, #0]
c0d05290:	6070      	str	r0, [r6, #4]

  // count entries
  if (menu_entries) {
c0d05292:	2d00      	cmp	r5, #0
c0d05294:	d015      	beq.n	c0d052c2 <ux_menu_display+0x42>
    for(;;) {
      if (os_memcmp(&menu_entries[ux_menu.menu_entries_count], &UX_MENU_END_ENTRY, sizeof(ux_menu_entry_t)) == 0) {
c0d05296:	4938      	ldr	r1, [pc, #224]	; (c0d05378 <ux_menu_display+0xf8>)
c0d05298:	4479      	add	r1, pc
c0d0529a:	271c      	movs	r7, #28
c0d0529c:	4628      	mov	r0, r5
c0d0529e:	463a      	mov	r2, r7
c0d052a0:	f7ff fa24 	bl	c0d046ec <os_memcmp>
c0d052a4:	2800      	cmp	r0, #0
c0d052a6:	d00c      	beq.n	c0d052c2 <ux_menu_display+0x42>
c0d052a8:	4c34      	ldr	r4, [pc, #208]	; (c0d0537c <ux_menu_display+0xfc>)
c0d052aa:	447c      	add	r4, pc
        break;
      }
      ux_menu.menu_entries_count++;
c0d052ac:	6870      	ldr	r0, [r6, #4]
c0d052ae:	1c40      	adds	r0, r0, #1
c0d052b0:	6070      	str	r0, [r6, #4]
  ux_menu.menu_entries_count = 0;

  // count entries
  if (menu_entries) {
    for(;;) {
      if (os_memcmp(&menu_entries[ux_menu.menu_entries_count], &UX_MENU_END_ENTRY, sizeof(ux_menu_entry_t)) == 0) {
c0d052b2:	4378      	muls	r0, r7
c0d052b4:	1828      	adds	r0, r5, r0
c0d052b6:	4621      	mov	r1, r4
c0d052b8:	463a      	mov	r2, r7
c0d052ba:	f7ff fa17 	bl	c0d046ec <os_memcmp>
c0d052be:	2800      	cmp	r0, #0
c0d052c0:	d1f4      	bne.n	c0d052ac <ux_menu_display+0x2c>
c0d052c2:	9901      	ldr	r1, [sp, #4]
      }
      ux_menu.menu_entries_count++;
    }
  }

  if (current_entry != UX_MENU_UNCHANGED_ENTRY) {
c0d052c4:	4608      	mov	r0, r1
c0d052c6:	3001      	adds	r0, #1
c0d052c8:	d005      	beq.n	c0d052d6 <ux_menu_display+0x56>
    ux_menu.current_entry = current_entry;
    if (ux_menu.current_entry > ux_menu.menu_entries_count) {
c0d052ca:	6870      	ldr	r0, [r6, #4]
c0d052cc:	4288      	cmp	r0, r1
c0d052ce:	9800      	ldr	r0, [sp, #0]
c0d052d0:	d300      	bcc.n	c0d052d4 <ux_menu_display+0x54>
c0d052d2:	4608      	mov	r0, r1
      ux_menu.current_entry = 0;
c0d052d4:	60b0      	str	r0, [r6, #8]
    }
  }
  ux_menu.menu_entries = menu_entries;
c0d052d6:	6035      	str	r5, [r6, #0]
c0d052d8:	2500      	movs	r5, #0
  ux_menu.menu_entry_preprocessor = menu_entry_preprocessor;
c0d052da:	9802      	ldr	r0, [sp, #8]
c0d052dc:	60f0      	str	r0, [r6, #12]
  ux_menu.menu_iterator = NULL;
c0d052de:	6135      	str	r5, [r6, #16]
  G_bolos_ux_context.screen_stack[0].button_push_callback = ux_menu_elements_button;

  screen_display_init(0);
#else
  // display the menu current entry
  UX_DISPLAY(ux_menu_elements, ux_menu_element_preprocessor);
c0d052e0:	4c22      	ldr	r4, [pc, #136]	; (c0d0536c <ux_menu_display+0xec>)
c0d052e2:	4827      	ldr	r0, [pc, #156]	; (c0d05380 <ux_menu_display+0x100>)
c0d052e4:	4478      	add	r0, pc
c0d052e6:	6020      	str	r0, [r4, #0]
c0d052e8:	2009      	movs	r0, #9
c0d052ea:	6060      	str	r0, [r4, #4]
c0d052ec:	4825      	ldr	r0, [pc, #148]	; (c0d05384 <ux_menu_display+0x104>)
c0d052ee:	4478      	add	r0, pc
c0d052f0:	6120      	str	r0, [r4, #16]
c0d052f2:	4825      	ldr	r0, [pc, #148]	; (c0d05388 <ux_menu_display+0x108>)
c0d052f4:	4478      	add	r0, pc
c0d052f6:	60e0      	str	r0, [r4, #12]
c0d052f8:	2003      	movs	r0, #3
c0d052fa:	7620      	strb	r0, [r4, #24]
c0d052fc:	61e5      	str	r5, [r4, #28]
c0d052fe:	4620      	mov	r0, r4
c0d05300:	3018      	adds	r0, #24
c0d05302:	f000 febf 	bl	c0d06084 <os_ux>
c0d05306:	61e0      	str	r0, [r4, #28]
c0d05308:	f000 f840 	bl	c0d0538c <ux_check_status_default>
  io_seproxyhal_init_button();
}

void io_seproxyhal_init_ux(void) {
  // initialize the touch part
  G_bagl_last_touched_not_released_component = NULL;
c0d0530c:	4818      	ldr	r0, [pc, #96]	; (c0d05370 <ux_menu_display+0xf0>)
c0d0530e:	6005      	str	r5, [r0, #0]
  G_bolos_ux_context.screen_stack[0].button_push_callback = ux_menu_elements_button;

  screen_display_init(0);
#else
  // display the menu current entry
  UX_DISPLAY(ux_menu_elements, ux_menu_element_preprocessor);
c0d05310:	60a5      	str	r5, [r4, #8]
c0d05312:	6820      	ldr	r0, [r4, #0]
c0d05314:	2800      	cmp	r0, #0
c0d05316:	d024      	beq.n	c0d05362 <ux_menu_display+0xe2>
c0d05318:	69e0      	ldr	r0, [r4, #28]
c0d0531a:	4916      	ldr	r1, [pc, #88]	; (c0d05374 <ux_menu_display+0xf4>)
c0d0531c:	4288      	cmp	r0, r1
c0d0531e:	d11e      	bne.n	c0d0535e <ux_menu_display+0xde>
c0d05320:	e01f      	b.n	c0d05362 <ux_menu_display+0xe2>
c0d05322:	6860      	ldr	r0, [r4, #4]
c0d05324:	4285      	cmp	r5, r0
c0d05326:	d21c      	bcs.n	c0d05362 <ux_menu_display+0xe2>
c0d05328:	f000 feee 	bl	c0d06108 <io_seproxyhal_spi_is_status_sent>
c0d0532c:	2800      	cmp	r0, #0
c0d0532e:	d118      	bne.n	c0d05362 <ux_menu_display+0xe2>
c0d05330:	68a0      	ldr	r0, [r4, #8]
c0d05332:	68e1      	ldr	r1, [r4, #12]
c0d05334:	2538      	movs	r5, #56	; 0x38
c0d05336:	4368      	muls	r0, r5
c0d05338:	6822      	ldr	r2, [r4, #0]
c0d0533a:	1810      	adds	r0, r2, r0
c0d0533c:	2900      	cmp	r1, #0
c0d0533e:	d002      	beq.n	c0d05346 <ux_menu_display+0xc6>
c0d05340:	4788      	blx	r1
c0d05342:	2800      	cmp	r0, #0
c0d05344:	d007      	beq.n	c0d05356 <ux_menu_display+0xd6>
c0d05346:	2801      	cmp	r0, #1
c0d05348:	d103      	bne.n	c0d05352 <ux_menu_display+0xd2>
c0d0534a:	68a0      	ldr	r0, [r4, #8]
c0d0534c:	4345      	muls	r5, r0
c0d0534e:	6820      	ldr	r0, [r4, #0]
c0d05350:	1940      	adds	r0, r0, r5
c0d05352:	f7fd ff87 	bl	c0d03264 <io_seproxyhal_display>
c0d05356:	68a0      	ldr	r0, [r4, #8]
c0d05358:	1c45      	adds	r5, r0, #1
c0d0535a:	60a5      	str	r5, [r4, #8]
c0d0535c:	6820      	ldr	r0, [r4, #0]
c0d0535e:	2800      	cmp	r0, #0
c0d05360:	d1df      	bne.n	c0d05322 <ux_menu_display+0xa2>
#endif
}
c0d05362:	b003      	add	sp, #12
c0d05364:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d05366:	46c0      	nop			; (mov r8, r8)
c0d05368:	20002024 	.word	0x20002024
c0d0536c:	20001c2c 	.word	0x20001c2c
c0d05370:	20001fe0 	.word	0x20001fe0
c0d05374:	b0105044 	.word	0xb0105044
c0d05378:	00003500 	.word	0x00003500
c0d0537c:	000034ee 	.word	0x000034ee
c0d05380:	000032bc 	.word	0x000032bc
c0d05384:	fffffe77 	.word	0xfffffe77
c0d05388:	fffffce9 	.word	0xfffffce9

c0d0538c <ux_check_status_default>:
}

void ux_check_status_default(unsigned int status) {
  // nothing to be done here by default.
  UNUSED(status);
}
c0d0538c:	4770      	bx	lr
	...

c0d05390 <screen_printf>:
 * - screen_prints
 * - screen_printc
 */


void screen_printf(const char* format, ...) {
c0d05390:	b083      	sub	sp, #12
c0d05392:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d05394:	b08c      	sub	sp, #48	; 0x30
c0d05396:	4604      	mov	r4, r0
c0d05398:	a811      	add	r0, sp, #68	; 0x44
c0d0539a:	c00e      	stmia	r0!, {r1, r2, r3}
    char cStrlenSet;

    //
    // Check the arguments.
    //
    if(format == 0) {
c0d0539c:	2c00      	cmp	r4, #0
c0d0539e:	d100      	bne.n	c0d053a2 <screen_printf+0x12>
c0d053a0:	e18d      	b.n	c0d056be <screen_printf+0x32e>
c0d053a2:	a811      	add	r0, sp, #68	; 0x44
    }

    //
    // Start the varargs processing.
    //
    va_start(vaArgP, format);
c0d053a4:	9007      	str	r0, [sp, #28]
c0d053a6:	e186      	b.n	c0d056b6 <screen_printf+0x326>
c0d053a8:	4625      	mov	r5, r4
c0d053aa:	2600      	movs	r6, #0
    while(*format)
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ulIdx = 0; (format[ulIdx] != '%') && (format[ulIdx] != '\0');
c0d053ac:	4601      	mov	r1, r0
c0d053ae:	e002      	b.n	c0d053b6 <screen_printf+0x26>
c0d053b0:	19a9      	adds	r1, r5, r6
c0d053b2:	7849      	ldrb	r1, [r1, #1]
            ulIdx++)
c0d053b4:	1c76      	adds	r6, r6, #1
c0d053b6:	b2ca      	uxtb	r2, r1
    while(*format)
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ulIdx = 0; (format[ulIdx] != '%') && (format[ulIdx] != '\0');
c0d053b8:	2a00      	cmp	r2, #0
c0d053ba:	d001      	beq.n	c0d053c0 <screen_printf+0x30>
c0d053bc:	2a25      	cmp	r2, #37	; 0x25
c0d053be:	d1f7      	bne.n	c0d053b0 <screen_printf+0x20>

#ifdef HAVE_PRINTF

#ifndef BOLOS_RELEASE
void screen_prints(const char* str, unsigned int charcount) {
  while(charcount--) {
c0d053c0:	19ac      	adds	r4, r5, r6
c0d053c2:	2e00      	cmp	r6, #0
c0d053c4:	d00c      	beq.n	c0d053e0 <screen_printf+0x50>
    screen_printc(*str++);
c0d053c6:	b2c0      	uxtb	r0, r0
c0d053c8:	f7ff fdf4 	bl	c0d04fb4 <screen_printc>

#ifdef HAVE_PRINTF

#ifndef BOLOS_RELEASE
void screen_prints(const char* str, unsigned int charcount) {
  while(charcount--) {
c0d053cc:	2e01      	cmp	r6, #1
c0d053ce:	d006      	beq.n	c0d053de <screen_printf+0x4e>
c0d053d0:	2701      	movs	r7, #1
    screen_printc(*str++);
c0d053d2:	5de8      	ldrb	r0, [r5, r7]
c0d053d4:	f7ff fdee 	bl	c0d04fb4 <screen_printc>

#ifdef HAVE_PRINTF

#ifndef BOLOS_RELEASE
void screen_prints(const char* str, unsigned int charcount) {
  while(charcount--) {
c0d053d8:	1c7f      	adds	r7, r7, #1
c0d053da:	42b7      	cmp	r7, r6
c0d053dc:	d1f9      	bne.n	c0d053d2 <screen_printf+0x42>
c0d053de:	7821      	ldrb	r1, [r4, #0]
        format += ulIdx;

        //
        // See if the next character is a %.
        //
        if(*format == '%')
c0d053e0:	b2c8      	uxtb	r0, r1
c0d053e2:	2825      	cmp	r0, #37	; 0x25
c0d053e4:	d000      	beq.n	c0d053e8 <screen_printf+0x58>
c0d053e6:	e166      	b.n	c0d056b6 <screen_printf+0x326>
            ulCount = 0;
            cFill = ' ';
            ulStrlen = 0;
            cStrlenSet = 0;
            ulCap = 0;
            ulBase = 10;
c0d053e8:	19a8      	adds	r0, r5, r6
c0d053ea:	1c43      	adds	r3, r0, #1
c0d053ec:	2100      	movs	r1, #0
c0d053ee:	2020      	movs	r0, #32
c0d053f0:	9004      	str	r0, [sp, #16]
c0d053f2:	200a      	movs	r0, #10
c0d053f4:	9106      	str	r1, [sp, #24]
c0d053f6:	9103      	str	r1, [sp, #12]
c0d053f8:	9105      	str	r1, [sp, #20]
c0d053fa:	2204      	movs	r2, #4
c0d053fc:	43d5      	mvns	r5, r2
c0d053fe:	2202      	movs	r2, #2
c0d05400:	461c      	mov	r4, r3
again:

            //
            // Determine how to handle the next character.
            //
            switch(*format++)
c0d05402:	7823      	ldrb	r3, [r4, #0]
c0d05404:	1c64      	adds	r4, r4, #1
c0d05406:	2700      	movs	r7, #0
c0d05408:	2b2d      	cmp	r3, #45	; 0x2d
c0d0540a:	dc0d      	bgt.n	c0d05428 <screen_printf+0x98>
c0d0540c:	4639      	mov	r1, r7
c0d0540e:	d0f8      	beq.n	c0d05402 <screen_printf+0x72>
c0d05410:	2b25      	cmp	r3, #37	; 0x25
c0d05412:	d07f      	beq.n	c0d05514 <screen_printf+0x184>
c0d05414:	2b2a      	cmp	r3, #42	; 0x2a
c0d05416:	d000      	beq.n	c0d0541a <screen_printf+0x8a>
c0d05418:	e0fa      	b.n	c0d05610 <screen_printf+0x280>
                  goto error;
                }
                
                case '*':
                {
                  if (*format == 's' ) {                    
c0d0541a:	7821      	ldrb	r1, [r4, #0]
c0d0541c:	2973      	cmp	r1, #115	; 0x73
c0d0541e:	d000      	beq.n	c0d05422 <screen_printf+0x92>
c0d05420:	e0f6      	b.n	c0d05610 <screen_printf+0x280>
c0d05422:	4611      	mov	r1, r2
c0d05424:	4623      	mov	r3, r4
c0d05426:	e04b      	b.n	c0d054c0 <screen_printf+0x130>
c0d05428:	2b47      	cmp	r3, #71	; 0x47
c0d0542a:	dc14      	bgt.n	c0d05456 <screen_printf+0xc6>
c0d0542c:	461a      	mov	r2, r3
c0d0542e:	3a30      	subs	r2, #48	; 0x30
c0d05430:	2a0a      	cmp	r2, #10
c0d05432:	d234      	bcs.n	c0d0549e <screen_printf+0x10e>
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((format[-1] == '0') && (ulCount == 0))
c0d05434:	2b30      	cmp	r3, #48	; 0x30
c0d05436:	9d04      	ldr	r5, [sp, #16]
c0d05438:	462a      	mov	r2, r5
c0d0543a:	d100      	bne.n	c0d0543e <screen_printf+0xae>
c0d0543c:	461a      	mov	r2, r3
c0d0543e:	9f05      	ldr	r7, [sp, #20]
c0d05440:	2f00      	cmp	r7, #0
c0d05442:	d000      	beq.n	c0d05446 <screen_printf+0xb6>
c0d05444:	462a      	mov	r2, r5
                    }

                    //
                    // Update the digit count.
                    //
                    ulCount *= 10;
c0d05446:	250a      	movs	r5, #10
c0d05448:	437d      	muls	r5, r7
                    ulCount += format[-1] - '0';
c0d0544a:	18eb      	adds	r3, r5, r3
c0d0544c:	3b30      	subs	r3, #48	; 0x30
c0d0544e:	9305      	str	r3, [sp, #20]
c0d05450:	9204      	str	r2, [sp, #16]
c0d05452:	4623      	mov	r3, r4
c0d05454:	e7d1      	b.n	c0d053fa <screen_printf+0x6a>
c0d05456:	2b67      	cmp	r3, #103	; 0x67
c0d05458:	dd04      	ble.n	c0d05464 <screen_printf+0xd4>
c0d0545a:	2b72      	cmp	r3, #114	; 0x72
c0d0545c:	dd08      	ble.n	c0d05470 <screen_printf+0xe0>
c0d0545e:	2b73      	cmp	r3, #115	; 0x73
c0d05460:	d134      	bne.n	c0d054cc <screen_printf+0x13c>
c0d05462:	e00a      	b.n	c0d0547a <screen_printf+0xea>
c0d05464:	2b62      	cmp	r3, #98	; 0x62
c0d05466:	dc36      	bgt.n	c0d054d6 <screen_printf+0x146>
c0d05468:	2b48      	cmp	r3, #72	; 0x48
c0d0546a:	d143      	bne.n	c0d054f4 <screen_printf+0x164>
c0d0546c:	2001      	movs	r0, #1
c0d0546e:	e002      	b.n	c0d05476 <screen_printf+0xe6>
c0d05470:	2b68      	cmp	r3, #104	; 0x68
c0d05472:	d145      	bne.n	c0d05500 <screen_printf+0x170>
c0d05474:	2000      	movs	r0, #0
c0d05476:	9003      	str	r0, [sp, #12]
c0d05478:	2010      	movs	r0, #16
                case_s:
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
c0d0547a:	9b07      	ldr	r3, [sp, #28]
c0d0547c:	1d1f      	adds	r7, r3, #4
c0d0547e:	9707      	str	r7, [sp, #28]
c0d05480:	2703      	movs	r7, #3
c0d05482:	4039      	ands	r1, r7
c0d05484:	1c52      	adds	r2, r2, #1
c0d05486:	681f      	ldr	r7, [r3, #0]

                    //
                    // Determine the length of the string. (if not specified using .*)
                    //
                    switch(cStrlenSet) {
c0d05488:	2901      	cmp	r1, #1
c0d0548a:	d100      	bne.n	c0d0548e <screen_printf+0xfe>
c0d0548c:	e0bb      	b.n	c0d05606 <screen_printf+0x276>
c0d0548e:	2902      	cmp	r1, #2
c0d05490:	d100      	bne.n	c0d05494 <screen_printf+0x104>
c0d05492:	e0ba      	b.n	c0d0560a <screen_printf+0x27a>
c0d05494:	2903      	cmp	r1, #3
c0d05496:	4611      	mov	r1, r2
c0d05498:	4623      	mov	r3, r4
c0d0549a:	d0ae      	beq.n	c0d053fa <screen_printf+0x6a>
c0d0549c:	e0c1      	b.n	c0d05622 <screen_printf+0x292>
c0d0549e:	2b2e      	cmp	r3, #46	; 0x2e
c0d054a0:	d000      	beq.n	c0d054a4 <screen_printf+0x114>
c0d054a2:	e0b5      	b.n	c0d05610 <screen_printf+0x280>
                // special %.*H or %.*h format to print a given length of hex digits (case: H UPPER, h lower)
                //
                case '.':
                {
                  // ensure next char is '*' and next one is 's'
                  if (format[0] == '*' && (format[1] == 's' || format[1] == 'H' || format[1] == 'h')) {
c0d054a4:	7821      	ldrb	r1, [r4, #0]
c0d054a6:	292a      	cmp	r1, #42	; 0x2a
c0d054a8:	d000      	beq.n	c0d054ac <screen_printf+0x11c>
c0d054aa:	e0b1      	b.n	c0d05610 <screen_printf+0x280>
c0d054ac:	7862      	ldrb	r2, [r4, #1]
c0d054ae:	1c63      	adds	r3, r4, #1
c0d054b0:	2101      	movs	r1, #1
c0d054b2:	2a48      	cmp	r2, #72	; 0x48
c0d054b4:	d004      	beq.n	c0d054c0 <screen_printf+0x130>
c0d054b6:	2a68      	cmp	r2, #104	; 0x68
c0d054b8:	d002      	beq.n	c0d054c0 <screen_printf+0x130>
c0d054ba:	2a73      	cmp	r2, #115	; 0x73
c0d054bc:	d000      	beq.n	c0d054c0 <screen_printf+0x130>
c0d054be:	e0a7      	b.n	c0d05610 <screen_printf+0x280>
c0d054c0:	9a07      	ldr	r2, [sp, #28]
c0d054c2:	1d14      	adds	r4, r2, #4
c0d054c4:	9407      	str	r4, [sp, #28]
c0d054c6:	6812      	ldr	r2, [r2, #0]
 * - screen_prints
 * - screen_printc
 */


void screen_printf(const char* format, ...) {
c0d054c8:	9206      	str	r2, [sp, #24]
c0d054ca:	e796      	b.n	c0d053fa <screen_printf+0x6a>
c0d054cc:	2b75      	cmp	r3, #117	; 0x75
c0d054ce:	d023      	beq.n	c0d05518 <screen_printf+0x188>
c0d054d0:	2b78      	cmp	r3, #120	; 0x78
c0d054d2:	d018      	beq.n	c0d05506 <screen_printf+0x176>
c0d054d4:	e09c      	b.n	c0d05610 <screen_printf+0x280>
c0d054d6:	2b63      	cmp	r3, #99	; 0x63
c0d054d8:	d100      	bne.n	c0d054dc <screen_printf+0x14c>
c0d054da:	e08d      	b.n	c0d055f8 <screen_printf+0x268>
c0d054dc:	2b64      	cmp	r3, #100	; 0x64
c0d054de:	d000      	beq.n	c0d054e2 <screen_printf+0x152>
c0d054e0:	e096      	b.n	c0d05610 <screen_printf+0x280>
                case 'd':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
c0d054e2:	9807      	ldr	r0, [sp, #28]
c0d054e4:	1d01      	adds	r1, r0, #4
c0d054e6:	9107      	str	r1, [sp, #28]
c0d054e8:	6800      	ldr	r0, [r0, #0]
c0d054ea:	17c1      	asrs	r1, r0, #31
c0d054ec:	1842      	adds	r2, r0, r1
c0d054ee:	404a      	eors	r2, r1

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((long)ulValue < 0)
c0d054f0:	0fc0      	lsrs	r0, r0, #31
c0d054f2:	e016      	b.n	c0d05522 <screen_printf+0x192>
c0d054f4:	2b58      	cmp	r3, #88	; 0x58
c0d054f6:	d000      	beq.n	c0d054fa <screen_printf+0x16a>
c0d054f8:	e08a      	b.n	c0d05610 <screen_printf+0x280>
c0d054fa:	2001      	movs	r0, #1

        screen_printc(str[i]);
    }
    */

    unsigned long ulIdx, ulValue, ulPos, ulCount, ulBase, ulNeg, ulStrlen, ulCap;
c0d054fc:	9003      	str	r0, [sp, #12]
c0d054fe:	e002      	b.n	c0d05506 <screen_printf+0x176>
c0d05500:	2b70      	cmp	r3, #112	; 0x70
c0d05502:	d000      	beq.n	c0d05506 <screen_printf+0x176>
c0d05504:	e084      	b.n	c0d05610 <screen_printf+0x280>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
c0d05506:	9807      	ldr	r0, [sp, #28]
c0d05508:	1d01      	adds	r1, r0, #4
c0d0550a:	9107      	str	r1, [sp, #28]
c0d0550c:	6802      	ldr	r2, [r0, #0]
c0d0550e:	2000      	movs	r0, #0
c0d05510:	2610      	movs	r6, #16
c0d05512:	e007      	b.n	c0d05524 <screen_printf+0x194>
#ifdef HAVE_PRINTF

#ifndef BOLOS_RELEASE
void screen_prints(const char* str, unsigned int charcount) {
  while(charcount--) {
    screen_printc(*str++);
c0d05514:	2025      	movs	r0, #37	; 0x25
c0d05516:	e073      	b.n	c0d05600 <screen_printf+0x270>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
c0d05518:	9807      	ldr	r0, [sp, #28]
c0d0551a:	1d01      	adds	r1, r0, #4
c0d0551c:	9107      	str	r1, [sp, #28]
c0d0551e:	6802      	ldr	r2, [r0, #0]
c0d05520:	2000      	movs	r0, #0
c0d05522:	260a      	movs	r6, #10
c0d05524:	9002      	str	r0, [sp, #8]
c0d05526:	2701      	movs	r7, #1
c0d05528:	9206      	str	r2, [sp, #24]
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ulIdx = 1;
                        (((ulIdx * ulBase) <= ulValue) &&
c0d0552a:	4296      	cmp	r6, r2
c0d0552c:	d812      	bhi.n	c0d05554 <screen_printf+0x1c4>
c0d0552e:	2501      	movs	r5, #1
c0d05530:	4630      	mov	r0, r6
c0d05532:	4607      	mov	r7, r0
                         (((ulIdx * ulBase) / ulBase) == ulIdx));
c0d05534:	4631      	mov	r1, r6
c0d05536:	f002 f89b 	bl	c0d07670 <__aeabi_uidiv>
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ulIdx = 1;
c0d0553a:	42a8      	cmp	r0, r5
c0d0553c:	d109      	bne.n	c0d05552 <screen_printf+0x1c2>
                        (((ulIdx * ulBase) <= ulValue) &&
c0d0553e:	4630      	mov	r0, r6
c0d05540:	4378      	muls	r0, r7
                         (((ulIdx * ulBase) / ulBase) == ulIdx));
                        ulIdx *= ulBase, ulCount--)
c0d05542:	9905      	ldr	r1, [sp, #20]
c0d05544:	1e49      	subs	r1, r1, #1
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ulIdx = 1;
                        (((ulIdx * ulBase) <= ulValue) &&
c0d05546:	9105      	str	r1, [sp, #20]
c0d05548:	9906      	ldr	r1, [sp, #24]
c0d0554a:	4288      	cmp	r0, r1
c0d0554c:	463d      	mov	r5, r7
c0d0554e:	d9f0      	bls.n	c0d05532 <screen_printf+0x1a2>
c0d05550:	e000      	b.n	c0d05554 <screen_printf+0x1c4>
c0d05552:	462f      	mov	r7, r5

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ulNeg)
c0d05554:	2500      	movs	r5, #0
c0d05556:	43e9      	mvns	r1, r5
c0d05558:	9b02      	ldr	r3, [sp, #8]
c0d0555a:	2b00      	cmp	r3, #0
c0d0555c:	d100      	bne.n	c0d05560 <screen_printf+0x1d0>
c0d0555e:	4619      	mov	r1, r3
c0d05560:	9805      	ldr	r0, [sp, #20]
c0d05562:	9101      	str	r1, [sp, #4]
c0d05564:	1840      	adds	r0, r0, r1

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ulNeg && (cFill == '0'))
c0d05566:	9904      	ldr	r1, [sp, #16]
c0d05568:	b2ca      	uxtb	r2, r1
c0d0556a:	2a30      	cmp	r2, #48	; 0x30
c0d0556c:	d106      	bne.n	c0d0557c <screen_printf+0x1ec>
c0d0556e:	2b00      	cmp	r3, #0
c0d05570:	d004      	beq.n	c0d0557c <screen_printf+0x1ec>
c0d05572:	a908      	add	r1, sp, #32
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ulPos++] = '-';
c0d05574:	232d      	movs	r3, #45	; 0x2d
c0d05576:	700b      	strb	r3, [r1, #0]
c0d05578:	2501      	movs	r5, #1
c0d0557a:	2300      	movs	r3, #0

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ulCount > 1) && (ulCount < 16))
c0d0557c:	1e81      	subs	r1, r0, #2
c0d0557e:	290d      	cmp	r1, #13
c0d05580:	d80c      	bhi.n	c0d0559c <screen_printf+0x20c>
c0d05582:	1e41      	subs	r1, r0, #1
c0d05584:	d00a      	beq.n	c0d0559c <screen_printf+0x20c>
c0d05586:	a808      	add	r0, sp, #32
                    {
                        for(ulCount--; ulCount; ulCount--)
                        {
                            pcBuf[ulPos++] = cFill;
c0d05588:	4328      	orrs	r0, r5
c0d0558a:	9302      	str	r3, [sp, #8]
c0d0558c:	f002 f906 	bl	c0d0779c <__aeabi_memset>
c0d05590:	9b02      	ldr	r3, [sp, #8]
c0d05592:	9805      	ldr	r0, [sp, #20]
c0d05594:	1940      	adds	r0, r0, r5
c0d05596:	9901      	ldr	r1, [sp, #4]
c0d05598:	1840      	adds	r0, r0, r1
c0d0559a:	1e45      	subs	r5, r0, #1

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ulNeg)
c0d0559c:	2b00      	cmp	r3, #0
c0d0559e:	d003      	beq.n	c0d055a8 <screen_printf+0x218>
c0d055a0:	a808      	add	r0, sp, #32
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ulPos++] = '-';
c0d055a2:	212d      	movs	r1, #45	; 0x2d
c0d055a4:	5541      	strb	r1, [r0, r5]
c0d055a6:	1c6d      	adds	r5, r5, #1
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ulIdx; ulIdx /= ulBase)
c0d055a8:	2f00      	cmp	r7, #0
c0d055aa:	d01b      	beq.n	c0d055e4 <screen_printf+0x254>
c0d055ac:	9803      	ldr	r0, [sp, #12]
c0d055ae:	2800      	cmp	r0, #0
c0d055b0:	d002      	beq.n	c0d055b8 <screen_printf+0x228>
c0d055b2:	4849      	ldr	r0, [pc, #292]	; (c0d056d8 <screen_printf+0x348>)
c0d055b4:	4478      	add	r0, pc
c0d055b6:	e001      	b.n	c0d055bc <screen_printf+0x22c>
c0d055b8:	4846      	ldr	r0, [pc, #280]	; (c0d056d4 <screen_printf+0x344>)
c0d055ba:	4478      	add	r0, pc
c0d055bc:	9005      	str	r0, [sp, #20]
c0d055be:	9806      	ldr	r0, [sp, #24]
c0d055c0:	4639      	mov	r1, r7
c0d055c2:	f002 f855 	bl	c0d07670 <__aeabi_uidiv>
c0d055c6:	4631      	mov	r1, r6
c0d055c8:	f002 f8d8 	bl	c0d0777c <__aeabi_uidivmod>
c0d055cc:	9805      	ldr	r0, [sp, #20]
c0d055ce:	5c40      	ldrb	r0, [r0, r1]
c0d055d0:	a908      	add	r1, sp, #32
c0d055d2:	5548      	strb	r0, [r1, r5]
c0d055d4:	4638      	mov	r0, r7
c0d055d6:	4631      	mov	r1, r6
c0d055d8:	f002 f84a 	bl	c0d07670 <__aeabi_uidiv>
c0d055dc:	1c6d      	adds	r5, r5, #1
c0d055de:	42be      	cmp	r6, r7
c0d055e0:	4607      	mov	r7, r0
c0d055e2:	d9ec      	bls.n	c0d055be <screen_printf+0x22e>

#ifdef HAVE_PRINTF

#ifndef BOLOS_RELEASE
void screen_prints(const char* str, unsigned int charcount) {
  while(charcount--) {
c0d055e4:	2d00      	cmp	r5, #0
c0d055e6:	d066      	beq.n	c0d056b6 <screen_printf+0x326>
c0d055e8:	ae08      	add	r6, sp, #32
    screen_printc(*str++);
c0d055ea:	7830      	ldrb	r0, [r6, #0]
c0d055ec:	f7ff fce2 	bl	c0d04fb4 <screen_printc>
c0d055f0:	1c76      	adds	r6, r6, #1

#ifdef HAVE_PRINTF

#ifndef BOLOS_RELEASE
void screen_prints(const char* str, unsigned int charcount) {
  while(charcount--) {
c0d055f2:	1e6d      	subs	r5, r5, #1
c0d055f4:	d1f9      	bne.n	c0d055ea <screen_printf+0x25a>
c0d055f6:	e05e      	b.n	c0d056b6 <screen_printf+0x326>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
c0d055f8:	9807      	ldr	r0, [sp, #28]
c0d055fa:	1d01      	adds	r1, r0, #4
c0d055fc:	9107      	str	r1, [sp, #28]
#ifdef HAVE_PRINTF

#ifndef BOLOS_RELEASE
void screen_prints(const char* str, unsigned int charcount) {
  while(charcount--) {
    screen_printc(*str++);
c0d055fe:	7800      	ldrb	r0, [r0, #0]
c0d05600:	f7ff fcd8 	bl	c0d04fb4 <screen_printc>
c0d05604:	e057      	b.n	c0d056b6 <screen_printf+0x326>
c0d05606:	9a06      	ldr	r2, [sp, #24]
c0d05608:	e011      	b.n	c0d0562e <screen_printf+0x29e>
                        break;
                        
                      // printout prepad
                      case 2:
                        // if string is empty, then, ' ' padding
                        if (pcStr[0] == '\0') {
c0d0560a:	7838      	ldrb	r0, [r7, #0]
c0d0560c:	2800      	cmp	r0, #0
c0d0560e:	d03f      	beq.n	c0d05690 <screen_printf+0x300>

#ifdef HAVE_PRINTF

#ifndef BOLOS_RELEASE
void screen_prints(const char* str, unsigned int charcount) {
  while(charcount--) {
c0d05610:	482d      	ldr	r0, [pc, #180]	; (c0d056c8 <screen_printf+0x338>)
c0d05612:	4478      	add	r0, pc
c0d05614:	1940      	adds	r0, r0, r5
    screen_printc(*str++);
c0d05616:	7940      	ldrb	r0, [r0, #5]
c0d05618:	f7ff fccc 	bl	c0d04fb4 <screen_printc>

#ifdef HAVE_PRINTF

#ifndef BOLOS_RELEASE
void screen_prints(const char* str, unsigned int charcount) {
  while(charcount--) {
c0d0561c:	1c6d      	adds	r5, r5, #1
c0d0561e:	d1f7      	bne.n	c0d05610 <screen_printf+0x280>
c0d05620:	e049      	b.n	c0d056b6 <screen_printf+0x326>
c0d05622:	1d2a      	adds	r2, r5, #4
                    // Determine the length of the string. (if not specified using .*)
                    //
                    switch(cStrlenSet) {
                      // compute length with strlen
                      case 0:
                        for(ulIdx = 0; pcStr[ulIdx] != '\0'; ulIdx++)
c0d05624:	18b9      	adds	r1, r7, r2
c0d05626:	7849      	ldrb	r1, [r1, #1]
c0d05628:	1c52      	adds	r2, r2, #1
c0d0562a:	2900      	cmp	r1, #0
c0d0562c:	d1fa      	bne.n	c0d05624 <screen_printf+0x294>
c0d0562e:	9206      	str	r2, [sp, #24]
                    }

                    //
                    // Write the string.
                    //
                    switch(ulBase) {
c0d05630:	2810      	cmp	r0, #16
c0d05632:	9e03      	ldr	r6, [sp, #12]
c0d05634:	d11f      	bne.n	c0d05676 <screen_printf+0x2e6>
                      default:
                        screen_prints(pcStr, ulIdx);
                        break;
                      case 16: {
                        unsigned char nibble1, nibble2;
                        for (ulCount = 0; ulCount < ulIdx; ulCount++) {
c0d05636:	9806      	ldr	r0, [sp, #24]
c0d05638:	e01a      	b.n	c0d05670 <screen_printf+0x2e0>
                          nibble1 = (pcStr[ulCount]>>4)&0xF;
c0d0563a:	7838      	ldrb	r0, [r7, #0]
                          nibble2 = pcStr[ulCount]&0xF;
c0d0563c:	250f      	movs	r5, #15
c0d0563e:	4005      	ands	r5, r0
                        screen_prints(pcStr, ulIdx);
                        break;
                      case 16: {
                        unsigned char nibble1, nibble2;
                        for (ulCount = 0; ulCount < ulIdx; ulCount++) {
                          nibble1 = (pcStr[ulCount]>>4)&0xF;
c0d05640:	0900      	lsrs	r0, r0, #4
                          nibble2 = pcStr[ulCount]&0xF;
                          switch(ulCap) {
c0d05642:	2e01      	cmp	r6, #1
c0d05644:	d005      	beq.n	c0d05652 <screen_printf+0x2c2>
c0d05646:	2e00      	cmp	r6, #0
c0d05648:	d10e      	bne.n	c0d05668 <screen_printf+0x2d8>
                            case 0:
                              screen_printc(g_pcHex[nibble1]);
c0d0564a:	b2c0      	uxtb	r0, r0
c0d0564c:	4e1f      	ldr	r6, [pc, #124]	; (c0d056cc <screen_printf+0x33c>)
c0d0564e:	447e      	add	r6, pc
c0d05650:	e002      	b.n	c0d05658 <screen_printf+0x2c8>
                              screen_printc(g_pcHex[nibble2]);
                              break;
                            case 1:
                              screen_printc(g_pcHex_cap[nibble1]);
c0d05652:	b2c0      	uxtb	r0, r0
c0d05654:	4e1e      	ldr	r6, [pc, #120]	; (c0d056d0 <screen_printf+0x340>)
c0d05656:	447e      	add	r6, pc
c0d05658:	5c30      	ldrb	r0, [r6, r0]
c0d0565a:	f7ff fcab 	bl	c0d04fb4 <screen_printc>
c0d0565e:	b2e8      	uxtb	r0, r5
c0d05660:	5c30      	ldrb	r0, [r6, r0]
c0d05662:	9e03      	ldr	r6, [sp, #12]
c0d05664:	f7ff fca6 	bl	c0d04fb4 <screen_printc>
c0d05668:	9806      	ldr	r0, [sp, #24]
                      default:
                        screen_prints(pcStr, ulIdx);
                        break;
                      case 16: {
                        unsigned char nibble1, nibble2;
                        for (ulCount = 0; ulCount < ulIdx; ulCount++) {
c0d0566a:	1e40      	subs	r0, r0, #1
c0d0566c:	1c7f      	adds	r7, r7, #1
c0d0566e:	9006      	str	r0, [sp, #24]
c0d05670:	2800      	cmp	r0, #0
c0d05672:	d1e2      	bne.n	c0d0563a <screen_printf+0x2aa>
c0d05674:	e01f      	b.n	c0d056b6 <screen_printf+0x326>
c0d05676:	2600      	movs	r6, #0

#ifdef HAVE_PRINTF

#ifndef BOLOS_RELEASE
void screen_prints(const char* str, unsigned int charcount) {
  while(charcount--) {
c0d05678:	9806      	ldr	r0, [sp, #24]
c0d0567a:	2800      	cmp	r0, #0
c0d0567c:	d010      	beq.n	c0d056a0 <screen_printf+0x310>
c0d0567e:	2500      	movs	r5, #0
c0d05680:	9e06      	ldr	r6, [sp, #24]
    screen_printc(*str++);
c0d05682:	5d78      	ldrb	r0, [r7, r5]
c0d05684:	f7ff fc96 	bl	c0d04fb4 <screen_printc>

#ifdef HAVE_PRINTF

#ifndef BOLOS_RELEASE
void screen_prints(const char* str, unsigned int charcount) {
  while(charcount--) {
c0d05688:	1c6d      	adds	r5, r5, #1
c0d0568a:	42ae      	cmp	r6, r5
c0d0568c:	d1f9      	bne.n	c0d05682 <screen_printf+0x2f2>
c0d0568e:	e007      	b.n	c0d056a0 <screen_printf+0x310>

        screen_printc(str[i]);
    }
    */

    unsigned long ulIdx, ulValue, ulPos, ulCount, ulBase, ulNeg, ulStrlen, ulCap;
c0d05690:	1d28      	adds	r0, r5, #4
c0d05692:	9906      	ldr	r1, [sp, #24]
c0d05694:	1a45      	subs	r5, r0, r1
#ifdef HAVE_PRINTF

#ifndef BOLOS_RELEASE
void screen_prints(const char* str, unsigned int charcount) {
  while(charcount--) {
    screen_printc(*str++);
c0d05696:	2020      	movs	r0, #32
c0d05698:	f7ff fc8c 	bl	c0d04fb4 <screen_printc>
                        if (pcStr[0] == '\0') {
                        
                          // padd ulStrlen white space
                          do {
                            screen_prints(" ", 1);
                          } while(ulStrlen-- > 0);
c0d0569c:	1c6d      	adds	r5, r5, #1
c0d0569e:	d1fa      	bne.n	c0d05696 <screen_printf+0x306>
c0d056a0:	9905      	ldr	r1, [sp, #20]

s_pad:
                    //
                    // Write any required padding spaces
                    //
                    if(ulCount > ulIdx)
c0d056a2:	42b1      	cmp	r1, r6
c0d056a4:	d907      	bls.n	c0d056b6 <screen_printf+0x326>
                    {
                        ulCount -= ulIdx;
c0d056a6:	1b88      	subs	r0, r1, r6
c0d056a8:	d005      	beq.n	c0d056b6 <screen_printf+0x326>
};

#ifdef HAVE_PRINTF

#ifndef BOLOS_RELEASE
void screen_prints(const char* str, unsigned int charcount) {
c0d056aa:	1a75      	subs	r5, r6, r1
  while(charcount--) {
    screen_printc(*str++);
c0d056ac:	2020      	movs	r0, #32
c0d056ae:	f7ff fc81 	bl	c0d04fb4 <screen_printc>
                    // Write any required padding spaces
                    //
                    if(ulCount > ulIdx)
                    {
                        ulCount -= ulIdx;
                        while(ulCount--)
c0d056b2:	1c6d      	adds	r5, r5, #1
c0d056b4:	d1fa      	bne.n	c0d056ac <screen_printf+0x31c>
c0d056b6:	7820      	ldrb	r0, [r4, #0]
c0d056b8:	2800      	cmp	r0, #0
c0d056ba:	d000      	beq.n	c0d056be <screen_printf+0x32e>
c0d056bc:	e674      	b.n	c0d053a8 <screen_printf+0x18>

    //
    // End the varargs processing.
    //
    va_end(vaArgP);
}
c0d056be:	b00c      	add	sp, #48	; 0x30
c0d056c0:	bcf0      	pop	{r4, r5, r6, r7}
c0d056c2:	bc01      	pop	{r0}
c0d056c4:	b003      	add	sp, #12
c0d056c6:	4700      	bx	r0
c0d056c8:	000031c2 	.word	0x000031c2
c0d056cc:	00003166 	.word	0x00003166
c0d056d0:	0000316e 	.word	0x0000316e
c0d056d4:	000031fa 	.word	0x000031fa
c0d056d8:	00003210 	.word	0x00003210

c0d056dc <snprintf>:
#endif // HAVE_PRINTF

#ifdef HAVE_SPRINTF
//unsigned int snprintf(unsigned char * str, unsigned int str_size, const char* format, ...)
int snprintf(char * str, size_t str_size, const char * format, ...)
 {
c0d056dc:	b081      	sub	sp, #4
c0d056de:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d056e0:	b090      	sub	sp, #64	; 0x40
c0d056e2:	4615      	mov	r5, r2
c0d056e4:	460c      	mov	r4, r1
c0d056e6:	900a      	str	r0, [sp, #40]	; 0x28
c0d056e8:	9315      	str	r3, [sp, #84]	; 0x54
    char cStrlenSet;
    
    //
    // Check the arguments.
    //
    if(format == 0 || str == 0 ||str_size < 2) {
c0d056ea:	2c02      	cmp	r4, #2
c0d056ec:	d200      	bcs.n	c0d056f0 <snprintf+0x14>
c0d056ee:	e1f5      	b.n	c0d05adc <snprintf+0x400>
c0d056f0:	980a      	ldr	r0, [sp, #40]	; 0x28
c0d056f2:	2800      	cmp	r0, #0
c0d056f4:	d100      	bne.n	c0d056f8 <snprintf+0x1c>
c0d056f6:	e1f1      	b.n	c0d05adc <snprintf+0x400>
c0d056f8:	2d00      	cmp	r5, #0
c0d056fa:	d100      	bne.n	c0d056fe <snprintf+0x22>
c0d056fc:	e1ee      	b.n	c0d05adc <snprintf+0x400>
c0d056fe:	2100      	movs	r1, #0
      return 0;
    }

    // ensure terminating string with a \0
    os_memset(str, 0, str_size);
c0d05700:	980a      	ldr	r0, [sp, #40]	; 0x28
c0d05702:	9107      	str	r1, [sp, #28]
c0d05704:	4622      	mov	r2, r4
c0d05706:	f7fe ff4b 	bl	c0d045a0 <os_memset>
c0d0570a:	a815      	add	r0, sp, #84	; 0x54


    //
    // Start the varargs processing.
    //
    va_start(vaArgP, format);
c0d0570c:	900b      	str	r0, [sp, #44]	; 0x2c

    //
    // Loop while there are more characters in the string.
    //
    while(*format)
c0d0570e:	7828      	ldrb	r0, [r5, #0]
c0d05710:	2800      	cmp	r0, #0
c0d05712:	d100      	bne.n	c0d05716 <snprintf+0x3a>
c0d05714:	e1e2      	b.n	c0d05adc <snprintf+0x400>
c0d05716:	9907      	ldr	r1, [sp, #28]
c0d05718:	43c9      	mvns	r1, r1
      return 0;
    }

    // ensure terminating string with a \0
    os_memset(str, 0, str_size);
    str_size--;
c0d0571a:	1e67      	subs	r7, r4, #1
c0d0571c:	9105      	str	r1, [sp, #20]
c0d0571e:	e1c2      	b.n	c0d05aa6 <snprintf+0x3ca>
        }

        //
        // Skip the portion of the string that was written.
        //
        format += ulIdx;
c0d05720:	1928      	adds	r0, r5, r4

        //
        // See if the next character is a %.
        //
        if(*format == '%')
c0d05722:	5d29      	ldrb	r1, [r5, r4]
c0d05724:	2925      	cmp	r1, #37	; 0x25
c0d05726:	d10b      	bne.n	c0d05740 <snprintf+0x64>
c0d05728:	9703      	str	r7, [sp, #12]
c0d0572a:	9202      	str	r2, [sp, #8]
        {
            //
            // Skip the %.
            //
            format++;
c0d0572c:	1c43      	adds	r3, r0, #1
c0d0572e:	2000      	movs	r0, #0
c0d05730:	2120      	movs	r1, #32
c0d05732:	9108      	str	r1, [sp, #32]
c0d05734:	210a      	movs	r1, #10
c0d05736:	9101      	str	r1, [sp, #4]
c0d05738:	9000      	str	r0, [sp, #0]
c0d0573a:	9004      	str	r0, [sp, #16]
c0d0573c:	9009      	str	r0, [sp, #36]	; 0x24
c0d0573e:	e056      	b.n	c0d057ee <snprintf+0x112>
c0d05740:	4605      	mov	r5, r0
c0d05742:	920a      	str	r2, [sp, #40]	; 0x28
c0d05744:	e121      	b.n	c0d0598a <snprintf+0x2ae>
c0d05746:	462b      	mov	r3, r5
c0d05748:	4608      	mov	r0, r1
c0d0574a:	e04b      	b.n	c0d057e4 <snprintf+0x108>
c0d0574c:	2b47      	cmp	r3, #71	; 0x47
c0d0574e:	dc13      	bgt.n	c0d05778 <snprintf+0x9c>
c0d05750:	4619      	mov	r1, r3
c0d05752:	3930      	subs	r1, #48	; 0x30
c0d05754:	290a      	cmp	r1, #10
c0d05756:	d234      	bcs.n	c0d057c2 <snprintf+0xe6>
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((format[-1] == '0') && (ulCount == 0))
c0d05758:	2b30      	cmp	r3, #48	; 0x30
c0d0575a:	9908      	ldr	r1, [sp, #32]
c0d0575c:	d100      	bne.n	c0d05760 <snprintf+0x84>
c0d0575e:	4619      	mov	r1, r3
c0d05760:	9f09      	ldr	r7, [sp, #36]	; 0x24
c0d05762:	2f00      	cmp	r7, #0
c0d05764:	d000      	beq.n	c0d05768 <snprintf+0x8c>
c0d05766:	9908      	ldr	r1, [sp, #32]
                    }

                    //
                    // Update the digit count.
                    //
                    ulCount *= 10;
c0d05768:	220a      	movs	r2, #10
c0d0576a:	437a      	muls	r2, r7
                    ulCount += format[-1] - '0';
c0d0576c:	18d2      	adds	r2, r2, r3
c0d0576e:	3a30      	subs	r2, #48	; 0x30
c0d05770:	9209      	str	r2, [sp, #36]	; 0x24
c0d05772:	462b      	mov	r3, r5
c0d05774:	9108      	str	r1, [sp, #32]
c0d05776:	e03a      	b.n	c0d057ee <snprintf+0x112>
c0d05778:	2b67      	cmp	r3, #103	; 0x67
c0d0577a:	dd04      	ble.n	c0d05786 <snprintf+0xaa>
c0d0577c:	2b72      	cmp	r3, #114	; 0x72
c0d0577e:	dd09      	ble.n	c0d05794 <snprintf+0xb8>
c0d05780:	2b73      	cmp	r3, #115	; 0x73
c0d05782:	d146      	bne.n	c0d05812 <snprintf+0x136>
c0d05784:	e00a      	b.n	c0d0579c <snprintf+0xc0>
c0d05786:	2b62      	cmp	r3, #98	; 0x62
c0d05788:	dc48      	bgt.n	c0d0581c <snprintf+0x140>
c0d0578a:	2b48      	cmp	r3, #72	; 0x48
c0d0578c:	d155      	bne.n	c0d0583a <snprintf+0x15e>
c0d0578e:	2201      	movs	r2, #1
c0d05790:	9204      	str	r2, [sp, #16]
c0d05792:	e001      	b.n	c0d05798 <snprintf+0xbc>
c0d05794:	2b68      	cmp	r3, #104	; 0x68
c0d05796:	d156      	bne.n	c0d05846 <snprintf+0x16a>
c0d05798:	2210      	movs	r2, #16
c0d0579a:	9201      	str	r2, [sp, #4]
                case_s:
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
c0d0579c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
c0d0579e:	1d13      	adds	r3, r2, #4
c0d057a0:	930b      	str	r3, [sp, #44]	; 0x2c
c0d057a2:	2303      	movs	r3, #3
c0d057a4:	4018      	ands	r0, r3
c0d057a6:	1c4f      	adds	r7, r1, #1
c0d057a8:	6811      	ldr	r1, [r2, #0]

                    //
                    // Determine the length of the string. (if not specified using .*)
                    //
                    switch(cStrlenSet) {
c0d057aa:	2801      	cmp	r0, #1
c0d057ac:	d100      	bne.n	c0d057b0 <snprintf+0xd4>
c0d057ae:	e0d0      	b.n	c0d05952 <snprintf+0x276>
c0d057b0:	2802      	cmp	r0, #2
c0d057b2:	d100      	bne.n	c0d057b6 <snprintf+0xda>
c0d057b4:	e0d2      	b.n	c0d0595c <snprintf+0x280>
c0d057b6:	2803      	cmp	r0, #3
c0d057b8:	462b      	mov	r3, r5
c0d057ba:	4638      	mov	r0, r7
c0d057bc:	9f06      	ldr	r7, [sp, #24]
c0d057be:	d016      	beq.n	c0d057ee <snprintf+0x112>
c0d057c0:	e0e9      	b.n	c0d05996 <snprintf+0x2ba>
c0d057c2:	2b2e      	cmp	r3, #46	; 0x2e
c0d057c4:	d000      	beq.n	c0d057c8 <snprintf+0xec>
c0d057c6:	e0cc      	b.n	c0d05962 <snprintf+0x286>
                // special %.*H or %.*h format to print a given length of hex digits (case: H UPPER, h lower)
                //
                case '.':
                {
                  // ensure next char is '*' and next one is 's'/'h'/'H'
                  if (format[0] == '*' && (format[1] == 's' || format[1] == 'H' || format[1] == 'h')) {
c0d057c8:	7828      	ldrb	r0, [r5, #0]
c0d057ca:	282a      	cmp	r0, #42	; 0x2a
c0d057cc:	d000      	beq.n	c0d057d0 <snprintf+0xf4>
c0d057ce:	e0c8      	b.n	c0d05962 <snprintf+0x286>
c0d057d0:	7869      	ldrb	r1, [r5, #1]
c0d057d2:	1c6b      	adds	r3, r5, #1
c0d057d4:	2001      	movs	r0, #1
c0d057d6:	2948      	cmp	r1, #72	; 0x48
c0d057d8:	d004      	beq.n	c0d057e4 <snprintf+0x108>
c0d057da:	2968      	cmp	r1, #104	; 0x68
c0d057dc:	d002      	beq.n	c0d057e4 <snprintf+0x108>
c0d057de:	2973      	cmp	r1, #115	; 0x73
c0d057e0:	d000      	beq.n	c0d057e4 <snprintf+0x108>
c0d057e2:	e0be      	b.n	c0d05962 <snprintf+0x286>
c0d057e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
c0d057e6:	1d0a      	adds	r2, r1, #4
c0d057e8:	920b      	str	r2, [sp, #44]	; 0x2c
c0d057ea:	6809      	ldr	r1, [r1, #0]
int snprintf(char * str, size_t str_size, const char * format, ...)
 {
    unsigned int ulIdx, ulValue, ulPos, ulCount, ulBase, ulNeg, ulStrlen, ulCap;
    char *pcStr, pcBuf[16], cFill;
    va_list vaArgP;
    char cStrlenSet;
c0d057ec:	9100      	str	r1, [sp, #0]
c0d057ee:	2102      	movs	r1, #2
c0d057f0:	461d      	mov	r5, r3
again:

            //
            // Determine how to handle the next character.
            //
            switch(*format++)
c0d057f2:	782b      	ldrb	r3, [r5, #0]
c0d057f4:	1c6d      	adds	r5, r5, #1
c0d057f6:	2200      	movs	r2, #0
c0d057f8:	2b2d      	cmp	r3, #45	; 0x2d
c0d057fa:	dca7      	bgt.n	c0d0574c <snprintf+0x70>
c0d057fc:	4610      	mov	r0, r2
c0d057fe:	d0f8      	beq.n	c0d057f2 <snprintf+0x116>
c0d05800:	2b25      	cmp	r3, #37	; 0x25
c0d05802:	d02a      	beq.n	c0d0585a <snprintf+0x17e>
c0d05804:	2b2a      	cmp	r3, #42	; 0x2a
c0d05806:	d000      	beq.n	c0d0580a <snprintf+0x12e>
c0d05808:	e0ab      	b.n	c0d05962 <snprintf+0x286>
                  goto error;
                }
                
                case '*':
                {
                  if (*format == 's' ) {                    
c0d0580a:	7828      	ldrb	r0, [r5, #0]
c0d0580c:	2873      	cmp	r0, #115	; 0x73
c0d0580e:	d09a      	beq.n	c0d05746 <snprintf+0x6a>
c0d05810:	e0a7      	b.n	c0d05962 <snprintf+0x286>
c0d05812:	2b75      	cmp	r3, #117	; 0x75
c0d05814:	d023      	beq.n	c0d0585e <snprintf+0x182>
c0d05816:	2b78      	cmp	r3, #120	; 0x78
c0d05818:	d018      	beq.n	c0d0584c <snprintf+0x170>
c0d0581a:	e0a2      	b.n	c0d05962 <snprintf+0x286>
c0d0581c:	2b63      	cmp	r3, #99	; 0x63
c0d0581e:	d100      	bne.n	c0d05822 <snprintf+0x146>
c0d05820:	e08d      	b.n	c0d0593e <snprintf+0x262>
c0d05822:	2b64      	cmp	r3, #100	; 0x64
c0d05824:	d000      	beq.n	c0d05828 <snprintf+0x14c>
c0d05826:	e09c      	b.n	c0d05962 <snprintf+0x286>
                case 'd':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
c0d05828:	980b      	ldr	r0, [sp, #44]	; 0x2c
c0d0582a:	1d01      	adds	r1, r0, #4
c0d0582c:	910b      	str	r1, [sp, #44]	; 0x2c
c0d0582e:	6800      	ldr	r0, [r0, #0]
c0d05830:	17c1      	asrs	r1, r0, #31
c0d05832:	1842      	adds	r2, r0, r1
c0d05834:	404a      	eors	r2, r1

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((long)ulValue < 0)
c0d05836:	0fc0      	lsrs	r0, r0, #31
c0d05838:	e016      	b.n	c0d05868 <snprintf+0x18c>
c0d0583a:	2b58      	cmp	r3, #88	; 0x58
c0d0583c:	d000      	beq.n	c0d05840 <snprintf+0x164>
c0d0583e:	e090      	b.n	c0d05962 <snprintf+0x286>
c0d05840:	2001      	movs	r0, #1

#ifdef HAVE_SPRINTF
//unsigned int snprintf(unsigned char * str, unsigned int str_size, const char* format, ...)
int snprintf(char * str, size_t str_size, const char * format, ...)
 {
    unsigned int ulIdx, ulValue, ulPos, ulCount, ulBase, ulNeg, ulStrlen, ulCap;
c0d05842:	9004      	str	r0, [sp, #16]
c0d05844:	e002      	b.n	c0d0584c <snprintf+0x170>
c0d05846:	2b70      	cmp	r3, #112	; 0x70
c0d05848:	d000      	beq.n	c0d0584c <snprintf+0x170>
c0d0584a:	e08a      	b.n	c0d05962 <snprintf+0x286>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
c0d0584c:	980b      	ldr	r0, [sp, #44]	; 0x2c
c0d0584e:	1d01      	adds	r1, r0, #4
c0d05850:	910b      	str	r1, [sp, #44]	; 0x2c
c0d05852:	6802      	ldr	r2, [r0, #0]
c0d05854:	2000      	movs	r0, #0
c0d05856:	2710      	movs	r7, #16
c0d05858:	e007      	b.n	c0d0586a <snprintf+0x18e>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    str[0] = '%';
c0d0585a:	2025      	movs	r0, #37	; 0x25
c0d0585c:	e073      	b.n	c0d05946 <snprintf+0x26a>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
c0d0585e:	980b      	ldr	r0, [sp, #44]	; 0x2c
c0d05860:	1d01      	adds	r1, r0, #4
c0d05862:	910b      	str	r1, [sp, #44]	; 0x2c
c0d05864:	6802      	ldr	r2, [r0, #0]
c0d05866:	2000      	movs	r0, #0
c0d05868:	270a      	movs	r7, #10
c0d0586a:	9006      	str	r0, [sp, #24]
c0d0586c:	2601      	movs	r6, #1
c0d0586e:	920a      	str	r2, [sp, #40]	; 0x28
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ulIdx = 1;
                        (((ulIdx * ulBase) <= ulValue) &&
c0d05870:	4297      	cmp	r7, r2
c0d05872:	d812      	bhi.n	c0d0589a <snprintf+0x1be>
c0d05874:	2401      	movs	r4, #1
c0d05876:	4638      	mov	r0, r7
c0d05878:	4606      	mov	r6, r0
                         (((ulIdx * ulBase) / ulBase) == ulIdx));
c0d0587a:	4639      	mov	r1, r7
c0d0587c:	f001 fef8 	bl	c0d07670 <__aeabi_uidiv>
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ulIdx = 1;
c0d05880:	42a0      	cmp	r0, r4
c0d05882:	d109      	bne.n	c0d05898 <snprintf+0x1bc>
                        (((ulIdx * ulBase) <= ulValue) &&
c0d05884:	4638      	mov	r0, r7
c0d05886:	4370      	muls	r0, r6
                         (((ulIdx * ulBase) / ulBase) == ulIdx));
                        ulIdx *= ulBase, ulCount--)
c0d05888:	9909      	ldr	r1, [sp, #36]	; 0x24
c0d0588a:	1e49      	subs	r1, r1, #1
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ulIdx = 1;
                        (((ulIdx * ulBase) <= ulValue) &&
c0d0588c:	9109      	str	r1, [sp, #36]	; 0x24
c0d0588e:	990a      	ldr	r1, [sp, #40]	; 0x28
c0d05890:	4288      	cmp	r0, r1
c0d05892:	4634      	mov	r4, r6
c0d05894:	d9f0      	bls.n	c0d05878 <snprintf+0x19c>
c0d05896:	e000      	b.n	c0d0589a <snprintf+0x1be>
c0d05898:	4626      	mov	r6, r4

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ulNeg)
c0d0589a:	2400      	movs	r4, #0
c0d0589c:	43e1      	mvns	r1, r4
c0d0589e:	9b06      	ldr	r3, [sp, #24]
c0d058a0:	2b00      	cmp	r3, #0
c0d058a2:	d100      	bne.n	c0d058a6 <snprintf+0x1ca>
c0d058a4:	4619      	mov	r1, r3
c0d058a6:	9809      	ldr	r0, [sp, #36]	; 0x24
c0d058a8:	9101      	str	r1, [sp, #4]
c0d058aa:	1840      	adds	r0, r0, r1

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ulNeg && (cFill == '0'))
c0d058ac:	9908      	ldr	r1, [sp, #32]
c0d058ae:	b2ca      	uxtb	r2, r1
c0d058b0:	2a30      	cmp	r2, #48	; 0x30
c0d058b2:	d106      	bne.n	c0d058c2 <snprintf+0x1e6>
c0d058b4:	2b00      	cmp	r3, #0
c0d058b6:	d004      	beq.n	c0d058c2 <snprintf+0x1e6>
c0d058b8:	a90c      	add	r1, sp, #48	; 0x30
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ulPos++] = '-';
c0d058ba:	232d      	movs	r3, #45	; 0x2d
c0d058bc:	700b      	strb	r3, [r1, #0]
c0d058be:	2300      	movs	r3, #0
c0d058c0:	2401      	movs	r4, #1

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ulCount > 1) && (ulCount < 16))
c0d058c2:	1e81      	subs	r1, r0, #2
c0d058c4:	290d      	cmp	r1, #13
c0d058c6:	d80c      	bhi.n	c0d058e2 <snprintf+0x206>
c0d058c8:	1e41      	subs	r1, r0, #1
c0d058ca:	d00a      	beq.n	c0d058e2 <snprintf+0x206>
c0d058cc:	a80c      	add	r0, sp, #48	; 0x30
                    {
                        for(ulCount--; ulCount; ulCount--)
                        {
                            pcBuf[ulPos++] = cFill;
c0d058ce:	4320      	orrs	r0, r4
c0d058d0:	9306      	str	r3, [sp, #24]
c0d058d2:	f001 ff63 	bl	c0d0779c <__aeabi_memset>
c0d058d6:	9b06      	ldr	r3, [sp, #24]
c0d058d8:	9809      	ldr	r0, [sp, #36]	; 0x24
c0d058da:	1900      	adds	r0, r0, r4
c0d058dc:	9901      	ldr	r1, [sp, #4]
c0d058de:	1840      	adds	r0, r0, r1
c0d058e0:	1e44      	subs	r4, r0, #1

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ulNeg)
c0d058e2:	2b00      	cmp	r3, #0
c0d058e4:	d003      	beq.n	c0d058ee <snprintf+0x212>
c0d058e6:	a80c      	add	r0, sp, #48	; 0x30
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ulPos++] = '-';
c0d058e8:	212d      	movs	r1, #45	; 0x2d
c0d058ea:	5501      	strb	r1, [r0, r4]
c0d058ec:	1c64      	adds	r4, r4, #1
c0d058ee:	9804      	ldr	r0, [sp, #16]
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ulIdx; ulIdx /= ulBase)
c0d058f0:	2e00      	cmp	r6, #0
c0d058f2:	d01a      	beq.n	c0d0592a <snprintf+0x24e>
c0d058f4:	2800      	cmp	r0, #0
c0d058f6:	d002      	beq.n	c0d058fe <snprintf+0x222>
c0d058f8:	487f      	ldr	r0, [pc, #508]	; (c0d05af8 <snprintf+0x41c>)
c0d058fa:	4478      	add	r0, pc
c0d058fc:	e001      	b.n	c0d05902 <snprintf+0x226>
c0d058fe:	487d      	ldr	r0, [pc, #500]	; (c0d05af4 <snprintf+0x418>)
c0d05900:	4478      	add	r0, pc
c0d05902:	9009      	str	r0, [sp, #36]	; 0x24
c0d05904:	980a      	ldr	r0, [sp, #40]	; 0x28
c0d05906:	4631      	mov	r1, r6
c0d05908:	f001 feb2 	bl	c0d07670 <__aeabi_uidiv>
c0d0590c:	4639      	mov	r1, r7
c0d0590e:	f001 ff35 	bl	c0d0777c <__aeabi_uidivmod>
c0d05912:	9809      	ldr	r0, [sp, #36]	; 0x24
c0d05914:	5c40      	ldrb	r0, [r0, r1]
c0d05916:	a90c      	add	r1, sp, #48	; 0x30
c0d05918:	5508      	strb	r0, [r1, r4]
c0d0591a:	4630      	mov	r0, r6
c0d0591c:	4639      	mov	r1, r7
c0d0591e:	f001 fea7 	bl	c0d07670 <__aeabi_uidiv>
c0d05922:	1c64      	adds	r4, r4, #1
c0d05924:	42b7      	cmp	r7, r6
c0d05926:	4606      	mov	r6, r0
c0d05928:	d9ec      	bls.n	c0d05904 <snprintf+0x228>
c0d0592a:	9b03      	ldr	r3, [sp, #12]
                    }

                    //
                    // Write the string.
                    //
                    ulPos = MIN(ulPos, str_size);
c0d0592c:	429c      	cmp	r4, r3
c0d0592e:	d300      	bcc.n	c0d05932 <snprintf+0x256>
c0d05930:	461c      	mov	r4, r3
c0d05932:	a90c      	add	r1, sp, #48	; 0x30
c0d05934:	9e02      	ldr	r6, [sp, #8]
                    os_memmove(str, pcBuf, ulPos);
c0d05936:	4630      	mov	r0, r6
c0d05938:	4622      	mov	r2, r4
c0d0593a:	461f      	mov	r7, r3
c0d0593c:	e01c      	b.n	c0d05978 <snprintf+0x29c>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
c0d0593e:	980b      	ldr	r0, [sp, #44]	; 0x2c
c0d05940:	1d01      	adds	r1, r0, #4
c0d05942:	910b      	str	r1, [sp, #44]	; 0x2c
c0d05944:	6800      	ldr	r0, [r0, #0]
c0d05946:	9902      	ldr	r1, [sp, #8]
c0d05948:	7008      	strb	r0, [r1, #0]
c0d0594a:	9803      	ldr	r0, [sp, #12]
c0d0594c:	1e40      	subs	r0, r0, #1
c0d0594e:	1c49      	adds	r1, r1, #1
c0d05950:	e016      	b.n	c0d05980 <snprintf+0x2a4>
c0d05952:	9c00      	ldr	r4, [sp, #0]
c0d05954:	9a05      	ldr	r2, [sp, #20]
c0d05956:	9b03      	ldr	r3, [sp, #12]
c0d05958:	9f06      	ldr	r7, [sp, #24]
c0d0595a:	e024      	b.n	c0d059a6 <snprintf+0x2ca>
                        break;
                        
                      // printout prepad
                      case 2:
                        // if string is empty, then, ' ' padding
                        if (pcStr[0] == '\0') {
c0d0595c:	7808      	ldrb	r0, [r1, #0]
c0d0595e:	2800      	cmp	r0, #0
c0d05960:	d077      	beq.n	c0d05a52 <snprintf+0x376>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    ulPos = MIN(strlen("ERROR"), str_size);
c0d05962:	2005      	movs	r0, #5
c0d05964:	9f03      	ldr	r7, [sp, #12]
c0d05966:	2f05      	cmp	r7, #5
c0d05968:	463c      	mov	r4, r7
c0d0596a:	d300      	bcc.n	c0d0596e <snprintf+0x292>
c0d0596c:	4604      	mov	r4, r0
                    os_memmove(str, "ERROR", ulPos);
c0d0596e:	495e      	ldr	r1, [pc, #376]	; (c0d05ae8 <snprintf+0x40c>)
c0d05970:	4479      	add	r1, pc
c0d05972:	9e02      	ldr	r6, [sp, #8]
c0d05974:	4630      	mov	r0, r6
c0d05976:	4622      	mov	r2, r4
c0d05978:	f7fe fe1b 	bl	c0d045b2 <os_memmove>
c0d0597c:	1b38      	subs	r0, r7, r4
c0d0597e:	1931      	adds	r1, r6, r4
c0d05980:	910a      	str	r1, [sp, #40]	; 0x28
c0d05982:	4607      	mov	r7, r0
c0d05984:	2800      	cmp	r0, #0
c0d05986:	d100      	bne.n	c0d0598a <snprintf+0x2ae>
c0d05988:	e0a8      	b.n	c0d05adc <snprintf+0x400>
    va_start(vaArgP, format);

    //
    // Loop while there are more characters in the string.
    //
    while(*format)
c0d0598a:	7828      	ldrb	r0, [r5, #0]
c0d0598c:	2800      	cmp	r0, #0
c0d0598e:	9905      	ldr	r1, [sp, #20]
c0d05990:	d000      	beq.n	c0d05994 <snprintf+0x2b8>
c0d05992:	e088      	b.n	c0d05aa6 <snprintf+0x3ca>
c0d05994:	e0a2      	b.n	c0d05adc <snprintf+0x400>
c0d05996:	9a05      	ldr	r2, [sp, #20]
c0d05998:	4614      	mov	r4, r2
c0d0599a:	9b03      	ldr	r3, [sp, #12]
                    // Determine the length of the string. (if not specified using .*)
                    //
                    switch(cStrlenSet) {
                      // compute length with strlen
                      case 0:
                        for(ulIdx = 0; pcStr[ulIdx] != '\0'; ulIdx++)
c0d0599c:	1908      	adds	r0, r1, r4
c0d0599e:	7840      	ldrb	r0, [r0, #1]
c0d059a0:	1c64      	adds	r4, r4, #1
c0d059a2:	2800      	cmp	r0, #0
c0d059a4:	d1fa      	bne.n	c0d0599c <snprintf+0x2c0>
                    }

                    //
                    // Write the string.
                    //
                    switch(ulBase) {
c0d059a6:	9801      	ldr	r0, [sp, #4]
c0d059a8:	2810      	cmp	r0, #16
c0d059aa:	9802      	ldr	r0, [sp, #8]
c0d059ac:	d146      	bne.n	c0d05a3c <snprintf+0x360>
                            return 0;
                        }
                        break;
                      case 16: {
                        unsigned char nibble1, nibble2;
                        for (ulCount = 0; ulCount < ulIdx; ulCount++) {
c0d059ae:	2c00      	cmp	r4, #0
c0d059b0:	d076      	beq.n	c0d05aa0 <snprintf+0x3c4>
c0d059b2:	9108      	str	r1, [sp, #32]
                          nibble1 = (pcStr[ulCount]>>4)&0xF;
c0d059b4:	980a      	ldr	r0, [sp, #40]	; 0x28
c0d059b6:	1883      	adds	r3, r0, r2
c0d059b8:	1bd0      	subs	r0, r2, r7
c0d059ba:	4286      	cmp	r6, r0
c0d059bc:	4631      	mov	r1, r6
c0d059be:	d800      	bhi.n	c0d059c2 <snprintf+0x2e6>
c0d059c0:	4601      	mov	r1, r0
c0d059c2:	9103      	str	r1, [sp, #12]
c0d059c4:	434a      	muls	r2, r1
c0d059c6:	9202      	str	r2, [sp, #8]
c0d059c8:	1c50      	adds	r0, r2, #1
c0d059ca:	9001      	str	r0, [sp, #4]
c0d059cc:	2000      	movs	r0, #0
c0d059ce:	463a      	mov	r2, r7
c0d059d0:	930a      	str	r3, [sp, #40]	; 0x28
c0d059d2:	9902      	ldr	r1, [sp, #8]
c0d059d4:	185b      	adds	r3, r3, r1
c0d059d6:	9009      	str	r0, [sp, #36]	; 0x24
c0d059d8:	9908      	ldr	r1, [sp, #32]
c0d059da:	5c08      	ldrb	r0, [r1, r0]
                          nibble2 = pcStr[ulCount]&0xF;
c0d059dc:	270f      	movs	r7, #15
c0d059de:	4007      	ands	r7, r0
                        }
                        break;
                      case 16: {
                        unsigned char nibble1, nibble2;
                        for (ulCount = 0; ulCount < ulIdx; ulCount++) {
                          nibble1 = (pcStr[ulCount]>>4)&0xF;
c0d059e0:	0900      	lsrs	r0, r0, #4
c0d059e2:	9903      	ldr	r1, [sp, #12]
c0d059e4:	1889      	adds	r1, r1, r2
c0d059e6:	1c49      	adds	r1, r1, #1
                          nibble2 = pcStr[ulCount]&0xF;
                          if (str_size < 2) {
c0d059e8:	2902      	cmp	r1, #2
c0d059ea:	d377      	bcc.n	c0d05adc <snprintf+0x400>
c0d059ec:	9904      	ldr	r1, [sp, #16]
                              return 0;
                          }
                          switch(ulCap) {
c0d059ee:	2901      	cmp	r1, #1
c0d059f0:	d004      	beq.n	c0d059fc <snprintf+0x320>
c0d059f2:	2900      	cmp	r1, #0
c0d059f4:	d10a      	bne.n	c0d05a0c <snprintf+0x330>
c0d059f6:	493e      	ldr	r1, [pc, #248]	; (c0d05af0 <snprintf+0x414>)
c0d059f8:	4479      	add	r1, pc
c0d059fa:	e001      	b.n	c0d05a00 <snprintf+0x324>
c0d059fc:	493b      	ldr	r1, [pc, #236]	; (c0d05aec <snprintf+0x410>)
c0d059fe:	4479      	add	r1, pc
c0d05a00:	b2c0      	uxtb	r0, r0
c0d05a02:	5c08      	ldrb	r0, [r1, r0]
c0d05a04:	7018      	strb	r0, [r3, #0]
c0d05a06:	b2f8      	uxtb	r0, r7
c0d05a08:	5c08      	ldrb	r0, [r1, r0]
c0d05a0a:	7058      	strb	r0, [r3, #1]
                                str[1] = g_pcHex_cap[nibble2];
                              break;
                          }
                          str+= 2;
                          str_size -= 2;
                          if (str_size == 0) {
c0d05a0c:	9801      	ldr	r0, [sp, #4]
c0d05a0e:	4290      	cmp	r0, r2
c0d05a10:	d064      	beq.n	c0d05adc <snprintf+0x400>
                            return 0;
                        }
                        break;
                      case 16: {
                        unsigned char nibble1, nibble2;
                        for (ulCount = 0; ulCount < ulIdx; ulCount++) {
c0d05a12:	1e92      	subs	r2, r2, #2
c0d05a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
c0d05a16:	1c9b      	adds	r3, r3, #2
c0d05a18:	9809      	ldr	r0, [sp, #36]	; 0x24
c0d05a1a:	1c40      	adds	r0, r0, #1
c0d05a1c:	42a0      	cmp	r0, r4
c0d05a1e:	d3d7      	bcc.n	c0d059d0 <snprintf+0x2f4>
c0d05a20:	9009      	str	r0, [sp, #36]	; 0x24
c0d05a22:	9905      	ldr	r1, [sp, #20]
 
#endif // HAVE_PRINTF

#ifdef HAVE_SPRINTF
//unsigned int snprintf(unsigned char * str, unsigned int str_size, const char* format, ...)
int snprintf(char * str, size_t str_size, const char * format, ...)
c0d05a24:	9806      	ldr	r0, [sp, #24]
c0d05a26:	1a08      	subs	r0, r1, r0
c0d05a28:	4286      	cmp	r6, r0
c0d05a2a:	d800      	bhi.n	c0d05a2e <snprintf+0x352>
c0d05a2c:	4606      	mov	r6, r0
c0d05a2e:	4608      	mov	r0, r1
c0d05a30:	4370      	muls	r0, r6
c0d05a32:	1818      	adds	r0, r3, r0
c0d05a34:	900a      	str	r0, [sp, #40]	; 0x28
c0d05a36:	18b0      	adds	r0, r6, r2
c0d05a38:	1c47      	adds	r7, r0, #1
c0d05a3a:	e01c      	b.n	c0d05a76 <snprintf+0x39a>
                    //
                    // Write the string.
                    //
                    switch(ulBase) {
                      default:
                        ulIdx = MIN(ulIdx, str_size);
c0d05a3c:	429c      	cmp	r4, r3
c0d05a3e:	d300      	bcc.n	c0d05a42 <snprintf+0x366>
c0d05a40:	461c      	mov	r4, r3
                        os_memmove(str, pcStr, ulIdx);
c0d05a42:	4622      	mov	r2, r4
c0d05a44:	4606      	mov	r6, r0
c0d05a46:	461f      	mov	r7, r3
c0d05a48:	f7fe fdb3 	bl	c0d045b2 <os_memmove>
                        str+= ulIdx;
                        str_size -= ulIdx;
c0d05a4c:	1b38      	subs	r0, r7, r4
                    //
                    switch(ulBase) {
                      default:
                        ulIdx = MIN(ulIdx, str_size);
                        os_memmove(str, pcStr, ulIdx);
                        str+= ulIdx;
c0d05a4e:	1931      	adds	r1, r6, r4
c0d05a50:	e00d      	b.n	c0d05a6e <snprintf+0x392>
c0d05a52:	9b03      	ldr	r3, [sp, #12]
c0d05a54:	9f00      	ldr	r7, [sp, #0]
                      case 2:
                        // if string is empty, then, ' ' padding
                        if (pcStr[0] == '\0') {
                        
                          // padd ulStrlen white space
                          ulStrlen = MIN(ulStrlen, str_size);
c0d05a56:	429f      	cmp	r7, r3
c0d05a58:	d300      	bcc.n	c0d05a5c <snprintf+0x380>
c0d05a5a:	461f      	mov	r7, r3
                          os_memset(str, ' ', ulStrlen);
c0d05a5c:	2120      	movs	r1, #32
c0d05a5e:	9e02      	ldr	r6, [sp, #8]
c0d05a60:	4630      	mov	r0, r6
c0d05a62:	463a      	mov	r2, r7
c0d05a64:	f7fe fd9c 	bl	c0d045a0 <os_memset>
                          str+= ulStrlen;
                          str_size -= ulStrlen;
c0d05a68:	9803      	ldr	r0, [sp, #12]
c0d05a6a:	1bc0      	subs	r0, r0, r7
                        if (pcStr[0] == '\0') {
                        
                          // padd ulStrlen white space
                          ulStrlen = MIN(ulStrlen, str_size);
                          os_memset(str, ' ', ulStrlen);
                          str+= ulStrlen;
c0d05a6c:	19f1      	adds	r1, r6, r7
c0d05a6e:	910a      	str	r1, [sp, #40]	; 0x28
c0d05a70:	4607      	mov	r7, r0
c0d05a72:	2800      	cmp	r0, #0
c0d05a74:	d032      	beq.n	c0d05adc <snprintf+0x400>
c0d05a76:	9809      	ldr	r0, [sp, #36]	; 0x24

s_pad:
                    //
                    // Write any required padding spaces
                    //
                    if(ulCount > ulIdx)
c0d05a78:	42a0      	cmp	r0, r4
c0d05a7a:	d986      	bls.n	c0d0598a <snprintf+0x2ae>
                    {
                        ulCount -= ulIdx;
c0d05a7c:	1b04      	subs	r4, r0, r4
c0d05a7e:	463e      	mov	r6, r7
                        ulCount = MIN(ulCount, str_size);
c0d05a80:	42b4      	cmp	r4, r6
c0d05a82:	d300      	bcc.n	c0d05a86 <snprintf+0x3aa>
c0d05a84:	4634      	mov	r4, r6
                        os_memset(str, ' ', ulCount);
c0d05a86:	2120      	movs	r1, #32
c0d05a88:	9f0a      	ldr	r7, [sp, #40]	; 0x28
c0d05a8a:	4638      	mov	r0, r7
c0d05a8c:	4622      	mov	r2, r4
c0d05a8e:	f7fe fd87 	bl	c0d045a0 <os_memset>
                        str+= ulCount;
                        str_size -= ulCount;
c0d05a92:	1b36      	subs	r6, r6, r4
                    if(ulCount > ulIdx)
                    {
                        ulCount -= ulIdx;
                        ulCount = MIN(ulCount, str_size);
                        os_memset(str, ' ', ulCount);
                        str+= ulCount;
c0d05a94:	193f      	adds	r7, r7, r4
c0d05a96:	970a      	str	r7, [sp, #40]	; 0x28
c0d05a98:	4637      	mov	r7, r6
                        str_size -= ulCount;
                        if (str_size == 0) {
c0d05a9a:	2e00      	cmp	r6, #0
c0d05a9c:	d01e      	beq.n	c0d05adc <snprintf+0x400>
c0d05a9e:	e774      	b.n	c0d0598a <snprintf+0x2ae>
c0d05aa0:	461f      	mov	r7, r3
c0d05aa2:	900a      	str	r0, [sp, #40]	; 0x28
c0d05aa4:	e771      	b.n	c0d0598a <snprintf+0x2ae>
    while(*format)
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ulIdx = 0; (format[ulIdx] != '%') && (format[ulIdx] != '\0');
c0d05aa6:	460e      	mov	r6, r1
c0d05aa8:	9c07      	ldr	r4, [sp, #28]
c0d05aaa:	e003      	b.n	c0d05ab4 <snprintf+0x3d8>
c0d05aac:	1928      	adds	r0, r5, r4
c0d05aae:	7840      	ldrb	r0, [r0, #1]
c0d05ab0:	1e76      	subs	r6, r6, #1
            ulIdx++)
c0d05ab2:	1c64      	adds	r4, r4, #1
c0d05ab4:	b2c0      	uxtb	r0, r0
    while(*format)
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ulIdx = 0; (format[ulIdx] != '%') && (format[ulIdx] != '\0');
c0d05ab6:	2800      	cmp	r0, #0
c0d05ab8:	d001      	beq.n	c0d05abe <snprintf+0x3e2>
c0d05aba:	2825      	cmp	r0, #37	; 0x25
c0d05abc:	d1f6      	bne.n	c0d05aac <snprintf+0x3d0>
        }

        //
        // Write this portion of the string.
        //
        ulIdx = MIN(ulIdx, str_size);
c0d05abe:	42bc      	cmp	r4, r7
c0d05ac0:	d300      	bcc.n	c0d05ac4 <snprintf+0x3e8>
c0d05ac2:	463c      	mov	r4, r7
        os_memmove(str, format, ulIdx);
c0d05ac4:	980a      	ldr	r0, [sp, #40]	; 0x28
c0d05ac6:	4629      	mov	r1, r5
c0d05ac8:	4622      	mov	r2, r4
c0d05aca:	f7fe fd72 	bl	c0d045b2 <os_memmove>
c0d05ace:	9706      	str	r7, [sp, #24]
        str+= ulIdx;
        str_size -= ulIdx;
c0d05ad0:	1b3f      	subs	r7, r7, r4
        //
        // Write this portion of the string.
        //
        ulIdx = MIN(ulIdx, str_size);
        os_memmove(str, format, ulIdx);
        str+= ulIdx;
c0d05ad2:	980a      	ldr	r0, [sp, #40]	; 0x28
c0d05ad4:	1902      	adds	r2, r0, r4
        str_size -= ulIdx;
        if (str_size == 0) {
c0d05ad6:	2f00      	cmp	r7, #0
c0d05ad8:	d000      	beq.n	c0d05adc <snprintf+0x400>
c0d05ada:	e621      	b.n	c0d05720 <snprintf+0x44>
    // End the varargs processing.
    //
    va_end(vaArgP);

    return 0;
}
c0d05adc:	2000      	movs	r0, #0
c0d05ade:	b010      	add	sp, #64	; 0x40
c0d05ae0:	bcf0      	pop	{r4, r5, r6, r7}
c0d05ae2:	bc02      	pop	{r1}
c0d05ae4:	b001      	add	sp, #4
c0d05ae6:	4708      	bx	r1
c0d05ae8:	00002e64 	.word	0x00002e64
c0d05aec:	00002dc6 	.word	0x00002dc6
c0d05af0:	00002dbc 	.word	0x00002dbc
c0d05af4:	00002eb4 	.word	0x00002eb4
c0d05af8:	00002eca 	.word	0x00002eca

c0d05afc <pic>:

// only apply PIC conversion if link_address is in linked code (over 0xC0D00000 in our example)
// this way, PIC call are armless if the address is not meant to be converted
extern unsigned int _nvram;
extern unsigned int _envram;
unsigned int pic(unsigned int link_address) {
c0d05afc:	b580      	push	{r7, lr}
//  screen_printf(" %08X", link_address);
	if (link_address >= ((unsigned int)&_nvram) && link_address < ((unsigned int)&_envram)) {
c0d05afe:	4904      	ldr	r1, [pc, #16]	; (c0d05b10 <pic+0x14>)
c0d05b00:	4288      	cmp	r0, r1
c0d05b02:	d304      	bcc.n	c0d05b0e <pic+0x12>
c0d05b04:	4903      	ldr	r1, [pc, #12]	; (c0d05b14 <pic+0x18>)
c0d05b06:	4288      	cmp	r0, r1
c0d05b08:	d201      	bcs.n	c0d05b0e <pic+0x12>
		link_address = pic_internal(link_address);
c0d05b0a:	f000 f805 	bl	c0d05b18 <pic_internal>
//    screen_printf(" -> %08X\n", link_address);
  }
	return link_address;
c0d05b0e:	bd80      	pop	{r7, pc}
c0d05b10:	c0d00000 	.word	0xc0d00000
c0d05b14:	c0d089c0 	.word	0xc0d089c0

c0d05b18 <pic_internal>:

unsigned int pic_internal(unsigned int link_address) __attribute__((naked));
unsigned int pic_internal(unsigned int link_address) 
{
  // compute the delta offset between LinkMemAddr & ExecMemAddr
  __asm volatile ("mov r2, pc\n");          // r2 = 0x109004
c0d05b18:	467a      	mov	r2, pc
  __asm volatile ("ldr r1, =pic_internal\n");        // r1 = 0xC0D00001
c0d05b1a:	4902      	ldr	r1, [pc, #8]	; (c0d05b24 <pic_internal+0xc>)
  __asm volatile ("adds r1, r1, #3\n");     // r1 = 0xC0D00004
c0d05b1c:	1cc9      	adds	r1, r1, #3
  __asm volatile ("subs r1, r1, r2\n");     // r1 = 0xC0BF7000 (delta between load and exec address)
c0d05b1e:	1a89      	subs	r1, r1, r2

  // adjust value of the given parameter
  __asm volatile ("subs r0, r0, r1\n");     // r0 = 0xC0D0C244 => r0 = 0x115244
c0d05b20:	1a40      	subs	r0, r0, r1
  __asm volatile ("bx lr\n");
c0d05b22:	4770      	bx	lr
c0d05b24:	c0d05b19 	.word	0xc0d05b19

c0d05b28 <bech32_polymod_step>:
#include <stdint.h>
#include <string.h>

#include "segwit_addr.h"

uint32_t bech32_polymod_step(uint32_t pre) {
c0d05b28:	b510      	push	{r4, lr}
    uint8_t b = pre >> 25;
    return ((pre & 0x1FFFFFF) << 5) ^ (-((b >> 0) & 1) & 0x3b6a57b2UL) ^
c0d05b2a:	0141      	lsls	r1, r0, #5
c0d05b2c:	4a10      	ldr	r2, [pc, #64]	; (c0d05b70 <bech32_polymod_step+0x48>)
c0d05b2e:	400a      	ands	r2, r1
#include <string.h>

#include "segwit_addr.h"

uint32_t bech32_polymod_step(uint32_t pre) {
    uint8_t b = pre >> 25;
c0d05b30:	0e43      	lsrs	r3, r0, #25
    return ((pre & 0x1FFFFFF) << 5) ^ (-((b >> 0) & 1) & 0x3b6a57b2UL) ^
c0d05b32:	2101      	movs	r1, #1
c0d05b34:	400b      	ands	r3, r1
c0d05b36:	425b      	negs	r3, r3
c0d05b38:	4c0e      	ldr	r4, [pc, #56]	; (c0d05b74 <bech32_polymod_step+0x4c>)
c0d05b3a:	401c      	ands	r4, r3
c0d05b3c:	4054      	eors	r4, r2
           (-((b >> 1) & 1) & 0x26508e6dUL) ^ (-((b >> 2) & 1) & 0x1ea119faUL) ^
c0d05b3e:	0e82      	lsrs	r2, r0, #26
c0d05b40:	400a      	ands	r2, r1
c0d05b42:	4252      	negs	r2, r2
c0d05b44:	4b0c      	ldr	r3, [pc, #48]	; (c0d05b78 <bech32_polymod_step+0x50>)
c0d05b46:	4013      	ands	r3, r2

#include "segwit_addr.h"

uint32_t bech32_polymod_step(uint32_t pre) {
    uint8_t b = pre >> 25;
    return ((pre & 0x1FFFFFF) << 5) ^ (-((b >> 0) & 1) & 0x3b6a57b2UL) ^
c0d05b48:	4063      	eors	r3, r4
           (-((b >> 1) & 1) & 0x26508e6dUL) ^ (-((b >> 2) & 1) & 0x1ea119faUL) ^
c0d05b4a:	0ec2      	lsrs	r2, r0, #27
c0d05b4c:	400a      	ands	r2, r1
c0d05b4e:	4252      	negs	r2, r2
c0d05b50:	4c0a      	ldr	r4, [pc, #40]	; (c0d05b7c <bech32_polymod_step+0x54>)
c0d05b52:	4014      	ands	r4, r2
c0d05b54:	405c      	eors	r4, r3
           (-((b >> 3) & 1) & 0x3d4233ddUL) ^ (-((b >> 4) & 1) & 0x2a1462b3UL);
c0d05b56:	0f02      	lsrs	r2, r0, #28
c0d05b58:	400a      	ands	r2, r1
c0d05b5a:	4252      	negs	r2, r2
c0d05b5c:	4b08      	ldr	r3, [pc, #32]	; (c0d05b80 <bech32_polymod_step+0x58>)
c0d05b5e:	4013      	ands	r3, r2
#include "segwit_addr.h"

uint32_t bech32_polymod_step(uint32_t pre) {
    uint8_t b = pre >> 25;
    return ((pre & 0x1FFFFFF) << 5) ^ (-((b >> 0) & 1) & 0x3b6a57b2UL) ^
           (-((b >> 1) & 1) & 0x26508e6dUL) ^ (-((b >> 2) & 1) & 0x1ea119faUL) ^
c0d05b60:	4063      	eors	r3, r4
           (-((b >> 3) & 1) & 0x3d4233ddUL) ^ (-((b >> 4) & 1) & 0x2a1462b3UL);
c0d05b62:	0f40      	lsrs	r0, r0, #29
c0d05b64:	4008      	ands	r0, r1
c0d05b66:	4241      	negs	r1, r0
c0d05b68:	4806      	ldr	r0, [pc, #24]	; (c0d05b84 <bech32_polymod_step+0x5c>)
c0d05b6a:	4008      	ands	r0, r1
c0d05b6c:	4058      	eors	r0, r3

#include "segwit_addr.h"

uint32_t bech32_polymod_step(uint32_t pre) {
    uint8_t b = pre >> 25;
    return ((pre & 0x1FFFFFF) << 5) ^ (-((b >> 0) & 1) & 0x3b6a57b2UL) ^
c0d05b6e:	bd10      	pop	{r4, pc}
c0d05b70:	3fffffe0 	.word	0x3fffffe0
c0d05b74:	3b6a57b2 	.word	0x3b6a57b2
c0d05b78:	26508e6d 	.word	0x26508e6d
c0d05b7c:	1ea119fa 	.word	0x1ea119fa
c0d05b80:	3d4233dd 	.word	0x3d4233dd
c0d05b84:	2a1462b3 	.word	0x2a1462b3

c0d05b88 <bech32_encode>:
    31, 27, 19, -1, 1,  0,  3,  16, 11, 28, 12, 14, 6,  4,  2,  -1, -1, -1, -1,
    -1, -1, 29, -1, 24, 13, 25, 9,  8,  23, -1, 18, 22, 31, 27, 19, -1, 1,  0,
    3,  16, 11, 28, 12, 14, 6,  4,  2,  -1, -1, -1, -1, -1};

int bech32_encode(char *output, const char *hrp, const uint8_t *data,
                  size_t data_len) {
c0d05b88:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d05b8a:	b087      	sub	sp, #28
c0d05b8c:	9305      	str	r3, [sp, #20]
c0d05b8e:	9204      	str	r2, [sp, #16]
c0d05b90:	4607      	mov	r7, r0
c0d05b92:	9102      	str	r1, [sp, #8]
    uint32_t chk = 1;
    size_t i = 0;
    while (hrp[i] != 0) {
c0d05b94:	780e      	ldrb	r6, [r1, #0]
c0d05b96:	2500      	movs	r5, #0
c0d05b98:	2001      	movs	r0, #1
c0d05b9a:	2e00      	cmp	r6, #0
c0d05b9c:	9503      	str	r5, [sp, #12]
c0d05b9e:	d01b      	beq.n	c0d05bd8 <bech32_encode+0x50>
        if (hrp[i] >= 'A' && hrp[i] <= 'Z')
c0d05ba0:	9802      	ldr	r0, [sp, #8]
c0d05ba2:	1c40      	adds	r0, r0, #1
c0d05ba4:	9006      	str	r0, [sp, #24]
c0d05ba6:	2001      	movs	r0, #1
c0d05ba8:	2500      	movs	r5, #0
c0d05baa:	4634      	mov	r4, r6
c0d05bac:	9501      	str	r5, [sp, #4]
c0d05bae:	4621      	mov	r1, r4
c0d05bb0:	3941      	subs	r1, #65	; 0x41
c0d05bb2:	b2e2      	uxtb	r2, r4
c0d05bb4:	2a20      	cmp	r2, #32
c0d05bb6:	d35f      	bcc.n	c0d05c78 <bech32_encode+0xf0>
c0d05bb8:	b2c9      	uxtb	r1, r1
c0d05bba:	291a      	cmp	r1, #26
c0d05bbc:	d35c      	bcc.n	c0d05c78 <bech32_encode+0xf0>
            return 0;
        if (!(hrp[i] >> 5))
            return 0;
        chk = bech32_polymod_step(chk) ^ (hrp[i] >> 5);
c0d05bbe:	f7ff ffb3 	bl	c0d05b28 <bech32_polymod_step>
c0d05bc2:	4601      	mov	r1, r0

int bech32_encode(char *output, const char *hrp, const uint8_t *data,
                  size_t data_len) {
    uint32_t chk = 1;
    size_t i = 0;
    while (hrp[i] != 0) {
c0d05bc4:	9806      	ldr	r0, [sp, #24]
c0d05bc6:	5d42      	ldrb	r2, [r0, r5]
        if (hrp[i] >= 'A' && hrp[i] <= 'Z')
            return 0;
        if (!(hrp[i] >> 5))
            return 0;
        chk = bech32_polymod_step(chk) ^ (hrp[i] >> 5);
c0d05bc8:	20e0      	movs	r0, #224	; 0xe0
c0d05bca:	4004      	ands	r4, r0
c0d05bcc:	0960      	lsrs	r0, r4, #5
c0d05bce:	4048      	eors	r0, r1
        ++i;
c0d05bd0:	1c6d      	adds	r5, r5, #1

int bech32_encode(char *output, const char *hrp, const uint8_t *data,
                  size_t data_len) {
    uint32_t chk = 1;
    size_t i = 0;
    while (hrp[i] != 0) {
c0d05bd2:	2a00      	cmp	r2, #0
c0d05bd4:	4614      	mov	r4, r2
c0d05bd6:	d1ea      	bne.n	c0d05bae <bech32_encode+0x26>
        if (!(hrp[i] >> 5))
            return 0;
        chk = bech32_polymod_step(chk) ^ (hrp[i] >> 5);
        ++i;
    }
    if (i + 7 + data_len > 90)
c0d05bd8:	9905      	ldr	r1, [sp, #20]
c0d05bda:	1949      	adds	r1, r1, r5
c0d05bdc:	1dc9      	adds	r1, r1, #7
c0d05bde:	295a      	cmp	r1, #90	; 0x5a
c0d05be0:	9903      	ldr	r1, [sp, #12]
c0d05be2:	d84c      	bhi.n	c0d05c7e <bech32_encode+0xf6>
        return 0;
    chk = bech32_polymod_step(chk);
c0d05be4:	f7ff ffa0 	bl	c0d05b28 <bech32_polymod_step>
    while (*hrp != 0) {
c0d05be8:	2e00      	cmp	r6, #0
c0d05bea:	d00e      	beq.n	c0d05c0a <bech32_encode+0x82>
        chk = bech32_polymod_step(chk) ^ (*hrp & 0x1f);
c0d05bec:	9902      	ldr	r1, [sp, #8]
c0d05bee:	1c4c      	adds	r4, r1, #1
c0d05bf0:	f7ff ff9a 	bl	c0d05b28 <bech32_polymod_step>
c0d05bf4:	4601      	mov	r1, r0
        *(output++) = *(hrp++);
c0d05bf6:	703e      	strb	r6, [r7, #0]
    }
    if (i + 7 + data_len > 90)
        return 0;
    chk = bech32_polymod_step(chk);
    while (*hrp != 0) {
        chk = bech32_polymod_step(chk) ^ (*hrp & 0x1f);
c0d05bf8:	201f      	movs	r0, #31
c0d05bfa:	4030      	ands	r0, r6
c0d05bfc:	4048      	eors	r0, r1
        ++i;
    }
    if (i + 7 + data_len > 90)
        return 0;
    chk = bech32_polymod_step(chk);
    while (*hrp != 0) {
c0d05bfe:	1c61      	adds	r1, r4, #1
        chk = bech32_polymod_step(chk) ^ (*hrp & 0x1f);
        *(output++) = *(hrp++);
c0d05c00:	1c7f      	adds	r7, r7, #1
        ++i;
    }
    if (i + 7 + data_len > 90)
        return 0;
    chk = bech32_polymod_step(chk);
    while (*hrp != 0) {
c0d05c02:	7826      	ldrb	r6, [r4, #0]
c0d05c04:	2e00      	cmp	r6, #0
c0d05c06:	460c      	mov	r4, r1
c0d05c08:	d1f2      	bne.n	c0d05bf0 <bech32_encode+0x68>
        chk = bech32_polymod_step(chk) ^ (*hrp & 0x1f);
        *(output++) = *(hrp++);
    }
    *(output++) = '1';
c0d05c0a:	2131      	movs	r1, #49	; 0x31
c0d05c0c:	7039      	strb	r1, [r7, #0]
c0d05c0e:	1c79      	adds	r1, r7, #1
    for (i = 0; i < data_len; ++i) {
c0d05c10:	9106      	str	r1, [sp, #24]
c0d05c12:	9905      	ldr	r1, [sp, #20]
c0d05c14:	2900      	cmp	r1, #0
c0d05c16:	d014      	beq.n	c0d05c42 <bech32_encode+0xba>
c0d05c18:	2400      	movs	r4, #0
c0d05c1a:	9403      	str	r4, [sp, #12]
        if (*data >> 5)
c0d05c1c:	9904      	ldr	r1, [sp, #16]
c0d05c1e:	5d0f      	ldrb	r7, [r1, r4]
c0d05c20:	9906      	ldr	r1, [sp, #24]
c0d05c22:	190e      	adds	r6, r1, r4
c0d05c24:	2f1f      	cmp	r7, #31
c0d05c26:	d829      	bhi.n	c0d05c7c <bech32_encode+0xf4>
            return 0;
        chk = bech32_polymod_step(chk) ^ (*data);
        *(output++) = charset[*(data++)];
c0d05c28:	a116      	add	r1, pc, #88	; (adr r1, c0d05c84 <bech32_encode+0xfc>)
c0d05c2a:	5dcd      	ldrb	r5, [r1, r7]
    }
    *(output++) = '1';
    for (i = 0; i < data_len; ++i) {
        if (*data >> 5)
            return 0;
        chk = bech32_polymod_step(chk) ^ (*data);
c0d05c2c:	f7ff ff7c 	bl	c0d05b28 <bech32_polymod_step>
        *(output++) = charset[*(data++)];
c0d05c30:	7035      	strb	r5, [r6, #0]
    }
    *(output++) = '1';
    for (i = 0; i < data_len; ++i) {
        if (*data >> 5)
            return 0;
        chk = bech32_polymod_step(chk) ^ (*data);
c0d05c32:	4078      	eors	r0, r7
    while (*hrp != 0) {
        chk = bech32_polymod_step(chk) ^ (*hrp & 0x1f);
        *(output++) = *(hrp++);
    }
    *(output++) = '1';
    for (i = 0; i < data_len; ++i) {
c0d05c34:	1c64      	adds	r4, r4, #1
c0d05c36:	9905      	ldr	r1, [sp, #20]
c0d05c38:	428c      	cmp	r4, r1
c0d05c3a:	d3ef      	bcc.n	c0d05c1c <bech32_encode+0x94>
    3,  16, 11, 28, 12, 14, 6,  4,  2,  -1, -1, -1, -1, -1};

int bech32_encode(char *output, const char *hrp, const uint8_t *data,
                  size_t data_len) {
    uint32_t chk = 1;
    size_t i = 0;
c0d05c3c:	9906      	ldr	r1, [sp, #24]
c0d05c3e:	1909      	adds	r1, r1, r4
c0d05c40:	9106      	str	r1, [sp, #24]
c0d05c42:	2406      	movs	r4, #6
            return 0;
        chk = bech32_polymod_step(chk) ^ (*data);
        *(output++) = charset[*(data++)];
    }
    for (i = 0; i < 6; ++i) {
        chk = bech32_polymod_step(chk);
c0d05c44:	f7ff ff70 	bl	c0d05b28 <bech32_polymod_step>
        if (*data >> 5)
            return 0;
        chk = bech32_polymod_step(chk) ^ (*data);
        *(output++) = charset[*(data++)];
    }
    for (i = 0; i < 6; ++i) {
c0d05c48:	1e64      	subs	r4, r4, #1
c0d05c4a:	d1fb      	bne.n	c0d05c44 <bech32_encode+0xbc>
        chk = bech32_polymod_step(chk);
    }
    chk ^= 1;
c0d05c4c:	2101      	movs	r1, #1
c0d05c4e:	460e      	mov	r6, r1
c0d05c50:	4048      	eors	r0, r1
c0d05c52:	2219      	movs	r2, #25
c0d05c54:	a10b      	add	r1, pc, #44	; (adr r1, c0d05c84 <bech32_encode+0xfc>)
c0d05c56:	9b06      	ldr	r3, [sp, #24]
    for (i = 0; i < 6; ++i) {
        *(output++) = charset[(chk >> ((5 - i) * 5)) & 0x1f];
c0d05c58:	4604      	mov	r4, r0
c0d05c5a:	40d4      	lsrs	r4, r2
c0d05c5c:	251f      	movs	r5, #31
c0d05c5e:	4025      	ands	r5, r4
c0d05c60:	5d4c      	ldrb	r4, [r1, r5]
c0d05c62:	701c      	strb	r4, [r3, #0]
    }
    for (i = 0; i < 6; ++i) {
        chk = bech32_polymod_step(chk);
    }
    chk ^= 1;
    for (i = 0; i < 6; ++i) {
c0d05c64:	1f54      	subs	r4, r2, #5
        *(output++) = charset[(chk >> ((5 - i) * 5)) & 0x1f];
c0d05c66:	1c5b      	adds	r3, r3, #1
    }
    for (i = 0; i < 6; ++i) {
        chk = bech32_polymod_step(chk);
    }
    chk ^= 1;
    for (i = 0; i < 6; ++i) {
c0d05c68:	2a00      	cmp	r2, #0
c0d05c6a:	4622      	mov	r2, r4
c0d05c6c:	d1f4      	bne.n	c0d05c58 <bech32_encode+0xd0>
        *(output++) = charset[(chk >> ((5 - i) * 5)) & 0x1f];
    }
    *output = 0;
c0d05c6e:	2000      	movs	r0, #0
c0d05c70:	9906      	ldr	r1, [sp, #24]
c0d05c72:	7188      	strb	r0, [r1, #6]
c0d05c74:	4631      	mov	r1, r6
c0d05c76:	e002      	b.n	c0d05c7e <bech32_encode+0xf6>
c0d05c78:	9901      	ldr	r1, [sp, #4]
c0d05c7a:	e000      	b.n	c0d05c7e <bech32_encode+0xf6>
c0d05c7c:	9903      	ldr	r1, [sp, #12]
    return 1;
}
c0d05c7e:	4608      	mov	r0, r1
c0d05c80:	b007      	add	sp, #28
c0d05c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d05c84:	727a7071 	.word	0x727a7071
c0d05c88:	38783979 	.word	0x38783979
c0d05c8c:	74326667 	.word	0x74326667
c0d05c90:	30776476 	.word	0x30776476
c0d05c94:	6e6a3373 	.word	0x6e6a3373
c0d05c98:	686b3435 	.word	0x686b3435
c0d05c9c:	6d366563 	.word	0x6d366563
c0d05ca0:	6c376175 	.word	0x6c376175
c0d05ca4:	00000000 	.word	0x00000000

c0d05ca8 <segwit_addr_encode>:
    }
    return 1;
}

int segwit_addr_encode(char *output, const char *hrp, int witver,
                       const uint8_t *witprog, size_t witprog_len) {
c0d05ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d05caa:	b095      	sub	sp, #84	; 0x54
c0d05cac:	460c      	mov	r4, r1
c0d05cae:	4605      	mov	r5, r0
c0d05cb0:	2000      	movs	r0, #0
    uint8_t data[65];
    size_t datalen = 0;
c0d05cb2:	9003      	str	r0, [sp, #12]
    if (witver > 16)
c0d05cb4:	2a10      	cmp	r2, #16
c0d05cb6:	dc1e      	bgt.n	c0d05cf6 <segwit_addr_encode+0x4e>
c0d05cb8:	991a      	ldr	r1, [sp, #104]	; 0x68
        return 0;
    if (witver == 0 && witprog_len != 20 && witprog_len != 32)
c0d05cba:	2a00      	cmp	r2, #0
c0d05cbc:	d017      	beq.n	c0d05cee <segwit_addr_encode+0x46>
        return 0;
    if (witprog_len < 2 || witprog_len > 40)
c0d05cbe:	1e8e      	subs	r6, r1, #2
c0d05cc0:	2e26      	cmp	r6, #38	; 0x26
c0d05cc2:	d818      	bhi.n	c0d05cf6 <segwit_addr_encode+0x4e>
c0d05cc4:	ae04      	add	r6, sp, #16
        return 0;
    data[0] = witver;
c0d05cc6:	7032      	strb	r2, [r6, #0]
c0d05cc8:	2001      	movs	r0, #1
    convert_bits(data + 1, &datalen, 5, witprog, witprog_len, 8, 1);
c0d05cca:	466a      	mov	r2, sp
c0d05ccc:	2708      	movs	r7, #8
c0d05cce:	c282      	stmia	r2!, {r1, r7}
c0d05cd0:	6010      	str	r0, [r2, #0]
c0d05cd2:	1c70      	adds	r0, r6, #1
c0d05cd4:	a903      	add	r1, sp, #12
c0d05cd6:	2205      	movs	r2, #5
c0d05cd8:	f000 f80f 	bl	c0d05cfa <convert_bits>
    ++datalen;
c0d05cdc:	9803      	ldr	r0, [sp, #12]
c0d05cde:	1c43      	adds	r3, r0, #1
c0d05ce0:	9303      	str	r3, [sp, #12]
    return bech32_encode(output, hrp, data, datalen);
c0d05ce2:	4628      	mov	r0, r5
c0d05ce4:	4621      	mov	r1, r4
c0d05ce6:	4632      	mov	r2, r6
c0d05ce8:	f7ff ff4e 	bl	c0d05b88 <bech32_encode>
c0d05cec:	e003      	b.n	c0d05cf6 <segwit_addr_encode+0x4e>
                       const uint8_t *witprog, size_t witprog_len) {
    uint8_t data[65];
    size_t datalen = 0;
    if (witver > 16)
        return 0;
    if (witver == 0 && witprog_len != 20 && witprog_len != 32)
c0d05cee:	2920      	cmp	r1, #32
c0d05cf0:	d0e5      	beq.n	c0d05cbe <segwit_addr_encode+0x16>
c0d05cf2:	2914      	cmp	r1, #20
c0d05cf4:	d0e3      	beq.n	c0d05cbe <segwit_addr_encode+0x16>
        return 0;
    data[0] = witver;
    convert_bits(data + 1, &datalen, 5, witprog, witprog_len, 8, 1);
    ++datalen;
    return bech32_encode(output, hrp, data, datalen);
}
c0d05cf6:	b015      	add	sp, #84	; 0x54
c0d05cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

c0d05cfa <convert_bits>:
    }
    return chk == 1;
}

static int convert_bits(uint8_t *out, size_t *outlen, int outbits,
                        const uint8_t *in, size_t inlen, int inbits, int pad) {
c0d05cfa:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d05cfc:	b087      	sub	sp, #28
c0d05cfe:	461f      	mov	r7, r3
c0d05d00:	4605      	mov	r5, r0
    uint32_t val = 0;
    int bits = 0;
    uint32_t maxv = (((uint32_t)1) << outbits) - 1;
c0d05d02:	2301      	movs	r3, #1
c0d05d04:	9300      	str	r3, [sp, #0]
c0d05d06:	4093      	lsls	r3, r2
c0d05d08:	1e58      	subs	r0, r3, #1
c0d05d0a:	9006      	str	r0, [sp, #24]
c0d05d0c:	2600      	movs	r6, #0
c0d05d0e:	980e      	ldr	r0, [sp, #56]	; 0x38
c0d05d10:	9001      	str	r0, [sp, #4]
c0d05d12:	980d      	ldr	r0, [sp, #52]	; 0x34
c0d05d14:	9004      	str	r0, [sp, #16]
c0d05d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    while (inlen--) {
c0d05d18:	2b00      	cmp	r3, #0
c0d05d1a:	4630      	mov	r0, r6
c0d05d1c:	d026      	beq.n	c0d05d6c <convert_bits+0x72>
c0d05d1e:	4250      	negs	r0, r2
c0d05d20:	9005      	str	r0, [sp, #20]
c0d05d22:	2000      	movs	r0, #0
c0d05d24:	4606      	mov	r6, r0
        val = (val << inbits) | *(in++);
        bits += inbits;
c0d05d26:	9c04      	ldr	r4, [sp, #16]
c0d05d28:	1900      	adds	r0, r0, r4
c0d05d2a:	461c      	mov	r4, r3
                        const uint8_t *in, size_t inlen, int inbits, int pad) {
    uint32_t val = 0;
    int bits = 0;
    uint32_t maxv = (((uint32_t)1) << outbits) - 1;
    while (inlen--) {
        val = (val << inbits) | *(in++);
c0d05d2c:	4633      	mov	r3, r6
c0d05d2e:	9e04      	ldr	r6, [sp, #16]
c0d05d30:	40b3      	lsls	r3, r6
c0d05d32:	783e      	ldrb	r6, [r7, #0]
c0d05d34:	431e      	orrs	r6, r3
c0d05d36:	1c7f      	adds	r7, r7, #1
c0d05d38:	9703      	str	r7, [sp, #12]
static int convert_bits(uint8_t *out, size_t *outlen, int outbits,
                        const uint8_t *in, size_t inlen, int inbits, int pad) {
    uint32_t val = 0;
    int bits = 0;
    uint32_t maxv = (((uint32_t)1) << outbits) - 1;
    while (inlen--) {
c0d05d3a:	1e64      	subs	r4, r4, #1
c0d05d3c:	9402      	str	r4, [sp, #8]
c0d05d3e:	e00f      	b.n	c0d05d60 <convert_bits+0x66>
        val = (val << inbits) | *(in++);
        bits += inbits;
        while (bits >= outbits) {
            bits -= outbits;
            out[(*outlen)++] = (val >> bits) & maxv;
c0d05d40:	680b      	ldr	r3, [r1, #0]
c0d05d42:	462c      	mov	r4, r5
c0d05d44:	1c5d      	adds	r5, r3, #1
c0d05d46:	600d      	str	r5, [r1, #0]
c0d05d48:	9d05      	ldr	r5, [sp, #20]
c0d05d4a:	182d      	adds	r5, r5, r0
c0d05d4c:	4637      	mov	r7, r6
c0d05d4e:	40ee      	lsrs	r6, r5
c0d05d50:	460d      	mov	r5, r1
c0d05d52:	9906      	ldr	r1, [sp, #24]
c0d05d54:	400e      	ands	r6, r1
c0d05d56:	4629      	mov	r1, r5
c0d05d58:	4625      	mov	r5, r4
c0d05d5a:	54e6      	strb	r6, [r4, r3]
c0d05d5c:	463e      	mov	r6, r7
    uint32_t maxv = (((uint32_t)1) << outbits) - 1;
    while (inlen--) {
        val = (val << inbits) | *(in++);
        bits += inbits;
        while (bits >= outbits) {
            bits -= outbits;
c0d05d5e:	1a80      	subs	r0, r0, r2
c0d05d60:	4290      	cmp	r0, r2
c0d05d62:	daed      	bge.n	c0d05d40 <convert_bits+0x46>
c0d05d64:	9b02      	ldr	r3, [sp, #8]
static int convert_bits(uint8_t *out, size_t *outlen, int outbits,
                        const uint8_t *in, size_t inlen, int inbits, int pad) {
    uint32_t val = 0;
    int bits = 0;
    uint32_t maxv = (((uint32_t)1) << outbits) - 1;
    while (inlen--) {
c0d05d66:	2b00      	cmp	r3, #0
c0d05d68:	9f03      	ldr	r7, [sp, #12]
c0d05d6a:	d1dc      	bne.n	c0d05d26 <convert_bits+0x2c>
        while (bits >= outbits) {
            bits -= outbits;
            out[(*outlen)++] = (val >> bits) & maxv;
        }
    }
    if (pad) {
c0d05d6c:	9b01      	ldr	r3, [sp, #4]
c0d05d6e:	2b00      	cmp	r3, #0
c0d05d70:	d00a      	beq.n	c0d05d88 <convert_bits+0x8e>
        if (bits) {
c0d05d72:	2800      	cmp	r0, #0
c0d05d74:	d012      	beq.n	c0d05d9c <convert_bits+0xa2>
            out[(*outlen)++] = (val << (outbits - bits)) & maxv;
c0d05d76:	680b      	ldr	r3, [r1, #0]
c0d05d78:	1c5c      	adds	r4, r3, #1
c0d05d7a:	600c      	str	r4, [r1, #0]
c0d05d7c:	1a11      	subs	r1, r2, r0
c0d05d7e:	408e      	lsls	r6, r1
c0d05d80:	9806      	ldr	r0, [sp, #24]
c0d05d82:	4006      	ands	r6, r0
c0d05d84:	54ee      	strb	r6, [r5, r3]
c0d05d86:	e009      	b.n	c0d05d9c <convert_bits+0xa2>
        }
    } else if (((val << (outbits - bits)) & maxv) || bits >= inbits) {
c0d05d88:	1a11      	subs	r1, r2, r0
c0d05d8a:	408e      	lsls	r6, r1
c0d05d8c:	9906      	ldr	r1, [sp, #24]
c0d05d8e:	400e      	ands	r6, r1
c0d05d90:	2100      	movs	r1, #0
c0d05d92:	9a04      	ldr	r2, [sp, #16]
c0d05d94:	4290      	cmp	r0, r2
c0d05d96:	da02      	bge.n	c0d05d9e <convert_bits+0xa4>
c0d05d98:	2e00      	cmp	r6, #0
c0d05d9a:	d100      	bne.n	c0d05d9e <convert_bits+0xa4>
c0d05d9c:	9900      	ldr	r1, [sp, #0]
        return 0;
    }
    return 1;
}
c0d05d9e:	4608      	mov	r0, r1
c0d05da0:	b007      	add	sp, #28
c0d05da2:	bdf0      	pop	{r4, r5, r6, r7, pc}

c0d05da4 <SVC_Call>:
  // avoid a separate asm file, but avoid any intrusion from the compiler
  unsigned int SVC_Call(unsigned int syscall_id, unsigned int * parameters) __attribute__ ((naked));
  //                    r0                       r1
  unsigned int SVC_Call(unsigned int syscall_id, unsigned int * parameters) {
    // delegate svc
    asm volatile("svc #1":::"r0","r1");
c0d05da4:	df01      	svc	1
    // directly return R0 value
    asm volatile("bx  lr");
c0d05da6:	4770      	bx	lr

c0d05da8 <check_api_level>:
  }
  void check_api_level ( unsigned int apiLevel ) 
{
c0d05da8:	b580      	push	{r7, lr}
c0d05daa:	b082      	sub	sp, #8
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0+1];
  parameters[0] = (unsigned int)apiLevel;
c0d05dac:	9000      	str	r0, [sp, #0]
  retid = SVC_Call(SYSCALL_check_api_level_ID_IN, parameters);
c0d05dae:	4807      	ldr	r0, [pc, #28]	; (c0d05dcc <check_api_level+0x24>)
c0d05db0:	4669      	mov	r1, sp
c0d05db2:	f7ff fff7 	bl	c0d05da4 <SVC_Call>
c0d05db6:	aa01      	add	r2, sp, #4
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d05db8:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_check_api_level_ID_OUT) {
c0d05dba:	4905      	ldr	r1, [pc, #20]	; (c0d05dd0 <check_api_level+0x28>)
c0d05dbc:	4288      	cmp	r0, r1
c0d05dbe:	d101      	bne.n	c0d05dc4 <check_api_level+0x1c>
    THROW(EXCEPTION_SECURITY);
  }
}
c0d05dc0:	b002      	add	sp, #8
c0d05dc2:	bd80      	pop	{r7, pc}
  unsigned int parameters [0+1];
  parameters[0] = (unsigned int)apiLevel;
  retid = SVC_Call(SYSCALL_check_api_level_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_check_api_level_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d05dc4:	2004      	movs	r0, #4
c0d05dc6:	f7fe fca8 	bl	c0d0471a <os_longjmp>
c0d05dca:	46c0      	nop			; (mov r8, r8)
c0d05dcc:	60000137 	.word	0x60000137
c0d05dd0:	900001c6 	.word	0x900001c6

c0d05dd4 <reset>:
  }
}

void reset ( void ) 
{
c0d05dd4:	b580      	push	{r7, lr}
c0d05dd6:	b082      	sub	sp, #8
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0];
  retid = SVC_Call(SYSCALL_reset_ID_IN, parameters);
c0d05dd8:	4806      	ldr	r0, [pc, #24]	; (c0d05df4 <reset+0x20>)
c0d05dda:	a901      	add	r1, sp, #4
c0d05ddc:	f7ff ffe2 	bl	c0d05da4 <SVC_Call>
c0d05de0:	466a      	mov	r2, sp
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d05de2:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_reset_ID_OUT) {
c0d05de4:	4904      	ldr	r1, [pc, #16]	; (c0d05df8 <reset+0x24>)
c0d05de6:	4288      	cmp	r0, r1
c0d05de8:	d101      	bne.n	c0d05dee <reset+0x1a>
    THROW(EXCEPTION_SECURITY);
  }
}
c0d05dea:	b002      	add	sp, #8
c0d05dec:	bd80      	pop	{r7, pc}
  unsigned int retid;
  unsigned int parameters [0];
  retid = SVC_Call(SYSCALL_reset_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_reset_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d05dee:	2004      	movs	r0, #4
c0d05df0:	f7fe fc93 	bl	c0d0471a <os_longjmp>
c0d05df4:	60000200 	.word	0x60000200
c0d05df8:	900002f1 	.word	0x900002f1

c0d05dfc <nvm_write>:
  }
}

void nvm_write ( void * dst_adr, void * src_adr, unsigned int src_len ) 
{
c0d05dfc:	b580      	push	{r7, lr}
c0d05dfe:	b084      	sub	sp, #16
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0+3];
  parameters[0] = (unsigned int)dst_adr;
c0d05e00:	ab00      	add	r3, sp, #0
c0d05e02:	c307      	stmia	r3!, {r0, r1, r2}
  parameters[1] = (unsigned int)src_adr;
  parameters[2] = (unsigned int)src_len;
  retid = SVC_Call(SYSCALL_nvm_write_ID_IN, parameters);
c0d05e04:	4806      	ldr	r0, [pc, #24]	; (c0d05e20 <nvm_write+0x24>)
c0d05e06:	4669      	mov	r1, sp
c0d05e08:	f7ff ffcc 	bl	c0d05da4 <SVC_Call>
c0d05e0c:	aa03      	add	r2, sp, #12
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d05e0e:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_nvm_write_ID_OUT) {
c0d05e10:	4904      	ldr	r1, [pc, #16]	; (c0d05e24 <nvm_write+0x28>)
c0d05e12:	4288      	cmp	r0, r1
c0d05e14:	d101      	bne.n	c0d05e1a <nvm_write+0x1e>
    THROW(EXCEPTION_SECURITY);
  }
}
c0d05e16:	b004      	add	sp, #16
c0d05e18:	bd80      	pop	{r7, pc}
  parameters[1] = (unsigned int)src_adr;
  parameters[2] = (unsigned int)src_len;
  retid = SVC_Call(SYSCALL_nvm_write_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_nvm_write_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d05e1a:	2004      	movs	r0, #4
c0d05e1c:	f7fe fc7d 	bl	c0d0471a <os_longjmp>
c0d05e20:	6000037f 	.word	0x6000037f
c0d05e24:	900003bc 	.word	0x900003bc

c0d05e28 <cx_rng>:
  }
  return (unsigned char)ret;
}

unsigned char * cx_rng ( unsigned char * buffer, unsigned int len ) 
{
c0d05e28:	b580      	push	{r7, lr}
c0d05e2a:	b084      	sub	sp, #16
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0+2];
  parameters[0] = (unsigned int)buffer;
c0d05e2c:	9001      	str	r0, [sp, #4]
  parameters[1] = (unsigned int)len;
c0d05e2e:	9102      	str	r1, [sp, #8]
  retid = SVC_Call(SYSCALL_cx_rng_ID_IN, parameters);
c0d05e30:	4807      	ldr	r0, [pc, #28]	; (c0d05e50 <cx_rng+0x28>)
c0d05e32:	a901      	add	r1, sp, #4
c0d05e34:	f7ff ffb6 	bl	c0d05da4 <SVC_Call>
c0d05e38:	aa03      	add	r2, sp, #12
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d05e3a:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_cx_rng_ID_OUT) {
c0d05e3c:	4905      	ldr	r1, [pc, #20]	; (c0d05e54 <cx_rng+0x2c>)
c0d05e3e:	4288      	cmp	r0, r1
c0d05e40:	d102      	bne.n	c0d05e48 <cx_rng+0x20>
    THROW(EXCEPTION_SECURITY);
  }
  return (unsigned char *)ret;
c0d05e42:	9803      	ldr	r0, [sp, #12]
c0d05e44:	b004      	add	sp, #16
c0d05e46:	bd80      	pop	{r7, pc}
  parameters[0] = (unsigned int)buffer;
  parameters[1] = (unsigned int)len;
  retid = SVC_Call(SYSCALL_cx_rng_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_cx_rng_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d05e48:	2004      	movs	r0, #4
c0d05e4a:	f7fe fc66 	bl	c0d0471a <os_longjmp>
c0d05e4e:	46c0      	nop			; (mov r8, r8)
c0d05e50:	6000052c 	.word	0x6000052c
c0d05e54:	90000567 	.word	0x90000567

c0d05e58 <cx_hash>:
  }
  return (int)ret;
}

int cx_hash ( cx_hash_t * hash, int mode, const unsigned char * in, unsigned int len, unsigned char * out, unsigned int out_len ) 
{
c0d05e58:	b580      	push	{r7, lr}
c0d05e5a:	b088      	sub	sp, #32
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0+6];
  parameters[0] = (unsigned int)hash;
c0d05e5c:	af01      	add	r7, sp, #4
c0d05e5e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
c0d05e60:	980a      	ldr	r0, [sp, #40]	; 0x28
  parameters[1] = (unsigned int)mode;
  parameters[2] = (unsigned int)in;
  parameters[3] = (unsigned int)len;
  parameters[4] = (unsigned int)out;
c0d05e62:	9005      	str	r0, [sp, #20]
c0d05e64:	980b      	ldr	r0, [sp, #44]	; 0x2c
  parameters[5] = (unsigned int)out_len;
c0d05e66:	9006      	str	r0, [sp, #24]
  retid = SVC_Call(SYSCALL_cx_hash_ID_IN, parameters);
c0d05e68:	4807      	ldr	r0, [pc, #28]	; (c0d05e88 <cx_hash+0x30>)
c0d05e6a:	a901      	add	r1, sp, #4
c0d05e6c:	f7ff ff9a 	bl	c0d05da4 <SVC_Call>
c0d05e70:	aa07      	add	r2, sp, #28
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d05e72:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_cx_hash_ID_OUT) {
c0d05e74:	4905      	ldr	r1, [pc, #20]	; (c0d05e8c <cx_hash+0x34>)
c0d05e76:	4288      	cmp	r0, r1
c0d05e78:	d102      	bne.n	c0d05e80 <cx_hash+0x28>
    THROW(EXCEPTION_SECURITY);
  }
  return (int)ret;
c0d05e7a:	9807      	ldr	r0, [sp, #28]
c0d05e7c:	b008      	add	sp, #32
c0d05e7e:	bd80      	pop	{r7, pc}
  parameters[4] = (unsigned int)out;
  parameters[5] = (unsigned int)out_len;
  retid = SVC_Call(SYSCALL_cx_hash_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_cx_hash_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d05e80:	2004      	movs	r0, #4
c0d05e82:	f7fe fc4a 	bl	c0d0471a <os_longjmp>
c0d05e86:	46c0      	nop			; (mov r8, r8)
c0d05e88:	6000073b 	.word	0x6000073b
c0d05e8c:	900007ad 	.word	0x900007ad

c0d05e90 <cx_ripemd160_init>:
  }
  return (int)ret;
}

int cx_ripemd160_init ( cx_ripemd160_t * hash ) 
{
c0d05e90:	b580      	push	{r7, lr}
c0d05e92:	b082      	sub	sp, #8
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0+1];
  parameters[0] = (unsigned int)hash;
c0d05e94:	9000      	str	r0, [sp, #0]
  retid = SVC_Call(SYSCALL_cx_ripemd160_init_ID_IN, parameters);
c0d05e96:	4807      	ldr	r0, [pc, #28]	; (c0d05eb4 <cx_ripemd160_init+0x24>)
c0d05e98:	4669      	mov	r1, sp
c0d05e9a:	f7ff ff83 	bl	c0d05da4 <SVC_Call>
c0d05e9e:	aa01      	add	r2, sp, #4
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d05ea0:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_cx_ripemd160_init_ID_OUT) {
c0d05ea2:	4905      	ldr	r1, [pc, #20]	; (c0d05eb8 <cx_ripemd160_init+0x28>)
c0d05ea4:	4288      	cmp	r0, r1
c0d05ea6:	d102      	bne.n	c0d05eae <cx_ripemd160_init+0x1e>
    THROW(EXCEPTION_SECURITY);
  }
  return (int)ret;
c0d05ea8:	9801      	ldr	r0, [sp, #4]
c0d05eaa:	b002      	add	sp, #8
c0d05eac:	bd80      	pop	{r7, pc}
  unsigned int parameters [0+1];
  parameters[0] = (unsigned int)hash;
  retid = SVC_Call(SYSCALL_cx_ripemd160_init_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_cx_ripemd160_init_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d05eae:	2004      	movs	r0, #4
c0d05eb0:	f7fe fc33 	bl	c0d0471a <os_longjmp>
c0d05eb4:	6000087f 	.word	0x6000087f
c0d05eb8:	900008f8 	.word	0x900008f8

c0d05ebc <cx_sha256_init>:
  }
  return (int)ret;
}

int cx_sha256_init ( cx_sha256_t * hash ) 
{
c0d05ebc:	b580      	push	{r7, lr}
c0d05ebe:	b082      	sub	sp, #8
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0+1];
  parameters[0] = (unsigned int)hash;
c0d05ec0:	9000      	str	r0, [sp, #0]
  retid = SVC_Call(SYSCALL_cx_sha256_init_ID_IN, parameters);
c0d05ec2:	4807      	ldr	r0, [pc, #28]	; (c0d05ee0 <cx_sha256_init+0x24>)
c0d05ec4:	4669      	mov	r1, sp
c0d05ec6:	f7ff ff6d 	bl	c0d05da4 <SVC_Call>
c0d05eca:	aa01      	add	r2, sp, #4
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d05ecc:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_cx_sha256_init_ID_OUT) {
c0d05ece:	4905      	ldr	r1, [pc, #20]	; (c0d05ee4 <cx_sha256_init+0x28>)
c0d05ed0:	4288      	cmp	r0, r1
c0d05ed2:	d102      	bne.n	c0d05eda <cx_sha256_init+0x1e>
    THROW(EXCEPTION_SECURITY);
  }
  return (int)ret;
c0d05ed4:	9801      	ldr	r0, [sp, #4]
c0d05ed6:	b002      	add	sp, #8
c0d05ed8:	bd80      	pop	{r7, pc}
  unsigned int parameters [0+1];
  parameters[0] = (unsigned int)hash;
  retid = SVC_Call(SYSCALL_cx_sha256_init_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_cx_sha256_init_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d05eda:	2004      	movs	r0, #4
c0d05edc:	f7fe fc1d 	bl	c0d0471a <os_longjmp>
c0d05ee0:	60000adb 	.word	0x60000adb
c0d05ee4:	90000a64 	.word	0x90000a64

c0d05ee8 <cx_hmac_sha256>:
  }
  return (int)ret;
}

int cx_hmac_sha256 ( const unsigned char * key, unsigned int key_len, const unsigned char * in, unsigned int len, unsigned char * mac, unsigned int mac_len ) 
{
c0d05ee8:	b580      	push	{r7, lr}
c0d05eea:	b088      	sub	sp, #32
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0+6];
  parameters[0] = (unsigned int)key;
c0d05eec:	af01      	add	r7, sp, #4
c0d05eee:	c70f      	stmia	r7!, {r0, r1, r2, r3}
c0d05ef0:	980a      	ldr	r0, [sp, #40]	; 0x28
  parameters[1] = (unsigned int)key_len;
  parameters[2] = (unsigned int)in;
  parameters[3] = (unsigned int)len;
  parameters[4] = (unsigned int)mac;
c0d05ef2:	9005      	str	r0, [sp, #20]
c0d05ef4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  parameters[5] = (unsigned int)mac_len;
c0d05ef6:	9006      	str	r0, [sp, #24]
  retid = SVC_Call(SYSCALL_cx_hmac_sha256_ID_IN, parameters);
c0d05ef8:	4807      	ldr	r0, [pc, #28]	; (c0d05f18 <cx_hmac_sha256+0x30>)
c0d05efa:	a901      	add	r1, sp, #4
c0d05efc:	f7ff ff52 	bl	c0d05da4 <SVC_Call>
c0d05f00:	aa07      	add	r2, sp, #28
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d05f02:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_cx_hmac_sha256_ID_OUT) {
c0d05f04:	4905      	ldr	r1, [pc, #20]	; (c0d05f1c <cx_hmac_sha256+0x34>)
c0d05f06:	4288      	cmp	r0, r1
c0d05f08:	d102      	bne.n	c0d05f10 <cx_hmac_sha256+0x28>
    THROW(EXCEPTION_SECURITY);
  }
  return (int)ret;
c0d05f0a:	9807      	ldr	r0, [sp, #28]
c0d05f0c:	b008      	add	sp, #32
c0d05f0e:	bd80      	pop	{r7, pc}
  parameters[4] = (unsigned int)mac;
  parameters[5] = (unsigned int)mac_len;
  retid = SVC_Call(SYSCALL_cx_hmac_sha256_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_cx_hmac_sha256_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d05f10:	2004      	movs	r0, #4
c0d05f12:	f7fe fc02 	bl	c0d0471a <os_longjmp>
c0d05f16:	46c0      	nop			; (mov r8, r8)
c0d05f18:	6000172b 	.word	0x6000172b
c0d05f1c:	900017b4 	.word	0x900017b4

c0d05f20 <cx_ecfp_init_private_key>:
  }
  return (int)ret;
}

int cx_ecfp_init_private_key ( cx_curve_t curve, const unsigned char * rawkey, unsigned int key_len, cx_ecfp_private_key_t * pvkey ) 
{
c0d05f20:	b580      	push	{r7, lr}
c0d05f22:	b086      	sub	sp, #24
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0+4];
  parameters[0] = (unsigned int)curve;
c0d05f24:	af01      	add	r7, sp, #4
c0d05f26:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  parameters[1] = (unsigned int)rawkey;
  parameters[2] = (unsigned int)key_len;
  parameters[3] = (unsigned int)pvkey;
  retid = SVC_Call(SYSCALL_cx_ecfp_init_private_key_ID_IN, parameters);
c0d05f28:	4807      	ldr	r0, [pc, #28]	; (c0d05f48 <cx_ecfp_init_private_key+0x28>)
c0d05f2a:	a901      	add	r1, sp, #4
c0d05f2c:	f7ff ff3a 	bl	c0d05da4 <SVC_Call>
c0d05f30:	aa05      	add	r2, sp, #20
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d05f32:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_cx_ecfp_init_private_key_ID_OUT) {
c0d05f34:	4905      	ldr	r1, [pc, #20]	; (c0d05f4c <cx_ecfp_init_private_key+0x2c>)
c0d05f36:	4288      	cmp	r0, r1
c0d05f38:	d102      	bne.n	c0d05f40 <cx_ecfp_init_private_key+0x20>
    THROW(EXCEPTION_SECURITY);
  }
  return (int)ret;
c0d05f3a:	9805      	ldr	r0, [sp, #20]
c0d05f3c:	b006      	add	sp, #24
c0d05f3e:	bd80      	pop	{r7, pc}
  parameters[2] = (unsigned int)key_len;
  parameters[3] = (unsigned int)pvkey;
  retid = SVC_Call(SYSCALL_cx_ecfp_init_private_key_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_cx_ecfp_init_private_key_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d05f40:	2004      	movs	r0, #4
c0d05f42:	f7fe fbea 	bl	c0d0471a <os_longjmp>
c0d05f46:	46c0      	nop			; (mov r8, r8)
c0d05f48:	60002bea 	.word	0x60002bea
c0d05f4c:	90002b63 	.word	0x90002b63

c0d05f50 <cx_ecfp_generate_pair>:
  }
  return (int)ret;
}

int cx_ecfp_generate_pair ( cx_curve_t curve, cx_ecfp_public_key_t * pubkey, cx_ecfp_private_key_t * privkey, int keepprivate ) 
{
c0d05f50:	b580      	push	{r7, lr}
c0d05f52:	b086      	sub	sp, #24
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0+4];
  parameters[0] = (unsigned int)curve;
c0d05f54:	af01      	add	r7, sp, #4
c0d05f56:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  parameters[1] = (unsigned int)pubkey;
  parameters[2] = (unsigned int)privkey;
  parameters[3] = (unsigned int)keepprivate;
  retid = SVC_Call(SYSCALL_cx_ecfp_generate_pair_ID_IN, parameters);
c0d05f58:	4807      	ldr	r0, [pc, #28]	; (c0d05f78 <cx_ecfp_generate_pair+0x28>)
c0d05f5a:	a901      	add	r1, sp, #4
c0d05f5c:	f7ff ff22 	bl	c0d05da4 <SVC_Call>
c0d05f60:	aa05      	add	r2, sp, #20
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d05f62:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_cx_ecfp_generate_pair_ID_OUT) {
c0d05f64:	4905      	ldr	r1, [pc, #20]	; (c0d05f7c <cx_ecfp_generate_pair+0x2c>)
c0d05f66:	4288      	cmp	r0, r1
c0d05f68:	d102      	bne.n	c0d05f70 <cx_ecfp_generate_pair+0x20>
    THROW(EXCEPTION_SECURITY);
  }
  return (int)ret;
c0d05f6a:	9805      	ldr	r0, [sp, #20]
c0d05f6c:	b006      	add	sp, #24
c0d05f6e:	bd80      	pop	{r7, pc}
  parameters[2] = (unsigned int)privkey;
  parameters[3] = (unsigned int)keepprivate;
  retid = SVC_Call(SYSCALL_cx_ecfp_generate_pair_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_cx_ecfp_generate_pair_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d05f70:	2004      	movs	r0, #4
c0d05f72:	f7fe fbd2 	bl	c0d0471a <os_longjmp>
c0d05f76:	46c0      	nop			; (mov r8, r8)
c0d05f78:	60002c2e 	.word	0x60002c2e
c0d05f7c:	90002c74 	.word	0x90002c74

c0d05f80 <cx_ecdsa_sign>:
  }
  return (int)ret;
}

int cx_ecdsa_sign ( const cx_ecfp_private_key_t * pvkey, int mode, cx_md_t hashID, const unsigned char * hash, unsigned int hash_len, unsigned char * sig, unsigned int sig_len, unsigned int * info ) 
{
c0d05f80:	b580      	push	{r7, lr}
c0d05f82:	b08a      	sub	sp, #40	; 0x28
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0+8];
  parameters[0] = (unsigned int)pvkey;
c0d05f84:	af01      	add	r7, sp, #4
c0d05f86:	c70f      	stmia	r7!, {r0, r1, r2, r3}
c0d05f88:	980c      	ldr	r0, [sp, #48]	; 0x30
  parameters[1] = (unsigned int)mode;
  parameters[2] = (unsigned int)hashID;
  parameters[3] = (unsigned int)hash;
  parameters[4] = (unsigned int)hash_len;
c0d05f8a:	9005      	str	r0, [sp, #20]
c0d05f8c:	980d      	ldr	r0, [sp, #52]	; 0x34
  parameters[5] = (unsigned int)sig;
c0d05f8e:	9006      	str	r0, [sp, #24]
c0d05f90:	980e      	ldr	r0, [sp, #56]	; 0x38
  parameters[6] = (unsigned int)sig_len;
c0d05f92:	9007      	str	r0, [sp, #28]
c0d05f94:	980f      	ldr	r0, [sp, #60]	; 0x3c
  parameters[7] = (unsigned int)info;
c0d05f96:	9008      	str	r0, [sp, #32]
  retid = SVC_Call(SYSCALL_cx_ecdsa_sign_ID_IN, parameters);
c0d05f98:	4807      	ldr	r0, [pc, #28]	; (c0d05fb8 <cx_ecdsa_sign+0x38>)
c0d05f9a:	a901      	add	r1, sp, #4
c0d05f9c:	f7ff ff02 	bl	c0d05da4 <SVC_Call>
c0d05fa0:	aa09      	add	r2, sp, #36	; 0x24
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d05fa2:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_cx_ecdsa_sign_ID_OUT) {
c0d05fa4:	4905      	ldr	r1, [pc, #20]	; (c0d05fbc <cx_ecdsa_sign+0x3c>)
c0d05fa6:	4288      	cmp	r0, r1
c0d05fa8:	d102      	bne.n	c0d05fb0 <cx_ecdsa_sign+0x30>
    THROW(EXCEPTION_SECURITY);
  }
  return (int)ret;
c0d05faa:	9809      	ldr	r0, [sp, #36]	; 0x24
c0d05fac:	b00a      	add	sp, #40	; 0x28
c0d05fae:	bd80      	pop	{r7, pc}
  parameters[6] = (unsigned int)sig_len;
  parameters[7] = (unsigned int)info;
  retid = SVC_Call(SYSCALL_cx_ecdsa_sign_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_cx_ecdsa_sign_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d05fb0:	2004      	movs	r0, #4
c0d05fb2:	f7fe fbb2 	bl	c0d0471a <os_longjmp>
c0d05fb6:	46c0      	nop			; (mov r8, r8)
c0d05fb8:	600035f3 	.word	0x600035f3
c0d05fbc:	90003576 	.word	0x90003576

c0d05fc0 <cx_ecdsa_verify>:
  }
  return (int)ret;
}

int cx_ecdsa_verify ( const cx_ecfp_public_key_t * pukey, int mode, cx_md_t hashID, const unsigned char * hash, unsigned int hash_len, const unsigned char * sig, unsigned int sig_len ) 
{
c0d05fc0:	b580      	push	{r7, lr}
c0d05fc2:	b088      	sub	sp, #32
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0+7];
  parameters[0] = (unsigned int)pukey;
c0d05fc4:	af00      	add	r7, sp, #0
c0d05fc6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
c0d05fc8:	980a      	ldr	r0, [sp, #40]	; 0x28
  parameters[1] = (unsigned int)mode;
  parameters[2] = (unsigned int)hashID;
  parameters[3] = (unsigned int)hash;
  parameters[4] = (unsigned int)hash_len;
c0d05fca:	9004      	str	r0, [sp, #16]
c0d05fcc:	980b      	ldr	r0, [sp, #44]	; 0x2c
  parameters[5] = (unsigned int)sig;
c0d05fce:	9005      	str	r0, [sp, #20]
c0d05fd0:	980c      	ldr	r0, [sp, #48]	; 0x30
  parameters[6] = (unsigned int)sig_len;
c0d05fd2:	9006      	str	r0, [sp, #24]
  retid = SVC_Call(SYSCALL_cx_ecdsa_verify_ID_IN, parameters);
c0d05fd4:	4807      	ldr	r0, [pc, #28]	; (c0d05ff4 <cx_ecdsa_verify+0x34>)
c0d05fd6:	4669      	mov	r1, sp
c0d05fd8:	f7ff fee4 	bl	c0d05da4 <SVC_Call>
c0d05fdc:	aa07      	add	r2, sp, #28
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d05fde:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_cx_ecdsa_verify_ID_OUT) {
c0d05fe0:	4905      	ldr	r1, [pc, #20]	; (c0d05ff8 <cx_ecdsa_verify+0x38>)
c0d05fe2:	4288      	cmp	r0, r1
c0d05fe4:	d102      	bne.n	c0d05fec <cx_ecdsa_verify+0x2c>
    THROW(EXCEPTION_SECURITY);
  }
  return (int)ret;
c0d05fe6:	9807      	ldr	r0, [sp, #28]
c0d05fe8:	b008      	add	sp, #32
c0d05fea:	bd80      	pop	{r7, pc}
  parameters[5] = (unsigned int)sig;
  parameters[6] = (unsigned int)sig_len;
  retid = SVC_Call(SYSCALL_cx_ecdsa_verify_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_cx_ecdsa_verify_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d05fec:	2004      	movs	r0, #4
c0d05fee:	f7fe fb94 	bl	c0d0471a <os_longjmp>
c0d05ff2:	46c0      	nop			; (mov r8, r8)
c0d05ff4:	600036f1 	.word	0x600036f1
c0d05ff8:	900036e7 	.word	0x900036e7

c0d05ffc <os_perso_derive_node_bip32>:
  }
  return (unsigned int)ret;
}

void os_perso_derive_node_bip32 ( cx_curve_t curve, const unsigned int * path, unsigned int pathLength, unsigned char * privateKey, unsigned char * chain ) 
{
c0d05ffc:	b580      	push	{r7, lr}
c0d05ffe:	b086      	sub	sp, #24
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0+5];
  parameters[0] = (unsigned int)curve;
c0d06000:	af00      	add	r7, sp, #0
c0d06002:	c70f      	stmia	r7!, {r0, r1, r2, r3}
c0d06004:	9808      	ldr	r0, [sp, #32]
  parameters[1] = (unsigned int)path;
  parameters[2] = (unsigned int)pathLength;
  parameters[3] = (unsigned int)privateKey;
  parameters[4] = (unsigned int)chain;
c0d06006:	9004      	str	r0, [sp, #16]
  retid = SVC_Call(SYSCALL_os_perso_derive_node_bip32_ID_IN, parameters);
c0d06008:	4806      	ldr	r0, [pc, #24]	; (c0d06024 <os_perso_derive_node_bip32+0x28>)
c0d0600a:	4669      	mov	r1, sp
c0d0600c:	f7ff feca 	bl	c0d05da4 <SVC_Call>
c0d06010:	aa05      	add	r2, sp, #20
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d06012:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_os_perso_derive_node_bip32_ID_OUT) {
c0d06014:	4904      	ldr	r1, [pc, #16]	; (c0d06028 <os_perso_derive_node_bip32+0x2c>)
c0d06016:	4288      	cmp	r0, r1
c0d06018:	d101      	bne.n	c0d0601e <os_perso_derive_node_bip32+0x22>
    THROW(EXCEPTION_SECURITY);
  }
}
c0d0601a:	b006      	add	sp, #24
c0d0601c:	bd80      	pop	{r7, pc}
  parameters[3] = (unsigned int)privateKey;
  parameters[4] = (unsigned int)chain;
  retid = SVC_Call(SYSCALL_os_perso_derive_node_bip32_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_os_perso_derive_node_bip32_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d0601e:	2004      	movs	r0, #4
c0d06020:	f7fe fb7b 	bl	c0d0471a <os_longjmp>
c0d06024:	600050ba 	.word	0x600050ba
c0d06028:	9000501e 	.word	0x9000501e

c0d0602c <os_global_pin_is_validated>:
  }
  return (unsigned int)ret;
}

unsigned int os_global_pin_is_validated ( void ) 
{
c0d0602c:	b580      	push	{r7, lr}
c0d0602e:	b082      	sub	sp, #8
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0];
  retid = SVC_Call(SYSCALL_os_global_pin_is_validated_ID_IN, parameters);
c0d06030:	4807      	ldr	r0, [pc, #28]	; (c0d06050 <os_global_pin_is_validated+0x24>)
c0d06032:	a901      	add	r1, sp, #4
c0d06034:	f7ff feb6 	bl	c0d05da4 <SVC_Call>
c0d06038:	466a      	mov	r2, sp
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d0603a:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_os_global_pin_is_validated_ID_OUT) {
c0d0603c:	4905      	ldr	r1, [pc, #20]	; (c0d06054 <os_global_pin_is_validated+0x28>)
c0d0603e:	4288      	cmp	r0, r1
c0d06040:	d102      	bne.n	c0d06048 <os_global_pin_is_validated+0x1c>
    THROW(EXCEPTION_SECURITY);
  }
  return (unsigned int)ret;
c0d06042:	9800      	ldr	r0, [sp, #0]
c0d06044:	b002      	add	sp, #8
c0d06046:	bd80      	pop	{r7, pc}
  unsigned int retid;
  unsigned int parameters [0];
  retid = SVC_Call(SYSCALL_os_global_pin_is_validated_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_os_global_pin_is_validated_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d06048:	2004      	movs	r0, #4
c0d0604a:	f7fe fb66 	bl	c0d0471a <os_longjmp>
c0d0604e:	46c0      	nop			; (mov r8, r8)
c0d06050:	60005889 	.word	0x60005889
c0d06054:	90005845 	.word	0x90005845

c0d06058 <os_sched_exit>:
  }
  return (unsigned int)ret;
}

void os_sched_exit ( unsigned int exit_code ) 
{
c0d06058:	b580      	push	{r7, lr}
c0d0605a:	b082      	sub	sp, #8
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0+1];
  parameters[0] = (unsigned int)exit_code;
c0d0605c:	9000      	str	r0, [sp, #0]
  retid = SVC_Call(SYSCALL_os_sched_exit_ID_IN, parameters);
c0d0605e:	4807      	ldr	r0, [pc, #28]	; (c0d0607c <os_sched_exit+0x24>)
c0d06060:	4669      	mov	r1, sp
c0d06062:	f7ff fe9f 	bl	c0d05da4 <SVC_Call>
c0d06066:	aa01      	add	r2, sp, #4
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d06068:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_os_sched_exit_ID_OUT) {
c0d0606a:	4905      	ldr	r1, [pc, #20]	; (c0d06080 <os_sched_exit+0x28>)
c0d0606c:	4288      	cmp	r0, r1
c0d0606e:	d101      	bne.n	c0d06074 <os_sched_exit+0x1c>
    THROW(EXCEPTION_SECURITY);
  }
}
c0d06070:	b002      	add	sp, #8
c0d06072:	bd80      	pop	{r7, pc}
  unsigned int parameters [0+1];
  parameters[0] = (unsigned int)exit_code;
  retid = SVC_Call(SYSCALL_os_sched_exit_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_os_sched_exit_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d06074:	2004      	movs	r0, #4
c0d06076:	f7fe fb50 	bl	c0d0471a <os_longjmp>
c0d0607a:	46c0      	nop			; (mov r8, r8)
c0d0607c:	60005fe1 	.word	0x60005fe1
c0d06080:	90005f6f 	.word	0x90005f6f

c0d06084 <os_ux>:
    THROW(EXCEPTION_SECURITY);
  }
}

unsigned int os_ux ( bolos_ux_params_t * params ) 
{
c0d06084:	b580      	push	{r7, lr}
c0d06086:	b082      	sub	sp, #8
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0+1];
  parameters[0] = (unsigned int)params;
c0d06088:	9000      	str	r0, [sp, #0]
  retid = SVC_Call(SYSCALL_os_ux_ID_IN, parameters);
c0d0608a:	4807      	ldr	r0, [pc, #28]	; (c0d060a8 <os_ux+0x24>)
c0d0608c:	4669      	mov	r1, sp
c0d0608e:	f7ff fe89 	bl	c0d05da4 <SVC_Call>
c0d06092:	aa01      	add	r2, sp, #4
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d06094:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_os_ux_ID_OUT) {
c0d06096:	4905      	ldr	r1, [pc, #20]	; (c0d060ac <os_ux+0x28>)
c0d06098:	4288      	cmp	r0, r1
c0d0609a:	d102      	bne.n	c0d060a2 <os_ux+0x1e>
    THROW(EXCEPTION_SECURITY);
  }
  return (unsigned int)ret;
c0d0609c:	9801      	ldr	r0, [sp, #4]
c0d0609e:	b002      	add	sp, #8
c0d060a0:	bd80      	pop	{r7, pc}
  unsigned int parameters [0+1];
  parameters[0] = (unsigned int)params;
  retid = SVC_Call(SYSCALL_os_ux_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_os_ux_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d060a2:	2004      	movs	r0, #4
c0d060a4:	f7fe fb39 	bl	c0d0471a <os_longjmp>
c0d060a8:	60006158 	.word	0x60006158
c0d060ac:	9000611f 	.word	0x9000611f

c0d060b0 <os_lib_throw>:
    THROW(EXCEPTION_SECURITY);
  }
}

void os_lib_throw ( unsigned int exception ) 
{
c0d060b0:	b580      	push	{r7, lr}
c0d060b2:	b082      	sub	sp, #8
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0+1];
  parameters[0] = (unsigned int)exception;
c0d060b4:	9000      	str	r0, [sp, #0]
  retid = SVC_Call(SYSCALL_os_lib_throw_ID_IN, parameters);
c0d060b6:	4807      	ldr	r0, [pc, #28]	; (c0d060d4 <os_lib_throw+0x24>)
c0d060b8:	4669      	mov	r1, sp
c0d060ba:	f7ff fe73 	bl	c0d05da4 <SVC_Call>
c0d060be:	aa01      	add	r2, sp, #4
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d060c0:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_os_lib_throw_ID_OUT) {
c0d060c2:	4905      	ldr	r1, [pc, #20]	; (c0d060d8 <os_lib_throw+0x28>)
c0d060c4:	4288      	cmp	r0, r1
c0d060c6:	d101      	bne.n	c0d060cc <os_lib_throw+0x1c>
    THROW(EXCEPTION_SECURITY);
  }
}
c0d060c8:	b002      	add	sp, #8
c0d060ca:	bd80      	pop	{r7, pc}
  unsigned int parameters [0+1];
  parameters[0] = (unsigned int)exception;
  retid = SVC_Call(SYSCALL_os_lib_throw_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_os_lib_throw_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d060cc:	2004      	movs	r0, #4
c0d060ce:	f7fe fb24 	bl	c0d0471a <os_longjmp>
c0d060d2:	46c0      	nop			; (mov r8, r8)
c0d060d4:	60006445 	.word	0x60006445
c0d060d8:	90006487 	.word	0x90006487

c0d060dc <io_seproxyhal_spi_send>:
  }
  return (unsigned int)ret;
}

void io_seproxyhal_spi_send ( const unsigned char * buffer, unsigned short length ) 
{
c0d060dc:	b580      	push	{r7, lr}
c0d060de:	b084      	sub	sp, #16
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0+2];
  parameters[0] = (unsigned int)buffer;
c0d060e0:	9001      	str	r0, [sp, #4]
  parameters[1] = (unsigned int)length;
c0d060e2:	9102      	str	r1, [sp, #8]
  retid = SVC_Call(SYSCALL_io_seproxyhal_spi_send_ID_IN, parameters);
c0d060e4:	4806      	ldr	r0, [pc, #24]	; (c0d06100 <io_seproxyhal_spi_send+0x24>)
c0d060e6:	a901      	add	r1, sp, #4
c0d060e8:	f7ff fe5c 	bl	c0d05da4 <SVC_Call>
c0d060ec:	aa03      	add	r2, sp, #12
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d060ee:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_io_seproxyhal_spi_send_ID_OUT) {
c0d060f0:	4904      	ldr	r1, [pc, #16]	; (c0d06104 <io_seproxyhal_spi_send+0x28>)
c0d060f2:	4288      	cmp	r0, r1
c0d060f4:	d101      	bne.n	c0d060fa <io_seproxyhal_spi_send+0x1e>
    THROW(EXCEPTION_SECURITY);
  }
}
c0d060f6:	b004      	add	sp, #16
c0d060f8:	bd80      	pop	{r7, pc}
  parameters[0] = (unsigned int)buffer;
  parameters[1] = (unsigned int)length;
  retid = SVC_Call(SYSCALL_io_seproxyhal_spi_send_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_io_seproxyhal_spi_send_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d060fa:	2004      	movs	r0, #4
c0d060fc:	f7fe fb0d 	bl	c0d0471a <os_longjmp>
c0d06100:	60006e1c 	.word	0x60006e1c
c0d06104:	90006ef3 	.word	0x90006ef3

c0d06108 <io_seproxyhal_spi_is_status_sent>:
  }
}

unsigned int io_seproxyhal_spi_is_status_sent ( void ) 
{
c0d06108:	b580      	push	{r7, lr}
c0d0610a:	b082      	sub	sp, #8
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0];
  retid = SVC_Call(SYSCALL_io_seproxyhal_spi_is_status_sent_ID_IN, parameters);
c0d0610c:	4807      	ldr	r0, [pc, #28]	; (c0d0612c <io_seproxyhal_spi_is_status_sent+0x24>)
c0d0610e:	a901      	add	r1, sp, #4
c0d06110:	f7ff fe48 	bl	c0d05da4 <SVC_Call>
c0d06114:	466a      	mov	r2, sp
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d06116:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_io_seproxyhal_spi_is_status_sent_ID_OUT) {
c0d06118:	4905      	ldr	r1, [pc, #20]	; (c0d06130 <io_seproxyhal_spi_is_status_sent+0x28>)
c0d0611a:	4288      	cmp	r0, r1
c0d0611c:	d102      	bne.n	c0d06124 <io_seproxyhal_spi_is_status_sent+0x1c>
    THROW(EXCEPTION_SECURITY);
  }
  return (unsigned int)ret;
c0d0611e:	9800      	ldr	r0, [sp, #0]
c0d06120:	b002      	add	sp, #8
c0d06122:	bd80      	pop	{r7, pc}
  unsigned int retid;
  unsigned int parameters [0];
  retid = SVC_Call(SYSCALL_io_seproxyhal_spi_is_status_sent_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_io_seproxyhal_spi_is_status_sent_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d06124:	2004      	movs	r0, #4
c0d06126:	f7fe faf8 	bl	c0d0471a <os_longjmp>
c0d0612a:	46c0      	nop			; (mov r8, r8)
c0d0612c:	60006fcf 	.word	0x60006fcf
c0d06130:	90006f7f 	.word	0x90006f7f

c0d06134 <io_seproxyhal_spi_recv>:
  }
  return (unsigned int)ret;
}

unsigned short io_seproxyhal_spi_recv ( unsigned char * buffer, unsigned short maxlength, unsigned int flags ) 
{
c0d06134:	b580      	push	{r7, lr}
c0d06136:	b084      	sub	sp, #16
  unsigned int ret;
  unsigned int retid;
  unsigned int parameters [0+3];
  parameters[0] = (unsigned int)buffer;
c0d06138:	ab00      	add	r3, sp, #0
c0d0613a:	c307      	stmia	r3!, {r0, r1, r2}
  parameters[1] = (unsigned int)maxlength;
  parameters[2] = (unsigned int)flags;
  retid = SVC_Call(SYSCALL_io_seproxyhal_spi_recv_ID_IN, parameters);
c0d0613c:	4807      	ldr	r0, [pc, #28]	; (c0d0615c <io_seproxyhal_spi_recv+0x28>)
c0d0613e:	4669      	mov	r1, sp
c0d06140:	f7ff fe30 	bl	c0d05da4 <SVC_Call>
c0d06144:	aa03      	add	r2, sp, #12
  asm volatile("str r1, %0":"=m"(ret)::"r1");
c0d06146:	6011      	str	r1, [r2, #0]
  if (retid != SYSCALL_io_seproxyhal_spi_recv_ID_OUT) {
c0d06148:	4905      	ldr	r1, [pc, #20]	; (c0d06160 <io_seproxyhal_spi_recv+0x2c>)
c0d0614a:	4288      	cmp	r0, r1
c0d0614c:	d103      	bne.n	c0d06156 <io_seproxyhal_spi_recv+0x22>
c0d0614e:	a803      	add	r0, sp, #12
    THROW(EXCEPTION_SECURITY);
  }
  return (unsigned short)ret;
c0d06150:	8800      	ldrh	r0, [r0, #0]
c0d06152:	b004      	add	sp, #16
c0d06154:	bd80      	pop	{r7, pc}
  parameters[1] = (unsigned int)maxlength;
  parameters[2] = (unsigned int)flags;
  retid = SVC_Call(SYSCALL_io_seproxyhal_spi_recv_ID_IN, parameters);
  asm volatile("str r1, %0":"=m"(ret)::"r1");
  if (retid != SYSCALL_io_seproxyhal_spi_recv_ID_OUT) {
    THROW(EXCEPTION_SECURITY);
c0d06156:	2004      	movs	r0, #4
c0d06158:	f7fe fadf 	bl	c0d0471a <os_longjmp>
c0d0615c:	600070d1 	.word	0x600070d1
c0d06160:	9000702b 	.word	0x9000702b

c0d06164 <u2f_apdu_sign>:

    u2f_message_reply(service, U2F_CMD_MSG, (uint8_t *)SW_INTERNAL, sizeof(SW_INTERNAL));
}

void u2f_apdu_sign(u2f_service_t *service, uint8_t p1, uint8_t p2,
                     uint8_t *buffer, uint16_t length) {
c0d06164:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d06166:	b085      	sub	sp, #20
    UNUSED(p2);
    uint8_t keyHandleLength;
    uint8_t i;

    // can't process the apdu if another one is already scheduled in
    if (G_io_apdu_state != APDU_IDLE) {
c0d06168:	4921      	ldr	r1, [pc, #132]	; (c0d061f0 <u2f_apdu_sign+0x8c>)
c0d0616a:	780a      	ldrb	r2, [r1, #0]
    for (i = 0; i < keyHandleLength; i++) {
        buffer[U2F_HANDLE_SIGN_HEADER_SIZE + i] ^= U2F_PROXY_MAGIC[i % (sizeof(U2F_PROXY_MAGIC)-1)];
    }
    // Check that it looks like an APDU
    if (length != U2F_HANDLE_SIGN_HEADER_SIZE + 5 + buffer[U2F_HANDLE_SIGN_HEADER_SIZE + 4]) {
        u2f_message_reply(service, U2F_CMD_MSG,
c0d0616c:	2183      	movs	r1, #131	; 0x83
    UNUSED(p2);
    uint8_t keyHandleLength;
    uint8_t i;

    // can't process the apdu if another one is already scheduled in
    if (G_io_apdu_state != APDU_IDLE) {
c0d0616e:	2a00      	cmp	r2, #0
c0d06170:	d002      	beq.n	c0d06178 <u2f_apdu_sign+0x14>
        u2f_message_reply(service, U2F_CMD_MSG,
c0d06172:	4a24      	ldr	r2, [pc, #144]	; (c0d06204 <u2f_apdu_sign+0xa0>)
c0d06174:	447a      	add	r2, pc
c0d06176:	e004      	b.n	c0d06182 <u2f_apdu_sign+0x1e>
c0d06178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                  (uint8_t *)SW_BUSY,
                  sizeof(SW_BUSY));
        return;        
    }

    if (length < U2F_HANDLE_SIGN_HEADER_SIZE + 5 /*at least an apdu header*/) {
c0d0617a:	2a45      	cmp	r2, #69	; 0x45
c0d0617c:	d806      	bhi.n	c0d0618c <u2f_apdu_sign+0x28>
        u2f_message_reply(service, U2F_CMD_MSG,
c0d0617e:	4a22      	ldr	r2, [pc, #136]	; (c0d06208 <u2f_apdu_sign+0xa4>)
c0d06180:	447a      	add	r2, pc
c0d06182:	2302      	movs	r3, #2
c0d06184:	f000 fb52 	bl	c0d0682c <u2f_message_reply>
    app_dispatch();
    if ((btchip_context_D.io_flags & IO_ASYNCH_REPLY) == 0) {
        u2f_proxy_response(service, btchip_context_D.outLength);
    }
    */
}
c0d06188:	b005      	add	sp, #20
c0d0618a:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d0618c:	ac01      	add	r4, sp, #4
c0d0618e:	c407      	stmia	r4!, {r0, r1, r2}
                  sizeof(SW_WRONG_LENGTH));
        return;
    }

    // Unwrap magic
    keyHandleLength = buffer[U2F_HANDLE_SIGN_HEADER_SIZE-1];
c0d06190:	2040      	movs	r0, #64	; 0x40
c0d06192:	9304      	str	r3, [sp, #16]
c0d06194:	5c1f      	ldrb	r7, [r3, r0]
    for (i = 0; i < keyHandleLength; i++) {
c0d06196:	2f00      	cmp	r7, #0
c0d06198:	d00e      	beq.n	c0d061b8 <u2f_apdu_sign+0x54>
        buffer[U2F_HANDLE_SIGN_HEADER_SIZE + i] ^= U2F_PROXY_MAGIC[i % (sizeof(U2F_PROXY_MAGIC)-1)];
c0d0619a:	9e04      	ldr	r6, [sp, #16]
c0d0619c:	3641      	adds	r6, #65	; 0x41
c0d0619e:	2400      	movs	r4, #0
c0d061a0:	a514      	add	r5, pc, #80	; (adr r5, c0d061f4 <u2f_apdu_sign+0x90>)
c0d061a2:	b2e0      	uxtb	r0, r4
c0d061a4:	2103      	movs	r1, #3
c0d061a6:	f001 fae9 	bl	c0d0777c <__aeabi_uidivmod>
c0d061aa:	5d30      	ldrb	r0, [r6, r4]
c0d061ac:	5c69      	ldrb	r1, [r5, r1]
c0d061ae:	4041      	eors	r1, r0
c0d061b0:	5531      	strb	r1, [r6, r4]
        return;
    }

    // Unwrap magic
    keyHandleLength = buffer[U2F_HANDLE_SIGN_HEADER_SIZE-1];
    for (i = 0; i < keyHandleLength; i++) {
c0d061b2:	1c64      	adds	r4, r4, #1
c0d061b4:	42a7      	cmp	r7, r4
c0d061b6:	d1f4      	bne.n	c0d061a2 <u2f_apdu_sign+0x3e>
        buffer[U2F_HANDLE_SIGN_HEADER_SIZE + i] ^= U2F_PROXY_MAGIC[i % (sizeof(U2F_PROXY_MAGIC)-1)];
    }
    // Check that it looks like an APDU
    if (length != U2F_HANDLE_SIGN_HEADER_SIZE + 5 + buffer[U2F_HANDLE_SIGN_HEADER_SIZE + 4]) {
c0d061b8:	2045      	movs	r0, #69	; 0x45
c0d061ba:	9904      	ldr	r1, [sp, #16]
c0d061bc:	5c08      	ldrb	r0, [r1, r0]
c0d061be:	3046      	adds	r0, #70	; 0x46
c0d061c0:	9a03      	ldr	r2, [sp, #12]
c0d061c2:	4282      	cmp	r2, r0
c0d061c4:	d10d      	bne.n	c0d061e2 <u2f_apdu_sign+0x7e>
                  sizeof(SW_BAD_KEY_HANDLE));
        return;
    }

    // make the apdu available to higher layers
    os_memmove(G_io_apdu_buffer, buffer + U2F_HANDLE_SIGN_HEADER_SIZE, keyHandleLength);
c0d061c6:	3141      	adds	r1, #65	; 0x41
c0d061c8:	480b      	ldr	r0, [pc, #44]	; (c0d061f8 <u2f_apdu_sign+0x94>)
c0d061ca:	463a      	mov	r2, r7
c0d061cc:	f7fe f9f1 	bl	c0d045b2 <os_memmove>
    G_io_apdu_length = keyHandleLength;
c0d061d0:	480a      	ldr	r0, [pc, #40]	; (c0d061fc <u2f_apdu_sign+0x98>)
c0d061d2:	8007      	strh	r7, [r0, #0]
    G_io_apdu_media = IO_APDU_MEDIA_U2F; // the effective transport is managed by the U2F layer
c0d061d4:	480a      	ldr	r0, [pc, #40]	; (c0d06200 <u2f_apdu_sign+0x9c>)
c0d061d6:	2106      	movs	r1, #6
c0d061d8:	7001      	strb	r1, [r0, #0]
    G_io_apdu_state = APDU_U2F;
c0d061da:	2009      	movs	r0, #9
c0d061dc:	4904      	ldr	r1, [pc, #16]	; (c0d061f0 <u2f_apdu_sign+0x8c>)
c0d061de:	7008      	strb	r0, [r1, #0]
c0d061e0:	e7d2      	b.n	c0d06188 <u2f_apdu_sign+0x24>
    for (i = 0; i < keyHandleLength; i++) {
        buffer[U2F_HANDLE_SIGN_HEADER_SIZE + i] ^= U2F_PROXY_MAGIC[i % (sizeof(U2F_PROXY_MAGIC)-1)];
    }
    // Check that it looks like an APDU
    if (length != U2F_HANDLE_SIGN_HEADER_SIZE + 5 + buffer[U2F_HANDLE_SIGN_HEADER_SIZE + 4]) {
        u2f_message_reply(service, U2F_CMD_MSG,
c0d061e2:	4a0a      	ldr	r2, [pc, #40]	; (c0d0620c <u2f_apdu_sign+0xa8>)
c0d061e4:	447a      	add	r2, pc
c0d061e6:	2302      	movs	r3, #2
c0d061e8:	9801      	ldr	r0, [sp, #4]
c0d061ea:	9902      	ldr	r1, [sp, #8]
c0d061ec:	e7ca      	b.n	c0d06184 <u2f_apdu_sign+0x20>
c0d061ee:	46c0      	nop			; (mov r8, r8)
c0d061f0:	20001fd7 	.word	0x20001fd7
c0d061f4:	00435442 	.word	0x00435442
c0d061f8:	20001e6c 	.word	0x20001e6c
c0d061fc:	20001fd8 	.word	0x20001fd8
c0d06200:	20001fd0 	.word	0x20001fd0
c0d06204:	00002668 	.word	0x00002668
c0d06208:	0000265e 	.word	0x0000265e
c0d0620c:	000025fc 	.word	0x000025fc

c0d06210 <u2f_handle_cmd_init>:
    UNUSED(length);
    u2f_message_reply(service, U2F_CMD_MSG, (uint8_t *)INFO, sizeof(INFO));
}

void u2f_handle_cmd_init(u2f_service_t *service, uint8_t *buffer,
                         uint16_t length, uint8_t *channelInit) {
c0d06210:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d06212:	b081      	sub	sp, #4
c0d06214:	461d      	mov	r5, r3
c0d06216:	460e      	mov	r6, r1
c0d06218:	4604      	mov	r4, r0
    // screen_printf("U2F init\n");
    uint8_t channel[4];
    (void)length;
    if (u2f_is_channel_broadcast(channelInit)) {
c0d0621a:	4628      	mov	r0, r5
c0d0621c:	f000 faf6 	bl	c0d0680c <u2f_is_channel_broadcast>
c0d06220:	2801      	cmp	r0, #1
c0d06222:	d104      	bne.n	c0d0622e <u2f_handle_cmd_init+0x1e>
c0d06224:	4668      	mov	r0, sp
        cx_rng(channel, 4);
c0d06226:	2104      	movs	r1, #4
c0d06228:	f7ff fdfe 	bl	c0d05e28 <cx_rng>
c0d0622c:	e004      	b.n	c0d06238 <u2f_handle_cmd_init+0x28>
c0d0622e:	4668      	mov	r0, sp
    } else {
        os_memmove(channel, channelInit, 4);
c0d06230:	2204      	movs	r2, #4
c0d06232:	4629      	mov	r1, r5
c0d06234:	f7fe f9bd 	bl	c0d045b2 <os_memmove>
    }
    os_memmove(G_io_apdu_buffer, buffer, 8);
c0d06238:	4f17      	ldr	r7, [pc, #92]	; (c0d06298 <u2f_handle_cmd_init+0x88>)
c0d0623a:	2208      	movs	r2, #8
c0d0623c:	4638      	mov	r0, r7
c0d0623e:	4631      	mov	r1, r6
c0d06240:	f7fe f9b7 	bl	c0d045b2 <os_memmove>
    os_memmove(G_io_apdu_buffer + 8, channel, 4);
c0d06244:	4638      	mov	r0, r7
c0d06246:	3008      	adds	r0, #8
c0d06248:	4669      	mov	r1, sp
c0d0624a:	2204      	movs	r2, #4
c0d0624c:	f7fe f9b1 	bl	c0d045b2 <os_memmove>
    G_io_apdu_buffer[12] = INIT_U2F_VERSION;
c0d06250:	2002      	movs	r0, #2
c0d06252:	7338      	strb	r0, [r7, #12]
    G_io_apdu_buffer[13] = INIT_DEVICE_VERSION_MAJOR;
c0d06254:	2000      	movs	r0, #0
c0d06256:	7378      	strb	r0, [r7, #13]
c0d06258:	2101      	movs	r1, #1
    G_io_apdu_buffer[14] = INIT_DEVICE_VERSION_MINOR;
c0d0625a:	73b9      	strb	r1, [r7, #14]
    G_io_apdu_buffer[15] = INIT_BUILD_VERSION;
c0d0625c:	73f8      	strb	r0, [r7, #15]
    G_io_apdu_buffer[16] = INIT_CAPABILITIES;
c0d0625e:	7438      	strb	r0, [r7, #16]

    if (u2f_is_channel_broadcast(channelInit)) {
c0d06260:	4628      	mov	r0, r5
c0d06262:	f000 fad3 	bl	c0d0680c <u2f_is_channel_broadcast>
        os_memset(service->channel, 0xff, 4);
c0d06266:	2586      	movs	r5, #134	; 0x86
    G_io_apdu_buffer[13] = INIT_DEVICE_VERSION_MAJOR;
    G_io_apdu_buffer[14] = INIT_DEVICE_VERSION_MINOR;
    G_io_apdu_buffer[15] = INIT_BUILD_VERSION;
    G_io_apdu_buffer[16] = INIT_CAPABILITIES;

    if (u2f_is_channel_broadcast(channelInit)) {
c0d06268:	2801      	cmp	r0, #1
c0d0626a:	d107      	bne.n	c0d0627c <u2f_handle_cmd_init+0x6c>
        os_memset(service->channel, 0xff, 4);
c0d0626c:	4628      	mov	r0, r5
c0d0626e:	3079      	adds	r0, #121	; 0x79
c0d06270:	b2c1      	uxtb	r1, r0
c0d06272:	2204      	movs	r2, #4
c0d06274:	4620      	mov	r0, r4
c0d06276:	f7fe f993 	bl	c0d045a0 <os_memset>
c0d0627a:	e004      	b.n	c0d06286 <u2f_handle_cmd_init+0x76>
c0d0627c:	4669      	mov	r1, sp
    } else {
        os_memmove(service->channel, channel, 4);
c0d0627e:	2204      	movs	r2, #4
c0d06280:	4620      	mov	r0, r4
c0d06282:	f7fe f996 	bl	c0d045b2 <os_memmove>
    }
    u2f_message_reply(service, U2F_CMD_INIT, G_io_apdu_buffer, 17);
c0d06286:	4a04      	ldr	r2, [pc, #16]	; (c0d06298 <u2f_handle_cmd_init+0x88>)
c0d06288:	2311      	movs	r3, #17
c0d0628a:	4620      	mov	r0, r4
c0d0628c:	4629      	mov	r1, r5
c0d0628e:	f000 facd 	bl	c0d0682c <u2f_message_reply>
}
c0d06292:	b001      	add	sp, #4
c0d06294:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d06296:	46c0      	nop			; (mov r8, r8)
c0d06298:	20001e6c 	.word	0x20001e6c

c0d0629c <u2f_handle_cmd_msg>:
    // screen_printf("U2F ping\n");
    u2f_message_reply(service, U2F_CMD_PING, buffer, length);
}

void u2f_handle_cmd_msg(u2f_service_t *service, uint8_t *buffer,
                        uint16_t length) {
c0d0629c:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d0629e:	b083      	sub	sp, #12
c0d062a0:	460b      	mov	r3, r1
c0d062a2:	9002      	str	r0, [sp, #8]
    uint8_t cla = buffer[0];
    uint8_t ins = buffer[1];
    uint8_t p1 = buffer[2];
    uint8_t p2 = buffer[3];
    // in extended length buffer[4] must be 0
    uint32_t dataLength = /*(buffer[4] << 16) |*/ (buffer[5] << 8) | (buffer[6]);
c0d062a4:	7998      	ldrb	r0, [r3, #6]
c0d062a6:	7959      	ldrb	r1, [r3, #5]
c0d062a8:	020f      	lsls	r7, r1, #8
c0d062aa:	4307      	orrs	r7, r0

void u2f_handle_cmd_msg(u2f_service_t *service, uint8_t *buffer,
                        uint16_t length) {
    // screen_printf("U2F msg\n");
    uint8_t cla = buffer[0];
    uint8_t ins = buffer[1];
c0d062ac:	7859      	ldrb	r1, [r3, #1]
}

void u2f_handle_cmd_msg(u2f_service_t *service, uint8_t *buffer,
                        uint16_t length) {
    // screen_printf("U2F msg\n");
    uint8_t cla = buffer[0];
c0d062ae:	781e      	ldrb	r6, [r3, #0]
    uint8_t ins = buffer[1];
    uint8_t p1 = buffer[2];
    uint8_t p2 = buffer[3];
    // in extended length buffer[4] must be 0
    uint32_t dataLength = /*(buffer[4] << 16) |*/ (buffer[5] << 8) | (buffer[6]);
    if (dataLength == (uint16_t)(length - 9) || dataLength == (uint16_t)(length - 7)) {
c0d062b0:	4615      	mov	r5, r2
c0d062b2:	3d09      	subs	r5, #9
c0d062b4:	b2a8      	uxth	r0, r5
        u2f_apdu_get_info(service, p1, p2, buffer + 7, dataLength);
        break;

    default:
        // screen_printf("unsupported\n");
        u2f_message_reply(service, U2F_CMD_MSG,
c0d062b6:	2483      	movs	r4, #131	; 0x83
c0d062b8:	9401      	str	r4, [sp, #4]
c0d062ba:	4c1f      	ldr	r4, [pc, #124]	; (c0d06338 <u2f_handle_cmd_msg+0x9c>)
    uint8_t ins = buffer[1];
    uint8_t p1 = buffer[2];
    uint8_t p2 = buffer[3];
    // in extended length buffer[4] must be 0
    uint32_t dataLength = /*(buffer[4] << 16) |*/ (buffer[5] << 8) | (buffer[6]);
    if (dataLength == (uint16_t)(length - 9) || dataLength == (uint16_t)(length - 7)) {
c0d062bc:	4287      	cmp	r7, r0
c0d062be:	d003      	beq.n	c0d062c8 <u2f_handle_cmd_msg+0x2c>
c0d062c0:	1fd2      	subs	r2, r2, #7
c0d062c2:	4014      	ands	r4, r2
c0d062c4:	42a7      	cmp	r7, r4
c0d062c6:	d11b      	bne.n	c0d06300 <u2f_handle_cmd_msg+0x64>
c0d062c8:	463d      	mov	r5, r7
                  (uint8_t *)SW_WRONG_LENGTH,
                  sizeof(SW_WRONG_LENGTH));
        return;
    }

    if (cla != FIDO_CLA) {
c0d062ca:	2e00      	cmp	r6, #0
c0d062cc:	d008      	beq.n	c0d062e0 <u2f_handle_cmd_msg+0x44>
        u2f_message_reply(service, U2F_CMD_MSG,
c0d062ce:	4a1b      	ldr	r2, [pc, #108]	; (c0d0633c <u2f_handle_cmd_msg+0xa0>)
c0d062d0:	447a      	add	r2, pc
c0d062d2:	2302      	movs	r3, #2
c0d062d4:	9802      	ldr	r0, [sp, #8]
c0d062d6:	9901      	ldr	r1, [sp, #4]
c0d062d8:	f000 faa8 	bl	c0d0682c <u2f_message_reply>
        u2f_message_reply(service, U2F_CMD_MSG,
                 (uint8_t *)SW_UNKNOWN_INSTRUCTION,
                 sizeof(SW_UNKNOWN_INSTRUCTION));
        return;
    }
}
c0d062dc:	b003      	add	sp, #12
c0d062de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        u2f_message_reply(service, U2F_CMD_MSG,
                  (uint8_t *)SW_UNKNOWN_CLASS,
                  sizeof(SW_UNKNOWN_CLASS));
        return;
    }
    switch (ins) {
c0d062e0:	2902      	cmp	r1, #2
c0d062e2:	dc17      	bgt.n	c0d06314 <u2f_handle_cmd_msg+0x78>
c0d062e4:	2901      	cmp	r1, #1
c0d062e6:	d020      	beq.n	c0d0632a <u2f_handle_cmd_msg+0x8e>
c0d062e8:	2902      	cmp	r1, #2
c0d062ea:	d11b      	bne.n	c0d06324 <u2f_handle_cmd_msg+0x88>
        // screen_printf("enroll\n");
        u2f_apdu_enroll(service, p1, p2, buffer + 7, dataLength);
        break;
    case FIDO_INS_SIGN:
        // screen_printf("sign\n");
        u2f_apdu_sign(service, p1, p2, buffer + 7, dataLength);
c0d062ec:	b2a8      	uxth	r0, r5
c0d062ee:	4669      	mov	r1, sp
c0d062f0:	6008      	str	r0, [r1, #0]
c0d062f2:	1ddb      	adds	r3, r3, #7
c0d062f4:	2100      	movs	r1, #0
c0d062f6:	9802      	ldr	r0, [sp, #8]
c0d062f8:	460a      	mov	r2, r1
c0d062fa:	f7ff ff33 	bl	c0d06164 <u2f_apdu_sign>
c0d062fe:	e7ed      	b.n	c0d062dc <u2f_handle_cmd_msg+0x40>
    if (dataLength == (uint16_t)(length - 9) || dataLength == (uint16_t)(length - 7)) {
        // Le is optional
        // nominal case from the specification
    }
    // circumvent google chrome extended length encoding done on the last byte only (module 256) but all data being transferred
    else if (dataLength == (uint16_t)(length - 9)%256) {
c0d06300:	b2e8      	uxtb	r0, r5
c0d06302:	4287      	cmp	r7, r0
c0d06304:	d0e1      	beq.n	c0d062ca <u2f_handle_cmd_msg+0x2e>
        dataLength = length - 9;
    }
    else if (dataLength == (uint16_t)(length - 7)%256) {
c0d06306:	b2d0      	uxtb	r0, r2
c0d06308:	4287      	cmp	r7, r0
c0d0630a:	4615      	mov	r5, r2
c0d0630c:	d0dd      	beq.n	c0d062ca <u2f_handle_cmd_msg+0x2e>
        dataLength = length - 7;
    }    
    else { 
        // invalid size
        u2f_message_reply(service, U2F_CMD_MSG,
c0d0630e:	4a0c      	ldr	r2, [pc, #48]	; (c0d06340 <u2f_handle_cmd_msg+0xa4>)
c0d06310:	447a      	add	r2, pc
c0d06312:	e7de      	b.n	c0d062d2 <u2f_handle_cmd_msg+0x36>
c0d06314:	2903      	cmp	r1, #3
c0d06316:	d00b      	beq.n	c0d06330 <u2f_handle_cmd_msg+0x94>
c0d06318:	29c1      	cmp	r1, #193	; 0xc1
c0d0631a:	d103      	bne.n	c0d06324 <u2f_handle_cmd_msg+0x88>
                            uint8_t *buffer, uint16_t length) {
    UNUSED(p1);
    UNUSED(p2);
    UNUSED(buffer);
    UNUSED(length);
    u2f_message_reply(service, U2F_CMD_MSG, (uint8_t *)INFO, sizeof(INFO));
c0d0631c:	4a09      	ldr	r2, [pc, #36]	; (c0d06344 <u2f_handle_cmd_msg+0xa8>)
c0d0631e:	447a      	add	r2, pc
c0d06320:	2304      	movs	r3, #4
c0d06322:	e7d7      	b.n	c0d062d4 <u2f_handle_cmd_msg+0x38>
        u2f_apdu_get_info(service, p1, p2, buffer + 7, dataLength);
        break;

    default:
        // screen_printf("unsupported\n");
        u2f_message_reply(service, U2F_CMD_MSG,
c0d06324:	4a0a      	ldr	r2, [pc, #40]	; (c0d06350 <u2f_handle_cmd_msg+0xb4>)
c0d06326:	447a      	add	r2, pc
c0d06328:	e7d3      	b.n	c0d062d2 <u2f_handle_cmd_msg+0x36>
    UNUSED(p1);
    UNUSED(p2);
    UNUSED(buffer);
    UNUSED(length);

    u2f_message_reply(service, U2F_CMD_MSG, (uint8_t *)SW_INTERNAL, sizeof(SW_INTERNAL));
c0d0632a:	4a07      	ldr	r2, [pc, #28]	; (c0d06348 <u2f_handle_cmd_msg+0xac>)
c0d0632c:	447a      	add	r2, pc
c0d0632e:	e7d0      	b.n	c0d062d2 <u2f_handle_cmd_msg+0x36>
    // screen_printf("U2F version\n");
    UNUSED(p1);
    UNUSED(p2);
    UNUSED(buffer);
    UNUSED(length);
    u2f_message_reply(service, U2F_CMD_MSG, (uint8_t *)U2F_VERSION, sizeof(U2F_VERSION));
c0d06330:	4a06      	ldr	r2, [pc, #24]	; (c0d0634c <u2f_handle_cmd_msg+0xb0>)
c0d06332:	447a      	add	r2, pc
c0d06334:	2308      	movs	r3, #8
c0d06336:	e7cd      	b.n	c0d062d4 <u2f_handle_cmd_msg+0x38>
c0d06338:	0000ffff 	.word	0x0000ffff
c0d0633c:	0000251e 	.word	0x0000251e
c0d06340:	000024ce 	.word	0x000024ce
c0d06344:	000024cc 	.word	0x000024cc
c0d06348:	000024ae 	.word	0x000024ae
c0d0634c:	000024b0 	.word	0x000024b0
c0d06350:	000024ca 	.word	0x000024ca

c0d06354 <u2f_message_complete>:
                 sizeof(SW_UNKNOWN_INSTRUCTION));
        return;
    }
}

void u2f_message_complete(u2f_service_t *service) {
c0d06354:	b580      	push	{r7, lr}
    uint8_t cmd = service->transportBuffer[0];
c0d06356:	6981      	ldr	r1, [r0, #24]
    uint16_t length = (service->transportBuffer[1] << 8) | (service->transportBuffer[2]);
c0d06358:	788a      	ldrb	r2, [r1, #2]
c0d0635a:	784b      	ldrb	r3, [r1, #1]
c0d0635c:	021b      	lsls	r3, r3, #8
c0d0635e:	4313      	orrs	r3, r2
        return;
    }
}

void u2f_message_complete(u2f_service_t *service) {
    uint8_t cmd = service->transportBuffer[0];
c0d06360:	780a      	ldrb	r2, [r1, #0]
    uint16_t length = (service->transportBuffer[1] << 8) | (service->transportBuffer[2]);
    switch (cmd) {
c0d06362:	2a81      	cmp	r2, #129	; 0x81
c0d06364:	d009      	beq.n	c0d0637a <u2f_message_complete+0x26>
c0d06366:	2a83      	cmp	r2, #131	; 0x83
c0d06368:	d00c      	beq.n	c0d06384 <u2f_message_complete+0x30>
c0d0636a:	2a86      	cmp	r2, #134	; 0x86
c0d0636c:	d10e      	bne.n	c0d0638c <u2f_message_complete+0x38>
    case U2F_CMD_INIT:
        u2f_handle_cmd_init(service, service->transportBuffer + 3, length, service->channel);
c0d0636e:	1cc9      	adds	r1, r1, #3
c0d06370:	2200      	movs	r2, #0
c0d06372:	4603      	mov	r3, r0
c0d06374:	f7ff ff4c 	bl	c0d06210 <u2f_handle_cmd_init>
        break;
    case U2F_CMD_MSG:
        u2f_handle_cmd_msg(service, service->transportBuffer + 3, length);
        break;
    }
}
c0d06378:	bd80      	pop	{r7, pc}
    switch (cmd) {
    case U2F_CMD_INIT:
        u2f_handle_cmd_init(service, service->transportBuffer + 3, length, service->channel);
        break;
    case U2F_CMD_PING:
        u2f_handle_cmd_ping(service, service->transportBuffer + 3, length);
c0d0637a:	1cca      	adds	r2, r1, #3
}

void u2f_handle_cmd_ping(u2f_service_t *service, uint8_t *buffer,
                         uint16_t length) {
    // screen_printf("U2F ping\n");
    u2f_message_reply(service, U2F_CMD_PING, buffer, length);
c0d0637c:	2181      	movs	r1, #129	; 0x81
c0d0637e:	f000 fa55 	bl	c0d0682c <u2f_message_reply>
        break;
    case U2F_CMD_MSG:
        u2f_handle_cmd_msg(service, service->transportBuffer + 3, length);
        break;
    }
}
c0d06382:	bd80      	pop	{r7, pc}
        break;
    case U2F_CMD_PING:
        u2f_handle_cmd_ping(service, service->transportBuffer + 3, length);
        break;
    case U2F_CMD_MSG:
        u2f_handle_cmd_msg(service, service->transportBuffer + 3, length);
c0d06384:	1cc9      	adds	r1, r1, #3
c0d06386:	461a      	mov	r2, r3
c0d06388:	f7ff ff88 	bl	c0d0629c <u2f_handle_cmd_msg>
        break;
    }
}
c0d0638c:	bd80      	pop	{r7, pc}
	...

c0d06390 <u2f_io_send>:
#include "u2f_processing.h"
#include "u2f_impl.h"

#include "os_io_seproxyhal.h"

void u2f_io_send(uint8_t *buffer, uint16_t length, u2f_transport_media_t media) {
c0d06390:	b570      	push	{r4, r5, r6, lr}
c0d06392:	460d      	mov	r5, r1
c0d06394:	4601      	mov	r1, r0
    if (media == U2F_MEDIA_USB) {
c0d06396:	2a01      	cmp	r2, #1
c0d06398:	d112      	bne.n	c0d063c0 <u2f_io_send+0x30>
        os_memmove(G_io_usb_ep_buffer, buffer, length);
c0d0639a:	4c17      	ldr	r4, [pc, #92]	; (c0d063f8 <u2f_io_send+0x68>)
c0d0639c:	4620      	mov	r0, r4
c0d0639e:	462a      	mov	r2, r5
c0d063a0:	f7fe f907 	bl	c0d045b2 <os_memmove>
        // wipe the remaining to avoid :
        // 1/ data leaks
        // 2/ invalid junk
        os_memset(G_io_usb_ep_buffer+length, 0, sizeof(G_io_usb_ep_buffer)-length);
c0d063a4:	1960      	adds	r0, r4, r5
c0d063a6:	2640      	movs	r6, #64	; 0x40
c0d063a8:	1b72      	subs	r2, r6, r5
c0d063aa:	2500      	movs	r5, #0
c0d063ac:	4629      	mov	r1, r5
c0d063ae:	f7fe f8f7 	bl	c0d045a0 <os_memset>
    }
    switch (media) {
    case U2F_MEDIA_USB:
        io_usb_send_ep(U2F_EPIN_ADDR, G_io_usb_ep_buffer, USB_SEGMENT_SIZE, 0);
c0d063b2:	2081      	movs	r0, #129	; 0x81
c0d063b4:	4621      	mov	r1, r4
c0d063b6:	4632      	mov	r2, r6
c0d063b8:	462b      	mov	r3, r5
c0d063ba:	f7fe fa2d 	bl	c0d04818 <io_usb_send_ep>
#endif
    default:
        PRINTF("Request to send on unsupported media %d\n", media);
        break;
    }
}
c0d063be:	bd70      	pop	{r4, r5, r6, pc}
    case U2F_MEDIA_BLE:
        BLE_protocol_send(buffer, length);
        break;
#endif
    default:
        PRINTF("Request to send on unsupported media %d\n", media);
c0d063c0:	a002      	add	r0, pc, #8	; (adr r0, c0d063cc <u2f_io_send+0x3c>)
c0d063c2:	4611      	mov	r1, r2
c0d063c4:	f7fe ffe4 	bl	c0d05390 <screen_printf>
        break;
    }
}
c0d063c8:	bd70      	pop	{r4, r5, r6, pc}
c0d063ca:	46c0      	nop			; (mov r8, r8)
c0d063cc:	75716552 	.word	0x75716552
c0d063d0:	20747365 	.word	0x20747365
c0d063d4:	73206f74 	.word	0x73206f74
c0d063d8:	20646e65 	.word	0x20646e65
c0d063dc:	75206e6f 	.word	0x75206e6f
c0d063e0:	7075736e 	.word	0x7075736e
c0d063e4:	74726f70 	.word	0x74726f70
c0d063e8:	6d206465 	.word	0x6d206465
c0d063ec:	61696465 	.word	0x61696465
c0d063f0:	0a642520 	.word	0x0a642520
c0d063f4:	00000000 	.word	0x00000000
c0d063f8:	20002070 	.word	0x20002070

c0d063fc <u2f_transport_init>:

/**
 * Initialize the u2f transport and provide the buffer into which to store incoming message
 */
void u2f_transport_init(u2f_service_t *service, uint8_t* message_buffer, uint16_t message_buffer_length) {
    service->transportReceiveBuffer = message_buffer;
c0d063fc:	6081      	str	r1, [r0, #8]
    service->transportReceiveBufferLength = message_buffer_length;
c0d063fe:	8182      	strh	r2, [r0, #12]
c0d06400:	2200      	movs	r2, #0

#warning TODO take into account the INIT during SEGMENTED message correctly (avoid erasing the first part of the apdu buffer when doing so)

// init
void u2f_transport_reset(u2f_service_t* service) {
    service->transportState = U2F_IDLE;
c0d06402:	7702      	strb	r2, [r0, #28]
    service->transportOffset = 0;
c0d06404:	8242      	strh	r2, [r0, #18]
    service->transportMedia = 0;
c0d06406:	7742      	strb	r2, [r0, #29]
    service->transportPacketIndex = 0;
c0d06408:	7582      	strb	r2, [r0, #22]
    // reset the receive buffer to allow for a new message to be received again (in case transmission of a CODE buffer the previous reply)
    service->transportBuffer = service->transportReceiveBuffer;
c0d0640a:	6181      	str	r1, [r0, #24]
 */
void u2f_transport_init(u2f_service_t *service, uint8_t* message_buffer, uint16_t message_buffer_length) {
    service->transportReceiveBuffer = message_buffer;
    service->transportReceiveBufferLength = message_buffer_length;
    u2f_transport_reset(service);
}
c0d0640c:	4770      	bx	lr
	...

c0d06410 <u2f_transport_sent>:

/**
 * Function called when the previously scheduled message to be sent on the media is effectively sent.
 * And a new message can be scheduled.
 */
void u2f_transport_sent(u2f_service_t* service, u2f_transport_media_t media) {
c0d06410:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d06412:	b083      	sub	sp, #12
c0d06414:	4604      	mov	r4, r0
    // if idle (possibly after an error), then only await for a transmission 
    if (service->transportState != U2F_SENDING_RESPONSE 
c0d06416:	7f20      	ldrb	r0, [r4, #28]
        && service->transportState != U2F_SENDING_ERROR) {
c0d06418:	1ec0      	subs	r0, r0, #3
c0d0641a:	b2c0      	uxtb	r0, r0
c0d0641c:	2801      	cmp	r0, #1
c0d0641e:	d854      	bhi.n	c0d064ca <u2f_transport_sent+0xba>
        // absorb the error, transport is erroneous but that won't hurt in the end.
        //THROW(INVALID_STATE);
        return;
    }
    if (service->transportOffset < service->transportLength) {
c0d06420:	8aa6      	ldrh	r6, [r4, #20]
c0d06422:	8a62      	ldrh	r2, [r4, #18]
c0d06424:	4296      	cmp	r6, r2
c0d06426:	d923      	bls.n	c0d06470 <u2f_transport_sent+0x60>
        uint16_t mtu = (media == U2F_MEDIA_USB) ? USB_SEGMENT_SIZE : BLE_SEGMENT_SIZE;
        uint16_t channelHeader =
            (media == U2F_MEDIA_USB ? 4 : 0);
c0d06428:	2304      	movs	r3, #4
c0d0642a:	2000      	movs	r0, #0
c0d0642c:	9102      	str	r1, [sp, #8]
c0d0642e:	2901      	cmp	r1, #1
c0d06430:	d000      	beq.n	c0d06434 <u2f_transport_sent+0x24>
c0d06432:	4603      	mov	r3, r0
c0d06434:	9001      	str	r0, [sp, #4]
        uint8_t headerSize =
            (service->transportPacketIndex == 0 ? (channelHeader + 3)
c0d06436:	7da0      	ldrb	r0, [r4, #22]
c0d06438:	2703      	movs	r7, #3
c0d0643a:	2501      	movs	r5, #1
c0d0643c:	2800      	cmp	r0, #0
c0d0643e:	d000      	beq.n	c0d06442 <u2f_transport_sent+0x32>
c0d06440:	462f      	mov	r7, r5
c0d06442:	431f      	orrs	r7, r3
                                                : (channelHeader + 1));
        uint16_t blockSize = ((service->transportLength - service->transportOffset) >
                                      (mtu - headerSize)
c0d06444:	2340      	movs	r3, #64	; 0x40
c0d06446:	1bdd      	subs	r5, r3, r7
        uint16_t channelHeader =
            (media == U2F_MEDIA_USB ? 4 : 0);
        uint8_t headerSize =
            (service->transportPacketIndex == 0 ? (channelHeader + 3)
                                                : (channelHeader + 1));
        uint16_t blockSize = ((service->transportLength - service->transportOffset) >
c0d06448:	1ab1      	subs	r1, r6, r2
c0d0644a:	42a9      	cmp	r1, r5
c0d0644c:	dc00      	bgt.n	c0d06450 <u2f_transport_sent+0x40>
c0d0644e:	460d      	mov	r5, r1
                                      (mtu - headerSize)
                                  ? (mtu - headerSize)
                                  : service->transportLength - service->transportOffset);
        uint16_t dataSize = blockSize + headerSize;
c0d06450:	19ee      	adds	r6, r5, r7
        uint16_t offset = 0;
        // Fragment
        if (media == U2F_MEDIA_USB) {
c0d06452:	9902      	ldr	r1, [sp, #8]
c0d06454:	2901      	cmp	r1, #1
c0d06456:	d106      	bne.n	c0d06466 <u2f_transport_sent+0x56>
            os_memmove(G_io_usb_ep_buffer, service->channel, 4);
c0d06458:	481d      	ldr	r0, [pc, #116]	; (c0d064d0 <u2f_transport_sent+0xc0>)
c0d0645a:	2204      	movs	r2, #4
c0d0645c:	4621      	mov	r1, r4
c0d0645e:	9201      	str	r2, [sp, #4]
c0d06460:	f7fe f8a7 	bl	c0d045b2 <os_memmove>
c0d06464:	7da0      	ldrb	r0, [r4, #22]
            offset += 4;
        }
        if (service->transportPacketIndex == 0) {
c0d06466:	2800      	cmp	r0, #0
c0d06468:	d00b      	beq.n	c0d06482 <u2f_transport_sent+0x72>
            G_io_usb_ep_buffer[offset++] = service->sendCmd;
            G_io_usb_ep_buffer[offset++] = (service->transportLength >> 8);
            G_io_usb_ep_buffer[offset++] = (service->transportLength & 0xff);
        } else {
            G_io_usb_ep_buffer[offset++] = (service->transportPacketIndex - 1);
c0d0646a:	30ff      	adds	r0, #255	; 0xff
c0d0646c:	9901      	ldr	r1, [sp, #4]
c0d0646e:	e015      	b.n	c0d0649c <u2f_transport_sent+0x8c>
c0d06470:	d12b      	bne.n	c0d064ca <u2f_transport_sent+0xba>
c0d06472:	2000      	movs	r0, #0

#warning TODO take into account the INIT during SEGMENTED message correctly (avoid erasing the first part of the apdu buffer when doing so)

// init
void u2f_transport_reset(u2f_service_t* service) {
    service->transportState = U2F_IDLE;
c0d06474:	7720      	strb	r0, [r4, #28]
    service->transportOffset = 0;
c0d06476:	8260      	strh	r0, [r4, #18]
    service->transportMedia = 0;
c0d06478:	7760      	strb	r0, [r4, #29]
    service->transportPacketIndex = 0;
c0d0647a:	75a0      	strb	r0, [r4, #22]
    // reset the receive buffer to allow for a new message to be received again (in case transmission of a CODE buffer the previous reply)
    service->transportBuffer = service->transportReceiveBuffer;
c0d0647c:	68a0      	ldr	r0, [r4, #8]
c0d0647e:	61a0      	str	r0, [r4, #24]
c0d06480:	e023      	b.n	c0d064ca <u2f_transport_sent+0xba>
        if (media == U2F_MEDIA_USB) {
            os_memmove(G_io_usb_ep_buffer, service->channel, 4);
            offset += 4;
        }
        if (service->transportPacketIndex == 0) {
            G_io_usb_ep_buffer[offset++] = service->sendCmd;
c0d06482:	2034      	movs	r0, #52	; 0x34
c0d06484:	5c20      	ldrb	r0, [r4, r0]
c0d06486:	9b01      	ldr	r3, [sp, #4]
c0d06488:	b299      	uxth	r1, r3
c0d0648a:	4a11      	ldr	r2, [pc, #68]	; (c0d064d0 <u2f_transport_sent+0xc0>)
c0d0648c:	5450      	strb	r0, [r2, r1]
c0d0648e:	2001      	movs	r0, #1
c0d06490:	4318      	orrs	r0, r3
            G_io_usb_ep_buffer[offset++] = (service->transportLength >> 8);
c0d06492:	b281      	uxth	r1, r0
c0d06494:	7d63      	ldrb	r3, [r4, #21]
c0d06496:	5453      	strb	r3, [r2, r1]
c0d06498:	1c41      	adds	r1, r0, #1
            G_io_usb_ep_buffer[offset++] = (service->transportLength & 0xff);
c0d0649a:	7d20      	ldrb	r0, [r4, #20]
c0d0649c:	b289      	uxth	r1, r1
c0d0649e:	4b0c      	ldr	r3, [pc, #48]	; (c0d064d0 <u2f_transport_sent+0xc0>)
c0d064a0:	5458      	strb	r0, [r3, r1]
        } else {
            G_io_usb_ep_buffer[offset++] = (service->transportPacketIndex - 1);
        }
        if (service->transportBuffer != NULL) {
c0d064a2:	69a1      	ldr	r1, [r4, #24]
c0d064a4:	2900      	cmp	r1, #0
c0d064a6:	d005      	beq.n	c0d064b4 <u2f_transport_sent+0xa4>
                                                : (channelHeader + 1));
        uint16_t blockSize = ((service->transportLength - service->transportOffset) >
                                      (mtu - headerSize)
                                  ? (mtu - headerSize)
                                  : service->transportLength - service->transportOffset);
        uint16_t dataSize = blockSize + headerSize;
c0d064a8:	b2aa      	uxth	r2, r5
            G_io_usb_ep_buffer[offset++] = (service->transportLength & 0xff);
        } else {
            G_io_usb_ep_buffer[offset++] = (service->transportPacketIndex - 1);
        }
        if (service->transportBuffer != NULL) {
            os_memmove(G_io_usb_ep_buffer + headerSize,
c0d064aa:	19d8      	adds	r0, r3, r7
                       service->transportBuffer + service->transportOffset, blockSize);
c0d064ac:	8a63      	ldrh	r3, [r4, #18]
c0d064ae:	18c9      	adds	r1, r1, r3
            G_io_usb_ep_buffer[offset++] = (service->transportLength & 0xff);
        } else {
            G_io_usb_ep_buffer[offset++] = (service->transportPacketIndex - 1);
        }
        if (service->transportBuffer != NULL) {
            os_memmove(G_io_usb_ep_buffer + headerSize,
c0d064b0:	f7fe f87f 	bl	c0d045b2 <os_memmove>
                       service->transportBuffer + service->transportOffset, blockSize);
        }
        service->transportOffset += blockSize;
c0d064b4:	8a60      	ldrh	r0, [r4, #18]
c0d064b6:	1940      	adds	r0, r0, r5
c0d064b8:	8260      	strh	r0, [r4, #18]
        service->transportPacketIndex++;
c0d064ba:	7da0      	ldrb	r0, [r4, #22]
c0d064bc:	1c40      	adds	r0, r0, #1
c0d064be:	75a0      	strb	r0, [r4, #22]
        u2f_io_send(G_io_usb_ep_buffer, dataSize, media);
c0d064c0:	b2b1      	uxth	r1, r6
c0d064c2:	4803      	ldr	r0, [pc, #12]	; (c0d064d0 <u2f_transport_sent+0xc0>)
c0d064c4:	9a02      	ldr	r2, [sp, #8]
c0d064c6:	f7ff ff63 	bl	c0d06390 <u2f_io_send>
    // the first call is meant to setup the first part for sending.
    // cannot be considered as the msg sent event.
    else if (service->transportOffset == service->transportLength) {
        u2f_transport_reset(service);
    }
}
c0d064ca:	b003      	add	sp, #12
c0d064cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d064ce:	46c0      	nop			; (mov r8, r8)
c0d064d0:	20002070 	.word	0x20002070

c0d064d4 <u2f_transport_received>:
/** 
 * Function that process every message received on a media.
 * Performs message concatenation when message is splitted.
 */
void u2f_transport_received(u2f_service_t *service, uint8_t *buffer,
                          uint16_t size, u2f_transport_media_t media) {
c0d064d4:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d064d6:	b089      	sub	sp, #36	; 0x24
c0d064d8:	461e      	mov	r6, r3
c0d064da:	4604      	mov	r4, r0
    uint16_t channelHeader = (media == U2F_MEDIA_USB ? 4 : 0);
    uint16_t xfer_len;
    service->media = media;
c0d064dc:	7126      	strb	r6, [r4, #4]
c0d064de:	7f20      	ldrb	r0, [r4, #28]
    // If busy, answer immediately, avoid reentry
    if ((service->transportState == U2F_PROCESSING_COMMAND) ||
c0d064e0:	1e83      	subs	r3, r0, #2
            // Message to short, abort
            u2f_transport_error(service, ERROR_PROP_MESSAGE_TOO_SHORT);
            goto error;
        }
        // check this is a command, cannot accept continuation without previous command
        if ((buffer[channelHeader+0]&U2F_MASK_COMMAND) == 0) {
c0d064e2:	2585      	movs	r5, #133	; 0x85
                          uint16_t size, u2f_transport_media_t media) {
    uint16_t channelHeader = (media == U2F_MEDIA_USB ? 4 : 0);
    uint16_t xfer_len;
    service->media = media;
    // If busy, answer immediately, avoid reentry
    if ((service->transportState == U2F_PROCESSING_COMMAND) ||
c0d064e4:	9508      	str	r5, [sp, #32]
c0d064e6:	2b02      	cmp	r3, #2
c0d064e8:	d210      	bcs.n	c0d0650c <u2f_transport_received+0x38>
/**
 * Reply an error at the U2F transport level (take into account the FIDO U2F framing)
 */
static void u2f_transport_error(u2f_service_t *service, char errorCode) {
    //u2f_transport_reset(service); // warning reset first to allow for U2F_io sent call to u2f_transport_sent internally on eventless platforms
    G_io_usb_ep_buffer[8] = errorCode;
c0d064ea:	48c3      	ldr	r0, [pc, #780]	; (c0d067f8 <u2f_transport_received+0x324>)
c0d064ec:	2106      	movs	r1, #6
c0d064ee:	7201      	strb	r1, [r0, #8]
c0d064f0:	2104      	movs	r1, #4

    // ensure the state is set to error sending to allow for special treatment in case reply is not read by the receiver
    service->transportState = U2F_SENDING_ERROR;
c0d064f2:	7721      	strb	r1, [r4, #28]
c0d064f4:	2100      	movs	r1, #0
    service->transportPacketIndex = 0;
c0d064f6:	75a1      	strb	r1, [r4, #22]
/**
 * Reply an error at the U2F transport level (take into account the FIDO U2F framing)
 */
static void u2f_transport_error(u2f_service_t *service, char errorCode) {
    //u2f_transport_reset(service); // warning reset first to allow for U2F_io sent call to u2f_transport_sent internally on eventless platforms
    G_io_usb_ep_buffer[8] = errorCode;
c0d064f8:	3008      	adds	r0, #8

    // ensure the state is set to error sending to allow for special treatment in case reply is not read by the receiver
    service->transportState = U2F_SENDING_ERROR;
    service->transportPacketIndex = 0;
    service->transportBuffer = G_io_usb_ep_buffer + 8;
c0d064fa:	61a0      	str	r0, [r4, #24]
    service->transportOffset = 0;
c0d064fc:	8261      	strh	r1, [r4, #18]
    service->transportLength = 1;
c0d064fe:	2001      	movs	r0, #1
c0d06500:	82a0      	strh	r0, [r4, #20]
c0d06502:	9908      	ldr	r1, [sp, #32]
c0d06504:	313a      	adds	r1, #58	; 0x3a
c0d06506:	2034      	movs	r0, #52	; 0x34
c0d06508:	5421      	strb	r1, [r4, r0]
c0d0650a:	e063      	b.n	c0d065d4 <u2f_transport_received+0x100>
c0d0650c:	2804      	cmp	r0, #4
c0d0650e:	d106      	bne.n	c0d0651e <u2f_transport_received+0x4a>
c0d06510:	2000      	movs	r0, #0

#warning TODO take into account the INIT during SEGMENTED message correctly (avoid erasing the first part of the apdu buffer when doing so)

// init
void u2f_transport_reset(u2f_service_t* service) {
    service->transportState = U2F_IDLE;
c0d06512:	7720      	strb	r0, [r4, #28]
    service->transportOffset = 0;
c0d06514:	8260      	strh	r0, [r4, #18]
    service->transportMedia = 0;
c0d06516:	7760      	strb	r0, [r4, #29]
    service->transportPacketIndex = 0;
c0d06518:	75a0      	strb	r0, [r4, #22]
    // reset the receive buffer to allow for a new message to be received again (in case transmission of a CODE buffer the previous reply)
    service->transportBuffer = service->transportReceiveBuffer;
c0d0651a:	68a0      	ldr	r0, [r4, #8]
c0d0651c:	61a0      	str	r0, [r4, #24]
c0d0651e:	9107      	str	r1, [sp, #28]
    // SENDING_ERROR is accepted, and triggers a reset => means the host hasn't consumed the error.
    if (service->transportState == U2F_SENDING_ERROR) {
        u2f_transport_reset(service);
    }

    if (size < (1 + channelHeader)) {
c0d06520:	2104      	movs	r1, #4
c0d06522:	2000      	movs	r0, #0
c0d06524:	2e01      	cmp	r6, #1
c0d06526:	d000      	beq.n	c0d0652a <u2f_transport_received+0x56>
c0d06528:	4601      	mov	r1, r0
c0d0652a:	2301      	movs	r3, #1
c0d0652c:	460d      	mov	r5, r1
c0d0652e:	431d      	orrs	r5, r3
c0d06530:	42aa      	cmp	r2, r5
c0d06532:	d341      	bcc.n	c0d065b8 <u2f_transport_received+0xe4>
c0d06534:	9106      	str	r1, [sp, #24]
        // Message to short, abort
        u2f_transport_error(service, ERROR_PROP_MESSAGE_TOO_SHORT);
        goto error;
    }
    if (media == U2F_MEDIA_USB) {
c0d06536:	2e01      	cmp	r6, #1
c0d06538:	9205      	str	r2, [sp, #20]
c0d0653a:	d109      	bne.n	c0d06550 <u2f_transport_received+0x7c>
        // hold the current channel value to reply to, for example, INIT commands within flow of segments.
        os_memmove(service->channel, buffer, 4);
c0d0653c:	2204      	movs	r2, #4
c0d0653e:	4620      	mov	r0, r4
c0d06540:	9907      	ldr	r1, [sp, #28]
c0d06542:	9604      	str	r6, [sp, #16]
c0d06544:	461f      	mov	r7, r3
c0d06546:	f7fe f834 	bl	c0d045b2 <os_memmove>
c0d0654a:	9a05      	ldr	r2, [sp, #20]
c0d0654c:	463b      	mov	r3, r7
c0d0654e:	9e04      	ldr	r6, [sp, #16]
    }

    // no previous chunk processed for the current message
    if (service->transportOffset == 0
c0d06550:	8a60      	ldrh	r0, [r4, #18]
c0d06552:	49aa      	ldr	r1, [pc, #680]	; (c0d067fc <u2f_transport_received+0x328>)
        // on USB we could get an INIT within a flow of segments.
        || (media == U2F_MEDIA_USB && os_memcmp(service->transportChannel, service->channel, 4) != 0) ) {
c0d06554:	2800      	cmp	r0, #0
c0d06556:	9103      	str	r1, [sp, #12]
c0d06558:	d00e      	beq.n	c0d06578 <u2f_transport_received+0xa4>
c0d0655a:	2e01      	cmp	r6, #1
c0d0655c:	d127      	bne.n	c0d065ae <u2f_transport_received+0xda>
c0d0655e:	4620      	mov	r0, r4
c0d06560:	300e      	adds	r0, #14
c0d06562:	2204      	movs	r2, #4
c0d06564:	4621      	mov	r1, r4
c0d06566:	9604      	str	r6, [sp, #16]
c0d06568:	461f      	mov	r7, r3
c0d0656a:	f7fe f8bf 	bl	c0d046ec <os_memcmp>
c0d0656e:	9a05      	ldr	r2, [sp, #20]
c0d06570:	463b      	mov	r3, r7
c0d06572:	9e04      	ldr	r6, [sp, #16]
        // hold the current channel value to reply to, for example, INIT commands within flow of segments.
        os_memmove(service->channel, buffer, 4);
    }

    // no previous chunk processed for the current message
    if (service->transportOffset == 0
c0d06574:	2800      	cmp	r0, #0
c0d06576:	d01a      	beq.n	c0d065ae <u2f_transport_received+0xda>
        // on USB we could get an INIT within a flow of segments.
        || (media == U2F_MEDIA_USB && os_memcmp(service->transportChannel, service->channel, 4) != 0) ) {
        if (size < (channelHeader + 3)) {
c0d06578:	2703      	movs	r7, #3
c0d0657a:	9906      	ldr	r1, [sp, #24]
c0d0657c:	4608      	mov	r0, r1
c0d0657e:	4338      	orrs	r0, r7
c0d06580:	4282      	cmp	r2, r0
c0d06582:	d319      	bcc.n	c0d065b8 <u2f_transport_received+0xe4>
c0d06584:	9704      	str	r7, [sp, #16]
c0d06586:	9807      	ldr	r0, [sp, #28]
            // Message to short, abort
            u2f_transport_error(service, ERROR_PROP_MESSAGE_TOO_SHORT);
            goto error;
        }
        // check this is a command, cannot accept continuation without previous command
        if ((buffer[channelHeader+0]&U2F_MASK_COMMAND) == 0) {
c0d06588:	1847      	adds	r7, r0, r1
c0d0658a:	9702      	str	r7, [sp, #8]
c0d0658c:	5640      	ldrsb	r0, [r0, r1]
c0d0658e:	9908      	ldr	r1, [sp, #32]
c0d06590:	317a      	adds	r1, #122	; 0x7a
c0d06592:	b249      	sxtb	r1, r1
c0d06594:	4288      	cmp	r0, r1
c0d06596:	dd3c      	ble.n	c0d06612 <u2f_transport_received+0x13e>
c0d06598:	4897      	ldr	r0, [pc, #604]	; (c0d067f8 <u2f_transport_received+0x324>)
c0d0659a:	2104      	movs	r1, #4
c0d0659c:	7201      	strb	r1, [r0, #8]
c0d0659e:	7721      	strb	r1, [r4, #28]
c0d065a0:	2100      	movs	r1, #0
c0d065a2:	75a1      	strb	r1, [r4, #22]
c0d065a4:	3008      	adds	r0, #8
c0d065a6:	61a0      	str	r0, [r4, #24]
c0d065a8:	8261      	strh	r1, [r4, #18]
c0d065aa:	82a3      	strh	r3, [r4, #20]
c0d065ac:	e7a9      	b.n	c0d06502 <u2f_transport_received+0x2e>
c0d065ae:	2002      	movs	r0, #2
        }
    } else {


        // Continuation
        if (size < (channelHeader + 2)) {
c0d065b0:	9906      	ldr	r1, [sp, #24]
c0d065b2:	4308      	orrs	r0, r1
c0d065b4:	4282      	cmp	r2, r0
c0d065b6:	d213      	bcs.n	c0d065e0 <u2f_transport_received+0x10c>
c0d065b8:	488f      	ldr	r0, [pc, #572]	; (c0d067f8 <u2f_transport_received+0x324>)
c0d065ba:	9a08      	ldr	r2, [sp, #32]
c0d065bc:	7202      	strb	r2, [r0, #8]
c0d065be:	2104      	movs	r1, #4
c0d065c0:	7721      	strb	r1, [r4, #28]
c0d065c2:	2100      	movs	r1, #0
c0d065c4:	75a1      	strb	r1, [r4, #22]
c0d065c6:	3008      	adds	r0, #8
c0d065c8:	61a0      	str	r0, [r4, #24]
c0d065ca:	8261      	strh	r1, [r4, #18]
c0d065cc:	82a3      	strh	r3, [r4, #20]
c0d065ce:	323a      	adds	r2, #58	; 0x3a
c0d065d0:	2034      	movs	r0, #52	; 0x34
c0d065d2:	5422      	strb	r2, [r4, r0]
c0d065d4:	7921      	ldrb	r1, [r4, #4]
c0d065d6:	4620      	mov	r0, r4
c0d065d8:	f7ff ff1a 	bl	c0d06410 <u2f_transport_sent>
        service->seqTimeout = 0;
        service->transportState = U2F_HANDLE_SEGMENTED;
    }
error:
    return;
}
c0d065dc:	b009      	add	sp, #36	; 0x24
c0d065de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (size < (channelHeader + 2)) {
            // Message to short, abort
            u2f_transport_error(service, ERROR_PROP_MESSAGE_TOO_SHORT);
            goto error;
        }
        if (media != service->transportMedia) {
c0d065e0:	7f60      	ldrb	r0, [r4, #29]
c0d065e2:	42b0      	cmp	r0, r6
c0d065e4:	d148      	bne.n	c0d06678 <u2f_transport_received+0x1a4>
            // Mixed medias
            u2f_transport_error(service, ERROR_PROP_MEDIA_MIXED);
            goto error;
        }
        if (service->transportState != U2F_HANDLE_SEGMENTED) {
c0d065e6:	7f20      	ldrb	r0, [r4, #28]
c0d065e8:	2801      	cmp	r0, #1
c0d065ea:	d152      	bne.n	c0d06692 <u2f_transport_received+0x1be>
            } else {
                u2f_transport_error(service, ERROR_INVALID_SEQ);
                goto error;
            }
        }
        if (media == U2F_MEDIA_USB) {
c0d065ec:	2e01      	cmp	r6, #1
c0d065ee:	d175      	bne.n	c0d066dc <u2f_transport_received+0x208>
            // Check the channel
            if (os_memcmp(buffer, service->channel, 4) != 0) {
c0d065f0:	2204      	movs	r2, #4
c0d065f2:	9807      	ldr	r0, [sp, #28]
c0d065f4:	4621      	mov	r1, r4
c0d065f6:	9202      	str	r2, [sp, #8]
c0d065f8:	9604      	str	r6, [sp, #16]
c0d065fa:	461f      	mov	r7, r3
c0d065fc:	f7fe f876 	bl	c0d046ec <os_memcmp>
c0d06600:	463b      	mov	r3, r7
c0d06602:	9e04      	ldr	r6, [sp, #16]
c0d06604:	2800      	cmp	r0, #0
c0d06606:	d069      	beq.n	c0d066dc <u2f_transport_received+0x208>
/**
 * Reply an error at the U2F transport level (take into account the FIDO U2F framing)
 */
static void u2f_transport_error(u2f_service_t *service, char errorCode) {
    //u2f_transport_reset(service); // warning reset first to allow for U2F_io sent call to u2f_transport_sent internally on eventless platforms
    G_io_usb_ep_buffer[8] = errorCode;
c0d06608:	487b      	ldr	r0, [pc, #492]	; (c0d067f8 <u2f_transport_received+0x324>)
c0d0660a:	2106      	movs	r1, #6
c0d0660c:	7201      	strb	r1, [r0, #8]

    // ensure the state is set to error sending to allow for special treatment in case reply is not read by the receiver
    service->transportState = U2F_SENDING_ERROR;
c0d0660e:	9902      	ldr	r1, [sp, #8]
c0d06610:	e7c5      	b.n	c0d0659e <u2f_transport_received+0xca>
c0d06612:	9301      	str	r3, [sp, #4]
            goto error;
        }

        // If waiting for a continuation on a different channel, reply BUSY
        // immediately
        if (media == U2F_MEDIA_USB) {
c0d06614:	2e01      	cmp	r6, #1
c0d06616:	9f04      	ldr	r7, [sp, #16]
c0d06618:	d112      	bne.n	c0d06640 <u2f_transport_received+0x16c>
            if ((service->transportState == U2F_HANDLE_SEGMENTED) &&
c0d0661a:	7f20      	ldrb	r0, [r4, #28]
c0d0661c:	2801      	cmp	r0, #1
c0d0661e:	d11b      	bne.n	c0d06658 <u2f_transport_received+0x184>
                (os_memcmp(service->channel, service->transportChannel, 4) !=
c0d06620:	4621      	mov	r1, r4
c0d06622:	310e      	adds	r1, #14
c0d06624:	2204      	movs	r2, #4
c0d06626:	4620      	mov	r0, r4
c0d06628:	f7fe f860 	bl	c0d046ec <os_memcmp>
                 0) &&
c0d0662c:	2800      	cmp	r0, #0
c0d0662e:	d007      	beq.n	c0d06640 <u2f_transport_received+0x16c>
                (buffer[channelHeader] != U2F_CMD_INIT)) {
c0d06630:	9802      	ldr	r0, [sp, #8]
c0d06632:	7800      	ldrb	r0, [r0, #0]
c0d06634:	9908      	ldr	r1, [sp, #32]
c0d06636:	1c49      	adds	r1, r1, #1
c0d06638:	b2c9      	uxtb	r1, r1
        }

        // If waiting for a continuation on a different channel, reply BUSY
        // immediately
        if (media == U2F_MEDIA_USB) {
            if ((service->transportState == U2F_HANDLE_SEGMENTED) &&
c0d0663a:	4288      	cmp	r0, r1
c0d0663c:	d000      	beq.n	c0d06640 <u2f_transport_received+0x16c>
c0d0663e:	e0c1      	b.n	c0d067c4 <u2f_transport_received+0x2f0>
                goto error;
            }
        }
        // If a command was already sent, and we are not processing a INIT
        // command, abort
        if ((service->transportState == U2F_HANDLE_SEGMENTED) &&
c0d06640:	7f20      	ldrb	r0, [r4, #28]
c0d06642:	2801      	cmp	r0, #1
c0d06644:	d108      	bne.n	c0d06658 <u2f_transport_received+0x184>
            !((media == U2F_MEDIA_USB) &&
c0d06646:	2e01      	cmp	r6, #1
c0d06648:	d167      	bne.n	c0d0671a <u2f_transport_received+0x246>
              (buffer[channelHeader] == U2F_CMD_INIT))) {
c0d0664a:	9802      	ldr	r0, [sp, #8]
c0d0664c:	7800      	ldrb	r0, [r0, #0]
c0d0664e:	9908      	ldr	r1, [sp, #32]
c0d06650:	1c49      	adds	r1, r1, #1
c0d06652:	b2c9      	uxtb	r1, r1
                goto error;
            }
        }
        // If a command was already sent, and we are not processing a INIT
        // command, abort
        if ((service->transportState == U2F_HANDLE_SEGMENTED) &&
c0d06654:	4288      	cmp	r0, r1
c0d06656:	d160      	bne.n	c0d0671a <u2f_transport_received+0x246>
            u2f_transport_error(service, ERROR_INVALID_SEQ);
            goto error;
        }
        // Check the length
        uint16_t commandLength =
            (buffer[channelHeader + 1] << 8) | (buffer[channelHeader + 2]);
c0d06658:	2002      	movs	r0, #2
c0d0665a:	9906      	ldr	r1, [sp, #24]
c0d0665c:	4308      	orrs	r0, r1
c0d0665e:	9907      	ldr	r1, [sp, #28]
c0d06660:	5c08      	ldrb	r0, [r1, r0]
c0d06662:	5d49      	ldrb	r1, [r1, r5]
c0d06664:	020d      	lsls	r5, r1, #8
c0d06666:	4305      	orrs	r5, r0
        if (commandLength > (service->transportReceiveBufferLength - 3)) {
c0d06668:	89a0      	ldrh	r0, [r4, #12]
c0d0666a:	1ec0      	subs	r0, r0, #3
c0d0666c:	4285      	cmp	r5, r0
c0d0666e:	dd1b      	ble.n	c0d066a8 <u2f_transport_received+0x1d4>
/**
 * Reply an error at the U2F transport level (take into account the FIDO U2F framing)
 */
static void u2f_transport_error(u2f_service_t *service, char errorCode) {
    //u2f_transport_reset(service); // warning reset first to allow for U2F_io sent call to u2f_transport_sent internally on eventless platforms
    G_io_usb_ep_buffer[8] = errorCode;
c0d06670:	4861      	ldr	r0, [pc, #388]	; (c0d067f8 <u2f_transport_received+0x324>)
c0d06672:	7207      	strb	r7, [r0, #8]
c0d06674:	2104      	movs	r1, #4
c0d06676:	e053      	b.n	c0d06720 <u2f_transport_received+0x24c>
c0d06678:	9a08      	ldr	r2, [sp, #32]
c0d0667a:	4610      	mov	r0, r2
c0d0667c:	3008      	adds	r0, #8
c0d0667e:	495e      	ldr	r1, [pc, #376]	; (c0d067f8 <u2f_transport_received+0x324>)
c0d06680:	7208      	strb	r0, [r1, #8]
c0d06682:	2004      	movs	r0, #4

    // ensure the state is set to error sending to allow for special treatment in case reply is not read by the receiver
    service->transportState = U2F_SENDING_ERROR;
c0d06684:	7720      	strb	r0, [r4, #28]
c0d06686:	2000      	movs	r0, #0
    service->transportPacketIndex = 0;
c0d06688:	75a0      	strb	r0, [r4, #22]
/**
 * Reply an error at the U2F transport level (take into account the FIDO U2F framing)
 */
static void u2f_transport_error(u2f_service_t *service, char errorCode) {
    //u2f_transport_reset(service); // warning reset first to allow for U2F_io sent call to u2f_transport_sent internally on eventless platforms
    G_io_usb_ep_buffer[8] = errorCode;
c0d0668a:	3108      	adds	r1, #8

    // ensure the state is set to error sending to allow for special treatment in case reply is not read by the receiver
    service->transportState = U2F_SENDING_ERROR;
    service->transportPacketIndex = 0;
    service->transportBuffer = G_io_usb_ep_buffer + 8;
c0d0668c:	61a1      	str	r1, [r4, #24]
    service->transportOffset = 0;
c0d0668e:	8260      	strh	r0, [r4, #18]
c0d06690:	e79c      	b.n	c0d065cc <u2f_transport_received+0xf8>
            goto error;
        }
        if (service->transportState != U2F_HANDLE_SEGMENTED) {
            // Unexpected continuation at this stage, abort
            // TODO : review the behavior is HID only
            if (media == U2F_MEDIA_USB) {
c0d06692:	2e01      	cmp	r6, #1
c0d06694:	d000      	beq.n	c0d06698 <u2f_transport_received+0x1c4>
c0d06696:	e77f      	b.n	c0d06598 <u2f_transport_received+0xc4>
c0d06698:	2000      	movs	r0, #0

#warning TODO take into account the INIT during SEGMENTED message correctly (avoid erasing the first part of the apdu buffer when doing so)

// init
void u2f_transport_reset(u2f_service_t* service) {
    service->transportState = U2F_IDLE;
c0d0669a:	7720      	strb	r0, [r4, #28]
    service->transportOffset = 0;
c0d0669c:	8260      	strh	r0, [r4, #18]
    service->transportMedia = 0;
c0d0669e:	7760      	strb	r0, [r4, #29]
    service->transportPacketIndex = 0;
c0d066a0:	75a0      	strb	r0, [r4, #22]
    // reset the receive buffer to allow for a new message to be received again (in case transmission of a CODE buffer the previous reply)
    service->transportBuffer = service->transportReceiveBuffer;
c0d066a2:	68a0      	ldr	r0, [r4, #8]
c0d066a4:	61a0      	str	r0, [r4, #24]
c0d066a6:	e799      	b.n	c0d065dc <u2f_transport_received+0x108>
            // Overflow in message size, abort
            u2f_transport_error(service, ERROR_INVALID_LEN);
            goto error;
        }
        // Check if the command is supported
        switch (buffer[channelHeader]) {
c0d066a8:	9802      	ldr	r0, [sp, #8]
c0d066aa:	7800      	ldrb	r0, [r0, #0]
c0d066ac:	2881      	cmp	r0, #129	; 0x81
c0d066ae:	9a01      	ldr	r2, [sp, #4]
c0d066b0:	d003      	beq.n	c0d066ba <u2f_transport_received+0x1e6>
c0d066b2:	2886      	cmp	r0, #134	; 0x86
c0d066b4:	d03c      	beq.n	c0d06730 <u2f_transport_received+0x25c>
c0d066b6:	2883      	cmp	r0, #131	; 0x83
c0d066b8:	d173      	bne.n	c0d067a2 <u2f_transport_received+0x2ce>
        case U2F_CMD_PING:
        case U2F_CMD_MSG:
            if (media == U2F_MEDIA_USB) {
c0d066ba:	2e01      	cmp	r6, #1
c0d066bc:	d143      	bne.n	c0d06746 <u2f_transport_received+0x272>
error:
    return;
}

bool u2f_is_channel_broadcast(uint8_t *channel) {
    return (os_memcmp(channel, BROADCAST_CHANNEL, 4) == 0);
c0d066be:	4950      	ldr	r1, [pc, #320]	; (c0d06800 <u2f_transport_received+0x32c>)
c0d066c0:	4479      	add	r1, pc
c0d066c2:	2704      	movs	r7, #4
c0d066c4:	4620      	mov	r0, r4
c0d066c6:	463a      	mov	r2, r7
c0d066c8:	f7fe f810 	bl	c0d046ec <os_memcmp>
        // Check if the command is supported
        switch (buffer[channelHeader]) {
        case U2F_CMD_PING:
        case U2F_CMD_MSG:
            if (media == U2F_MEDIA_USB) {
                if (u2f_is_channel_broadcast(service->channel) ||
c0d066cc:	2800      	cmp	r0, #0
c0d066ce:	d100      	bne.n	c0d066d2 <u2f_transport_received+0x1fe>
c0d066d0:	e08c      	b.n	c0d067ec <u2f_transport_received+0x318>
bool u2f_is_channel_broadcast(uint8_t *channel) {
    return (os_memcmp(channel, BROADCAST_CHANNEL, 4) == 0);
}

bool u2f_is_channel_forbidden(uint8_t *channel) {
    return (os_memcmp(channel, FORBIDDEN_CHANNEL, 4) == 0);
c0d066d2:	494c      	ldr	r1, [pc, #304]	; (c0d06804 <u2f_transport_received+0x330>)
c0d066d4:	4479      	add	r1, pc
c0d066d6:	2204      	movs	r2, #4
c0d066d8:	4620      	mov	r0, r4
c0d066da:	e030      	b.n	c0d0673e <u2f_transport_received+0x26a>
c0d066dc:	9806      	ldr	r0, [sp, #24]
c0d066de:	9a07      	ldr	r2, [sp, #28]
                u2f_transport_error(service, ERROR_CHANNEL_BUSY);
                goto error;
            }
        }
        // also discriminate invalid command sent instead of a continuation
        if (buffer[channelHeader] != service->transportPacketIndex) {
c0d066e0:	1811      	adds	r1, r2, r0
c0d066e2:	5c10      	ldrb	r0, [r2, r0]
c0d066e4:	7da2      	ldrb	r2, [r4, #22]
c0d066e6:	4290      	cmp	r0, r2
c0d066e8:	d000      	beq.n	c0d066ec <u2f_transport_received+0x218>
c0d066ea:	e755      	b.n	c0d06598 <u2f_transport_received+0xc4>
c0d066ec:	9301      	str	r3, [sp, #4]
            // Bad continuation packet, abort
            u2f_transport_error(service, ERROR_INVALID_SEQ);
            goto error;
        }
        xfer_len = MIN(size - (channelHeader + 1), service->transportLength - service->transportOffset);
c0d066ee:	9805      	ldr	r0, [sp, #20]
c0d066f0:	1b45      	subs	r5, r0, r5
c0d066f2:	8a60      	ldrh	r0, [r4, #18]
c0d066f4:	8aa2      	ldrh	r2, [r4, #20]
c0d066f6:	1a12      	subs	r2, r2, r0
c0d066f8:	4295      	cmp	r5, r2
c0d066fa:	db00      	blt.n	c0d066fe <u2f_transport_received+0x22a>
c0d066fc:	4615      	mov	r5, r2
c0d066fe:	9a03      	ldr	r2, [sp, #12]
        os_memmove(service->transportBuffer + service->transportOffset, buffer + channelHeader + 1, xfer_len);
c0d06700:	402a      	ands	r2, r5
c0d06702:	69a3      	ldr	r3, [r4, #24]
c0d06704:	1818      	adds	r0, r3, r0
c0d06706:	1c49      	adds	r1, r1, #1
c0d06708:	f7fd ff53 	bl	c0d045b2 <os_memmove>
        service->transportOffset += xfer_len;
c0d0670c:	8a60      	ldrh	r0, [r4, #18]
c0d0670e:	1940      	adds	r0, r0, r5
c0d06710:	8260      	strh	r0, [r4, #18]
        service->transportPacketIndex++;
c0d06712:	7da0      	ldrb	r0, [r4, #22]
c0d06714:	1c40      	adds	r0, r0, #1
c0d06716:	75a0      	strb	r0, [r4, #22]
c0d06718:	e02e      	b.n	c0d06778 <u2f_transport_received+0x2a4>
/**
 * Reply an error at the U2F transport level (take into account the FIDO U2F framing)
 */
static void u2f_transport_error(u2f_service_t *service, char errorCode) {
    //u2f_transport_reset(service); // warning reset first to allow for U2F_io sent call to u2f_transport_sent internally on eventless platforms
    G_io_usb_ep_buffer[8] = errorCode;
c0d0671a:	4837      	ldr	r0, [pc, #220]	; (c0d067f8 <u2f_transport_received+0x324>)
c0d0671c:	2104      	movs	r1, #4
c0d0671e:	7201      	strb	r1, [r0, #8]
c0d06720:	7721      	strb	r1, [r4, #28]
c0d06722:	2100      	movs	r1, #0
c0d06724:	75a1      	strb	r1, [r4, #22]
c0d06726:	3008      	adds	r0, #8
c0d06728:	61a0      	str	r0, [r4, #24]
c0d0672a:	8261      	strh	r1, [r4, #18]
c0d0672c:	9801      	ldr	r0, [sp, #4]
c0d0672e:	e6e7      	b.n	c0d06500 <u2f_transport_received+0x2c>
                }
            }
            // no channel for BLE
            break;
        case U2F_CMD_INIT:
            if (media != U2F_MEDIA_USB) {
c0d06730:	2e01      	cmp	r6, #1
c0d06732:	d136      	bne.n	c0d067a2 <u2f_transport_received+0x2ce>
bool u2f_is_channel_broadcast(uint8_t *channel) {
    return (os_memcmp(channel, BROADCAST_CHANNEL, 4) == 0);
}

bool u2f_is_channel_forbidden(uint8_t *channel) {
    return (os_memcmp(channel, FORBIDDEN_CHANNEL, 4) == 0);
c0d06734:	4934      	ldr	r1, [pc, #208]	; (c0d06808 <u2f_transport_received+0x334>)
c0d06736:	4479      	add	r1, pc
c0d06738:	2704      	movs	r7, #4
c0d0673a:	4620      	mov	r0, r4
c0d0673c:	463a      	mov	r2, r7
c0d0673e:	f7fd ffd5 	bl	c0d046ec <os_memcmp>
c0d06742:	2800      	cmp	r0, #0
c0d06744:	d052      	beq.n	c0d067ec <u2f_transport_received+0x318>
        }

        // Ok, initialize the buffer
        //if (buffer[channelHeader] != U2F_CMD_INIT) 
        {
            xfer_len = MIN(size - (channelHeader), U2F_COMMAND_HEADER_SIZE+commandLength);
c0d06746:	9805      	ldr	r0, [sp, #20]
c0d06748:	9906      	ldr	r1, [sp, #24]
c0d0674a:	1a47      	subs	r7, r0, r1
c0d0674c:	1ced      	adds	r5, r5, #3
c0d0674e:	42af      	cmp	r7, r5
c0d06750:	9903      	ldr	r1, [sp, #12]
c0d06752:	db00      	blt.n	c0d06756 <u2f_transport_received+0x282>
c0d06754:	462f      	mov	r7, r5
            os_memmove(service->transportBuffer, buffer + channelHeader, xfer_len);
c0d06756:	4039      	ands	r1, r7
c0d06758:	69a0      	ldr	r0, [r4, #24]
c0d0675a:	460a      	mov	r2, r1
c0d0675c:	9902      	ldr	r1, [sp, #8]
c0d0675e:	f7fd ff28 	bl	c0d045b2 <os_memmove>
            service->transportOffset = xfer_len;
c0d06762:	8267      	strh	r7, [r4, #18]
            service->transportLength = U2F_COMMAND_HEADER_SIZE+commandLength;
c0d06764:	82a5      	strh	r5, [r4, #20]
            service->transportMedia = media;
c0d06766:	7766      	strb	r6, [r4, #29]
            // initialize the response
            service->transportPacketIndex = 0;
c0d06768:	2000      	movs	r0, #0
c0d0676a:	75a0      	strb	r0, [r4, #22]
            os_memmove(service->transportChannel, service->channel, 4);
c0d0676c:	4620      	mov	r0, r4
c0d0676e:	300e      	adds	r0, #14
c0d06770:	2204      	movs	r2, #4
c0d06772:	4621      	mov	r1, r4
c0d06774:	f7fd ff1d 	bl	c0d045b2 <os_memmove>
c0d06778:	8a60      	ldrh	r0, [r4, #18]
        os_memmove(service->transportBuffer + service->transportOffset, buffer + channelHeader + 1, xfer_len);
        service->transportOffset += xfer_len;
        service->transportPacketIndex++;
    }
    // See if we can process the command
    if ((media != U2F_MEDIA_USB) &&
c0d0677a:	2e01      	cmp	r6, #1
c0d0677c:	9b01      	ldr	r3, [sp, #4]
c0d0677e:	d101      	bne.n	c0d06784 <u2f_transport_received+0x2b0>
c0d06780:	8aa1      	ldrh	r1, [r4, #20]
c0d06782:	e008      	b.n	c0d06796 <u2f_transport_received+0x2c2>
        (service->transportOffset >
         (service->transportLength + U2F_COMMAND_HEADER_SIZE))) {
c0d06784:	8aa1      	ldrh	r1, [r4, #20]
c0d06786:	1cca      	adds	r2, r1, #3
        os_memmove(service->transportBuffer + service->transportOffset, buffer + channelHeader + 1, xfer_len);
        service->transportOffset += xfer_len;
        service->transportPacketIndex++;
    }
    // See if we can process the command
    if ((media != U2F_MEDIA_USB) &&
c0d06788:	4290      	cmp	r0, r2
c0d0678a:	d904      	bls.n	c0d06796 <u2f_transport_received+0x2c2>
/**
 * Reply an error at the U2F transport level (take into account the FIDO U2F framing)
 */
static void u2f_transport_error(u2f_service_t *service, char errorCode) {
    //u2f_transport_reset(service); // warning reset first to allow for U2F_io sent call to u2f_transport_sent internally on eventless platforms
    G_io_usb_ep_buffer[8] = errorCode;
c0d0678c:	481a      	ldr	r0, [pc, #104]	; (c0d067f8 <u2f_transport_received+0x324>)
c0d0678e:	2103      	movs	r1, #3
c0d06790:	7201      	strb	r1, [r0, #8]
c0d06792:	2104      	movs	r1, #4
c0d06794:	e703      	b.n	c0d0659e <u2f_transport_received+0xca>
        (service->transportOffset >
         (service->transportLength + U2F_COMMAND_HEADER_SIZE))) {
        // Overflow, abort
        u2f_transport_error(service, ERROR_INVALID_LEN);
        goto error;
    } else if (service->transportOffset >= service->transportLength) {
c0d06796:	4288      	cmp	r0, r1
c0d06798:	d20e      	bcs.n	c0d067b8 <u2f_transport_received+0x2e4>
c0d0679a:	2000      	movs	r0, #0
        service->transportState = U2F_PROCESSING_COMMAND;
        // internal notification of a complete message received
        u2f_message_complete(service);
    } else {
        // new segment received, reset the timeout for the current piece
        service->seqTimeout = 0;
c0d0679c:	62a0      	str	r0, [r4, #40]	; 0x28
        service->transportState = U2F_HANDLE_SEGMENTED;
c0d0679e:	7723      	strb	r3, [r4, #28]
c0d067a0:	e71c      	b.n	c0d065dc <u2f_transport_received+0x108>
c0d067a2:	4815      	ldr	r0, [pc, #84]	; (c0d067f8 <u2f_transport_received+0x324>)
c0d067a4:	7202      	strb	r2, [r0, #8]
c0d067a6:	2104      	movs	r1, #4
c0d067a8:	7721      	strb	r1, [r4, #28]
c0d067aa:	2100      	movs	r1, #0
c0d067ac:	75a1      	strb	r1, [r4, #22]
c0d067ae:	3008      	adds	r0, #8
c0d067b0:	61a0      	str	r0, [r4, #24]
c0d067b2:	8261      	strh	r1, [r4, #18]
c0d067b4:	82a2      	strh	r2, [r4, #20]
c0d067b6:	e6a4      	b.n	c0d06502 <u2f_transport_received+0x2e>
        // Overflow, abort
        u2f_transport_error(service, ERROR_INVALID_LEN);
        goto error;
    } else if (service->transportOffset >= service->transportLength) {
        // switch before the handler gets the opportunity to change it again
        service->transportState = U2F_PROCESSING_COMMAND;
c0d067b8:	2002      	movs	r0, #2
c0d067ba:	7720      	strb	r0, [r4, #28]
        // internal notification of a complete message received
        u2f_message_complete(service);
c0d067bc:	4620      	mov	r0, r4
c0d067be:	f7ff fdc9 	bl	c0d06354 <u2f_message_complete>
c0d067c2:	e70b      	b.n	c0d065dc <u2f_transport_received+0x108>
                // special error case, we reply but don't change the current state of the transport (ongoing message for example)
                //u2f_transport_error_no_reset(service, ERROR_CHANNEL_BUSY);
                uint16_t offset = 0;
                // Fragment
                if (media == U2F_MEDIA_USB) {
                    os_memmove(G_io_usb_ep_buffer, service->channel, 4);
c0d067c4:	4d0c      	ldr	r5, [pc, #48]	; (c0d067f8 <u2f_transport_received+0x324>)
c0d067c6:	2204      	movs	r2, #4
c0d067c8:	4628      	mov	r0, r5
c0d067ca:	4621      	mov	r1, r4
c0d067cc:	f7fd fef1 	bl	c0d045b2 <os_memmove>
c0d067d0:	9808      	ldr	r0, [sp, #32]
                    offset += 4;
                }
                G_io_usb_ep_buffer[offset++] = U2F_STATUS_ERROR;
c0d067d2:	303a      	adds	r0, #58	; 0x3a
c0d067d4:	7128      	strb	r0, [r5, #4]
                G_io_usb_ep_buffer[offset++] = 0;
c0d067d6:	2000      	movs	r0, #0
c0d067d8:	7168      	strb	r0, [r5, #5]
c0d067da:	9a01      	ldr	r2, [sp, #4]
                G_io_usb_ep_buffer[offset++] = 1;
c0d067dc:	71aa      	strb	r2, [r5, #6]
c0d067de:	2006      	movs	r0, #6
                G_io_usb_ep_buffer[offset++] = ERROR_CHANNEL_BUSY;
c0d067e0:	71e8      	strb	r0, [r5, #7]
                u2f_io_send(G_io_usb_ep_buffer, offset, media);
c0d067e2:	2108      	movs	r1, #8
c0d067e4:	4628      	mov	r0, r5
c0d067e6:	f7ff fdd3 	bl	c0d06390 <u2f_io_send>
c0d067ea:	e6f7      	b.n	c0d065dc <u2f_transport_received+0x108>
c0d067ec:	4802      	ldr	r0, [pc, #8]	; (c0d067f8 <u2f_transport_received+0x324>)
c0d067ee:	210b      	movs	r1, #11
c0d067f0:	7201      	strb	r1, [r0, #8]
c0d067f2:	7727      	strb	r7, [r4, #28]
c0d067f4:	e795      	b.n	c0d06722 <u2f_transport_received+0x24e>
c0d067f6:	46c0      	nop			; (mov r8, r8)
c0d067f8:	20002070 	.word	0x20002070
c0d067fc:	0000ffff 	.word	0x0000ffff
c0d06800:	00002132 	.word	0x00002132
c0d06804:	00002122 	.word	0x00002122
c0d06808:	000020c0 	.word	0x000020c0

c0d0680c <u2f_is_channel_broadcast>:
    }
error:
    return;
}

bool u2f_is_channel_broadcast(uint8_t *channel) {
c0d0680c:	b580      	push	{r7, lr}
    return (os_memcmp(channel, BROADCAST_CHANNEL, 4) == 0);
c0d0680e:	4906      	ldr	r1, [pc, #24]	; (c0d06828 <u2f_is_channel_broadcast+0x1c>)
c0d06810:	4479      	add	r1, pc
c0d06812:	2204      	movs	r2, #4
c0d06814:	f7fd ff6a 	bl	c0d046ec <os_memcmp>
c0d06818:	4601      	mov	r1, r0
c0d0681a:	2001      	movs	r0, #1
c0d0681c:	2200      	movs	r2, #0
c0d0681e:	2900      	cmp	r1, #0
c0d06820:	d000      	beq.n	c0d06824 <u2f_is_channel_broadcast+0x18>
c0d06822:	4610      	mov	r0, r2
c0d06824:	bd80      	pop	{r7, pc}
c0d06826:	46c0      	nop			; (mov r8, r8)
c0d06828:	00001fe2 	.word	0x00001fe2

c0d0682c <u2f_message_reply>:

bool u2f_is_channel_forbidden(uint8_t *channel) {
    return (os_memcmp(channel, FORBIDDEN_CHANNEL, 4) == 0);
}

void u2f_message_reply(u2f_service_t *service, uint8_t cmd, uint8_t *buffer, uint16_t len) {
c0d0682c:	b510      	push	{r4, lr}
    service->transportState = U2F_SENDING_RESPONSE;
c0d0682e:	2403      	movs	r4, #3
c0d06830:	7704      	strb	r4, [r0, #28]
c0d06832:	2400      	movs	r4, #0
    service->transportPacketIndex = 0;
c0d06834:	7584      	strb	r4, [r0, #22]
    service->transportBuffer = buffer;
c0d06836:	6182      	str	r2, [r0, #24]
    service->transportOffset = 0;
c0d06838:	8244      	strh	r4, [r0, #18]
    service->transportLength = len;
c0d0683a:	8283      	strh	r3, [r0, #20]
    service->sendCmd = cmd;
c0d0683c:	2234      	movs	r2, #52	; 0x34
c0d0683e:	5481      	strb	r1, [r0, r2]
    // pump the first message
    u2f_transport_sent(service, service->transportMedia);
c0d06840:	7f41      	ldrb	r1, [r0, #29]
c0d06842:	f7ff fde5 	bl	c0d06410 <u2f_transport_sent>
}
c0d06846:	bd10      	pop	{r4, pc}

c0d06848 <USBD_LL_Init>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
  UNUSED(pdev);
  ep_in_stall = 0;
c0d06848:	4902      	ldr	r1, [pc, #8]	; (c0d06854 <USBD_LL_Init+0xc>)
c0d0684a:	2000      	movs	r0, #0
c0d0684c:	6008      	str	r0, [r1, #0]
  ep_out_stall = 0;
c0d0684e:	4902      	ldr	r1, [pc, #8]	; (c0d06858 <USBD_LL_Init+0x10>)
c0d06850:	6008      	str	r0, [r1, #0]
  return USBD_OK;
c0d06852:	4770      	bx	lr
c0d06854:	200020b0 	.word	0x200020b0
c0d06858:	200020b4 	.word	0x200020b4

c0d0685c <USBD_LL_DeInit>:
  * @brief  De-Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_DeInit (USBD_HandleTypeDef *pdev)
{
c0d0685c:	b510      	push	{r4, lr}
  UNUSED(pdev);
  // usb off
  G_io_seproxyhal_spi_buffer[0] = SEPROXYHAL_TAG_USB_CONFIG;
c0d0685e:	4807      	ldr	r0, [pc, #28]	; (c0d0687c <USBD_LL_DeInit+0x20>)
c0d06860:	214f      	movs	r1, #79	; 0x4f
c0d06862:	7001      	strb	r1, [r0, #0]
c0d06864:	2400      	movs	r4, #0
  G_io_seproxyhal_spi_buffer[1] = 0;
c0d06866:	7044      	strb	r4, [r0, #1]
c0d06868:	2101      	movs	r1, #1
  G_io_seproxyhal_spi_buffer[2] = 1;
c0d0686a:	7081      	strb	r1, [r0, #2]
c0d0686c:	2102      	movs	r1, #2
  G_io_seproxyhal_spi_buffer[3] = SEPROXYHAL_TAG_USB_CONFIG_DISCONNECT;
c0d0686e:	70c1      	strb	r1, [r0, #3]
  io_seproxyhal_spi_send(G_io_seproxyhal_spi_buffer, 4);
c0d06870:	2104      	movs	r1, #4
c0d06872:	f7ff fc33 	bl	c0d060dc <io_seproxyhal_spi_send>

  return USBD_OK; 
c0d06876:	4620      	mov	r0, r4
c0d06878:	bd10      	pop	{r4, pc}
c0d0687a:	46c0      	nop			; (mov r8, r8)
c0d0687c:	20001d34 	.word	0x20001d34

c0d06880 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
c0d06880:	b570      	push	{r4, r5, r6, lr}
c0d06882:	b082      	sub	sp, #8
c0d06884:	466d      	mov	r5, sp
  uint8_t buffer[5];
  UNUSED(pdev);

  // reset address
  buffer[0] = SEPROXYHAL_TAG_USB_CONFIG;
c0d06886:	264f      	movs	r6, #79	; 0x4f
c0d06888:	702e      	strb	r6, [r5, #0]
c0d0688a:	2400      	movs	r4, #0
  buffer[1] = 0;
c0d0688c:	706c      	strb	r4, [r5, #1]
c0d0688e:	2002      	movs	r0, #2
  buffer[2] = 2;
c0d06890:	70a8      	strb	r0, [r5, #2]
c0d06892:	2003      	movs	r0, #3
  buffer[3] = SEPROXYHAL_TAG_USB_CONFIG_ADDR;
c0d06894:	70e8      	strb	r0, [r5, #3]
  buffer[4] = 0;
c0d06896:	712c      	strb	r4, [r5, #4]
  io_seproxyhal_spi_send(buffer, 5);
c0d06898:	2105      	movs	r1, #5
c0d0689a:	4628      	mov	r0, r5
c0d0689c:	f7ff fc1e 	bl	c0d060dc <io_seproxyhal_spi_send>
  
  // start usb operation
  buffer[0] = SEPROXYHAL_TAG_USB_CONFIG;
c0d068a0:	702e      	strb	r6, [r5, #0]
  buffer[1] = 0;
c0d068a2:	706c      	strb	r4, [r5, #1]
c0d068a4:	2001      	movs	r0, #1
  buffer[2] = 1;
c0d068a6:	70a8      	strb	r0, [r5, #2]
  buffer[3] = SEPROXYHAL_TAG_USB_CONFIG_CONNECT;
c0d068a8:	70e8      	strb	r0, [r5, #3]
c0d068aa:	2104      	movs	r1, #4
  io_seproxyhal_spi_send(buffer, 4);
c0d068ac:	4628      	mov	r0, r5
c0d068ae:	f7ff fc15 	bl	c0d060dc <io_seproxyhal_spi_send>
  return USBD_OK; 
c0d068b2:	4620      	mov	r0, r4
c0d068b4:	b002      	add	sp, #8
c0d068b6:	bd70      	pop	{r4, r5, r6, pc}

c0d068b8 <USBD_LL_Stop>:
  * @brief  Stops the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Stop (USBD_HandleTypeDef *pdev)
{
c0d068b8:	b510      	push	{r4, lr}
c0d068ba:	b082      	sub	sp, #8
c0d068bc:	a801      	add	r0, sp, #4
  UNUSED(pdev);
  uint8_t buffer[4];
  buffer[0] = SEPROXYHAL_TAG_USB_CONFIG;
c0d068be:	214f      	movs	r1, #79	; 0x4f
c0d068c0:	7001      	strb	r1, [r0, #0]
c0d068c2:	2400      	movs	r4, #0
  buffer[1] = 0;
c0d068c4:	7044      	strb	r4, [r0, #1]
c0d068c6:	2101      	movs	r1, #1
  buffer[2] = 1;
c0d068c8:	7081      	strb	r1, [r0, #2]
c0d068ca:	2102      	movs	r1, #2
  buffer[3] = SEPROXYHAL_TAG_USB_CONFIG_DISCONNECT;
c0d068cc:	70c1      	strb	r1, [r0, #3]
  io_seproxyhal_spi_send(buffer, 4);
c0d068ce:	2104      	movs	r1, #4
c0d068d0:	f7ff fc04 	bl	c0d060dc <io_seproxyhal_spi_send>
  return USBD_OK; 
c0d068d4:	4620      	mov	r0, r4
c0d068d6:	b002      	add	sp, #8
c0d068d8:	bd10      	pop	{r4, pc}
	...

c0d068dc <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
c0d068dc:	b5b0      	push	{r4, r5, r7, lr}
c0d068de:	b082      	sub	sp, #8
  uint8_t buffer[8];
  UNUSED(pdev);

  ep_in_stall = 0;
c0d068e0:	480e      	ldr	r0, [pc, #56]	; (c0d0691c <USBD_LL_OpenEP+0x40>)
c0d068e2:	2400      	movs	r4, #0
c0d068e4:	6004      	str	r4, [r0, #0]
  ep_out_stall = 0;
c0d068e6:	480e      	ldr	r0, [pc, #56]	; (c0d06920 <USBD_LL_OpenEP+0x44>)
c0d068e8:	6004      	str	r4, [r0, #0]
c0d068ea:	4668      	mov	r0, sp

  buffer[0] = SEPROXYHAL_TAG_USB_CONFIG;
c0d068ec:	254f      	movs	r5, #79	; 0x4f
c0d068ee:	7005      	strb	r5, [r0, #0]
  buffer[1] = 0;
c0d068f0:	7044      	strb	r4, [r0, #1]
c0d068f2:	2505      	movs	r5, #5
  buffer[2] = 5;
c0d068f4:	7085      	strb	r5, [r0, #2]
c0d068f6:	2504      	movs	r5, #4
  buffer[3] = SEPROXYHAL_TAG_USB_CONFIG_ENDPOINTS;
c0d068f8:	70c5      	strb	r5, [r0, #3]
c0d068fa:	2501      	movs	r5, #1
  buffer[4] = 1;
c0d068fc:	7105      	strb	r5, [r0, #4]
  buffer[5] = ep_addr;
c0d068fe:	7141      	strb	r1, [r0, #5]
  buffer[6] = 0;
  switch(ep_type) {
c0d06900:	2a03      	cmp	r2, #3
c0d06902:	d802      	bhi.n	c0d0690a <USBD_LL_OpenEP+0x2e>
c0d06904:	00d0      	lsls	r0, r2, #3
c0d06906:	4c07      	ldr	r4, [pc, #28]	; (c0d06924 <USBD_LL_OpenEP+0x48>)
c0d06908:	40c4      	lsrs	r4, r0
c0d0690a:	4668      	mov	r0, sp
  buffer[1] = 0;
  buffer[2] = 5;
  buffer[3] = SEPROXYHAL_TAG_USB_CONFIG_ENDPOINTS;
  buffer[4] = 1;
  buffer[5] = ep_addr;
  buffer[6] = 0;
c0d0690c:	7184      	strb	r4, [r0, #6]
      break;
    case USBD_EP_TYPE_INTR:
      buffer[6] = SEPROXYHAL_TAG_USB_CONFIG_TYPE_INTERRUPT;
      break;
  }
  buffer[7] = ep_mps;
c0d0690e:	71c3      	strb	r3, [r0, #7]
  io_seproxyhal_spi_send(buffer, 8);
c0d06910:	2108      	movs	r1, #8
c0d06912:	f7ff fbe3 	bl	c0d060dc <io_seproxyhal_spi_send>
c0d06916:	2000      	movs	r0, #0
  return USBD_OK; 
c0d06918:	b002      	add	sp, #8
c0d0691a:	bdb0      	pop	{r4, r5, r7, pc}
c0d0691c:	200020b0 	.word	0x200020b0
c0d06920:	200020b4 	.word	0x200020b4
c0d06924:	02030401 	.word	0x02030401

c0d06928 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
c0d06928:	b510      	push	{r4, lr}
c0d0692a:	b082      	sub	sp, #8
c0d0692c:	4668      	mov	r0, sp
  UNUSED(pdev);
  uint8_t buffer[8];
  buffer[0] = SEPROXYHAL_TAG_USB_CONFIG;
c0d0692e:	224f      	movs	r2, #79	; 0x4f
c0d06930:	7002      	strb	r2, [r0, #0]
c0d06932:	2400      	movs	r4, #0
  buffer[1] = 0;
c0d06934:	7044      	strb	r4, [r0, #1]
c0d06936:	2205      	movs	r2, #5
  buffer[2] = 5;
c0d06938:	7082      	strb	r2, [r0, #2]
c0d0693a:	2204      	movs	r2, #4
  buffer[3] = SEPROXYHAL_TAG_USB_CONFIG_ENDPOINTS;
c0d0693c:	70c2      	strb	r2, [r0, #3]
c0d0693e:	2201      	movs	r2, #1
  buffer[4] = 1;
c0d06940:	7102      	strb	r2, [r0, #4]
  buffer[5] = ep_addr;
c0d06942:	7141      	strb	r1, [r0, #5]
  buffer[6] = SEPROXYHAL_TAG_USB_CONFIG_TYPE_DISABLED;
c0d06944:	7184      	strb	r4, [r0, #6]
  buffer[7] = 0;
c0d06946:	71c4      	strb	r4, [r0, #7]
  io_seproxyhal_spi_send(buffer, 8);
c0d06948:	2108      	movs	r1, #8
c0d0694a:	f7ff fbc7 	bl	c0d060dc <io_seproxyhal_spi_send>
  return USBD_OK; 
c0d0694e:	4620      	mov	r0, r4
c0d06950:	b002      	add	sp, #8
c0d06952:	bd10      	pop	{r4, pc}

c0d06954 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{ 
c0d06954:	b5b0      	push	{r4, r5, r7, lr}
c0d06956:	b082      	sub	sp, #8
c0d06958:	460d      	mov	r5, r1
c0d0695a:	4668      	mov	r0, sp
  UNUSED(pdev);
  uint8_t buffer[6];
  buffer[0] = SEPROXYHAL_TAG_USB_EP_PREPARE;
c0d0695c:	2150      	movs	r1, #80	; 0x50
c0d0695e:	7001      	strb	r1, [r0, #0]
c0d06960:	2400      	movs	r4, #0
  buffer[1] = 0;
c0d06962:	7044      	strb	r4, [r0, #1]
c0d06964:	2103      	movs	r1, #3
  buffer[2] = 3;
c0d06966:	7081      	strb	r1, [r0, #2]
  buffer[3] = ep_addr;
c0d06968:	70c5      	strb	r5, [r0, #3]
  buffer[4] = SEPROXYHAL_TAG_USB_EP_PREPARE_DIR_STALL;
c0d0696a:	2140      	movs	r1, #64	; 0x40
c0d0696c:	7101      	strb	r1, [r0, #4]
  buffer[5] = 0;
c0d0696e:	7144      	strb	r4, [r0, #5]
  io_seproxyhal_spi_send(buffer, 6);
c0d06970:	2106      	movs	r1, #6
c0d06972:	f7ff fbb3 	bl	c0d060dc <io_seproxyhal_spi_send>
  if (ep_addr & 0x80) {
c0d06976:	2080      	movs	r0, #128	; 0x80
c0d06978:	4205      	tst	r5, r0
c0d0697a:	d101      	bne.n	c0d06980 <USBD_LL_StallEP+0x2c>
c0d0697c:	4807      	ldr	r0, [pc, #28]	; (c0d0699c <USBD_LL_StallEP+0x48>)
c0d0697e:	e000      	b.n	c0d06982 <USBD_LL_StallEP+0x2e>
c0d06980:	4805      	ldr	r0, [pc, #20]	; (c0d06998 <USBD_LL_StallEP+0x44>)
c0d06982:	6801      	ldr	r1, [r0, #0]
c0d06984:	227f      	movs	r2, #127	; 0x7f
c0d06986:	4015      	ands	r5, r2
c0d06988:	2201      	movs	r2, #1
c0d0698a:	40aa      	lsls	r2, r5
c0d0698c:	430a      	orrs	r2, r1
c0d0698e:	6002      	str	r2, [r0, #0]
    ep_in_stall |= (1<<(ep_addr&0x7F));
  }
  else {
    ep_out_stall |= (1<<(ep_addr&0x7F)); 
  }
  return USBD_OK; 
c0d06990:	4620      	mov	r0, r4
c0d06992:	b002      	add	sp, #8
c0d06994:	bdb0      	pop	{r4, r5, r7, pc}
c0d06996:	46c0      	nop			; (mov r8, r8)
c0d06998:	200020b0 	.word	0x200020b0
c0d0699c:	200020b4 	.word	0x200020b4

c0d069a0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
c0d069a0:	b570      	push	{r4, r5, r6, lr}
c0d069a2:	b082      	sub	sp, #8
c0d069a4:	460d      	mov	r5, r1
c0d069a6:	4668      	mov	r0, sp
  UNUSED(pdev);
  uint8_t buffer[6];
  buffer[0] = SEPROXYHAL_TAG_USB_EP_PREPARE;
c0d069a8:	2150      	movs	r1, #80	; 0x50
c0d069aa:	7001      	strb	r1, [r0, #0]
c0d069ac:	2400      	movs	r4, #0
  buffer[1] = 0;
c0d069ae:	7044      	strb	r4, [r0, #1]
c0d069b0:	2103      	movs	r1, #3
  buffer[2] = 3;
c0d069b2:	7081      	strb	r1, [r0, #2]
  buffer[3] = ep_addr;
c0d069b4:	70c5      	strb	r5, [r0, #3]
c0d069b6:	2680      	movs	r6, #128	; 0x80
  buffer[4] = SEPROXYHAL_TAG_USB_EP_PREPARE_DIR_UNSTALL;
c0d069b8:	7106      	strb	r6, [r0, #4]
  buffer[5] = 0;
c0d069ba:	7144      	strb	r4, [r0, #5]
  io_seproxyhal_spi_send(buffer, 6);
c0d069bc:	2106      	movs	r1, #6
c0d069be:	f7ff fb8d 	bl	c0d060dc <io_seproxyhal_spi_send>
  if (ep_addr & 0x80) {
c0d069c2:	4235      	tst	r5, r6
c0d069c4:	d101      	bne.n	c0d069ca <USBD_LL_ClearStallEP+0x2a>
c0d069c6:	4807      	ldr	r0, [pc, #28]	; (c0d069e4 <USBD_LL_ClearStallEP+0x44>)
c0d069c8:	e000      	b.n	c0d069cc <USBD_LL_ClearStallEP+0x2c>
c0d069ca:	4805      	ldr	r0, [pc, #20]	; (c0d069e0 <USBD_LL_ClearStallEP+0x40>)
c0d069cc:	6801      	ldr	r1, [r0, #0]
c0d069ce:	227f      	movs	r2, #127	; 0x7f
c0d069d0:	4015      	ands	r5, r2
c0d069d2:	2201      	movs	r2, #1
c0d069d4:	40aa      	lsls	r2, r5
c0d069d6:	4391      	bics	r1, r2
c0d069d8:	6001      	str	r1, [r0, #0]
    ep_in_stall &= ~(1<<(ep_addr&0x7F));
  }
  else {
    ep_out_stall &= ~(1<<(ep_addr&0x7F)); 
  }
  return USBD_OK; 
c0d069da:	4620      	mov	r0, r4
c0d069dc:	b002      	add	sp, #8
c0d069de:	bd70      	pop	{r4, r5, r6, pc}
c0d069e0:	200020b0 	.word	0x200020b0
c0d069e4:	200020b4 	.word	0x200020b4

c0d069e8 <USBD_LL_IsStallEP>:
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  UNUSED(pdev);
  if((ep_addr & 0x80) == 0x80)
c0d069e8:	2080      	movs	r0, #128	; 0x80
c0d069ea:	4201      	tst	r1, r0
c0d069ec:	d001      	beq.n	c0d069f2 <USBD_LL_IsStallEP+0xa>
c0d069ee:	4806      	ldr	r0, [pc, #24]	; (c0d06a08 <USBD_LL_IsStallEP+0x20>)
c0d069f0:	e000      	b.n	c0d069f4 <USBD_LL_IsStallEP+0xc>
c0d069f2:	4804      	ldr	r0, [pc, #16]	; (c0d06a04 <USBD_LL_IsStallEP+0x1c>)
c0d069f4:	6800      	ldr	r0, [r0, #0]
c0d069f6:	227f      	movs	r2, #127	; 0x7f
c0d069f8:	4011      	ands	r1, r2
c0d069fa:	2201      	movs	r2, #1
c0d069fc:	408a      	lsls	r2, r1
c0d069fe:	4002      	ands	r2, r0
  }
  else
  {
    return ep_out_stall & (1<<(ep_addr&0x7F));
  }
}
c0d06a00:	b2d0      	uxtb	r0, r2
c0d06a02:	4770      	bx	lr
c0d06a04:	200020b4 	.word	0x200020b4
c0d06a08:	200020b0 	.word	0x200020b0

c0d06a0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
c0d06a0c:	b510      	push	{r4, lr}
c0d06a0e:	b082      	sub	sp, #8
c0d06a10:	4668      	mov	r0, sp
  UNUSED(pdev);
  uint8_t buffer[5];
  buffer[0] = SEPROXYHAL_TAG_USB_CONFIG;
c0d06a12:	224f      	movs	r2, #79	; 0x4f
c0d06a14:	7002      	strb	r2, [r0, #0]
c0d06a16:	2400      	movs	r4, #0
  buffer[1] = 0;
c0d06a18:	7044      	strb	r4, [r0, #1]
c0d06a1a:	2202      	movs	r2, #2
  buffer[2] = 2;
c0d06a1c:	7082      	strb	r2, [r0, #2]
c0d06a1e:	2203      	movs	r2, #3
  buffer[3] = SEPROXYHAL_TAG_USB_CONFIG_ADDR;
c0d06a20:	70c2      	strb	r2, [r0, #3]
  buffer[4] = dev_addr;
c0d06a22:	7101      	strb	r1, [r0, #4]
  io_seproxyhal_spi_send(buffer, 5);
c0d06a24:	2105      	movs	r1, #5
c0d06a26:	f7ff fb59 	bl	c0d060dc <io_seproxyhal_spi_send>
  return USBD_OK; 
c0d06a2a:	4620      	mov	r0, r4
c0d06a2c:	b002      	add	sp, #8
c0d06a2e:	bd10      	pop	{r4, pc}

c0d06a30 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
c0d06a30:	b5b0      	push	{r4, r5, r7, lr}
c0d06a32:	b082      	sub	sp, #8
c0d06a34:	461c      	mov	r4, r3
c0d06a36:	4615      	mov	r5, r2
c0d06a38:	4668      	mov	r0, sp
  UNUSED(pdev);
  uint8_t buffer[6];
  buffer[0] = SEPROXYHAL_TAG_USB_EP_PREPARE;
c0d06a3a:	2250      	movs	r2, #80	; 0x50
c0d06a3c:	7002      	strb	r2, [r0, #0]
  buffer[1] = (3+size)>>8;
c0d06a3e:	1ce2      	adds	r2, r4, #3
c0d06a40:	0a13      	lsrs	r3, r2, #8
c0d06a42:	7043      	strb	r3, [r0, #1]
  buffer[2] = (3+size);
c0d06a44:	7082      	strb	r2, [r0, #2]
  buffer[3] = ep_addr;
c0d06a46:	70c1      	strb	r1, [r0, #3]
  buffer[4] = SEPROXYHAL_TAG_USB_EP_PREPARE_DIR_IN;
c0d06a48:	2120      	movs	r1, #32
c0d06a4a:	7101      	strb	r1, [r0, #4]
  buffer[5] = size;
c0d06a4c:	7144      	strb	r4, [r0, #5]
  io_seproxyhal_spi_send(buffer, 6);
c0d06a4e:	2106      	movs	r1, #6
c0d06a50:	f7ff fb44 	bl	c0d060dc <io_seproxyhal_spi_send>
  io_seproxyhal_spi_send(pbuf, size);
c0d06a54:	4628      	mov	r0, r5
c0d06a56:	4621      	mov	r1, r4
c0d06a58:	f7ff fb40 	bl	c0d060dc <io_seproxyhal_spi_send>
c0d06a5c:	2000      	movs	r0, #0
  return USBD_OK;   
c0d06a5e:	b002      	add	sp, #8
c0d06a60:	bdb0      	pop	{r4, r5, r7, pc}

c0d06a62 <USBD_LL_PrepareReceive>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,
                                           uint16_t  size)
{
c0d06a62:	b510      	push	{r4, lr}
c0d06a64:	b082      	sub	sp, #8
c0d06a66:	4668      	mov	r0, sp
  UNUSED(pdev);
  uint8_t buffer[6];
  buffer[0] = SEPROXYHAL_TAG_USB_EP_PREPARE;
c0d06a68:	2350      	movs	r3, #80	; 0x50
c0d06a6a:	7003      	strb	r3, [r0, #0]
c0d06a6c:	2400      	movs	r4, #0
  buffer[1] = (3/*+size*/)>>8;
c0d06a6e:	7044      	strb	r4, [r0, #1]
c0d06a70:	2303      	movs	r3, #3
  buffer[2] = (3/*+size*/);
c0d06a72:	7083      	strb	r3, [r0, #2]
  buffer[3] = ep_addr;
c0d06a74:	70c1      	strb	r1, [r0, #3]
  buffer[4] = SEPROXYHAL_TAG_USB_EP_PREPARE_DIR_OUT;
c0d06a76:	2130      	movs	r1, #48	; 0x30
c0d06a78:	7101      	strb	r1, [r0, #4]
  buffer[5] = size; // expected size, not transmitted here !
c0d06a7a:	7142      	strb	r2, [r0, #5]
  io_seproxyhal_spi_send(buffer, 6);
c0d06a7c:	2106      	movs	r1, #6
c0d06a7e:	f7ff fb2d 	bl	c0d060dc <io_seproxyhal_spi_send>
  return USBD_OK;   
c0d06a82:	4620      	mov	r0, r4
c0d06a84:	b002      	add	sp, #8
c0d06a86:	bd10      	pop	{r4, pc}

c0d06a88 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
c0d06a88:	b570      	push	{r4, r5, r6, lr}
c0d06a8a:	4615      	mov	r5, r2
c0d06a8c:	460e      	mov	r6, r1
c0d06a8e:	4604      	mov	r4, r0
c0d06a90:	2002      	movs	r0, #2
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
c0d06a92:	2c00      	cmp	r4, #0
c0d06a94:	d010      	beq.n	c0d06ab8 <USBD_Init+0x30>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }

  memset(pdev, 0, sizeof(USBD_HandleTypeDef));
c0d06a96:	2045      	movs	r0, #69	; 0x45
c0d06a98:	0081      	lsls	r1, r0, #2
c0d06a9a:	4620      	mov	r0, r4
c0d06a9c:	f000 fe74 	bl	c0d07788 <__aeabi_memclr>
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
c0d06aa0:	2e00      	cmp	r6, #0
c0d06aa2:	d001      	beq.n	c0d06aa8 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
c0d06aa4:	20f0      	movs	r0, #240	; 0xf0
c0d06aa6:	5026      	str	r6, [r4, r0]
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
c0d06aa8:	20dc      	movs	r0, #220	; 0xdc
c0d06aaa:	2101      	movs	r1, #1
c0d06aac:	5421      	strb	r1, [r4, r0]
  pdev->id = id;
c0d06aae:	7025      	strb	r5, [r4, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
c0d06ab0:	4620      	mov	r0, r4
c0d06ab2:	f7ff fec9 	bl	c0d06848 <USBD_LL_Init>
c0d06ab6:	2000      	movs	r0, #0
  
  return USBD_OK; 
}
c0d06ab8:	b2c0      	uxtb	r0, r0
c0d06aba:	bd70      	pop	{r4, r5, r6, pc}

c0d06abc <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
c0d06abc:	b5b0      	push	{r4, r5, r7, lr}
c0d06abe:	4604      	mov	r4, r0
  /* Set Default State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
c0d06ac0:	20dc      	movs	r0, #220	; 0xdc
c0d06ac2:	2101      	movs	r1, #1
c0d06ac4:	5421      	strb	r1, [r4, r0]
c0d06ac6:	2500      	movs	r5, #0
  
  /* Free Class Resources */
  uint8_t intf;
  for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
    if(pdev->interfacesClass[intf].pClass != NULL) {
c0d06ac8:	00e8      	lsls	r0, r5, #3
c0d06aca:	1820      	adds	r0, r4, r0
c0d06acc:	21f4      	movs	r1, #244	; 0xf4
c0d06ace:	5840      	ldr	r0, [r0, r1]
c0d06ad0:	2800      	cmp	r0, #0
c0d06ad2:	d006      	beq.n	c0d06ae2 <USBD_DeInit+0x26>
      ((DeInit_t)PIC(pdev->interfacesClass[intf].pClass->DeInit))(pdev, pdev->dev_config);  
c0d06ad4:	6840      	ldr	r0, [r0, #4]
c0d06ad6:	f7ff f811 	bl	c0d05afc <pic>
c0d06ada:	4602      	mov	r2, r0
c0d06adc:	7921      	ldrb	r1, [r4, #4]
c0d06ade:	4620      	mov	r0, r4
c0d06ae0:	4790      	blx	r2
  /* Set Default State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
  
  /* Free Class Resources */
  uint8_t intf;
  for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
c0d06ae2:	1c6d      	adds	r5, r5, #1
c0d06ae4:	2d03      	cmp	r5, #3
c0d06ae6:	d1ef      	bne.n	c0d06ac8 <USBD_DeInit+0xc>
      ((DeInit_t)PIC(pdev->interfacesClass[intf].pClass->DeInit))(pdev, pdev->dev_config);  
    }
  }
  
    /* Stop the low level driver  */
  USBD_LL_Stop(pdev); 
c0d06ae8:	4620      	mov	r0, r4
c0d06aea:	f7ff fee5 	bl	c0d068b8 <USBD_LL_Stop>
  
  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
c0d06aee:	4620      	mov	r0, r4
c0d06af0:	f7ff feb4 	bl	c0d0685c <USBD_LL_DeInit>
  
  return USBD_OK;
c0d06af4:	2000      	movs	r0, #0
c0d06af6:	bdb0      	pop	{r4, r5, r7, pc}

c0d06af8 <USBD_RegisterClassForInterface>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClassForInterface(uint8_t interfaceidx, USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
c0d06af8:	2302      	movs	r3, #2
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
c0d06afa:	2a00      	cmp	r2, #0
c0d06afc:	d006      	beq.n	c0d06b0c <USBD_RegisterClassForInterface+0x14>
c0d06afe:	2300      	movs	r3, #0
  {
    if (interfaceidx < USBD_MAX_NUM_INTERFACES) {
c0d06b00:	2802      	cmp	r0, #2
c0d06b02:	d803      	bhi.n	c0d06b0c <USBD_RegisterClassForInterface+0x14>
      /* link the class to the USB Device handle */
      pdev->interfacesClass[interfaceidx].pClass = pclass;
c0d06b04:	00c0      	lsls	r0, r0, #3
c0d06b06:	1808      	adds	r0, r1, r0
c0d06b08:	21f4      	movs	r1, #244	; 0xf4
c0d06b0a:	5042      	str	r2, [r0, r1]
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
  }
  
  return status;
c0d06b0c:	b2d8      	uxtb	r0, r3
c0d06b0e:	4770      	bx	lr

c0d06b10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
c0d06b10:	b580      	push	{r7, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
c0d06b12:	f7ff feb5 	bl	c0d06880 <USBD_LL_Start>
  
  return USBD_OK;  
c0d06b16:	2000      	movs	r0, #0
c0d06b18:	bd80      	pop	{r7, pc}

c0d06b1a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
c0d06b1a:	b570      	push	{r4, r5, r6, lr}
c0d06b1c:	460c      	mov	r4, r1
c0d06b1e:	4605      	mov	r5, r0
c0d06b20:	2600      	movs	r6, #0
  /* Set configuration  and Start the Class*/
  uint8_t intf;
  for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
    if(usbd_is_valid_intf(pdev, intf)) {
c0d06b22:	4628      	mov	r0, r5
c0d06b24:	4631      	mov	r1, r6
c0d06b26:	f000 f96f 	bl	c0d06e08 <usbd_is_valid_intf>
c0d06b2a:	2800      	cmp	r0, #0
c0d06b2c:	d00a      	beq.n	c0d06b44 <USBD_SetClassConfig+0x2a>
      ((Init_t)PIC(pdev->interfacesClass[intf].pClass->Init))(pdev, cfgidx);
c0d06b2e:	00f0      	lsls	r0, r6, #3
c0d06b30:	1828      	adds	r0, r5, r0
c0d06b32:	21f4      	movs	r1, #244	; 0xf4
c0d06b34:	5840      	ldr	r0, [r0, r1]
c0d06b36:	6800      	ldr	r0, [r0, #0]
c0d06b38:	f7fe ffe0 	bl	c0d05afc <pic>
c0d06b3c:	4602      	mov	r2, r0
c0d06b3e:	4628      	mov	r0, r5
c0d06b40:	4621      	mov	r1, r4
c0d06b42:	4790      	blx	r2

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Set configuration  and Start the Class*/
  uint8_t intf;
  for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
c0d06b44:	1c76      	adds	r6, r6, #1
c0d06b46:	2e03      	cmp	r6, #3
c0d06b48:	d1eb      	bne.n	c0d06b22 <USBD_SetClassConfig+0x8>
    if(usbd_is_valid_intf(pdev, intf)) {
      ((Init_t)PIC(pdev->interfacesClass[intf].pClass->Init))(pdev, cfgidx);
    }
  }

  return USBD_OK; 
c0d06b4a:	2000      	movs	r0, #0
c0d06b4c:	bd70      	pop	{r4, r5, r6, pc}

c0d06b4e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
c0d06b4e:	b570      	push	{r4, r5, r6, lr}
c0d06b50:	460c      	mov	r4, r1
c0d06b52:	4605      	mov	r5, r0
c0d06b54:	2600      	movs	r6, #0
  /* Clear configuration  and De-initialize the Class process*/
  uint8_t intf;
  for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
    if(usbd_is_valid_intf(pdev, intf)) {
c0d06b56:	4628      	mov	r0, r5
c0d06b58:	4631      	mov	r1, r6
c0d06b5a:	f000 f955 	bl	c0d06e08 <usbd_is_valid_intf>
c0d06b5e:	2800      	cmp	r0, #0
c0d06b60:	d00a      	beq.n	c0d06b78 <USBD_ClrClassConfig+0x2a>
      ((DeInit_t)PIC(pdev->interfacesClass[intf].pClass->DeInit))(pdev, cfgidx);  
c0d06b62:	00f0      	lsls	r0, r6, #3
c0d06b64:	1828      	adds	r0, r5, r0
c0d06b66:	21f4      	movs	r1, #244	; 0xf4
c0d06b68:	5840      	ldr	r0, [r0, r1]
c0d06b6a:	6840      	ldr	r0, [r0, #4]
c0d06b6c:	f7fe ffc6 	bl	c0d05afc <pic>
c0d06b70:	4602      	mov	r2, r0
c0d06b72:	4628      	mov	r0, r5
c0d06b74:	4621      	mov	r1, r4
c0d06b76:	4790      	blx	r2
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  uint8_t intf;
  for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
c0d06b78:	1c76      	adds	r6, r6, #1
c0d06b7a:	2e03      	cmp	r6, #3
c0d06b7c:	d1eb      	bne.n	c0d06b56 <USBD_ClrClassConfig+0x8>
    if(usbd_is_valid_intf(pdev, intf)) {
      ((DeInit_t)PIC(pdev->interfacesClass[intf].pClass->DeInit))(pdev, cfgidx);  
    }
  }
  return USBD_OK;
c0d06b7e:	2000      	movs	r0, #0
c0d06b80:	bd70      	pop	{r4, r5, r6, pc}

c0d06b82 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
c0d06b82:	b5b0      	push	{r4, r5, r7, lr}
c0d06b84:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
c0d06b86:	4625      	mov	r5, r4
c0d06b88:	35e8      	adds	r5, #232	; 0xe8
c0d06b8a:	4628      	mov	r0, r5
c0d06b8c:	f000 fb89 	bl	c0d072a2 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
c0d06b90:	20d4      	movs	r0, #212	; 0xd4
c0d06b92:	2101      	movs	r1, #1
c0d06b94:	5021      	str	r1, [r4, r0]
  pdev->ep0_data_len = pdev->request.wLength;
c0d06b96:	20ee      	movs	r0, #238	; 0xee
c0d06b98:	5a20      	ldrh	r0, [r4, r0]
c0d06b9a:	21d8      	movs	r1, #216	; 0xd8
c0d06b9c:	5060      	str	r0, [r4, r1]
c0d06b9e:	20e8      	movs	r0, #232	; 0xe8
  
  switch (pdev->request.bmRequest & 0x1F) 
c0d06ba0:	5c21      	ldrb	r1, [r4, r0]
c0d06ba2:	201f      	movs	r0, #31
c0d06ba4:	4008      	ands	r0, r1
c0d06ba6:	2802      	cmp	r0, #2
c0d06ba8:	d008      	beq.n	c0d06bbc <USBD_LL_SetupStage+0x3a>
c0d06baa:	2801      	cmp	r0, #1
c0d06bac:	d00b      	beq.n	c0d06bc6 <USBD_LL_SetupStage+0x44>
c0d06bae:	2800      	cmp	r0, #0
c0d06bb0:	d10e      	bne.n	c0d06bd0 <USBD_LL_SetupStage+0x4e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
c0d06bb2:	4620      	mov	r0, r4
c0d06bb4:	4629      	mov	r1, r5
c0d06bb6:	f000 f934 	bl	c0d06e22 <USBD_StdDevReq>
c0d06bba:	e00e      	b.n	c0d06bda <USBD_LL_SetupStage+0x58>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
c0d06bbc:	4620      	mov	r0, r4
c0d06bbe:	4629      	mov	r1, r5
c0d06bc0:	f000 fae6 	bl	c0d07190 <USBD_StdEPReq>
c0d06bc4:	e009      	b.n	c0d06bda <USBD_LL_SetupStage+0x58>
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
c0d06bc6:	4620      	mov	r0, r4
c0d06bc8:	4629      	mov	r1, r5
c0d06bca:	f000 fabd 	bl	c0d07148 <USBD_StdItfReq>
c0d06bce:	e004      	b.n	c0d06bda <USBD_LL_SetupStage+0x58>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
c0d06bd0:	2080      	movs	r0, #128	; 0x80
c0d06bd2:	4001      	ands	r1, r0
c0d06bd4:	4620      	mov	r0, r4
c0d06bd6:	f7ff febd 	bl	c0d06954 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
c0d06bda:	2000      	movs	r0, #0
c0d06bdc:	bdb0      	pop	{r4, r5, r7, pc}

c0d06bde <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
c0d06bde:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d06be0:	b081      	sub	sp, #4
c0d06be2:	9200      	str	r2, [sp, #0]
c0d06be4:	460e      	mov	r6, r1
c0d06be6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
c0d06be8:	2e00      	cmp	r6, #0
c0d06bea:	d01d      	beq.n	c0d06c28 <USBD_LL_DataOutStage+0x4a>
c0d06bec:	4625      	mov	r5, r4
c0d06bee:	35dc      	adds	r5, #220	; 0xdc
c0d06bf0:	2700      	movs	r7, #0
  }
  else {

    uint8_t intf;
    for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
      if( usbd_is_valid_intf(pdev, intf) &&  (pdev->interfacesClass[intf].pClass->DataOut != NULL)&&
c0d06bf2:	4620      	mov	r0, r4
c0d06bf4:	4639      	mov	r1, r7
c0d06bf6:	f000 f907 	bl	c0d06e08 <usbd_is_valid_intf>
c0d06bfa:	2800      	cmp	r0, #0
c0d06bfc:	d010      	beq.n	c0d06c20 <USBD_LL_DataOutStage+0x42>
c0d06bfe:	00f8      	lsls	r0, r7, #3
c0d06c00:	1820      	adds	r0, r4, r0
c0d06c02:	21f4      	movs	r1, #244	; 0xf4
c0d06c04:	5840      	ldr	r0, [r0, r1]
c0d06c06:	6980      	ldr	r0, [r0, #24]
c0d06c08:	2800      	cmp	r0, #0
c0d06c0a:	d009      	beq.n	c0d06c20 <USBD_LL_DataOutStage+0x42>
         (pdev->dev_state == USBD_STATE_CONFIGURED))
c0d06c0c:	7829      	ldrb	r1, [r5, #0]
  }
  else {

    uint8_t intf;
    for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
      if( usbd_is_valid_intf(pdev, intf) &&  (pdev->interfacesClass[intf].pClass->DataOut != NULL)&&
c0d06c0e:	2903      	cmp	r1, #3
c0d06c10:	d106      	bne.n	c0d06c20 <USBD_LL_DataOutStage+0x42>
         (pdev->dev_state == USBD_STATE_CONFIGURED))
      {
        ((DataOut_t)PIC(pdev->interfacesClass[intf].pClass->DataOut))(pdev, epnum, pdata); 
c0d06c12:	f7fe ff73 	bl	c0d05afc <pic>
c0d06c16:	4603      	mov	r3, r0
c0d06c18:	4620      	mov	r0, r4
c0d06c1a:	4631      	mov	r1, r6
c0d06c1c:	9a00      	ldr	r2, [sp, #0]
c0d06c1e:	4798      	blx	r3
    }
  }
  else {

    uint8_t intf;
    for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
c0d06c20:	1c7f      	adds	r7, r7, #1
c0d06c22:	2f03      	cmp	r7, #3
c0d06c24:	d1e5      	bne.n	c0d06bf2 <USBD_LL_DataOutStage+0x14>
c0d06c26:	e031      	b.n	c0d06c8c <USBD_LL_DataOutStage+0xae>
  
  if(epnum == 0) 
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
c0d06c28:	20d4      	movs	r0, #212	; 0xd4
c0d06c2a:	5820      	ldr	r0, [r4, r0]
c0d06c2c:	2803      	cmp	r0, #3
c0d06c2e:	d12d      	bne.n	c0d06c8c <USBD_LL_DataOutStage+0xae>
    {
      if(pep->rem_length > pep->maxpacket)
c0d06c30:	2080      	movs	r0, #128	; 0x80
c0d06c32:	5820      	ldr	r0, [r4, r0]
c0d06c34:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
c0d06c36:	4281      	cmp	r1, r0
c0d06c38:	d90a      	bls.n	c0d06c50 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -=  pep->maxpacket;
c0d06c3a:	1a09      	subs	r1, r1, r0
c0d06c3c:	67e1      	str	r1, [r4, #124]	; 0x7c
c0d06c3e:	4281      	cmp	r1, r0
c0d06c40:	d300      	bcc.n	c0d06c44 <USBD_LL_DataOutStage+0x66>
c0d06c42:	4601      	mov	r1, r0
       
        USBD_CtlContinueRx (pdev, 
c0d06c44:	b28a      	uxth	r2, r1
c0d06c46:	4620      	mov	r0, r4
c0d06c48:	9900      	ldr	r1, [sp, #0]
c0d06c4a:	f000 fcf3 	bl	c0d07634 <USBD_CtlContinueRx>
c0d06c4e:	e01d      	b.n	c0d06c8c <USBD_LL_DataOutStage+0xae>
c0d06c50:	4626      	mov	r6, r4
c0d06c52:	36dc      	adds	r6, #220	; 0xdc
c0d06c54:	2500      	movs	r5, #0
      }
      else
      {
        uint8_t intf;
        for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
          if(usbd_is_valid_intf(pdev, intf) &&  (pdev->interfacesClass[intf].pClass->EP0_RxReady != NULL)&&
c0d06c56:	4620      	mov	r0, r4
c0d06c58:	4629      	mov	r1, r5
c0d06c5a:	f000 f8d5 	bl	c0d06e08 <usbd_is_valid_intf>
c0d06c5e:	2800      	cmp	r0, #0
c0d06c60:	d00e      	beq.n	c0d06c80 <USBD_LL_DataOutStage+0xa2>
c0d06c62:	00e8      	lsls	r0, r5, #3
c0d06c64:	1820      	adds	r0, r4, r0
c0d06c66:	21f4      	movs	r1, #244	; 0xf4
c0d06c68:	5840      	ldr	r0, [r0, r1]
c0d06c6a:	6900      	ldr	r0, [r0, #16]
c0d06c6c:	2800      	cmp	r0, #0
c0d06c6e:	d007      	beq.n	c0d06c80 <USBD_LL_DataOutStage+0xa2>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
c0d06c70:	7831      	ldrb	r1, [r6, #0]
      }
      else
      {
        uint8_t intf;
        for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
          if(usbd_is_valid_intf(pdev, intf) &&  (pdev->interfacesClass[intf].pClass->EP0_RxReady != NULL)&&
c0d06c72:	2903      	cmp	r1, #3
c0d06c74:	d104      	bne.n	c0d06c80 <USBD_LL_DataOutStage+0xa2>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            ((EP0_RxReady_t)PIC(pdev->interfacesClass[intf].pClass->EP0_RxReady))(pdev); 
c0d06c76:	f7fe ff41 	bl	c0d05afc <pic>
c0d06c7a:	4601      	mov	r1, r0
c0d06c7c:	4620      	mov	r0, r4
c0d06c7e:	4788      	blx	r1
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        uint8_t intf;
        for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
c0d06c80:	1c6d      	adds	r5, r5, #1
c0d06c82:	2d03      	cmp	r5, #3
c0d06c84:	d1e7      	bne.n	c0d06c56 <USBD_LL_DataOutStage+0x78>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            ((EP0_RxReady_t)PIC(pdev->interfacesClass[intf].pClass->EP0_RxReady))(pdev); 
          }
        }
        USBD_CtlSendStatus(pdev);
c0d06c86:	4620      	mov	r0, r4
c0d06c88:	f000 fcdb 	bl	c0d07642 <USBD_CtlSendStatus>
      {
        ((DataOut_t)PIC(pdev->interfacesClass[intf].pClass->DataOut))(pdev, epnum, pdata); 
      }
    }
  }  
  return USBD_OK;
c0d06c8c:	2000      	movs	r0, #0
c0d06c8e:	b001      	add	sp, #4
c0d06c90:	bdf0      	pop	{r4, r5, r6, r7, pc}

c0d06c92 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
c0d06c92:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d06c94:	b081      	sub	sp, #4
c0d06c96:	460d      	mov	r5, r1
c0d06c98:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  UNUSED(pdata);
    
  if(epnum == 0) 
c0d06c9a:	2d00      	cmp	r5, #0
c0d06c9c:	d01c      	beq.n	c0d06cd8 <USBD_LL_DataInStage+0x46>
c0d06c9e:	4627      	mov	r7, r4
c0d06ca0:	37dc      	adds	r7, #220	; 0xdc
c0d06ca2:	2600      	movs	r6, #0
    }
  }
  else {
    uint8_t intf;
    for (intf = 0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
      if( usbd_is_valid_intf(pdev, intf) && (pdev->interfacesClass[intf].pClass->DataIn != NULL)&&
c0d06ca4:	4620      	mov	r0, r4
c0d06ca6:	4631      	mov	r1, r6
c0d06ca8:	f000 f8ae 	bl	c0d06e08 <usbd_is_valid_intf>
c0d06cac:	2800      	cmp	r0, #0
c0d06cae:	d00f      	beq.n	c0d06cd0 <USBD_LL_DataInStage+0x3e>
c0d06cb0:	00f0      	lsls	r0, r6, #3
c0d06cb2:	1820      	adds	r0, r4, r0
c0d06cb4:	21f4      	movs	r1, #244	; 0xf4
c0d06cb6:	5840      	ldr	r0, [r0, r1]
c0d06cb8:	6940      	ldr	r0, [r0, #20]
c0d06cba:	2800      	cmp	r0, #0
c0d06cbc:	d008      	beq.n	c0d06cd0 <USBD_LL_DataInStage+0x3e>
         (pdev->dev_state == USBD_STATE_CONFIGURED))
c0d06cbe:	7839      	ldrb	r1, [r7, #0]
    }
  }
  else {
    uint8_t intf;
    for (intf = 0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
      if( usbd_is_valid_intf(pdev, intf) && (pdev->interfacesClass[intf].pClass->DataIn != NULL)&&
c0d06cc0:	2903      	cmp	r1, #3
c0d06cc2:	d105      	bne.n	c0d06cd0 <USBD_LL_DataInStage+0x3e>
         (pdev->dev_state == USBD_STATE_CONFIGURED))
      {
        ((DataIn_t)PIC(pdev->interfacesClass[intf].pClass->DataIn))(pdev, epnum); 
c0d06cc4:	f7fe ff1a 	bl	c0d05afc <pic>
c0d06cc8:	4602      	mov	r2, r0
c0d06cca:	4620      	mov	r0, r4
c0d06ccc:	4629      	mov	r1, r5
c0d06cce:	4790      	blx	r2
      pdev->dev_test_mode = 0;
    }
  }
  else {
    uint8_t intf;
    for (intf = 0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
c0d06cd0:	1c76      	adds	r6, r6, #1
c0d06cd2:	2e03      	cmp	r6, #3
c0d06cd4:	d1e6      	bne.n	c0d06ca4 <USBD_LL_DataInStage+0x12>
c0d06cd6:	e04f      	b.n	c0d06d78 <USBD_LL_DataInStage+0xe6>
    
  if(epnum == 0) 
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
c0d06cd8:	20d4      	movs	r0, #212	; 0xd4
c0d06cda:	5820      	ldr	r0, [r4, r0]
c0d06cdc:	2802      	cmp	r0, #2
c0d06cde:	d144      	bne.n	c0d06d6a <USBD_LL_DataInStage+0xd8>
    {
      if(pep->rem_length > pep->maxpacket)
c0d06ce0:	69e0      	ldr	r0, [r4, #28]
c0d06ce2:	6a25      	ldr	r5, [r4, #32]
c0d06ce4:	42a8      	cmp	r0, r5
c0d06ce6:	d90b      	bls.n	c0d06d00 <USBD_LL_DataInStage+0x6e>
      {
        pep->rem_length -=  pep->maxpacket;
c0d06ce8:	1b40      	subs	r0, r0, r5
c0d06cea:	61e0      	str	r0, [r4, #28]
        pdev->pData += pep->maxpacket;
c0d06cec:	2111      	movs	r1, #17
c0d06cee:	010a      	lsls	r2, r1, #4
c0d06cf0:	58a1      	ldr	r1, [r4, r2]
c0d06cf2:	1949      	adds	r1, r1, r5
c0d06cf4:	50a1      	str	r1, [r4, r2]
        USBD_LL_PrepareReceive (pdev,
                                0,
                                0);  
        */
        
        USBD_CtlContinueSendData (pdev, 
c0d06cf6:	b282      	uxth	r2, r0
c0d06cf8:	4620      	mov	r0, r4
c0d06cfa:	f000 fc8d 	bl	c0d07618 <USBD_CtlContinueSendData>
c0d06cfe:	e034      	b.n	c0d06d6a <USBD_LL_DataInStage+0xd8>
                                  pep->rem_length);
        
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
c0d06d00:	69a6      	ldr	r6, [r4, #24]
c0d06d02:	4630      	mov	r0, r6
c0d06d04:	4629      	mov	r1, r5
c0d06d06:	f000 fd39 	bl	c0d0777c <__aeabi_uidivmod>
c0d06d0a:	42ae      	cmp	r6, r5
c0d06d0c:	d30f      	bcc.n	c0d06d2e <USBD_LL_DataInStage+0x9c>
c0d06d0e:	2900      	cmp	r1, #0
c0d06d10:	d10d      	bne.n	c0d06d2e <USBD_LL_DataInStage+0x9c>
           (pep->total_length >= pep->maxpacket) &&
             (pep->total_length < pdev->ep0_data_len ))
c0d06d12:	20d8      	movs	r0, #216	; 0xd8
c0d06d14:	5820      	ldr	r0, [r4, r0]
c0d06d16:	4627      	mov	r7, r4
c0d06d18:	37d8      	adds	r7, #216	; 0xd8
                                  pep->rem_length);
        
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
c0d06d1a:	4286      	cmp	r6, r0
c0d06d1c:	d207      	bcs.n	c0d06d2e <USBD_LL_DataInStage+0x9c>
c0d06d1e:	2500      	movs	r5, #0
          USBD_LL_PrepareReceive (pdev,
                                  0,
                                  0);
          */

          USBD_CtlContinueSendData(pdev , NULL, 0);
c0d06d20:	4620      	mov	r0, r4
c0d06d22:	4629      	mov	r1, r5
c0d06d24:	462a      	mov	r2, r5
c0d06d26:	f000 fc77 	bl	c0d07618 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
c0d06d2a:	603d      	str	r5, [r7, #0]
c0d06d2c:	e01d      	b.n	c0d06d6a <USBD_LL_DataInStage+0xd8>
c0d06d2e:	4626      	mov	r6, r4
c0d06d30:	36dc      	adds	r6, #220	; 0xdc
c0d06d32:	2500      	movs	r5, #0
        }
        else
        {
          uint8_t intf;
          for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
            if(usbd_is_valid_intf(pdev, intf) && (pdev->interfacesClass[intf].pClass->EP0_TxSent != NULL)&&
c0d06d34:	4620      	mov	r0, r4
c0d06d36:	4629      	mov	r1, r5
c0d06d38:	f000 f866 	bl	c0d06e08 <usbd_is_valid_intf>
c0d06d3c:	2800      	cmp	r0, #0
c0d06d3e:	d00e      	beq.n	c0d06d5e <USBD_LL_DataInStage+0xcc>
c0d06d40:	00e8      	lsls	r0, r5, #3
c0d06d42:	1820      	adds	r0, r4, r0
c0d06d44:	21f4      	movs	r1, #244	; 0xf4
c0d06d46:	5840      	ldr	r0, [r0, r1]
c0d06d48:	68c0      	ldr	r0, [r0, #12]
c0d06d4a:	2800      	cmp	r0, #0
c0d06d4c:	d007      	beq.n	c0d06d5e <USBD_LL_DataInStage+0xcc>
               (pdev->dev_state == USBD_STATE_CONFIGURED))
c0d06d4e:	7831      	ldrb	r1, [r6, #0]
        }
        else
        {
          uint8_t intf;
          for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
            if(usbd_is_valid_intf(pdev, intf) && (pdev->interfacesClass[intf].pClass->EP0_TxSent != NULL)&&
c0d06d50:	2903      	cmp	r1, #3
c0d06d52:	d104      	bne.n	c0d06d5e <USBD_LL_DataInStage+0xcc>
               (pdev->dev_state == USBD_STATE_CONFIGURED))
            {
              ((EP0_RxReady_t)PIC(pdev->interfacesClass[intf].pClass->EP0_TxSent))(pdev); 
c0d06d54:	f7fe fed2 	bl	c0d05afc <pic>
c0d06d58:	4601      	mov	r1, r0
c0d06d5a:	4620      	mov	r0, r4
c0d06d5c:	4788      	blx	r1
          
        }
        else
        {
          uint8_t intf;
          for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
c0d06d5e:	1c6d      	adds	r5, r5, #1
c0d06d60:	2d03      	cmp	r5, #3
c0d06d62:	d1e7      	bne.n	c0d06d34 <USBD_LL_DataInStage+0xa2>
               (pdev->dev_state == USBD_STATE_CONFIGURED))
            {
              ((EP0_RxReady_t)PIC(pdev->interfacesClass[intf].pClass->EP0_TxSent))(pdev); 
            }
          }
          USBD_CtlReceiveStatus(pdev);
c0d06d64:	4620      	mov	r0, r4
c0d06d66:	f000 fc78 	bl	c0d0765a <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
c0d06d6a:	20e0      	movs	r0, #224	; 0xe0
c0d06d6c:	5c20      	ldrb	r0, [r4, r0]
c0d06d6e:	34e0      	adds	r4, #224	; 0xe0
c0d06d70:	2801      	cmp	r0, #1
c0d06d72:	d101      	bne.n	c0d06d78 <USBD_LL_DataInStage+0xe6>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
c0d06d74:	2000      	movs	r0, #0
c0d06d76:	7020      	strb	r0, [r4, #0]
      {
        ((DataIn_t)PIC(pdev->interfacesClass[intf].pClass->DataIn))(pdev, epnum); 
      }
    }
  }
  return USBD_OK;
c0d06d78:	2000      	movs	r0, #0
c0d06d7a:	b001      	add	sp, #4
c0d06d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

c0d06d7e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
c0d06d7e:	b5b0      	push	{r4, r5, r7, lr}
c0d06d80:	4604      	mov	r4, r0
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
c0d06d82:	2080      	movs	r0, #128	; 0x80
c0d06d84:	2140      	movs	r1, #64	; 0x40
c0d06d86:	5021      	str	r1, [r4, r0]
  

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
c0d06d88:	6221      	str	r1, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
c0d06d8a:	20dc      	movs	r0, #220	; 0xdc
c0d06d8c:	2101      	movs	r1, #1
c0d06d8e:	5421      	strb	r1, [r4, r0]
c0d06d90:	2500      	movs	r5, #0
 
  uint8_t intf;
  for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
    if( usbd_is_valid_intf(pdev, intf))
c0d06d92:	4620      	mov	r0, r4
c0d06d94:	4629      	mov	r1, r5
c0d06d96:	f000 f837 	bl	c0d06e08 <usbd_is_valid_intf>
c0d06d9a:	2800      	cmp	r0, #0
c0d06d9c:	d00a      	beq.n	c0d06db4 <USBD_LL_Reset+0x36>
    {
      ((DeInit_t)PIC(pdev->interfacesClass[intf].pClass->DeInit))(pdev, pdev->dev_config); 
c0d06d9e:	00e8      	lsls	r0, r5, #3
c0d06da0:	1820      	adds	r0, r4, r0
c0d06da2:	21f4      	movs	r1, #244	; 0xf4
c0d06da4:	5840      	ldr	r0, [r0, r1]
c0d06da6:	6840      	ldr	r0, [r0, #4]
c0d06da8:	f7fe fea8 	bl	c0d05afc <pic>
c0d06dac:	4602      	mov	r2, r0
c0d06dae:	7921      	ldrb	r1, [r4, #4]
c0d06db0:	4620      	mov	r0, r4
c0d06db2:	4790      	blx	r2
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 
  uint8_t intf;
  for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
c0d06db4:	1c6d      	adds	r5, r5, #1
c0d06db6:	2d03      	cmp	r5, #3
c0d06db8:	d1eb      	bne.n	c0d06d92 <USBD_LL_Reset+0x14>
    {
      ((DeInit_t)PIC(pdev->interfacesClass[intf].pClass->DeInit))(pdev, pdev->dev_config); 
    }
  }
  
  return USBD_OK;
c0d06dba:	2000      	movs	r0, #0
c0d06dbc:	bdb0      	pop	{r4, r5, r7, pc}

c0d06dbe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
c0d06dbe:	7401      	strb	r1, [r0, #16]
c0d06dc0:	2000      	movs	r0, #0
  return USBD_OK;
c0d06dc2:	4770      	bx	lr

c0d06dc4 <USBD_LL_Suspend>:
{
  UNUSED(pdev);
  // Ignored, gently
  //pdev->dev_old_state =  pdev->dev_state;
  //pdev->dev_state  = USBD_STATE_SUSPENDED;
  return USBD_OK;
c0d06dc4:	2000      	movs	r0, #0
c0d06dc6:	4770      	bx	lr

c0d06dc8 <USBD_LL_Resume>:
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  UNUSED(pdev);
  // Ignored, gently
  //pdev->dev_state = pdev->dev_old_state;  
  return USBD_OK;
c0d06dc8:	2000      	movs	r0, #0
c0d06dca:	4770      	bx	lr

c0d06dcc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
c0d06dcc:	b5b0      	push	{r4, r5, r7, lr}
c0d06dce:	4604      	mov	r4, r0
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
c0d06dd0:	20dc      	movs	r0, #220	; 0xdc
c0d06dd2:	5c20      	ldrb	r0, [r4, r0]
c0d06dd4:	2803      	cmp	r0, #3
c0d06dd6:	d115      	bne.n	c0d06e04 <USBD_LL_SOF+0x38>
c0d06dd8:	2500      	movs	r5, #0
  {
    uint8_t intf;
    for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
      if( usbd_is_valid_intf(pdev, intf) && pdev->interfacesClass[intf].pClass->SOF != NULL)
c0d06dda:	4620      	mov	r0, r4
c0d06ddc:	4629      	mov	r1, r5
c0d06dde:	f000 f813 	bl	c0d06e08 <usbd_is_valid_intf>
c0d06de2:	2800      	cmp	r0, #0
c0d06de4:	d00b      	beq.n	c0d06dfe <USBD_LL_SOF+0x32>
c0d06de6:	00e8      	lsls	r0, r5, #3
c0d06de8:	1820      	adds	r0, r4, r0
c0d06dea:	21f4      	movs	r1, #244	; 0xf4
c0d06dec:	5840      	ldr	r0, [r0, r1]
c0d06dee:	69c0      	ldr	r0, [r0, #28]
c0d06df0:	2800      	cmp	r0, #0
c0d06df2:	d004      	beq.n	c0d06dfe <USBD_LL_SOF+0x32>
      {
        ((SOF_t)PIC(pdev->interfacesClass[intf].pClass->SOF))(pdev); 
c0d06df4:	f7fe fe82 	bl	c0d05afc <pic>
c0d06df8:	4601      	mov	r1, r0
c0d06dfa:	4620      	mov	r0, r4
c0d06dfc:	4788      	blx	r1
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
  {
    uint8_t intf;
    for (intf =0; intf < USBD_MAX_NUM_INTERFACES; intf++) {
c0d06dfe:	1c6d      	adds	r5, r5, #1
c0d06e00:	2d03      	cmp	r5, #3
c0d06e02:	d1ea      	bne.n	c0d06dda <USBD_LL_SOF+0xe>
      {
        ((SOF_t)PIC(pdev->interfacesClass[intf].pClass->SOF))(pdev); 
      }
    }
  }
  return USBD_OK;
c0d06e04:	2000      	movs	r0, #0
c0d06e06:	bdb0      	pop	{r4, r5, r7, pc}

c0d06e08 <usbd_is_valid_intf>:

/** @defgroup USBD_REQ_Private_Functions
  * @{
  */ 

unsigned int usbd_is_valid_intf(USBD_HandleTypeDef *pdev , unsigned int intf) {
c0d06e08:	4602      	mov	r2, r0
c0d06e0a:	2000      	movs	r0, #0
  return intf < USBD_MAX_NUM_INTERFACES && pdev->interfacesClass[intf].pClass != NULL;
c0d06e0c:	2902      	cmp	r1, #2
c0d06e0e:	d807      	bhi.n	c0d06e20 <usbd_is_valid_intf+0x18>
c0d06e10:	00c8      	lsls	r0, r1, #3
c0d06e12:	1810      	adds	r0, r2, r0
c0d06e14:	21f4      	movs	r1, #244	; 0xf4
c0d06e16:	5841      	ldr	r1, [r0, r1]
c0d06e18:	2001      	movs	r0, #1
c0d06e1a:	2900      	cmp	r1, #0
c0d06e1c:	d100      	bne.n	c0d06e20 <usbd_is_valid_intf+0x18>
c0d06e1e:	4608      	mov	r0, r1
c0d06e20:	4770      	bx	lr

c0d06e22 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
c0d06e22:	b580      	push	{r7, lr}
c0d06e24:	784a      	ldrb	r2, [r1, #1]
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
c0d06e26:	2a04      	cmp	r2, #4
c0d06e28:	dd08      	ble.n	c0d06e3c <USBD_StdDevReq+0x1a>
c0d06e2a:	2a07      	cmp	r2, #7
c0d06e2c:	dc0f      	bgt.n	c0d06e4e <USBD_StdDevReq+0x2c>
c0d06e2e:	2a05      	cmp	r2, #5
c0d06e30:	d014      	beq.n	c0d06e5c <USBD_StdDevReq+0x3a>
c0d06e32:	2a06      	cmp	r2, #6
c0d06e34:	d11b      	bne.n	c0d06e6e <USBD_StdDevReq+0x4c>
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
c0d06e36:	f000 f821 	bl	c0d06e7c <USBD_GetDescriptor>
c0d06e3a:	e01d      	b.n	c0d06e78 <USBD_StdDevReq+0x56>
c0d06e3c:	2a00      	cmp	r2, #0
c0d06e3e:	d010      	beq.n	c0d06e62 <USBD_StdDevReq+0x40>
c0d06e40:	2a01      	cmp	r2, #1
c0d06e42:	d017      	beq.n	c0d06e74 <USBD_StdDevReq+0x52>
c0d06e44:	2a03      	cmp	r2, #3
c0d06e46:	d112      	bne.n	c0d06e6e <USBD_StdDevReq+0x4c>
    USBD_GetStatus (pdev , req);
    break;
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
c0d06e48:	f000 f92f 	bl	c0d070aa <USBD_SetFeature>
c0d06e4c:	e014      	b.n	c0d06e78 <USBD_StdDevReq+0x56>
c0d06e4e:	2a08      	cmp	r2, #8
c0d06e50:	d00a      	beq.n	c0d06e68 <USBD_StdDevReq+0x46>
c0d06e52:	2a09      	cmp	r2, #9
c0d06e54:	d10b      	bne.n	c0d06e6e <USBD_StdDevReq+0x4c>
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
    break;
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
c0d06e56:	f000 f8b8 	bl	c0d06fca <USBD_SetConfig>
c0d06e5a:	e00d      	b.n	c0d06e78 <USBD_StdDevReq+0x56>
    
    USBD_GetDescriptor (pdev, req) ;
    break;
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
c0d06e5c:	f000 f890 	bl	c0d06f80 <USBD_SetAddress>
c0d06e60:	e00a      	b.n	c0d06e78 <USBD_StdDevReq+0x56>
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
    break;
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
c0d06e62:	f000 f900 	bl	c0d07066 <USBD_GetStatus>
c0d06e66:	e007      	b.n	c0d06e78 <USBD_StdDevReq+0x56>
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
    break;
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
c0d06e68:	f000 f8e6 	bl	c0d07038 <USBD_GetConfig>
c0d06e6c:	e004      	b.n	c0d06e78 <USBD_StdDevReq+0x56>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
c0d06e6e:	f000 f961 	bl	c0d07134 <USBD_CtlError>
c0d06e72:	e001      	b.n	c0d06e78 <USBD_StdDevReq+0x56>
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
    break;
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
c0d06e74:	f000 f936 	bl	c0d070e4 <USBD_ClrFeature>
  default:  
    USBD_CtlError(pdev , req);
    break;
  }
  
  return ret;
c0d06e78:	2000      	movs	r0, #0
c0d06e7a:	bd80      	pop	{r7, pc}

c0d06e7c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
c0d06e7c:	b5b0      	push	{r4, r5, r7, lr}
c0d06e7e:	b082      	sub	sp, #8
c0d06e80:	460d      	mov	r5, r1
c0d06e82:	4604      	mov	r4, r0
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
c0d06e84:	8869      	ldrh	r1, [r5, #2]
c0d06e86:	0a08      	lsrs	r0, r1, #8
c0d06e88:	2805      	cmp	r0, #5
c0d06e8a:	dc12      	bgt.n	c0d06eb2 <USBD_GetDescriptor+0x36>
c0d06e8c:	2801      	cmp	r0, #1
c0d06e8e:	d01a      	beq.n	c0d06ec6 <USBD_GetDescriptor+0x4a>
c0d06e90:	2802      	cmp	r0, #2
c0d06e92:	d022      	beq.n	c0d06eda <USBD_GetDescriptor+0x5e>
c0d06e94:	2803      	cmp	r0, #3
c0d06e96:	d135      	bne.n	c0d06f04 <USBD_GetDescriptor+0x88>
c0d06e98:	b2c8      	uxtb	r0, r1
      }
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
c0d06e9a:	2802      	cmp	r0, #2
c0d06e9c:	dc37      	bgt.n	c0d06f0e <USBD_GetDescriptor+0x92>
c0d06e9e:	2800      	cmp	r0, #0
c0d06ea0:	d05e      	beq.n	c0d06f60 <USBD_GetDescriptor+0xe4>
c0d06ea2:	2801      	cmp	r0, #1
c0d06ea4:	d064      	beq.n	c0d06f70 <USBD_GetDescriptor+0xf4>
c0d06ea6:	2802      	cmp	r0, #2
c0d06ea8:	d12c      	bne.n	c0d06f04 <USBD_GetDescriptor+0x88>
    case USBD_IDX_MFC_STR:
      pbuf = ((GetManufacturerStrDescriptor_t)PIC(pdev->pDesc->GetManufacturerStrDescriptor))(pdev->dev_speed, &len);
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = ((GetProductStrDescriptor_t)PIC(pdev->pDesc->GetProductStrDescriptor))(pdev->dev_speed, &len);
c0d06eaa:	20f0      	movs	r0, #240	; 0xf0
c0d06eac:	5820      	ldr	r0, [r4, r0]
c0d06eae:	68c0      	ldr	r0, [r0, #12]
c0d06eb0:	e00c      	b.n	c0d06ecc <USBD_GetDescriptor+0x50>
c0d06eb2:	2806      	cmp	r0, #6
c0d06eb4:	d01a      	beq.n	c0d06eec <USBD_GetDescriptor+0x70>
c0d06eb6:	2807      	cmp	r0, #7
c0d06eb8:	d021      	beq.n	c0d06efe <USBD_GetDescriptor+0x82>
c0d06eba:	280f      	cmp	r0, #15
c0d06ebc:	d122      	bne.n	c0d06f04 <USBD_GetDescriptor+0x88>
    
  switch (req->wValue >> 8)
  { 
#if (USBD_LPM_ENABLED == 1)
  case USB_DESC_TYPE_BOS:
    pbuf = ((GetBOSDescriptor_t)PIC(pdev->pDesc->GetBOSDescriptor))(pdev->dev_speed, &len);
c0d06ebe:	20f0      	movs	r0, #240	; 0xf0
c0d06ec0:	5820      	ldr	r0, [r4, r0]
c0d06ec2:	69c0      	ldr	r0, [r0, #28]
c0d06ec4:	e002      	b.n	c0d06ecc <USBD_GetDescriptor+0x50>
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = ((GetDeviceDescriptor_t)PIC(pdev->pDesc->GetDeviceDescriptor))(pdev->dev_speed, &len);
c0d06ec6:	20f0      	movs	r0, #240	; 0xf0
c0d06ec8:	5820      	ldr	r0, [r4, r0]
c0d06eca:	6800      	ldr	r0, [r0, #0]
c0d06ecc:	f7fe fe16 	bl	c0d05afc <pic>
c0d06ed0:	4602      	mov	r2, r0
c0d06ed2:	7c20      	ldrb	r0, [r4, #16]
c0d06ed4:	a901      	add	r1, sp, #4
c0d06ed6:	4790      	blx	r2
c0d06ed8:	e030      	b.n	c0d06f3c <USBD_GetDescriptor+0xc0>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->interfacesClass[0].pClass != NULL) {
c0d06eda:	20f4      	movs	r0, #244	; 0xf4
c0d06edc:	5820      	ldr	r0, [r4, r0]
c0d06ede:	2800      	cmp	r0, #0
c0d06ee0:	d01f      	beq.n	c0d06f22 <USBD_GetDescriptor+0xa6>
      if(pdev->dev_speed == USBD_SPEED_HIGH )   
c0d06ee2:	7c21      	ldrb	r1, [r4, #16]
c0d06ee4:	2900      	cmp	r1, #0
c0d06ee6:	d023      	beq.n	c0d06f30 <USBD_GetDescriptor+0xb4>
        pbuf   = (uint8_t *)((GetHSConfigDescriptor_t)PIC(pdev->interfacesClass[0].pClass->GetHSConfigDescriptor))(&len);
        //pbuf[1] = USB_DESC_TYPE_CONFIGURATION; CONST BUFFER KTHX
      }
      else
      {
        pbuf   = (uint8_t *)((GetFSConfigDescriptor_t)PIC(pdev->interfacesClass[0].pClass->GetFSConfigDescriptor))(&len);
c0d06ee8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
c0d06eea:	e022      	b.n	c0d06f32 <USBD_GetDescriptor+0xb6>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH && pdev->interfacesClass[0].pClass != NULL )   
c0d06eec:	7c20      	ldrb	r0, [r4, #16]
c0d06eee:	2800      	cmp	r0, #0
c0d06ef0:	d108      	bne.n	c0d06f04 <USBD_GetDescriptor+0x88>
c0d06ef2:	20f4      	movs	r0, #244	; 0xf4
c0d06ef4:	5820      	ldr	r0, [r4, r0]
c0d06ef6:	2800      	cmp	r0, #0
c0d06ef8:	d004      	beq.n	c0d06f04 <USBD_GetDescriptor+0x88>
    {
      pbuf   = (uint8_t *)((GetDeviceQualifierDescriptor_t)PIC(pdev->interfacesClass[0].pClass->GetDeviceQualifierDescriptor))(&len);
c0d06efa:	6b40      	ldr	r0, [r0, #52]	; 0x34
c0d06efc:	e019      	b.n	c0d06f32 <USBD_GetDescriptor+0xb6>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH && pdev->interfacesClass[0].pClass != NULL)   
c0d06efe:	7c20      	ldrb	r0, [r4, #16]
c0d06f00:	2800      	cmp	r0, #0
c0d06f02:	d00f      	beq.n	c0d06f24 <USBD_GetDescriptor+0xa8>
c0d06f04:	4620      	mov	r0, r4
c0d06f06:	4629      	mov	r1, r5
c0d06f08:	f000 f914 	bl	c0d07134 <USBD_CtlError>
c0d06f0c:	e026      	b.n	c0d06f5c <USBD_GetDescriptor+0xe0>
c0d06f0e:	2803      	cmp	r0, #3
c0d06f10:	d02a      	beq.n	c0d06f68 <USBD_GetDescriptor+0xec>
c0d06f12:	2804      	cmp	r0, #4
c0d06f14:	d030      	beq.n	c0d06f78 <USBD_GetDescriptor+0xfc>
c0d06f16:	2805      	cmp	r0, #5
c0d06f18:	d1f4      	bne.n	c0d06f04 <USBD_GetDescriptor+0x88>
    case USBD_IDX_CONFIG_STR:
      pbuf = ((GetConfigurationStrDescriptor_t)PIC(pdev->pDesc->GetConfigurationStrDescriptor))(pdev->dev_speed, &len);
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = ((GetInterfaceStrDescriptor_t)PIC(pdev->pDesc->GetInterfaceStrDescriptor))(pdev->dev_speed, &len);
c0d06f1a:	20f0      	movs	r0, #240	; 0xf0
c0d06f1c:	5820      	ldr	r0, [r4, r0]
c0d06f1e:	6980      	ldr	r0, [r0, #24]
c0d06f20:	e7d4      	b.n	c0d06ecc <USBD_GetDescriptor+0x50>
c0d06f22:	e00c      	b.n	c0d06f3e <USBD_GetDescriptor+0xc2>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH && pdev->interfacesClass[0].pClass != NULL)   
c0d06f24:	20f4      	movs	r0, #244	; 0xf4
c0d06f26:	5820      	ldr	r0, [r4, r0]
c0d06f28:	2800      	cmp	r0, #0
c0d06f2a:	d0eb      	beq.n	c0d06f04 <USBD_GetDescriptor+0x88>
    {
      pbuf   = (uint8_t *)((GetOtherSpeedConfigDescriptor_t)PIC(pdev->interfacesClass[0].pClass->GetOtherSpeedConfigDescriptor))(&len);
c0d06f2c:	6b00      	ldr	r0, [r0, #48]	; 0x30
c0d06f2e:	e000      	b.n	c0d06f32 <USBD_GetDescriptor+0xb6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->interfacesClass[0].pClass != NULL) {
      if(pdev->dev_speed == USBD_SPEED_HIGH )   
      {
        pbuf   = (uint8_t *)((GetHSConfigDescriptor_t)PIC(pdev->interfacesClass[0].pClass->GetHSConfigDescriptor))(&len);
c0d06f30:	6a80      	ldr	r0, [r0, #40]	; 0x28
c0d06f32:	f7fe fde3 	bl	c0d05afc <pic>
c0d06f36:	4601      	mov	r1, r0
c0d06f38:	a801      	add	r0, sp, #4
c0d06f3a:	4788      	blx	r1
c0d06f3c:	4601      	mov	r1, r0
c0d06f3e:	a801      	add	r0, sp, #4
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
c0d06f40:	8802      	ldrh	r2, [r0, #0]
c0d06f42:	2a00      	cmp	r2, #0
c0d06f44:	d00a      	beq.n	c0d06f5c <USBD_GetDescriptor+0xe0>
c0d06f46:	88e8      	ldrh	r0, [r5, #6]
c0d06f48:	2800      	cmp	r0, #0
c0d06f4a:	d007      	beq.n	c0d06f5c <USBD_GetDescriptor+0xe0>
  {
    
    len = MIN(len , req->wLength);
c0d06f4c:	4282      	cmp	r2, r0
c0d06f4e:	d300      	bcc.n	c0d06f52 <USBD_GetDescriptor+0xd6>
c0d06f50:	4602      	mov	r2, r0
c0d06f52:	a801      	add	r0, sp, #4
c0d06f54:	8002      	strh	r2, [r0, #0]
    
    // prepare abort if host does not read the whole data
    //USBD_CtlReceiveStatus(pdev);

    // start transfer
    USBD_CtlSendData (pdev, 
c0d06f56:	4620      	mov	r0, r4
c0d06f58:	f000 fb48 	bl	c0d075ec <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
c0d06f5c:	b002      	add	sp, #8
c0d06f5e:	bdb0      	pop	{r4, r5, r7, pc}
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
    {
    case USBD_IDX_LANGID_STR:
     pbuf = ((GetLangIDStrDescriptor_t)PIC(pdev->pDesc->GetLangIDStrDescriptor))(pdev->dev_speed, &len);        
c0d06f60:	20f0      	movs	r0, #240	; 0xf0
c0d06f62:	5820      	ldr	r0, [r4, r0]
c0d06f64:	6840      	ldr	r0, [r0, #4]
c0d06f66:	e7b1      	b.n	c0d06ecc <USBD_GetDescriptor+0x50>
    case USBD_IDX_PRODUCT_STR:
      pbuf = ((GetProductStrDescriptor_t)PIC(pdev->pDesc->GetProductStrDescriptor))(pdev->dev_speed, &len);
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = ((GetSerialStrDescriptor_t)PIC(pdev->pDesc->GetSerialStrDescriptor))(pdev->dev_speed, &len);
c0d06f68:	20f0      	movs	r0, #240	; 0xf0
c0d06f6a:	5820      	ldr	r0, [r4, r0]
c0d06f6c:	6900      	ldr	r0, [r0, #16]
c0d06f6e:	e7ad      	b.n	c0d06ecc <USBD_GetDescriptor+0x50>
    case USBD_IDX_LANGID_STR:
     pbuf = ((GetLangIDStrDescriptor_t)PIC(pdev->pDesc->GetLangIDStrDescriptor))(pdev->dev_speed, &len);        
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = ((GetManufacturerStrDescriptor_t)PIC(pdev->pDesc->GetManufacturerStrDescriptor))(pdev->dev_speed, &len);
c0d06f70:	20f0      	movs	r0, #240	; 0xf0
c0d06f72:	5820      	ldr	r0, [r4, r0]
c0d06f74:	6880      	ldr	r0, [r0, #8]
c0d06f76:	e7a9      	b.n	c0d06ecc <USBD_GetDescriptor+0x50>
    case USBD_IDX_SERIAL_STR:
      pbuf = ((GetSerialStrDescriptor_t)PIC(pdev->pDesc->GetSerialStrDescriptor))(pdev->dev_speed, &len);
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = ((GetConfigurationStrDescriptor_t)PIC(pdev->pDesc->GetConfigurationStrDescriptor))(pdev->dev_speed, &len);
c0d06f78:	20f0      	movs	r0, #240	; 0xf0
c0d06f7a:	5820      	ldr	r0, [r4, r0]
c0d06f7c:	6940      	ldr	r0, [r0, #20]
c0d06f7e:	e7a5      	b.n	c0d06ecc <USBD_GetDescriptor+0x50>

c0d06f80 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
c0d06f80:	b570      	push	{r4, r5, r6, lr}
c0d06f82:	4604      	mov	r4, r0
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
c0d06f84:	8888      	ldrh	r0, [r1, #4]
c0d06f86:	2800      	cmp	r0, #0
c0d06f88:	d10b      	bne.n	c0d06fa2 <USBD_SetAddress+0x22>
c0d06f8a:	88c8      	ldrh	r0, [r1, #6]
c0d06f8c:	2800      	cmp	r0, #0
c0d06f8e:	d108      	bne.n	c0d06fa2 <USBD_SetAddress+0x22>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
c0d06f90:	8848      	ldrh	r0, [r1, #2]
c0d06f92:	267f      	movs	r6, #127	; 0x7f
c0d06f94:	4006      	ands	r6, r0
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
c0d06f96:	20dc      	movs	r0, #220	; 0xdc
c0d06f98:	5c20      	ldrb	r0, [r4, r0]
c0d06f9a:	4625      	mov	r5, r4
c0d06f9c:	35dc      	adds	r5, #220	; 0xdc
c0d06f9e:	2803      	cmp	r0, #3
c0d06fa0:	d103      	bne.n	c0d06faa <USBD_SetAddress+0x2a>
c0d06fa2:	4620      	mov	r0, r4
c0d06fa4:	f000 f8c6 	bl	c0d07134 <USBD_CtlError>
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
  } 
}
c0d06fa8:	bd70      	pop	{r4, r5, r6, pc}
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
c0d06faa:	20de      	movs	r0, #222	; 0xde
c0d06fac:	5426      	strb	r6, [r4, r0]
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
c0d06fae:	b2f1      	uxtb	r1, r6
c0d06fb0:	4620      	mov	r0, r4
c0d06fb2:	f7ff fd2b 	bl	c0d06a0c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
c0d06fb6:	4620      	mov	r0, r4
c0d06fb8:	f000 fb43 	bl	c0d07642 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
c0d06fbc:	2002      	movs	r0, #2
c0d06fbe:	2101      	movs	r1, #1
c0d06fc0:	2e00      	cmp	r6, #0
c0d06fc2:	d100      	bne.n	c0d06fc6 <USBD_SetAddress+0x46>
c0d06fc4:	4608      	mov	r0, r1
c0d06fc6:	7028      	strb	r0, [r5, #0]
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
  } 
}
c0d06fc8:	bd70      	pop	{r4, r5, r6, pc}

c0d06fca <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
c0d06fca:	b570      	push	{r4, r5, r6, lr}
c0d06fcc:	460d      	mov	r5, r1
c0d06fce:	4604      	mov	r4, r0
  
  uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
c0d06fd0:	78ae      	ldrb	r6, [r5, #2]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
c0d06fd2:	2e02      	cmp	r6, #2
c0d06fd4:	d21d      	bcs.n	c0d07012 <USBD_SetConfig+0x48>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
c0d06fd6:	20dc      	movs	r0, #220	; 0xdc
c0d06fd8:	5c21      	ldrb	r1, [r4, r0]
c0d06fda:	4620      	mov	r0, r4
c0d06fdc:	30dc      	adds	r0, #220	; 0xdc
c0d06fde:	2903      	cmp	r1, #3
c0d06fe0:	d007      	beq.n	c0d06ff2 <USBD_SetConfig+0x28>
c0d06fe2:	2902      	cmp	r1, #2
c0d06fe4:	d115      	bne.n	c0d07012 <USBD_SetConfig+0x48>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
c0d06fe6:	2e00      	cmp	r6, #0
c0d06fe8:	d022      	beq.n	c0d07030 <USBD_SetConfig+0x66>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
c0d06fea:	6066      	str	r6, [r4, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
c0d06fec:	2103      	movs	r1, #3
c0d06fee:	7001      	strb	r1, [r0, #0]
c0d06ff0:	e009      	b.n	c0d07006 <USBD_SetConfig+0x3c>
      }
      USBD_CtlSendStatus(pdev);
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
c0d06ff2:	2e00      	cmp	r6, #0
c0d06ff4:	d012      	beq.n	c0d0701c <USBD_SetConfig+0x52>
        pdev->dev_state = USBD_STATE_ADDRESSED;
        pdev->dev_config = cfgidx;          
        USBD_ClrClassConfig(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
      } 
      else  if (cfgidx != pdev->dev_config) 
c0d06ff6:	6860      	ldr	r0, [r4, #4]
c0d06ff8:	4286      	cmp	r6, r0
c0d06ffa:	d019      	beq.n	c0d07030 <USBD_SetConfig+0x66>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
c0d06ffc:	b2c1      	uxtb	r1, r0
c0d06ffe:	4620      	mov	r0, r4
c0d07000:	f7ff fda5 	bl	c0d06b4e <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
c0d07004:	6066      	str	r6, [r4, #4]
c0d07006:	4620      	mov	r0, r4
c0d07008:	4631      	mov	r1, r6
c0d0700a:	f7ff fd86 	bl	c0d06b1a <USBD_SetClassConfig>
c0d0700e:	2802      	cmp	r0, #2
c0d07010:	d10e      	bne.n	c0d07030 <USBD_SetConfig+0x66>
c0d07012:	4620      	mov	r0, r4
c0d07014:	4629      	mov	r1, r5
c0d07016:	f000 f88d 	bl	c0d07134 <USBD_CtlError>
    default:					
       USBD_CtlError(pdev , req);                     
      break;
    }
  }
}
c0d0701a:	bd70      	pop	{r4, r5, r6, pc}
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
c0d0701c:	2102      	movs	r1, #2
c0d0701e:	7001      	strb	r1, [r0, #0]
        pdev->dev_config = cfgidx;          
c0d07020:	6066      	str	r6, [r4, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
c0d07022:	4620      	mov	r0, r4
c0d07024:	4631      	mov	r1, r6
c0d07026:	f7ff fd92 	bl	c0d06b4e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
c0d0702a:	4620      	mov	r0, r4
c0d0702c:	f000 fb09 	bl	c0d07642 <USBD_CtlSendStatus>
c0d07030:	4620      	mov	r0, r4
c0d07032:	f000 fb06 	bl	c0d07642 <USBD_CtlSendStatus>
    default:					
       USBD_CtlError(pdev , req);                     
      break;
    }
  }
}
c0d07036:	bd70      	pop	{r4, r5, r6, pc}

c0d07038 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
c0d07038:	b580      	push	{r7, lr}

  if (req->wLength != 1) 
c0d0703a:	88ca      	ldrh	r2, [r1, #6]
c0d0703c:	2a01      	cmp	r2, #1
c0d0703e:	d10a      	bne.n	c0d07056 <USBD_GetConfig+0x1e>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
c0d07040:	22dc      	movs	r2, #220	; 0xdc
c0d07042:	5c82      	ldrb	r2, [r0, r2]
c0d07044:	2a03      	cmp	r2, #3
c0d07046:	d009      	beq.n	c0d0705c <USBD_GetConfig+0x24>
c0d07048:	2a02      	cmp	r2, #2
c0d0704a:	d104      	bne.n	c0d07056 <USBD_GetConfig+0x1e>
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
c0d0704c:	2100      	movs	r1, #0
c0d0704e:	6081      	str	r1, [r0, #8]
c0d07050:	4601      	mov	r1, r0
c0d07052:	3108      	adds	r1, #8
c0d07054:	e003      	b.n	c0d0705e <USBD_GetConfig+0x26>
c0d07056:	f000 f86d 	bl	c0d07134 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
c0d0705a:	bd80      	pop	{r7, pc}
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&pdev->dev_config,
c0d0705c:	1d01      	adds	r1, r0, #4
c0d0705e:	2201      	movs	r2, #1
c0d07060:	f000 fac4 	bl	c0d075ec <USBD_CtlSendData>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
c0d07064:	bd80      	pop	{r7, pc}

c0d07066 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
c0d07066:	b5b0      	push	{r4, r5, r7, lr}
c0d07068:	4604      	mov	r4, r0
  
    
  switch (pdev->dev_state) 
c0d0706a:	20dc      	movs	r0, #220	; 0xdc
c0d0706c:	5c20      	ldrb	r0, [r4, r0]
c0d0706e:	22fe      	movs	r2, #254	; 0xfe
c0d07070:	4002      	ands	r2, r0
c0d07072:	2a02      	cmp	r2, #2
c0d07074:	d115      	bne.n	c0d070a2 <USBD_GetStatus+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
c0d07076:	2001      	movs	r0, #1
c0d07078:	60e0      	str	r0, [r4, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) USBD_CtlReceiveStatus(pdev);
c0d0707a:	20e4      	movs	r0, #228	; 0xe4
c0d0707c:	5821      	ldr	r1, [r4, r0]
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
c0d0707e:	4625      	mov	r5, r4
c0d07080:	350c      	adds	r5, #12
c0d07082:	2003      	movs	r0, #3
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) USBD_CtlReceiveStatus(pdev);
c0d07084:	2900      	cmp	r1, #0
c0d07086:	d005      	beq.n	c0d07094 <USBD_GetStatus+0x2e>
c0d07088:	4620      	mov	r0, r4
c0d0708a:	f000 fae6 	bl	c0d0765a <USBD_CtlReceiveStatus>
c0d0708e:	68e1      	ldr	r1, [r4, #12]
c0d07090:	2002      	movs	r0, #2
c0d07092:	4308      	orrs	r0, r1
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
c0d07094:	60e0      	str	r0, [r4, #12]
    }
    
    USBD_CtlSendData (pdev, 
c0d07096:	2202      	movs	r2, #2
c0d07098:	4620      	mov	r0, r4
c0d0709a:	4629      	mov	r1, r5
c0d0709c:	f000 faa6 	bl	c0d075ec <USBD_CtlSendData>
    
  default :
    USBD_CtlError(pdev , req);                        
    break;
  }
}
c0d070a0:	bdb0      	pop	{r4, r5, r7, pc}
                      (uint8_t *)& pdev->dev_config_status,
                      2);
    break;
    
  default :
    USBD_CtlError(pdev , req);                        
c0d070a2:	4620      	mov	r0, r4
c0d070a4:	f000 f846 	bl	c0d07134 <USBD_CtlError>
    break;
  }
}
c0d070a8:	bdb0      	pop	{r4, r5, r7, pc}

c0d070aa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
c0d070aa:	b5b0      	push	{r4, r5, r7, lr}
c0d070ac:	460d      	mov	r5, r1
c0d070ae:	4604      	mov	r4, r0

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
c0d070b0:	8868      	ldrh	r0, [r5, #2]
c0d070b2:	2801      	cmp	r0, #1
c0d070b4:	d115      	bne.n	c0d070e2 <USBD_SetFeature+0x38>
  {
    pdev->dev_remote_wakeup = 1;  
c0d070b6:	20e4      	movs	r0, #228	; 0xe4
c0d070b8:	2101      	movs	r1, #1
c0d070ba:	5021      	str	r1, [r4, r0]
    if(usbd_is_valid_intf(pdev, LOBYTE(req->wIndex))) {
c0d070bc:	7928      	ldrb	r0, [r5, #4]
/** @defgroup USBD_REQ_Private_Functions
  * @{
  */ 

unsigned int usbd_is_valid_intf(USBD_HandleTypeDef *pdev , unsigned int intf) {
  return intf < USBD_MAX_NUM_INTERFACES && pdev->interfacesClass[intf].pClass != NULL;
c0d070be:	2802      	cmp	r0, #2
c0d070c0:	d80c      	bhi.n	c0d070dc <USBD_SetFeature+0x32>
c0d070c2:	00c0      	lsls	r0, r0, #3
c0d070c4:	1820      	adds	r0, r4, r0
c0d070c6:	21f4      	movs	r1, #244	; 0xf4
c0d070c8:	5840      	ldr	r0, [r0, r1]
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
  {
    pdev->dev_remote_wakeup = 1;  
    if(usbd_is_valid_intf(pdev, LOBYTE(req->wIndex))) {
c0d070ca:	2800      	cmp	r0, #0
c0d070cc:	d006      	beq.n	c0d070dc <USBD_SetFeature+0x32>
      ((Setup_t)PIC(pdev->interfacesClass[LOBYTE(req->wIndex)].pClass->Setup)) (pdev, req);   
c0d070ce:	6880      	ldr	r0, [r0, #8]
c0d070d0:	f7fe fd14 	bl	c0d05afc <pic>
c0d070d4:	4602      	mov	r2, r0
c0d070d6:	4620      	mov	r0, r4
c0d070d8:	4629      	mov	r1, r5
c0d070da:	4790      	blx	r2
    }
    USBD_CtlSendStatus(pdev);
c0d070dc:	4620      	mov	r0, r4
c0d070de:	f000 fab0 	bl	c0d07642 <USBD_CtlSendStatus>
  }

}
c0d070e2:	bdb0      	pop	{r4, r5, r7, pc}

c0d070e4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
c0d070e4:	b5b0      	push	{r4, r5, r7, lr}
c0d070e6:	460d      	mov	r5, r1
c0d070e8:	4604      	mov	r4, r0
  switch (pdev->dev_state)
c0d070ea:	20dc      	movs	r0, #220	; 0xdc
c0d070ec:	5c20      	ldrb	r0, [r4, r0]
c0d070ee:	21fe      	movs	r1, #254	; 0xfe
c0d070f0:	4001      	ands	r1, r0
c0d070f2:	2902      	cmp	r1, #2
c0d070f4:	d119      	bne.n	c0d0712a <USBD_ClrFeature+0x46>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
c0d070f6:	8868      	ldrh	r0, [r5, #2]
c0d070f8:	2801      	cmp	r0, #1
c0d070fa:	d11a      	bne.n	c0d07132 <USBD_ClrFeature+0x4e>
    {
      pdev->dev_remote_wakeup = 0; 
c0d070fc:	20e4      	movs	r0, #228	; 0xe4
c0d070fe:	2100      	movs	r1, #0
c0d07100:	5021      	str	r1, [r4, r0]
      if(usbd_is_valid_intf(pdev, LOBYTE(req->wIndex))) {
c0d07102:	7928      	ldrb	r0, [r5, #4]
/** @defgroup USBD_REQ_Private_Functions
  * @{
  */ 

unsigned int usbd_is_valid_intf(USBD_HandleTypeDef *pdev , unsigned int intf) {
  return intf < USBD_MAX_NUM_INTERFACES && pdev->interfacesClass[intf].pClass != NULL;
c0d07104:	2802      	cmp	r0, #2
c0d07106:	d80c      	bhi.n	c0d07122 <USBD_ClrFeature+0x3e>
c0d07108:	00c0      	lsls	r0, r0, #3
c0d0710a:	1820      	adds	r0, r4, r0
c0d0710c:	21f4      	movs	r1, #244	; 0xf4
c0d0710e:	5840      	ldr	r0, [r0, r1]
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
    {
      pdev->dev_remote_wakeup = 0; 
      if(usbd_is_valid_intf(pdev, LOBYTE(req->wIndex))) {
c0d07110:	2800      	cmp	r0, #0
c0d07112:	d006      	beq.n	c0d07122 <USBD_ClrFeature+0x3e>
        ((Setup_t)PIC(pdev->interfacesClass[LOBYTE(req->wIndex)].pClass->Setup)) (pdev, req);   
c0d07114:	6880      	ldr	r0, [r0, #8]
c0d07116:	f7fe fcf1 	bl	c0d05afc <pic>
c0d0711a:	4602      	mov	r2, r0
c0d0711c:	4620      	mov	r0, r4
c0d0711e:	4629      	mov	r1, r5
c0d07120:	4790      	blx	r2
      }
      USBD_CtlSendStatus(pdev);
c0d07122:	4620      	mov	r0, r4
c0d07124:	f000 fa8d 	bl	c0d07642 <USBD_CtlSendStatus>
    
  default :
     USBD_CtlError(pdev , req);
    break;
  }
}
c0d07128:	bdb0      	pop	{r4, r5, r7, pc}
      USBD_CtlSendStatus(pdev);
    }
    break;
    
  default :
     USBD_CtlError(pdev , req);
c0d0712a:	4620      	mov	r0, r4
c0d0712c:	4629      	mov	r1, r5
c0d0712e:	f000 f801 	bl	c0d07134 <USBD_CtlError>
    break;
  }
}
c0d07132:	bdb0      	pop	{r4, r5, r7, pc}

c0d07134 <USBD_CtlError>:
  USBD_LL_StallEP(pdev , 0);
}

__weak void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
c0d07134:	b510      	push	{r4, lr}
c0d07136:	4604      	mov	r4, r0
* @param  req: usb request
* @retval None
*/
void USBD_CtlStall( USBD_HandleTypeDef *pdev)
{
  USBD_LL_StallEP(pdev , 0x80);
c0d07138:	2180      	movs	r1, #128	; 0x80
c0d0713a:	f7ff fc0b 	bl	c0d06954 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
c0d0713e:	2100      	movs	r1, #0
c0d07140:	4620      	mov	r0, r4
c0d07142:	f7ff fc07 	bl	c0d06954 <USBD_LL_StallEP>

__weak void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_CtlStall(pdev);
}
c0d07146:	bd10      	pop	{r4, pc}

c0d07148 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
c0d07148:	b5b0      	push	{r4, r5, r7, lr}
c0d0714a:	460d      	mov	r5, r1
c0d0714c:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
c0d0714e:	20dc      	movs	r0, #220	; 0xdc
c0d07150:	5c20      	ldrb	r0, [r4, r0]
c0d07152:	2803      	cmp	r0, #3
c0d07154:	d116      	bne.n	c0d07184 <USBD_StdItfReq+0x3c>
  {
  case USBD_STATE_CONFIGURED:
    
    if (usbd_is_valid_intf(pdev, LOBYTE(req->wIndex))) 
c0d07156:	7928      	ldrb	r0, [r5, #4]
/** @defgroup USBD_REQ_Private_Functions
  * @{
  */ 

unsigned int usbd_is_valid_intf(USBD_HandleTypeDef *pdev , unsigned int intf) {
  return intf < USBD_MAX_NUM_INTERFACES && pdev->interfacesClass[intf].pClass != NULL;
c0d07158:	2802      	cmp	r0, #2
c0d0715a:	d813      	bhi.n	c0d07184 <USBD_StdItfReq+0x3c>
c0d0715c:	00c0      	lsls	r0, r0, #3
c0d0715e:	1820      	adds	r0, r4, r0
c0d07160:	21f4      	movs	r1, #244	; 0xf4
c0d07162:	5840      	ldr	r0, [r0, r1]
  
  switch (pdev->dev_state) 
  {
  case USBD_STATE_CONFIGURED:
    
    if (usbd_is_valid_intf(pdev, LOBYTE(req->wIndex))) 
c0d07164:	2800      	cmp	r0, #0
c0d07166:	d00d      	beq.n	c0d07184 <USBD_StdItfReq+0x3c>
    {
      ((Setup_t)PIC(pdev->interfacesClass[LOBYTE(req->wIndex)].pClass->Setup)) (pdev, req);
c0d07168:	6880      	ldr	r0, [r0, #8]
c0d0716a:	f7fe fcc7 	bl	c0d05afc <pic>
c0d0716e:	4602      	mov	r2, r0
c0d07170:	4620      	mov	r0, r4
c0d07172:	4629      	mov	r1, r5
c0d07174:	4790      	blx	r2
      
      if((req->wLength == 0)&& (ret == USBD_OK))
c0d07176:	88e8      	ldrh	r0, [r5, #6]
c0d07178:	2800      	cmp	r0, #0
c0d0717a:	d107      	bne.n	c0d0718c <USBD_StdItfReq+0x44>
      {
         USBD_CtlSendStatus(pdev);
c0d0717c:	4620      	mov	r0, r4
c0d0717e:	f000 fa60 	bl	c0d07642 <USBD_CtlSendStatus>
c0d07182:	e003      	b.n	c0d0718c <USBD_StdItfReq+0x44>
c0d07184:	4620      	mov	r0, r4
c0d07186:	4629      	mov	r1, r5
c0d07188:	f7ff ffd4 	bl	c0d07134 <USBD_CtlError>
    
  default:
     USBD_CtlError(pdev , req);
    break;
  }
  return USBD_OK;
c0d0718c:	2000      	movs	r0, #0
c0d0718e:	bdb0      	pop	{r4, r5, r7, pc}

c0d07190 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
c0d07190:	b570      	push	{r4, r5, r6, lr}
c0d07192:	460d      	mov	r5, r1
c0d07194:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20 && usbd_is_valid_intf(pdev, LOBYTE(req->wIndex)))
c0d07196:	7828      	ldrb	r0, [r5, #0]
c0d07198:	2160      	movs	r1, #96	; 0x60
c0d0719a:	4001      	ands	r1, r0
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
c0d0719c:	792e      	ldrb	r6, [r5, #4]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20 && usbd_is_valid_intf(pdev, LOBYTE(req->wIndex)))
c0d0719e:	2920      	cmp	r1, #32
c0d071a0:	d10f      	bne.n	c0d071c2 <USBD_StdEPReq+0x32>
/** @defgroup USBD_REQ_Private_Functions
  * @{
  */ 

unsigned int usbd_is_valid_intf(USBD_HandleTypeDef *pdev , unsigned int intf) {
  return intf < USBD_MAX_NUM_INTERFACES && pdev->interfacesClass[intf].pClass != NULL;
c0d071a2:	2e02      	cmp	r6, #2
c0d071a4:	d80d      	bhi.n	c0d071c2 <USBD_StdEPReq+0x32>
c0d071a6:	00f0      	lsls	r0, r6, #3
c0d071a8:	1820      	adds	r0, r4, r0
c0d071aa:	21f4      	movs	r1, #244	; 0xf4
c0d071ac:	5840      	ldr	r0, [r0, r1]
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20 && usbd_is_valid_intf(pdev, LOBYTE(req->wIndex)))
c0d071ae:	2800      	cmp	r0, #0
c0d071b0:	d007      	beq.n	c0d071c2 <USBD_StdEPReq+0x32>
  {
    ((Setup_t)PIC(pdev->interfacesClass[LOBYTE(req->wIndex)].pClass->Setup)) (pdev, req);
c0d071b2:	6880      	ldr	r0, [r0, #8]
c0d071b4:	f7fe fca2 	bl	c0d05afc <pic>
c0d071b8:	4602      	mov	r2, r0
c0d071ba:	4620      	mov	r0, r4
c0d071bc:	4629      	mov	r1, r5
c0d071be:	4790      	blx	r2
c0d071c0:	e06d      	b.n	c0d0729e <USBD_StdEPReq+0x10e>
    
    return USBD_OK;
  }
  
  switch (req->bRequest) 
c0d071c2:	7868      	ldrb	r0, [r5, #1]
c0d071c4:	2800      	cmp	r0, #0
c0d071c6:	d017      	beq.n	c0d071f8 <USBD_StdEPReq+0x68>
c0d071c8:	2801      	cmp	r0, #1
c0d071ca:	d01e      	beq.n	c0d0720a <USBD_StdEPReq+0x7a>
c0d071cc:	2803      	cmp	r0, #3
c0d071ce:	d166      	bne.n	c0d0729e <USBD_StdEPReq+0x10e>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
c0d071d0:	20dc      	movs	r0, #220	; 0xdc
c0d071d2:	5c20      	ldrb	r0, [r4, r0]
c0d071d4:	2803      	cmp	r0, #3
c0d071d6:	d11c      	bne.n	c0d07212 <USBD_StdEPReq+0x82>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
c0d071d8:	8868      	ldrh	r0, [r5, #2]
c0d071da:	2800      	cmp	r0, #0
c0d071dc:	d108      	bne.n	c0d071f0 <USBD_StdEPReq+0x60>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
c0d071de:	2080      	movs	r0, #128	; 0x80
c0d071e0:	4330      	orrs	r0, r6
c0d071e2:	2880      	cmp	r0, #128	; 0x80
c0d071e4:	d004      	beq.n	c0d071f0 <USBD_StdEPReq+0x60>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
c0d071e6:	4620      	mov	r0, r4
c0d071e8:	4631      	mov	r1, r6
c0d071ea:	f7ff fbb3 	bl	c0d06954 <USBD_LL_StallEP>
          
        }
c0d071ee:	792e      	ldrb	r6, [r5, #4]
/** @defgroup USBD_REQ_Private_Functions
  * @{
  */ 

unsigned int usbd_is_valid_intf(USBD_HandleTypeDef *pdev , unsigned int intf) {
  return intf < USBD_MAX_NUM_INTERFACES && pdev->interfacesClass[intf].pClass != NULL;
c0d071f0:	2e02      	cmp	r6, #2
c0d071f2:	d851      	bhi.n	c0d07298 <USBD_StdEPReq+0x108>
c0d071f4:	00f0      	lsls	r0, r6, #3
c0d071f6:	e043      	b.n	c0d07280 <USBD_StdEPReq+0xf0>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
c0d071f8:	20dc      	movs	r0, #220	; 0xdc
c0d071fa:	5c20      	ldrb	r0, [r4, r0]
c0d071fc:	2803      	cmp	r0, #3
c0d071fe:	d018      	beq.n	c0d07232 <USBD_StdEPReq+0xa2>
c0d07200:	2802      	cmp	r0, #2
c0d07202:	d111      	bne.n	c0d07228 <USBD_StdEPReq+0x98>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
c0d07204:	0670      	lsls	r0, r6, #25
c0d07206:	d10a      	bne.n	c0d0721e <USBD_StdEPReq+0x8e>
c0d07208:	e049      	b.n	c0d0729e <USBD_StdEPReq+0x10e>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
c0d0720a:	20dc      	movs	r0, #220	; 0xdc
c0d0720c:	5c20      	ldrb	r0, [r4, r0]
c0d0720e:	2803      	cmp	r0, #3
c0d07210:	d029      	beq.n	c0d07266 <USBD_StdEPReq+0xd6>
c0d07212:	2802      	cmp	r0, #2
c0d07214:	d108      	bne.n	c0d07228 <USBD_StdEPReq+0x98>
c0d07216:	2080      	movs	r0, #128	; 0x80
c0d07218:	4330      	orrs	r0, r6
c0d0721a:	2880      	cmp	r0, #128	; 0x80
c0d0721c:	d03f      	beq.n	c0d0729e <USBD_StdEPReq+0x10e>
c0d0721e:	4620      	mov	r0, r4
c0d07220:	4631      	mov	r1, r6
c0d07222:	f7ff fb97 	bl	c0d06954 <USBD_LL_StallEP>
c0d07226:	e03a      	b.n	c0d0729e <USBD_StdEPReq+0x10e>
c0d07228:	4620      	mov	r0, r4
c0d0722a:	4629      	mov	r1, r5
c0d0722c:	f7ff ff82 	bl	c0d07134 <USBD_CtlError>
c0d07230:	e035      	b.n	c0d0729e <USBD_StdEPReq+0x10e>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
c0d07232:	4625      	mov	r5, r4
c0d07234:	3514      	adds	r5, #20
                                         &pdev->ep_out[ep_addr & 0x7F];
c0d07236:	4620      	mov	r0, r4
c0d07238:	3074      	adds	r0, #116	; 0x74
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
c0d0723a:	2180      	movs	r1, #128	; 0x80
c0d0723c:	420e      	tst	r6, r1
c0d0723e:	d100      	bne.n	c0d07242 <USBD_StdEPReq+0xb2>
c0d07240:	4605      	mov	r5, r0
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
c0d07242:	4620      	mov	r0, r4
c0d07244:	4631      	mov	r1, r6
c0d07246:	f7ff fbcf 	bl	c0d069e8 <USBD_LL_IsStallEP>
c0d0724a:	2101      	movs	r1, #1
c0d0724c:	2800      	cmp	r0, #0
c0d0724e:	d100      	bne.n	c0d07252 <USBD_StdEPReq+0xc2>
c0d07250:	4601      	mov	r1, r0
c0d07252:	207f      	movs	r0, #127	; 0x7f
c0d07254:	4006      	ands	r6, r0
c0d07256:	0130      	lsls	r0, r6, #4
c0d07258:	5029      	str	r1, [r5, r0]
c0d0725a:	1829      	adds	r1, r5, r0
      else
      {
        pep->status = 0x0000;  
      }
      
      USBD_CtlSendData (pdev,
c0d0725c:	2202      	movs	r2, #2
c0d0725e:	4620      	mov	r0, r4
c0d07260:	f000 f9c4 	bl	c0d075ec <USBD_CtlSendData>
c0d07264:	e01b      	b.n	c0d0729e <USBD_StdEPReq+0x10e>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
c0d07266:	8868      	ldrh	r0, [r5, #2]
c0d07268:	2800      	cmp	r0, #0
c0d0726a:	d118      	bne.n	c0d0729e <USBD_StdEPReq+0x10e>
      {
        if ((ep_addr & 0x7F) != 0x00) 
c0d0726c:	0670      	lsls	r0, r6, #25
c0d0726e:	d013      	beq.n	c0d07298 <USBD_StdEPReq+0x108>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
c0d07270:	4620      	mov	r0, r4
c0d07272:	4631      	mov	r1, r6
c0d07274:	f7ff fb94 	bl	c0d069a0 <USBD_LL_ClearStallEP>
          if(usbd_is_valid_intf(pdev, LOBYTE(req->wIndex))) {
c0d07278:	7928      	ldrb	r0, [r5, #4]
/** @defgroup USBD_REQ_Private_Functions
  * @{
  */ 

unsigned int usbd_is_valid_intf(USBD_HandleTypeDef *pdev , unsigned int intf) {
  return intf < USBD_MAX_NUM_INTERFACES && pdev->interfacesClass[intf].pClass != NULL;
c0d0727a:	2802      	cmp	r0, #2
c0d0727c:	d80c      	bhi.n	c0d07298 <USBD_StdEPReq+0x108>
c0d0727e:	00c0      	lsls	r0, r0, #3
c0d07280:	1820      	adds	r0, r4, r0
c0d07282:	21f4      	movs	r1, #244	; 0xf4
c0d07284:	5840      	ldr	r0, [r0, r1]
c0d07286:	2800      	cmp	r0, #0
c0d07288:	d006      	beq.n	c0d07298 <USBD_StdEPReq+0x108>
c0d0728a:	6880      	ldr	r0, [r0, #8]
c0d0728c:	f7fe fc36 	bl	c0d05afc <pic>
c0d07290:	4602      	mov	r2, r0
c0d07292:	4620      	mov	r0, r4
c0d07294:	4629      	mov	r1, r5
c0d07296:	4790      	blx	r2
c0d07298:	4620      	mov	r0, r4
c0d0729a:	f000 f9d2 	bl	c0d07642 <USBD_CtlSendStatus>
    
  default:
    break;
  }
  return ret;
}
c0d0729e:	2000      	movs	r0, #0
c0d072a0:	bd70      	pop	{r4, r5, r6, pc}

c0d072a2 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
c0d072a2:	780a      	ldrb	r2, [r1, #0]
c0d072a4:	7002      	strb	r2, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
c0d072a6:	784a      	ldrb	r2, [r1, #1]
c0d072a8:	7042      	strb	r2, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
c0d072aa:	788a      	ldrb	r2, [r1, #2]
c0d072ac:	78cb      	ldrb	r3, [r1, #3]
c0d072ae:	021b      	lsls	r3, r3, #8
c0d072b0:	4313      	orrs	r3, r2
c0d072b2:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
c0d072b4:	790a      	ldrb	r2, [r1, #4]
c0d072b6:	794b      	ldrb	r3, [r1, #5]
c0d072b8:	021b      	lsls	r3, r3, #8
c0d072ba:	4313      	orrs	r3, r2
c0d072bc:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
c0d072be:	798a      	ldrb	r2, [r1, #6]
c0d072c0:	79c9      	ldrb	r1, [r1, #7]
c0d072c2:	0209      	lsls	r1, r1, #8
c0d072c4:	4311      	orrs	r1, r2
c0d072c6:	80c1      	strh	r1, [r0, #6]

}
c0d072c8:	4770      	bx	lr

c0d072ca <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
c0d072ca:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d072cc:	b083      	sub	sp, #12
c0d072ce:	460d      	mov	r5, r1
c0d072d0:	4604      	mov	r4, r0
c0d072d2:	a802      	add	r0, sp, #8
c0d072d4:	2700      	movs	r7, #0
  uint16_t len = 0;
c0d072d6:	8007      	strh	r7, [r0, #0]
c0d072d8:	a801      	add	r0, sp, #4
  uint8_t  *pbuf = NULL;

  uint8_t val = 0;
c0d072da:	7007      	strb	r7, [r0, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
c0d072dc:	7829      	ldrb	r1, [r5, #0]
c0d072de:	2060      	movs	r0, #96	; 0x60
c0d072e0:	4008      	ands	r0, r1
c0d072e2:	2800      	cmp	r0, #0
c0d072e4:	d010      	beq.n	c0d07308 <USBD_HID_Setup+0x3e>
c0d072e6:	2820      	cmp	r0, #32
c0d072e8:	d138      	bne.n	c0d0735c <USBD_HID_Setup+0x92>
c0d072ea:	7868      	ldrb	r0, [r5, #1]
  {
  case USB_REQ_TYPE_CLASS :  
    switch (req->bRequest)
c0d072ec:	4601      	mov	r1, r0
c0d072ee:	390a      	subs	r1, #10
c0d072f0:	2902      	cmp	r1, #2
c0d072f2:	d333      	bcc.n	c0d0735c <USBD_HID_Setup+0x92>
c0d072f4:	2802      	cmp	r0, #2
c0d072f6:	d01c      	beq.n	c0d07332 <USBD_HID_Setup+0x68>
c0d072f8:	2803      	cmp	r0, #3
c0d072fa:	d01a      	beq.n	c0d07332 <USBD_HID_Setup+0x68>
                        (uint8_t *)&val,
                        1);      
      break;      
      
    default:
      USBD_CtlError (pdev, req);
c0d072fc:	4620      	mov	r0, r4
c0d072fe:	4629      	mov	r1, r5
c0d07300:	f7ff ff18 	bl	c0d07134 <USBD_CtlError>
c0d07304:	2702      	movs	r7, #2
c0d07306:	e029      	b.n	c0d0735c <USBD_HID_Setup+0x92>
      return USBD_FAIL; 
    }
    break;
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
c0d07308:	7868      	ldrb	r0, [r5, #1]
c0d0730a:	280b      	cmp	r0, #11
c0d0730c:	d014      	beq.n	c0d07338 <USBD_HID_Setup+0x6e>
c0d0730e:	280a      	cmp	r0, #10
c0d07310:	d00f      	beq.n	c0d07332 <USBD_HID_Setup+0x68>
c0d07312:	2806      	cmp	r0, #6
c0d07314:	d122      	bne.n	c0d0735c <USBD_HID_Setup+0x92>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      // 0x22
      if( req->wValue >> 8 == HID_REPORT_DESC)
c0d07316:	8868      	ldrh	r0, [r5, #2]
c0d07318:	0a00      	lsrs	r0, r0, #8
c0d0731a:	2700      	movs	r7, #0
c0d0731c:	2821      	cmp	r0, #33	; 0x21
c0d0731e:	d00f      	beq.n	c0d07340 <USBD_HID_Setup+0x76>
c0d07320:	2822      	cmp	r0, #34	; 0x22
      
      //USBD_CtlReceiveStatus(pdev);
      
      USBD_CtlSendData (pdev, 
                        pbuf,
                        len);
c0d07322:	463a      	mov	r2, r7
c0d07324:	4639      	mov	r1, r7
c0d07326:	d116      	bne.n	c0d07356 <USBD_HID_Setup+0x8c>
c0d07328:	ae02      	add	r6, sp, #8
    {
    case USB_REQ_GET_DESCRIPTOR: 
      // 0x22
      if( req->wValue >> 8 == HID_REPORT_DESC)
      {
        pbuf =  USBD_HID_GetReportDescriptor_impl(&len);
c0d0732a:	4630      	mov	r0, r6
c0d0732c:	f000 f858 	bl	c0d073e0 <USBD_HID_GetReportDescriptor_impl>
c0d07330:	e00a      	b.n	c0d07348 <USBD_HID_Setup+0x7e>
c0d07332:	a901      	add	r1, sp, #4
c0d07334:	2201      	movs	r2, #1
c0d07336:	e00e      	b.n	c0d07356 <USBD_HID_Setup+0x8c>
                        len);
      break;

    case USB_REQ_SET_INTERFACE :
      //hhid->AltSetting = (uint8_t)(req->wValue);
      USBD_CtlSendStatus(pdev);
c0d07338:	4620      	mov	r0, r4
c0d0733a:	f000 f982 	bl	c0d07642 <USBD_CtlSendStatus>
c0d0733e:	e00d      	b.n	c0d0735c <USBD_HID_Setup+0x92>
c0d07340:	ae02      	add	r6, sp, #8
        len = MIN(len , req->wLength);
      }
      // 0x21
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
      {
        pbuf = USBD_HID_GetHidDescriptor_impl(&len);
c0d07342:	4630      	mov	r0, r6
c0d07344:	f000 f832 	bl	c0d073ac <USBD_HID_GetHidDescriptor_impl>
c0d07348:	4601      	mov	r1, r0
c0d0734a:	8832      	ldrh	r2, [r6, #0]
c0d0734c:	88e8      	ldrh	r0, [r5, #6]
c0d0734e:	4282      	cmp	r2, r0
c0d07350:	d300      	bcc.n	c0d07354 <USBD_HID_Setup+0x8a>
c0d07352:	4602      	mov	r2, r0
c0d07354:	8032      	strh	r2, [r6, #0]
c0d07356:	4620      	mov	r0, r4
c0d07358:	f000 f948 	bl	c0d075ec <USBD_CtlSendData>
      
    }
  }

  return USBD_OK;
}
c0d0735c:	b2f8      	uxtb	r0, r7
c0d0735e:	b003      	add	sp, #12
c0d07360:	bdf0      	pop	{r4, r5, r6, r7, pc}

c0d07362 <USBD_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t  USBD_HID_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
c0d07362:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d07364:	b081      	sub	sp, #4
c0d07366:	4604      	mov	r4, r0
  UNUSED(cfgidx);

  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
c0d07368:	2182      	movs	r1, #130	; 0x82
c0d0736a:	2603      	movs	r6, #3
c0d0736c:	2540      	movs	r5, #64	; 0x40
c0d0736e:	4632      	mov	r2, r6
c0d07370:	462b      	mov	r3, r5
c0d07372:	f7ff fab3 	bl	c0d068dc <USBD_LL_OpenEP>
c0d07376:	2702      	movs	r7, #2
                 HID_EPIN_ADDR,
                 USBD_EP_TYPE_INTR,
                 HID_EPIN_SIZE);
  
  /* Open EP OUT */
  USBD_LL_OpenEP(pdev,
c0d07378:	4620      	mov	r0, r4
c0d0737a:	4639      	mov	r1, r7
c0d0737c:	4632      	mov	r2, r6
c0d0737e:	462b      	mov	r3, r5
c0d07380:	f7ff faac 	bl	c0d068dc <USBD_LL_OpenEP>
                 HID_EPOUT_ADDR,
                 USBD_EP_TYPE_INTR,
                 HID_EPOUT_SIZE);

        /* Prepare Out endpoint to receive 1st packet */ 
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, HID_EPOUT_SIZE);
c0d07384:	4620      	mov	r0, r4
c0d07386:	4639      	mov	r1, r7
c0d07388:	462a      	mov	r2, r5
c0d0738a:	f7ff fb6a 	bl	c0d06a62 <USBD_LL_PrepareReceive>
  USBD_LL_Transmit (pdev, 
                    HID_EPIN_ADDR,                                      
                    NULL,
                    0);
  */
  return USBD_OK;
c0d0738e:	2000      	movs	r0, #0
c0d07390:	b001      	add	sp, #4
c0d07392:	bdf0      	pop	{r4, r5, r6, r7, pc}

c0d07394 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t  USBD_HID_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
c0d07394:	b510      	push	{r4, lr}
c0d07396:	4604      	mov	r4, r0
  UNUSED(cfgidx);
  /* Close HID EP IN */
  USBD_LL_CloseEP(pdev,
c0d07398:	2182      	movs	r1, #130	; 0x82
c0d0739a:	f7ff fac5 	bl	c0d06928 <USBD_LL_CloseEP>
                  HID_EPIN_ADDR);
  
  /* Close HID EP OUT */
  USBD_LL_CloseEP(pdev,
c0d0739e:	2102      	movs	r1, #2
c0d073a0:	4620      	mov	r0, r4
c0d073a2:	f7ff fac1 	bl	c0d06928 <USBD_LL_CloseEP>
                  HID_EPOUT_ADDR);
  
  return USBD_OK;
c0d073a6:	2000      	movs	r0, #0
c0d073a8:	bd10      	pop	{r4, pc}
	...

c0d073ac <USBD_HID_GetHidDescriptor_impl>:
  *length = sizeof (USBD_CfgDesc);
  return (uint8_t*)USBD_CfgDesc;
}

uint8_t* USBD_HID_GetHidDescriptor_impl(uint16_t* len) {
  switch (USBD_Device.request.wIndex&0xFF) {
c0d073ac:	21ec      	movs	r1, #236	; 0xec
c0d073ae:	4a09      	ldr	r2, [pc, #36]	; (c0d073d4 <USBD_HID_GetHidDescriptor_impl+0x28>)
c0d073b0:	5c51      	ldrb	r1, [r2, r1]
c0d073b2:	2209      	movs	r2, #9
c0d073b4:	2900      	cmp	r1, #0
c0d073b6:	d004      	beq.n	c0d073c2 <USBD_HID_GetHidDescriptor_impl+0x16>
c0d073b8:	2901      	cmp	r1, #1
c0d073ba:	d105      	bne.n	c0d073c8 <USBD_HID_GetHidDescriptor_impl+0x1c>
c0d073bc:	4907      	ldr	r1, [pc, #28]	; (c0d073dc <USBD_HID_GetHidDescriptor_impl+0x30>)
c0d073be:	4479      	add	r1, pc
c0d073c0:	e004      	b.n	c0d073cc <USBD_HID_GetHidDescriptor_impl+0x20>
c0d073c2:	4905      	ldr	r1, [pc, #20]	; (c0d073d8 <USBD_HID_GetHidDescriptor_impl+0x2c>)
c0d073c4:	4479      	add	r1, pc
c0d073c6:	e001      	b.n	c0d073cc <USBD_HID_GetHidDescriptor_impl+0x20>
c0d073c8:	2200      	movs	r2, #0
c0d073ca:	4611      	mov	r1, r2
c0d073cc:	8002      	strh	r2, [r0, #0]
      *len = sizeof(USBD_HID_Desc);
      return (uint8_t*)USBD_HID_Desc; 
  }
  *len = 0;
  return 0;
}
c0d073ce:	4608      	mov	r0, r1
c0d073d0:	4770      	bx	lr
c0d073d2:	46c0      	nop			; (mov r8, r8)
c0d073d4:	200020b8 	.word	0x200020b8
c0d073d8:	00001444 	.word	0x00001444
c0d073dc:	0000143e 	.word	0x0000143e

c0d073e0 <USBD_HID_GetReportDescriptor_impl>:

uint8_t* USBD_HID_GetReportDescriptor_impl(uint16_t* len) {
c0d073e0:	b5f0      	push	{r4, r5, r6, r7, lr}
c0d073e2:	b081      	sub	sp, #4
c0d073e4:	4602      	mov	r2, r0
  switch (USBD_Device.request.wIndex&0xFF) {
c0d073e6:	20ec      	movs	r0, #236	; 0xec
c0d073e8:	4913      	ldr	r1, [pc, #76]	; (c0d07438 <USBD_HID_GetReportDescriptor_impl+0x58>)
c0d073ea:	5c08      	ldrb	r0, [r1, r0]
c0d073ec:	2422      	movs	r4, #34	; 0x22
c0d073ee:	2800      	cmp	r0, #0
c0d073f0:	d01a      	beq.n	c0d07428 <USBD_HID_GetReportDescriptor_impl+0x48>
c0d073f2:	2801      	cmp	r0, #1
c0d073f4:	d11b      	bne.n	c0d0742e <USBD_HID_GetReportDescriptor_impl+0x4e>
#ifdef HAVE_IO_U2F
  case U2F_INTF:

    // very dirty work due to lack of callback when USB_HID_Init is called
    USBD_LL_OpenEP(&USBD_Device,
c0d073f6:	4810      	ldr	r0, [pc, #64]	; (c0d07438 <USBD_HID_GetReportDescriptor_impl+0x58>)
c0d073f8:	2181      	movs	r1, #129	; 0x81
c0d073fa:	2703      	movs	r7, #3
c0d073fc:	2640      	movs	r6, #64	; 0x40
c0d073fe:	9200      	str	r2, [sp, #0]
c0d07400:	463a      	mov	r2, r7
c0d07402:	4633      	mov	r3, r6
c0d07404:	f7ff fa6a 	bl	c0d068dc <USBD_LL_OpenEP>
c0d07408:	2501      	movs	r5, #1
                   U2F_EPIN_ADDR,
                   USBD_EP_TYPE_INTR,
                   U2F_EPIN_SIZE);
    
    USBD_LL_OpenEP(&USBD_Device,
c0d0740a:	480b      	ldr	r0, [pc, #44]	; (c0d07438 <USBD_HID_GetReportDescriptor_impl+0x58>)
c0d0740c:	4629      	mov	r1, r5
c0d0740e:	463a      	mov	r2, r7
c0d07410:	4633      	mov	r3, r6
c0d07412:	f7ff fa63 	bl	c0d068dc <USBD_LL_OpenEP>
                   U2F_EPOUT_ADDR,
                   USBD_EP_TYPE_INTR,
                   U2F_EPOUT_SIZE);

    /* Prepare Out endpoint to receive 1st packet */ 
    USBD_LL_PrepareReceive(&USBD_Device, U2F_EPOUT_ADDR, U2F_EPOUT_SIZE);
c0d07416:	4808      	ldr	r0, [pc, #32]	; (c0d07438 <USBD_HID_GetReportDescriptor_impl+0x58>)
c0d07418:	4629      	mov	r1, r5
c0d0741a:	4632      	mov	r2, r6
c0d0741c:	f7ff fb21 	bl	c0d06a62 <USBD_LL_PrepareReceive>
c0d07420:	9a00      	ldr	r2, [sp, #0]
c0d07422:	4807      	ldr	r0, [pc, #28]	; (c0d07440 <USBD_HID_GetReportDescriptor_impl+0x60>)
c0d07424:	4478      	add	r0, pc
c0d07426:	e004      	b.n	c0d07432 <USBD_HID_GetReportDescriptor_impl+0x52>
c0d07428:	4804      	ldr	r0, [pc, #16]	; (c0d0743c <USBD_HID_GetReportDescriptor_impl+0x5c>)
c0d0742a:	4478      	add	r0, pc
c0d0742c:	e001      	b.n	c0d07432 <USBD_HID_GetReportDescriptor_impl+0x52>
c0d0742e:	2400      	movs	r4, #0
c0d07430:	4620      	mov	r0, r4
c0d07432:	8014      	strh	r4, [r2, #0]
    *len = sizeof(HID_ReportDesc);
    return (uint8_t*)HID_ReportDesc;
  }
  *len = 0;
  return 0;
}
c0d07434:	b001      	add	sp, #4
c0d07436:	bdf0      	pop	{r4, r5, r6, r7, pc}
c0d07438:	200020b8 	.word	0x200020b8
c0d0743c:	00001409 	.word	0x00001409
c0d07440:	000013ed 	.word	0x000013ed

c0d07444 <USBD_U2F_DataIn_impl>:
extern volatile unsigned short G_io_apdu_length;

#ifdef HAVE_IO_U2F
uint8_t  USBD_U2F_DataIn_impl (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
c0d07444:	b580      	push	{r7, lr}
  UNUSED(pdev);
  // only the data hid endpoint will receive data
  switch (epnum) {
c0d07446:	2901      	cmp	r1, #1
c0d07448:	d103      	bne.n	c0d07452 <USBD_U2F_DataIn_impl+0xe>
  // FIDO endpoint
  case (U2F_EPIN_ADDR&0x7F):
    // advance the u2f sending machine state
    u2f_transport_sent(&G_io_u2f, U2F_MEDIA_USB);
c0d0744a:	4803      	ldr	r0, [pc, #12]	; (c0d07458 <USBD_U2F_DataIn_impl+0x14>)
c0d0744c:	2101      	movs	r1, #1
c0d0744e:	f7fe ffdf 	bl	c0d06410 <u2f_transport_sent>
    break;
  } 
  return USBD_OK;
c0d07452:	2000      	movs	r0, #0
c0d07454:	bd80      	pop	{r7, pc}
c0d07456:	46c0      	nop			; (mov r8, r8)
c0d07458:	20001fec 	.word	0x20001fec

c0d0745c <USBD_U2F_DataOut_impl>:
}

uint8_t  USBD_U2F_DataOut_impl (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum, uint8_t* buffer)
{
c0d0745c:	b5b0      	push	{r4, r5, r7, lr}
c0d0745e:	4614      	mov	r4, r2
  switch (epnum) {
c0d07460:	2901      	cmp	r1, #1
c0d07462:	d10d      	bne.n	c0d07480 <USBD_U2F_DataOut_impl+0x24>
c0d07464:	2501      	movs	r5, #1
  // FIDO endpoint
  case (U2F_EPOUT_ADDR&0x7F):
      USBD_LL_PrepareReceive(pdev, U2F_EPOUT_ADDR , U2F_EPOUT_SIZE);
c0d07466:	2240      	movs	r2, #64	; 0x40
c0d07468:	4629      	mov	r1, r5
c0d0746a:	f7ff fafa 	bl	c0d06a62 <USBD_LL_PrepareReceive>
      u2f_transport_received(&G_io_u2f, buffer, io_seproxyhal_get_ep_rx_size(U2F_EPOUT_ADDR), U2F_MEDIA_USB);
c0d0746e:	4628      	mov	r0, r5
c0d07470:	f7fd f9a2 	bl	c0d047b8 <io_seproxyhal_get_ep_rx_size>
c0d07474:	4602      	mov	r2, r0
c0d07476:	4803      	ldr	r0, [pc, #12]	; (c0d07484 <USBD_U2F_DataOut_impl+0x28>)
c0d07478:	4621      	mov	r1, r4
c0d0747a:	462b      	mov	r3, r5
c0d0747c:	f7ff f82a 	bl	c0d064d4 <u2f_transport_received>
    break;
  }

  return USBD_OK;
c0d07480:	2000      	movs	r0, #0
c0d07482:	bdb0      	pop	{r4, r5, r7, pc}
c0d07484:	20001fec 	.word	0x20001fec

c0d07488 <USBD_HID_DataOut_impl>:
}
#endif // HAVE_IO_U2F

uint8_t  USBD_HID_DataOut_impl (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum, uint8_t* buffer)
{
c0d07488:	b5b0      	push	{r4, r5, r7, lr}
c0d0748a:	4614      	mov	r4, r2
  // only the data hid endpoint will receive data
  switch (epnum) {
c0d0748c:	2902      	cmp	r1, #2
c0d0748e:	d11b      	bne.n	c0d074c8 <USBD_HID_DataOut_impl+0x40>

  // HID gen endpoint
  case (HID_EPOUT_ADDR&0x7F):
    // prepare receiving the next chunk (masked time)
    USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR , HID_EPOUT_SIZE);
c0d07490:	2102      	movs	r1, #2
c0d07492:	2240      	movs	r2, #64	; 0x40
c0d07494:	f7ff fae5 	bl	c0d06a62 <USBD_LL_PrepareReceive>

    // avoid troubles when an apdu has not been replied yet
    if (G_io_apdu_media == IO_APDU_MEDIA_NONE) {      
c0d07498:	4d0c      	ldr	r5, [pc, #48]	; (c0d074cc <USBD_HID_DataOut_impl+0x44>)
c0d0749a:	7828      	ldrb	r0, [r5, #0]
c0d0749c:	2800      	cmp	r0, #0
c0d0749e:	d113      	bne.n	c0d074c8 <USBD_HID_DataOut_impl+0x40>
      // add to the hid transport
      switch(io_usb_hid_receive(io_usb_send_apdu_data, buffer, io_seproxyhal_get_ep_rx_size(HID_EPOUT_ADDR))) {
c0d074a0:	2002      	movs	r0, #2
c0d074a2:	f7fd f989 	bl	c0d047b8 <io_seproxyhal_get_ep_rx_size>
c0d074a6:	4602      	mov	r2, r0
c0d074a8:	480c      	ldr	r0, [pc, #48]	; (c0d074dc <USBD_HID_DataOut_impl+0x54>)
c0d074aa:	4478      	add	r0, pc
c0d074ac:	4621      	mov	r1, r4
c0d074ae:	f7fc ffcf 	bl	c0d04450 <io_usb_hid_receive>
c0d074b2:	2802      	cmp	r0, #2
c0d074b4:	d108      	bne.n	c0d074c8 <USBD_HID_DataOut_impl+0x40>
        default:
          break;

        case IO_USB_APDU_RECEIVED:
          G_io_apdu_media = IO_APDU_MEDIA_USB_HID; // for application code
c0d074b6:	2001      	movs	r0, #1
c0d074b8:	7028      	strb	r0, [r5, #0]
          G_io_apdu_state = APDU_USB_HID; // for next call to io_exchange
c0d074ba:	4805      	ldr	r0, [pc, #20]	; (c0d074d0 <USBD_HID_DataOut_impl+0x48>)
c0d074bc:	2107      	movs	r1, #7
c0d074be:	7001      	strb	r1, [r0, #0]
          G_io_apdu_length = G_io_usb_hid_total_length;
c0d074c0:	4804      	ldr	r0, [pc, #16]	; (c0d074d4 <USBD_HID_DataOut_impl+0x4c>)
c0d074c2:	6800      	ldr	r0, [r0, #0]
c0d074c4:	4904      	ldr	r1, [pc, #16]	; (c0d074d8 <USBD_HID_DataOut_impl+0x50>)
c0d074c6:	8008      	strh	r0, [r1, #0]
      }
    }
    break;
  }

  return USBD_OK;
c0d074c8:	2000      	movs	r0, #0
c0d074ca:	bdb0      	pop	{r4, r5, r7, pc}
c0d074cc:	20001fd0 	.word	0x20001fd0
c0d074d0:	20001fd7 	.word	0x20001fd7
c0d074d4:	20001e64 	.word	0x20001e64
c0d074d8:	20001fd8 	.word	0x20001fd8
c0d074dc:	ffffd487 	.word	0xffffd487

c0d074e0 <USBD_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
static uint8_t *USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
c0d074e0:	2012      	movs	r0, #18
c0d074e2:	8008      	strh	r0, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc;
c0d074e4:	4801      	ldr	r0, [pc, #4]	; (c0d074ec <USBD_DeviceDescriptor+0xc>)
c0d074e6:	4478      	add	r0, pc
c0d074e8:	4770      	bx	lr
c0d074ea:	46c0      	nop			; (mov r8, r8)
c0d074ec:	00001402 	.word	0x00001402

c0d074f0 <USBD_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
static uint8_t *USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);  
c0d074f0:	2004      	movs	r0, #4
c0d074f2:	8008      	strh	r0, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
c0d074f4:	4801      	ldr	r0, [pc, #4]	; (c0d074fc <USBD_LangIDStrDescriptor+0xc>)
c0d074f6:	4478      	add	r0, pc
c0d074f8:	4770      	bx	lr
c0d074fa:	46c0      	nop			; (mov r8, r8)
c0d074fc:	00001404 	.word	0x00001404

c0d07500 <USBD_ManufacturerStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
static uint8_t *USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_MANUFACTURER_STRING);
c0d07500:	200e      	movs	r0, #14
c0d07502:	8008      	strh	r0, [r1, #0]
  return (uint8_t*)USBD_MANUFACTURER_STRING;
c0d07504:	4801      	ldr	r0, [pc, #4]	; (c0d0750c <USBD_ManufacturerStrDescriptor+0xc>)
c0d07506:	4478      	add	r0, pc
c0d07508:	4770      	bx	lr
c0d0750a:	46c0      	nop			; (mov r8, r8)
c0d0750c:	000013f8 	.word	0x000013f8

c0d07510 <USBD_ProductStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
static uint8_t *USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_PRODUCT_FS_STRING);
c0d07510:	200e      	movs	r0, #14
c0d07512:	8008      	strh	r0, [r1, #0]
  return (uint8_t*)USBD_PRODUCT_FS_STRING;
c0d07514:	4801      	ldr	r0, [pc, #4]	; (c0d0751c <USBD_ProductStrDescriptor+0xc>)
c0d07516:	4478      	add	r0, pc
c0d07518:	4770      	bx	lr
c0d0751a:	46c0      	nop			; (mov r8, r8)
c0d0751c:	000013f6 	.word	0x000013f6

c0d07520 <USBD_SerialStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
static uint8_t *USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USB_SERIAL_STRING);
c0d07520:	200a      	movs	r0, #10
c0d07522:	8008      	strh	r0, [r1, #0]
  return (uint8_t*)USB_SERIAL_STRING;
c0d07524:	4801      	ldr	r0, [pc, #4]	; (c0d0752c <USBD_SerialStrDescriptor+0xc>)
c0d07526:	4478      	add	r0, pc
c0d07528:	4770      	bx	lr
c0d0752a:	46c0      	nop			; (mov r8, r8)
c0d0752c:	000013f4 	.word	0x000013f4

c0d07530 <USBD_ConfigStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
static uint8_t *USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_CONFIGURATION_FS_STRING);
c0d07530:	200e      	movs	r0, #14
c0d07532:	8008      	strh	r0, [r1, #0]
  return (uint8_t*)USBD_CONFIGURATION_FS_STRING;
c0d07534:	4801      	ldr	r0, [pc, #4]	; (c0d0753c <USBD_ConfigStrDescriptor+0xc>)
c0d07536:	4478      	add	r0, pc
c0d07538:	4770      	bx	lr
c0d0753a:	46c0      	nop			; (mov r8, r8)
c0d0753c:	000013d6 	.word	0x000013d6

c0d07540 <USBD_InterfaceStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
static uint8_t *USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_INTERFACE_FS_STRING);
c0d07540:	200e      	movs	r0, #14
c0d07542:	8008      	strh	r0, [r1, #0]
  return (uint8_t*)USBD_INTERFACE_FS_STRING;
c0d07544:	4801      	ldr	r0, [pc, #4]	; (c0d0754c <USBD_InterfaceStrDescriptor+0xc>)
c0d07546:	4478      	add	r0, pc
c0d07548:	4770      	bx	lr
c0d0754a:	46c0      	nop			; (mov r8, r8)
c0d0754c:	000013c6 	.word	0x000013c6

c0d07550 <USB_power>:
  // nothing to do ?
  return 0;
}
#endif // HAVE_USB_CLASS_CCID

void USB_power(unsigned char enabled) {
c0d07550:	b570      	push	{r4, r5, r6, lr}
c0d07552:	4604      	mov	r4, r0
c0d07554:	2045      	movs	r0, #69	; 0x45
c0d07556:	0085      	lsls	r5, r0, #2
  os_memset(&USBD_Device, 0, sizeof(USBD_Device));
c0d07558:	4816      	ldr	r0, [pc, #88]	; (c0d075b4 <USB_power+0x64>)
c0d0755a:	2100      	movs	r1, #0
c0d0755c:	462a      	mov	r2, r5
c0d0755e:	f7fd f81f 	bl	c0d045a0 <os_memset>

  if (enabled) {
c0d07562:	2c00      	cmp	r4, #0
c0d07564:	d022      	beq.n	c0d075ac <USB_power+0x5c>
    os_memset(&USBD_Device, 0, sizeof(USBD_Device));
c0d07566:	4c13      	ldr	r4, [pc, #76]	; (c0d075b4 <USB_power+0x64>)
c0d07568:	2600      	movs	r6, #0
c0d0756a:	4620      	mov	r0, r4
c0d0756c:	4631      	mov	r1, r6
c0d0756e:	462a      	mov	r2, r5
c0d07570:	f7fd f816 	bl	c0d045a0 <os_memset>
    /* Init Device Library */
    USBD_Init(&USBD_Device, (USBD_DescriptorsTypeDef*)&HID_Desc, 0);
c0d07574:	4912      	ldr	r1, [pc, #72]	; (c0d075c0 <USB_power+0x70>)
c0d07576:	4479      	add	r1, pc
c0d07578:	4620      	mov	r0, r4
c0d0757a:	4632      	mov	r2, r6
c0d0757c:	f7ff fa84 	bl	c0d06a88 <USBD_Init>
    
    /* Register the HID class */
    USBD_RegisterClassForInterface(HID_INTF,  &USBD_Device, (USBD_ClassTypeDef*)&USBD_HID);
c0d07580:	4a10      	ldr	r2, [pc, #64]	; (c0d075c4 <USB_power+0x74>)
c0d07582:	447a      	add	r2, pc
c0d07584:	4630      	mov	r0, r6
c0d07586:	4621      	mov	r1, r4
c0d07588:	f7ff fab6 	bl	c0d06af8 <USBD_RegisterClassForInterface>
#ifdef HAVE_IO_U2F
    USBD_RegisterClassForInterface(U2F_INTF,  &USBD_Device, (USBD_ClassTypeDef*)&USBD_U2F);
c0d0758c:	2001      	movs	r0, #1
c0d0758e:	4a0e      	ldr	r2, [pc, #56]	; (c0d075c8 <USB_power+0x78>)
c0d07590:	447a      	add	r2, pc
c0d07592:	4621      	mov	r1, r4
c0d07594:	f7ff fab0 	bl	c0d06af8 <USBD_RegisterClassForInterface>
    // initialize the U2F tunnel transport
    u2f_transport_init(&G_io_u2f, G_io_apdu_buffer, IO_APDU_BUFFER_SIZE);
c0d07598:	22ff      	movs	r2, #255	; 0xff
c0d0759a:	3252      	adds	r2, #82	; 0x52
c0d0759c:	4806      	ldr	r0, [pc, #24]	; (c0d075b8 <USB_power+0x68>)
c0d0759e:	4907      	ldr	r1, [pc, #28]	; (c0d075bc <USB_power+0x6c>)
c0d075a0:	f7fe ff2c 	bl	c0d063fc <u2f_transport_init>
    USBD_RegisterClassForInterface(CCID_INTF, &USBD_Device, (USBD_ClassTypeDef*)&USBD_CCID);
#endif // HAVE_USB_CLASS_CCID


    /* Start Device Process */
    USBD_Start(&USBD_Device);
c0d075a4:	4620      	mov	r0, r4
c0d075a6:	f7ff fab3 	bl	c0d06b10 <USBD_Start>
  }
  else {
    USBD_DeInit(&USBD_Device);
  }
}
c0d075aa:	bd70      	pop	{r4, r5, r6, pc}

    /* Start Device Process */
    USBD_Start(&USBD_Device);
  }
  else {
    USBD_DeInit(&USBD_Device);
c0d075ac:	4801      	ldr	r0, [pc, #4]	; (c0d075b4 <USB_power+0x64>)
c0d075ae:	f7ff fa85 	bl	c0d06abc <USBD_DeInit>
  }
}
c0d075b2:	bd70      	pop	{r4, r5, r6, pc}
c0d075b4:	200020b8 	.word	0x200020b8
c0d075b8:	20001fec 	.word	0x20001fec
c0d075bc:	20001e6c 	.word	0x20001e6c
c0d075c0:	000012e2 	.word	0x000012e2
c0d075c4:	000012f6 	.word	0x000012f6
c0d075c8:	00001320 	.word	0x00001320

c0d075cc <USBD_GetCfgDesc_impl>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_GetCfgDesc_impl (uint16_t *length)
{
  *length = sizeof (USBD_CfgDesc);
c0d075cc:	2149      	movs	r1, #73	; 0x49
c0d075ce:	8001      	strh	r1, [r0, #0]
  return (uint8_t*)USBD_CfgDesc;
c0d075d0:	4801      	ldr	r0, [pc, #4]	; (c0d075d8 <USBD_GetCfgDesc_impl+0xc>)
c0d075d2:	4478      	add	r0, pc
c0d075d4:	4770      	bx	lr
c0d075d6:	46c0      	nop			; (mov r8, r8)
c0d075d8:	00001352 	.word	0x00001352

c0d075dc <USBD_GetDeviceQualifierDesc_impl>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_GetDeviceQualifierDesc_impl (uint16_t *length)
{
  *length = sizeof (USBD_DeviceQualifierDesc);
c0d075dc:	210a      	movs	r1, #10
c0d075de:	8001      	strh	r1, [r0, #0]
  return (uint8_t*)USBD_DeviceQualifierDesc;
c0d075e0:	4801      	ldr	r0, [pc, #4]	; (c0d075e8 <USBD_GetDeviceQualifierDesc_impl+0xc>)
c0d075e2:	4478      	add	r0, pc
c0d075e4:	4770      	bx	lr
c0d075e6:	46c0      	nop			; (mov r8, r8)
c0d075e8:	0000138e 	.word	0x0000138e

c0d075ec <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
c0d075ec:	b5b0      	push	{r4, r5, r7, lr}
c0d075ee:	460c      	mov	r4, r1
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
c0d075f0:	21d4      	movs	r1, #212	; 0xd4
c0d075f2:	2302      	movs	r3, #2
c0d075f4:	5043      	str	r3, [r0, r1]
  pdev->ep_in[0].total_length = len;
c0d075f6:	6182      	str	r2, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
c0d075f8:	61c2      	str	r2, [r0, #28]
  // store the continuation data if needed
  pdev->pData = pbuf;
c0d075fa:	2111      	movs	r1, #17
c0d075fc:	0109      	lsls	r1, r1, #4
c0d075fe:	5044      	str	r4, [r0, r1]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, MIN(len, pdev->ep_in[0].maxpacket));  
c0d07600:	6a01      	ldr	r1, [r0, #32]
c0d07602:	428a      	cmp	r2, r1
c0d07604:	d300      	bcc.n	c0d07608 <USBD_CtlSendData+0x1c>
c0d07606:	460a      	mov	r2, r1
c0d07608:	b293      	uxth	r3, r2
c0d0760a:	2500      	movs	r5, #0
c0d0760c:	4629      	mov	r1, r5
c0d0760e:	4622      	mov	r2, r4
c0d07610:	f7ff fa0e 	bl	c0d06a30 <USBD_LL_Transmit>
  
  return USBD_OK;
c0d07614:	4628      	mov	r0, r5
c0d07616:	bdb0      	pop	{r4, r5, r7, pc}

c0d07618 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
c0d07618:	b5b0      	push	{r4, r5, r7, lr}
c0d0761a:	460c      	mov	r4, r1
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, MIN(len, pdev->ep_in[0].maxpacket));   
c0d0761c:	6a01      	ldr	r1, [r0, #32]
c0d0761e:	428a      	cmp	r2, r1
c0d07620:	d300      	bcc.n	c0d07624 <USBD_CtlContinueSendData+0xc>
c0d07622:	460a      	mov	r2, r1
c0d07624:	b293      	uxth	r3, r2
c0d07626:	2500      	movs	r5, #0
c0d07628:	4629      	mov	r1, r5
c0d0762a:	4622      	mov	r2, r4
c0d0762c:	f7ff fa00 	bl	c0d06a30 <USBD_LL_Transmit>
  return USBD_OK;
c0d07630:	4628      	mov	r0, r5
c0d07632:	bdb0      	pop	{r4, r5, r7, pc}

c0d07634 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
c0d07634:	b510      	push	{r4, lr}
c0d07636:	2400      	movs	r4, #0
  UNUSED(pbuf);
  USBD_LL_PrepareReceive (pdev,
c0d07638:	4621      	mov	r1, r4
c0d0763a:	f7ff fa12 	bl	c0d06a62 <USBD_LL_PrepareReceive>
                          0,                                            
                          len);
  return USBD_OK;
c0d0763e:	4620      	mov	r0, r4
c0d07640:	bd10      	pop	{r4, pc}

c0d07642 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
c0d07642:	b510      	push	{r4, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
c0d07644:	21d4      	movs	r1, #212	; 0xd4
c0d07646:	2204      	movs	r2, #4
c0d07648:	5042      	str	r2, [r0, r1]
c0d0764a:	2400      	movs	r4, #0
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
c0d0764c:	4621      	mov	r1, r4
c0d0764e:	4622      	mov	r2, r4
c0d07650:	4623      	mov	r3, r4
c0d07652:	f7ff f9ed 	bl	c0d06a30 <USBD_LL_Transmit>
  
  return USBD_OK;
c0d07656:	4620      	mov	r0, r4
c0d07658:	bd10      	pop	{r4, pc}

c0d0765a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
c0d0765a:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
c0d0765c:	21d4      	movs	r1, #212	; 0xd4
c0d0765e:	2205      	movs	r2, #5
c0d07660:	5042      	str	r2, [r0, r1]
c0d07662:	2400      	movs	r4, #0
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
c0d07664:	4621      	mov	r1, r4
c0d07666:	4622      	mov	r2, r4
c0d07668:	f7ff f9fb 	bl	c0d06a62 <USBD_LL_PrepareReceive>
                    0,
                    0);  

  return USBD_OK;
c0d0766c:	4620      	mov	r0, r4
c0d0766e:	bd10      	pop	{r4, pc}

c0d07670 <__aeabi_uidiv>:
c0d07670:	2200      	movs	r2, #0
c0d07672:	0843      	lsrs	r3, r0, #1
c0d07674:	428b      	cmp	r3, r1
c0d07676:	d374      	bcc.n	c0d07762 <__aeabi_uidiv+0xf2>
c0d07678:	0903      	lsrs	r3, r0, #4
c0d0767a:	428b      	cmp	r3, r1
c0d0767c:	d35f      	bcc.n	c0d0773e <__aeabi_uidiv+0xce>
c0d0767e:	0a03      	lsrs	r3, r0, #8
c0d07680:	428b      	cmp	r3, r1
c0d07682:	d344      	bcc.n	c0d0770e <__aeabi_uidiv+0x9e>
c0d07684:	0b03      	lsrs	r3, r0, #12
c0d07686:	428b      	cmp	r3, r1
c0d07688:	d328      	bcc.n	c0d076dc <__aeabi_uidiv+0x6c>
c0d0768a:	0c03      	lsrs	r3, r0, #16
c0d0768c:	428b      	cmp	r3, r1
c0d0768e:	d30d      	bcc.n	c0d076ac <__aeabi_uidiv+0x3c>
c0d07690:	22ff      	movs	r2, #255	; 0xff
c0d07692:	0209      	lsls	r1, r1, #8
c0d07694:	ba12      	rev	r2, r2
c0d07696:	0c03      	lsrs	r3, r0, #16
c0d07698:	428b      	cmp	r3, r1
c0d0769a:	d302      	bcc.n	c0d076a2 <__aeabi_uidiv+0x32>
c0d0769c:	1212      	asrs	r2, r2, #8
c0d0769e:	0209      	lsls	r1, r1, #8
c0d076a0:	d065      	beq.n	c0d0776e <__aeabi_uidiv+0xfe>
c0d076a2:	0b03      	lsrs	r3, r0, #12
c0d076a4:	428b      	cmp	r3, r1
c0d076a6:	d319      	bcc.n	c0d076dc <__aeabi_uidiv+0x6c>
c0d076a8:	e000      	b.n	c0d076ac <__aeabi_uidiv+0x3c>
c0d076aa:	0a09      	lsrs	r1, r1, #8
c0d076ac:	0bc3      	lsrs	r3, r0, #15
c0d076ae:	428b      	cmp	r3, r1
c0d076b0:	d301      	bcc.n	c0d076b6 <__aeabi_uidiv+0x46>
c0d076b2:	03cb      	lsls	r3, r1, #15
c0d076b4:	1ac0      	subs	r0, r0, r3
c0d076b6:	4152      	adcs	r2, r2
c0d076b8:	0b83      	lsrs	r3, r0, #14
c0d076ba:	428b      	cmp	r3, r1
c0d076bc:	d301      	bcc.n	c0d076c2 <__aeabi_uidiv+0x52>
c0d076be:	038b      	lsls	r3, r1, #14
c0d076c0:	1ac0      	subs	r0, r0, r3
c0d076c2:	4152      	adcs	r2, r2
c0d076c4:	0b43      	lsrs	r3, r0, #13
c0d076c6:	428b      	cmp	r3, r1
c0d076c8:	d301      	bcc.n	c0d076ce <__aeabi_uidiv+0x5e>
c0d076ca:	034b      	lsls	r3, r1, #13
c0d076cc:	1ac0      	subs	r0, r0, r3
c0d076ce:	4152      	adcs	r2, r2
c0d076d0:	0b03      	lsrs	r3, r0, #12
c0d076d2:	428b      	cmp	r3, r1
c0d076d4:	d301      	bcc.n	c0d076da <__aeabi_uidiv+0x6a>
c0d076d6:	030b      	lsls	r3, r1, #12
c0d076d8:	1ac0      	subs	r0, r0, r3
c0d076da:	4152      	adcs	r2, r2
c0d076dc:	0ac3      	lsrs	r3, r0, #11
c0d076de:	428b      	cmp	r3, r1
c0d076e0:	d301      	bcc.n	c0d076e6 <__aeabi_uidiv+0x76>
c0d076e2:	02cb      	lsls	r3, r1, #11
c0d076e4:	1ac0      	subs	r0, r0, r3
c0d076e6:	4152      	adcs	r2, r2
c0d076e8:	0a83      	lsrs	r3, r0, #10
c0d076ea:	428b      	cmp	r3, r1
c0d076ec:	d301      	bcc.n	c0d076f2 <__aeabi_uidiv+0x82>
c0d076ee:	028b      	lsls	r3, r1, #10
c0d076f0:	1ac0      	subs	r0, r0, r3
c0d076f2:	4152      	adcs	r2, r2
c0d076f4:	0a43      	lsrs	r3, r0, #9
c0d076f6:	428b      	cmp	r3, r1
c0d076f8:	d301      	bcc.n	c0d076fe <__aeabi_uidiv+0x8e>
c0d076fa:	024b      	lsls	r3, r1, #9
c0d076fc:	1ac0      	subs	r0, r0, r3
c0d076fe:	4152      	adcs	r2, r2
c0d07700:	0a03      	lsrs	r3, r0, #8
c0d07702:	428b      	cmp	r3, r1
c0d07704:	d301      	bcc.n	c0d0770a <__aeabi_uidiv+0x9a>
c0d07706:	020b      	lsls	r3, r1, #8
c0d07708:	1ac0      	subs	r0, r0, r3
c0d0770a:	4152      	adcs	r2, r2
c0d0770c:	d2cd      	bcs.n	c0d076aa <__aeabi_uidiv+0x3a>
c0d0770e:	09c3      	lsrs	r3, r0, #7
c0d07710:	428b      	cmp	r3, r1
c0d07712:	d301      	bcc.n	c0d07718 <__aeabi_uidiv+0xa8>
c0d07714:	01cb      	lsls	r3, r1, #7
c0d07716:	1ac0      	subs	r0, r0, r3
c0d07718:	4152      	adcs	r2, r2
c0d0771a:	0983      	lsrs	r3, r0, #6
c0d0771c:	428b      	cmp	r3, r1
c0d0771e:	d301      	bcc.n	c0d07724 <__aeabi_uidiv+0xb4>
c0d07720:	018b      	lsls	r3, r1, #6
c0d07722:	1ac0      	subs	r0, r0, r3
c0d07724:	4152      	adcs	r2, r2
c0d07726:	0943      	lsrs	r3, r0, #5
c0d07728:	428b      	cmp	r3, r1
c0d0772a:	d301      	bcc.n	c0d07730 <__aeabi_uidiv+0xc0>
c0d0772c:	014b      	lsls	r3, r1, #5
c0d0772e:	1ac0      	subs	r0, r0, r3
c0d07730:	4152      	adcs	r2, r2
c0d07732:	0903      	lsrs	r3, r0, #4
c0d07734:	428b      	cmp	r3, r1
c0d07736:	d301      	bcc.n	c0d0773c <__aeabi_uidiv+0xcc>
c0d07738:	010b      	lsls	r3, r1, #4
c0d0773a:	1ac0      	subs	r0, r0, r3
c0d0773c:	4152      	adcs	r2, r2
c0d0773e:	08c3      	lsrs	r3, r0, #3
c0d07740:	428b      	cmp	r3, r1
c0d07742:	d301      	bcc.n	c0d07748 <__aeabi_uidiv+0xd8>
c0d07744:	00cb      	lsls	r3, r1, #3
c0d07746:	1ac0      	subs	r0, r0, r3
c0d07748:	4152      	adcs	r2, r2
c0d0774a:	0883      	lsrs	r3, r0, #2
c0d0774c:	428b      	cmp	r3, r1
c0d0774e:	d301      	bcc.n	c0d07754 <__aeabi_uidiv+0xe4>
c0d07750:	008b      	lsls	r3, r1, #2
c0d07752:	1ac0      	subs	r0, r0, r3
c0d07754:	4152      	adcs	r2, r2
c0d07756:	0843      	lsrs	r3, r0, #1
c0d07758:	428b      	cmp	r3, r1
c0d0775a:	d301      	bcc.n	c0d07760 <__aeabi_uidiv+0xf0>
c0d0775c:	004b      	lsls	r3, r1, #1
c0d0775e:	1ac0      	subs	r0, r0, r3
c0d07760:	4152      	adcs	r2, r2
c0d07762:	1a41      	subs	r1, r0, r1
c0d07764:	d200      	bcs.n	c0d07768 <__aeabi_uidiv+0xf8>
c0d07766:	4601      	mov	r1, r0
c0d07768:	4152      	adcs	r2, r2
c0d0776a:	4610      	mov	r0, r2
c0d0776c:	4770      	bx	lr
c0d0776e:	e7ff      	b.n	c0d07770 <__aeabi_uidiv+0x100>
c0d07770:	b501      	push	{r0, lr}
c0d07772:	2000      	movs	r0, #0
c0d07774:	f000 f806 	bl	c0d07784 <__aeabi_idiv0>
c0d07778:	bd02      	pop	{r1, pc}
c0d0777a:	46c0      	nop			; (mov r8, r8)

c0d0777c <__aeabi_uidivmod>:
c0d0777c:	2900      	cmp	r1, #0
c0d0777e:	d0f7      	beq.n	c0d07770 <__aeabi_uidiv+0x100>
c0d07780:	e776      	b.n	c0d07670 <__aeabi_uidiv>
c0d07782:	4770      	bx	lr

c0d07784 <__aeabi_idiv0>:
c0d07784:	4770      	bx	lr
c0d07786:	46c0      	nop			; (mov r8, r8)

c0d07788 <__aeabi_memclr>:
c0d07788:	b510      	push	{r4, lr}
c0d0778a:	2200      	movs	r2, #0
c0d0778c:	f000 f806 	bl	c0d0779c <__aeabi_memset>
c0d07790:	bd10      	pop	{r4, pc}
c0d07792:	46c0      	nop			; (mov r8, r8)

c0d07794 <__aeabi_memcpy>:
c0d07794:	b510      	push	{r4, lr}
c0d07796:	f000 f809 	bl	c0d077ac <memcpy>
c0d0779a:	bd10      	pop	{r4, pc}

c0d0779c <__aeabi_memset>:
c0d0779c:	0013      	movs	r3, r2
c0d0779e:	b510      	push	{r4, lr}
c0d077a0:	000a      	movs	r2, r1
c0d077a2:	0019      	movs	r1, r3
c0d077a4:	f000 f840 	bl	c0d07828 <memset>
c0d077a8:	bd10      	pop	{r4, pc}
c0d077aa:	46c0      	nop			; (mov r8, r8)

c0d077ac <memcpy>:
c0d077ac:	b570      	push	{r4, r5, r6, lr}
c0d077ae:	2a0f      	cmp	r2, #15
c0d077b0:	d932      	bls.n	c0d07818 <memcpy+0x6c>
c0d077b2:	000c      	movs	r4, r1
c0d077b4:	4304      	orrs	r4, r0
c0d077b6:	000b      	movs	r3, r1
c0d077b8:	07a4      	lsls	r4, r4, #30
c0d077ba:	d131      	bne.n	c0d07820 <memcpy+0x74>
c0d077bc:	0015      	movs	r5, r2
c0d077be:	0004      	movs	r4, r0
c0d077c0:	3d10      	subs	r5, #16
c0d077c2:	092d      	lsrs	r5, r5, #4
c0d077c4:	3501      	adds	r5, #1
c0d077c6:	012d      	lsls	r5, r5, #4
c0d077c8:	1949      	adds	r1, r1, r5
c0d077ca:	681e      	ldr	r6, [r3, #0]
c0d077cc:	6026      	str	r6, [r4, #0]
c0d077ce:	685e      	ldr	r6, [r3, #4]
c0d077d0:	6066      	str	r6, [r4, #4]
c0d077d2:	689e      	ldr	r6, [r3, #8]
c0d077d4:	60a6      	str	r6, [r4, #8]
c0d077d6:	68de      	ldr	r6, [r3, #12]
c0d077d8:	3310      	adds	r3, #16
c0d077da:	60e6      	str	r6, [r4, #12]
c0d077dc:	3410      	adds	r4, #16
c0d077de:	4299      	cmp	r1, r3
c0d077e0:	d1f3      	bne.n	c0d077ca <memcpy+0x1e>
c0d077e2:	230f      	movs	r3, #15
c0d077e4:	1945      	adds	r5, r0, r5
c0d077e6:	4013      	ands	r3, r2
c0d077e8:	2b03      	cmp	r3, #3
c0d077ea:	d91b      	bls.n	c0d07824 <memcpy+0x78>
c0d077ec:	1f1c      	subs	r4, r3, #4
c0d077ee:	2300      	movs	r3, #0
c0d077f0:	08a4      	lsrs	r4, r4, #2
c0d077f2:	3401      	adds	r4, #1
c0d077f4:	00a4      	lsls	r4, r4, #2
c0d077f6:	58ce      	ldr	r6, [r1, r3]
c0d077f8:	50ee      	str	r6, [r5, r3]
c0d077fa:	3304      	adds	r3, #4
c0d077fc:	429c      	cmp	r4, r3
c0d077fe:	d1fa      	bne.n	c0d077f6 <memcpy+0x4a>
c0d07800:	2303      	movs	r3, #3
c0d07802:	192d      	adds	r5, r5, r4
c0d07804:	1909      	adds	r1, r1, r4
c0d07806:	401a      	ands	r2, r3
c0d07808:	d005      	beq.n	c0d07816 <memcpy+0x6a>
c0d0780a:	2300      	movs	r3, #0
c0d0780c:	5ccc      	ldrb	r4, [r1, r3]
c0d0780e:	54ec      	strb	r4, [r5, r3]
c0d07810:	3301      	adds	r3, #1
c0d07812:	429a      	cmp	r2, r3
c0d07814:	d1fa      	bne.n	c0d0780c <memcpy+0x60>
c0d07816:	bd70      	pop	{r4, r5, r6, pc}
c0d07818:	0005      	movs	r5, r0
c0d0781a:	2a00      	cmp	r2, #0
c0d0781c:	d1f5      	bne.n	c0d0780a <memcpy+0x5e>
c0d0781e:	e7fa      	b.n	c0d07816 <memcpy+0x6a>
c0d07820:	0005      	movs	r5, r0
c0d07822:	e7f2      	b.n	c0d0780a <memcpy+0x5e>
c0d07824:	001a      	movs	r2, r3
c0d07826:	e7f8      	b.n	c0d0781a <memcpy+0x6e>

c0d07828 <memset>:
c0d07828:	b570      	push	{r4, r5, r6, lr}
c0d0782a:	0783      	lsls	r3, r0, #30
c0d0782c:	d03f      	beq.n	c0d078ae <memset+0x86>
c0d0782e:	1e54      	subs	r4, r2, #1
c0d07830:	2a00      	cmp	r2, #0
c0d07832:	d03b      	beq.n	c0d078ac <memset+0x84>
c0d07834:	b2ce      	uxtb	r6, r1
c0d07836:	0003      	movs	r3, r0
c0d07838:	2503      	movs	r5, #3
c0d0783a:	e003      	b.n	c0d07844 <memset+0x1c>
c0d0783c:	1e62      	subs	r2, r4, #1
c0d0783e:	2c00      	cmp	r4, #0
c0d07840:	d034      	beq.n	c0d078ac <memset+0x84>
c0d07842:	0014      	movs	r4, r2
c0d07844:	3301      	adds	r3, #1
c0d07846:	1e5a      	subs	r2, r3, #1
c0d07848:	7016      	strb	r6, [r2, #0]
c0d0784a:	422b      	tst	r3, r5
c0d0784c:	d1f6      	bne.n	c0d0783c <memset+0x14>
c0d0784e:	2c03      	cmp	r4, #3
c0d07850:	d924      	bls.n	c0d0789c <memset+0x74>
c0d07852:	25ff      	movs	r5, #255	; 0xff
c0d07854:	400d      	ands	r5, r1
c0d07856:	022a      	lsls	r2, r5, #8
c0d07858:	4315      	orrs	r5, r2
c0d0785a:	042a      	lsls	r2, r5, #16
c0d0785c:	4315      	orrs	r5, r2
c0d0785e:	2c0f      	cmp	r4, #15
c0d07860:	d911      	bls.n	c0d07886 <memset+0x5e>
c0d07862:	0026      	movs	r6, r4
c0d07864:	3e10      	subs	r6, #16
c0d07866:	0936      	lsrs	r6, r6, #4
c0d07868:	3601      	adds	r6, #1
c0d0786a:	0136      	lsls	r6, r6, #4
c0d0786c:	001a      	movs	r2, r3
c0d0786e:	199b      	adds	r3, r3, r6
c0d07870:	6015      	str	r5, [r2, #0]
c0d07872:	6055      	str	r5, [r2, #4]
c0d07874:	6095      	str	r5, [r2, #8]
c0d07876:	60d5      	str	r5, [r2, #12]
c0d07878:	3210      	adds	r2, #16
c0d0787a:	4293      	cmp	r3, r2
c0d0787c:	d1f8      	bne.n	c0d07870 <memset+0x48>
c0d0787e:	220f      	movs	r2, #15
c0d07880:	4014      	ands	r4, r2
c0d07882:	2c03      	cmp	r4, #3
c0d07884:	d90a      	bls.n	c0d0789c <memset+0x74>
c0d07886:	1f26      	subs	r6, r4, #4
c0d07888:	08b6      	lsrs	r6, r6, #2
c0d0788a:	3601      	adds	r6, #1
c0d0788c:	00b6      	lsls	r6, r6, #2
c0d0788e:	001a      	movs	r2, r3
c0d07890:	199b      	adds	r3, r3, r6
c0d07892:	c220      	stmia	r2!, {r5}
c0d07894:	4293      	cmp	r3, r2
c0d07896:	d1fc      	bne.n	c0d07892 <memset+0x6a>
c0d07898:	2203      	movs	r2, #3
c0d0789a:	4014      	ands	r4, r2
c0d0789c:	2c00      	cmp	r4, #0
c0d0789e:	d005      	beq.n	c0d078ac <memset+0x84>
c0d078a0:	b2c9      	uxtb	r1, r1
c0d078a2:	191c      	adds	r4, r3, r4
c0d078a4:	7019      	strb	r1, [r3, #0]
c0d078a6:	3301      	adds	r3, #1
c0d078a8:	429c      	cmp	r4, r3
c0d078aa:	d1fb      	bne.n	c0d078a4 <memset+0x7c>
c0d078ac:	bd70      	pop	{r4, r5, r6, pc}
c0d078ae:	0014      	movs	r4, r2
c0d078b0:	0003      	movs	r3, r0
c0d078b2:	e7cc      	b.n	c0d0784e <memset+0x26>

c0d078b4 <setjmp>:
c0d078b4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
c0d078b6:	4641      	mov	r1, r8
c0d078b8:	464a      	mov	r2, r9
c0d078ba:	4653      	mov	r3, sl
c0d078bc:	465c      	mov	r4, fp
c0d078be:	466d      	mov	r5, sp
c0d078c0:	4676      	mov	r6, lr
c0d078c2:	c07e      	stmia	r0!, {r1, r2, r3, r4, r5, r6}
c0d078c4:	3828      	subs	r0, #40	; 0x28
c0d078c6:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
c0d078c8:	2000      	movs	r0, #0
c0d078ca:	4770      	bx	lr

c0d078cc <longjmp>:
c0d078cc:	3010      	adds	r0, #16
c0d078ce:	c87c      	ldmia	r0!, {r2, r3, r4, r5, r6}
c0d078d0:	4690      	mov	r8, r2
c0d078d2:	4699      	mov	r9, r3
c0d078d4:	46a2      	mov	sl, r4
c0d078d6:	46ab      	mov	fp, r5
c0d078d8:	46b5      	mov	sp, r6
c0d078da:	c808      	ldmia	r0!, {r3}
c0d078dc:	3828      	subs	r0, #40	; 0x28
c0d078de:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
c0d078e0:	1c08      	adds	r0, r1, #0
c0d078e2:	d100      	bne.n	c0d078e6 <longjmp+0x1a>
c0d078e4:	2001      	movs	r0, #1
c0d078e6:	4718      	bx	r3

c0d078e8 <strcpy>:
c0d078e8:	1c03      	adds	r3, r0, #0
c0d078ea:	780a      	ldrb	r2, [r1, #0]
c0d078ec:	3101      	adds	r1, #1
c0d078ee:	701a      	strb	r2, [r3, #0]
c0d078f0:	3301      	adds	r3, #1
c0d078f2:	2a00      	cmp	r2, #0
c0d078f4:	d1f9      	bne.n	c0d078ea <strcpy+0x2>
c0d078f6:	4770      	bx	lr

c0d078f8 <strlen>:
c0d078f8:	b510      	push	{r4, lr}
c0d078fa:	0783      	lsls	r3, r0, #30
c0d078fc:	d027      	beq.n	c0d0794e <strlen+0x56>
c0d078fe:	7803      	ldrb	r3, [r0, #0]
c0d07900:	2b00      	cmp	r3, #0
c0d07902:	d026      	beq.n	c0d07952 <strlen+0x5a>
c0d07904:	0003      	movs	r3, r0
c0d07906:	2103      	movs	r1, #3
c0d07908:	e002      	b.n	c0d07910 <strlen+0x18>
c0d0790a:	781a      	ldrb	r2, [r3, #0]
c0d0790c:	2a00      	cmp	r2, #0
c0d0790e:	d01c      	beq.n	c0d0794a <strlen+0x52>
c0d07910:	3301      	adds	r3, #1
c0d07912:	420b      	tst	r3, r1
c0d07914:	d1f9      	bne.n	c0d0790a <strlen+0x12>
c0d07916:	6819      	ldr	r1, [r3, #0]
c0d07918:	4a0f      	ldr	r2, [pc, #60]	; (c0d07958 <strlen+0x60>)
c0d0791a:	4c10      	ldr	r4, [pc, #64]	; (c0d0795c <strlen+0x64>)
c0d0791c:	188a      	adds	r2, r1, r2
c0d0791e:	438a      	bics	r2, r1
c0d07920:	4222      	tst	r2, r4
c0d07922:	d10f      	bne.n	c0d07944 <strlen+0x4c>
c0d07924:	3304      	adds	r3, #4
c0d07926:	6819      	ldr	r1, [r3, #0]
c0d07928:	4a0b      	ldr	r2, [pc, #44]	; (c0d07958 <strlen+0x60>)
c0d0792a:	188a      	adds	r2, r1, r2
c0d0792c:	438a      	bics	r2, r1
c0d0792e:	4222      	tst	r2, r4
c0d07930:	d108      	bne.n	c0d07944 <strlen+0x4c>
c0d07932:	3304      	adds	r3, #4
c0d07934:	6819      	ldr	r1, [r3, #0]
c0d07936:	4a08      	ldr	r2, [pc, #32]	; (c0d07958 <strlen+0x60>)
c0d07938:	188a      	adds	r2, r1, r2
c0d0793a:	438a      	bics	r2, r1
c0d0793c:	4222      	tst	r2, r4
c0d0793e:	d0f1      	beq.n	c0d07924 <strlen+0x2c>
c0d07940:	e000      	b.n	c0d07944 <strlen+0x4c>
c0d07942:	3301      	adds	r3, #1
c0d07944:	781a      	ldrb	r2, [r3, #0]
c0d07946:	2a00      	cmp	r2, #0
c0d07948:	d1fb      	bne.n	c0d07942 <strlen+0x4a>
c0d0794a:	1a18      	subs	r0, r3, r0
c0d0794c:	bd10      	pop	{r4, pc}
c0d0794e:	0003      	movs	r3, r0
c0d07950:	e7e1      	b.n	c0d07916 <strlen+0x1e>
c0d07952:	2000      	movs	r0, #0
c0d07954:	e7fa      	b.n	c0d0794c <strlen+0x54>
c0d07956:	46c0      	nop			; (mov r8, r8)
c0d07958:	fefefeff 	.word	0xfefefeff
c0d0795c:	80808080 	.word	0x80808080

c0d07960 <TRANSACTION_OUTPUT_SCRIPT_PRE>:
c0d07960:	14a97619                                .v..

c0d07964 <TRANSACTION_OUTPUT_SCRIPT_POST>:
c0d07964:	a917ac88                                         ..

c0d07966 <TRANSACTION_OUTPUT_SCRIPT_P2SH_PRE>:
c0d07966:	8714a917                                         ...

c0d07969 <TRANSACTION_OUTPUT_SCRIPT_P2SH_POST>:
c0d07969:	14a93d87                                         .

c0d0796a <ZEN_TRANSACTION_OUTPUT_SCRIPT_P2SH_PRE>:
c0d0796a:	8714a93d                                         =..

c0d0796d <ZEN_TRANSACTION_OUTPUT_SCRIPT_P2SH_POST>:
c0d0796d:	c99e2087 02cb5a84 1c4eb2fa b5b36803     . ...Z....N..h..
c0d0797d:	48a4c117 f097ba8f c09a45e3 0001ea53     ...H.....E..S...
c0d0798d:	c0030000 16b4021f                                .......

c0d07994 <TRANSACTION_OUTPUT_SCRIPT_P2WPKH_PRE>:
c0d07994:	22140016                                         ...

c0d07997 <TRANSACTION_OUTPUT_SCRIPT_P2WSH_PRE>:
c0d07997:	3f200022                                         ". 

c0d0799a <ZEN_OUTPUT_SCRIPT_PRE>:
c0d0799a:	14a9763f                                ?v..

c0d0799e <ZEN_OUTPUT_SCRIPT_POST>:
c0d0799e:	9e20ac88 cb5a84c9 4eb2fa02 b368031c     .. ...Z....N..h.
c0d079ae:	a4c117b5 97ba8f48 9a45e3f0 01ea53c0     ....H.....E..S..
c0d079be:	03000000 b4021fc0                       ........

c0d079c6 <BASE58ALPHABET>:
c0d079c6:	34333231 38373635 43424139 47464544     123456789ABCDEFG
c0d079d6:	4c4b4a48 51504e4d 55545352 59585756     HJKLMNPQRSTUVWXY
c0d079e6:	6362615a 67666564 6b6a6968 706f6e6d     Zabcdefghijkmnop
c0d079f6:	74737271 78777675 53207a79                       qrstuvwxyz

c0d07a00 <SIGNMAGIC>:
c0d07a00:	67695320 2064656e 7373654d 3a656761      Signed Message:
c0d07a10:	e0e0e00a                                         .

c0d07a11 <DISPATCHER_CLA>:
c0d07a11:	e0e0e0e0 e0e0e0e0 e0e0e0e0 2220e0e0              ..............

c0d07a1f <DISPATCHER_INS>:
c0d07a1f:	26242220 48444240 c4c04e4a 01011614               "$&@BDHJN....

c0d07a2d <DISPATCHER_DATA_IN>:
c0d07a2d:	01000101 01010101 00000101 fd000001              ...............

c0d07a3c <DISPATCHER_FUNCTIONS>:
c0d07a3c:	c0d014fd c0d019cd c0d00301 c0d01459     ............Y...
c0d07a4c:	c0d0050d c0d003a1 c0d01099 c0d011a1     ................
c0d07a5c:	c0d00b9d c0d01971 c0d00365 c0d002b5     ....q...e.......
c0d07a6c:	c0d01351 c0d0021d                       Q.......

c0d07a74 <C_nanos_icon_back_colors>:
c0d07a74:	00000000 00ffffff                       ........

c0d07a7c <C_nanos_icon_back_bitmap>:
c0d07a7c:	c1fe01e0 067f38fd c4ff81df bcfff37f     .....8..........
c0d07a8c:	f1e7e71f 7807f83f 00000000              ....?..x....

c0d07a98 <C_nanos_icon_back>:
c0d07a98:	0000000e 0000000e 00000001 c0d07a74     ............tz..
c0d07aa8:	c0d07a7c                                |z..

c0d07aac <C_nanos_icon_dashboard_colors>:
c0d07aac:	00000000 00ffffff                       ........

c0d07ab4 <C_nanos_icon_dashboard_bitmap>:
c0d07ab4:	c1fe01e0 067038ff 9e7e79d8 b9e7e79f     .....8p..y~.....
c0d07ac4:	f1c0e601 7807f83f 00000000              ....?..x....

c0d07ad0 <C_nanos_icon_dashboard>:
c0d07ad0:	0000000e 0000000e 00000001 c0d07aac     .............z..
c0d07ae0:	c0d07ab4 73726556 006e6f69 2e322e31     .z..Version.1.2.
c0d07af0:	61420035 55006b63 77206573 656c6c61     5.Back.Use walle
c0d07b00:	6f742074 65697600 63612077 6e756f63     t to.view accoun
c0d07b10:	41007374 74756f62 69755100 70612074     ts.About.Quit ap
c0d07b20:	6f430070 7269666e 6461006d 73657264     p.Confirm.addres
c0d07b30:	64410073 73657264 72740073 61736e61     s.Address.transa
c0d07b40:	6f697463 6d41006e 746e756f 65654600     ction.Amount.Fee
c0d07b50:	69530073 74206e67 6d006568 61737365     s.Sign the.messa
c0d07b60:	4d006567 61737365 68206567 00687361     ge.Message hash.
c0d07b70:	6f727245 203a2072 73656546 746f6e20     Error : Fees not
c0d07b80:	6e6f6320 74736973 00746e65 48533250      consistent.P2SH
c0d07b90:	72724500 3a20726f 6f6f5420 6e616d20     .Error : Too man
c0d07ba0:	756f2079 74757074 69420073 696f6374     y outputs.Bitcoi
c0d07bb0:	5442006e 00000043                       n.BTC...

c0d07bb8 <menu_about>:
	...
c0d07bc8:	c0d07ae4 c0d07aec 00000000 c0d07c0c     .z...z.......|..
c0d07bd8:	00000000 00000001 c0d07a98 c0d07af2     .........z...z..
c0d07be8:	00000000 0000283d 00000000 00000000     ....=(..........
	...

c0d07c0c <menu_main>:
	...
c0d07c1c:	c0d07af7 c0d07b05 00000000 c0d07bb8     .z...{.......{..
	...
c0d07c38:	c0d07b13 00000000 00000000 00000000     .{..............
c0d07c48:	c0d06059 00000000 c0d07ad0 c0d07b19     Y`.......z...{..
c0d07c58:	00000000 00001d32 00000000 00000000     ....2...........
	...

c0d07c7c <ui_display_address_nanos>:
c0d07c7c:	00000003 00800000 00000020 00000001     ........ .......
c0d07c8c:	00000000 00ffffff 00000000 00000000     ................
	...
c0d07cb4:	00030005 0007000c 00000007 00000000     ................
c0d07cc4:	00ffffff 00000000 00070000 00000000     ................
	...
c0d07cec:	00750005 0008000d 00000006 00000000     ..u.............
c0d07cfc:	00ffffff 00000000 00060000 00000000     ................
	...
c0d07d24:	00000107 0080000c 0000000c 00000000     ................
c0d07d34:	00ffffff 00000000 00008008 c0d07b22     ............"{..
	...
c0d07d5c:	00000107 0080001a 0000000c 00000000     ................
c0d07d6c:	00ffffff 00000000 00008008 c0d07b2a     ............*{..
	...
c0d07d94:	00000207 0080000c 0000000c 00000000     ................
c0d07da4:	00ffffff 00000000 0000800a c0d07b32     ............2{..
	...
c0d07dcc:	00170207 0052001a 008a000c 00000000     ......R.........
c0d07ddc:	00ffffff 00000000 001a8008 20001f33     ............3.. 
	...

c0d07e04 <ui_verify_nanos>:
c0d07e04:	00000003 00800000 00000020 00000001     ........ .......
c0d07e14:	00000000 00ffffff 00000000 00000000     ................
	...
c0d07e3c:	00030005 0007000c 00000007 00000000     ................
c0d07e4c:	00ffffff 00000000 00070000 00000000     ................
	...
c0d07e74:	00750005 0008000d 00000006 00000000     ..u.............
c0d07e84:	00ffffff 00000000 00060000 00000000     ................
	...
c0d07eac:	00000107 0080000c 0000000c 00000000     ................
c0d07ebc:	00ffffff 00000000 00008008 c0d07b22     ............"{..
	...
c0d07ee4:	00000107 0080001a 0000000c 00000000     ................
c0d07ef4:	00ffffff 00000000 00008008 c0d07b3a     ............:{..
	...
c0d07f1c:	00000207 0080000c 0000000c 00000000     ................
c0d07f2c:	00ffffff 00000000 0000800a c0d07b46     ............F{..
	...
c0d07f54:	00170207 0052001a 008a000c 00000000     ......R.........
c0d07f64:	00ffffff 00000000 001a8008 20001d07     ............... 
	...
c0d07f8c:	00000307 0080000c 0000000c 00000000     ................
c0d07f9c:	00ffffff 00000000 0000800a c0d07b32     ............2{..
	...
c0d07fc4:	00170307 0052001a 008a000c 00000000     ......R.........
c0d07fd4:	00ffffff 00000000 001a8008 20001cdc     ............... 
	...
c0d07ffc:	00000407 0080000c 0000000c 00000000     ................
c0d0800c:	00ffffff 00000000 0000800a c0d07b4d     ............M{..
	...
c0d08034:	00170407 0052001a 008a000c 00000000     ......R.........
c0d08044:	00ffffff 00000000 001a8008 20001d1b     ............... 
	...

c0d0806c <ui_verify_output_nanos>:
c0d0806c:	00000003 00800000 00000020 00000001     ........ .......
c0d0807c:	00000000 00ffffff 00000000 00000000     ................
	...
c0d080a4:	00030005 0007000c 00000007 00000000     ................
c0d080b4:	00ffffff 00000000 00070000 00000000     ................
	...
c0d080dc:	00750005 0008000d 00000006 00000000     ..u.............
c0d080ec:	00ffffff 00000000 00060000 00000000     ................
	...
c0d08114:	00000107 0080000c 0000000c 00000000     ................
c0d08124:	00ffffff 00000000 00008008 c0d07b22     ............"{..
	...
c0d0814c:	00000107 0080001a 0000000c 00000000     ................
c0d0815c:	00ffffff 00000000 00008008 20001d1b     ............... 
	...
c0d08184:	00000207 0080000c 0000000c 00000000     ................
c0d08194:	00ffffff 00000000 0000800a c0d07b46     ............F{..
	...
c0d081bc:	00170207 0052001a 008a000c 00000000     ......R.........
c0d081cc:	00ffffff 00000000 001a8008 20001d07     ............... 
	...
c0d081f4:	00000307 0080000c 0000000c 00000000     ................
c0d08204:	00ffffff 00000000 0000800a c0d07b32     ............2{..
	...
c0d0822c:	00170307 0052001a 008a000c 00000000     ......R.........
c0d0823c:	00ffffff 00000000 001a8008 20001cdc     ............... 
	...

c0d08264 <ui_finalize_nanos>:
c0d08264:	00000003 00800000 00000020 00000001     ........ .......
c0d08274:	00000000 00ffffff 00000000 00000000     ................
	...
c0d0829c:	00030005 0007000c 00000007 00000000     ................
c0d082ac:	00ffffff 00000000 00070000 00000000     ................
	...
c0d082d4:	00750005 0008000d 00000006 00000000     ..u.............
c0d082e4:	00ffffff 00000000 00060000 00000000     ................
	...
c0d0830c:	00000107 0080000c 0000000c 00000000     ................
c0d0831c:	00ffffff 00000000 00008008 c0d07b22     ............"{..
	...
c0d08344:	00000107 0080001a 0000000c 00000000     ................
c0d08354:	00ffffff 00000000 00008008 c0d07b3a     ............:{..
	...
c0d0837c:	00000207 0080000c 0000000c 00000000     ................
c0d0838c:	00ffffff 00000000 0000800a c0d07b4d     ............M{..
	...
c0d083b4:	00170207 0052001a 008a000c 00000000     ......R.........
c0d083c4:	00ffffff 00000000 001a8008 20001d1b     ............... 
	...

c0d083ec <ui_verify_message_signature_nanos>:
c0d083ec:	00000003 00800000 00000020 00000001     ........ .......
c0d083fc:	00000000 00ffffff 00000000 00000000     ................
	...
c0d08424:	00030005 0007000c 00000007 00000000     ................
c0d08434:	00ffffff 00000000 00070000 00000000     ................
	...
c0d0845c:	00750005 0008000d 00000006 00000000     ..u.............
c0d0846c:	00ffffff 00000000 00060000 00000000     ................
	...
c0d08494:	00000107 0080000c 00000020 00000000     ........ .......
c0d084a4:	00ffffff 00000000 00008008 c0d07b52     ............R{..
	...
c0d084cc:	00000107 0080001a 00000020 00000000     ........ .......
c0d084dc:	00ffffff 00000000 00008008 c0d07b5b     ............[{..
	...
c0d08504:	00000207 0080000c 00000020 00000000     ........ .......
c0d08514:	00ffffff 00000000 0000800a c0d07b63     ............c{..
	...
c0d0853c:	00170207 0052001a 008a000c 00000000     ......R.........
c0d0854c:	00ffffff 00000000 001a8008 20001cdc     ............... 
	...

c0d08574 <C_coin_config>:
c0d08574:	00050000 00000001 00000000 00000000     ................
c0d08584:	00000000 c0d07baa c0d07baa c0d07bb2     .....{...{...{..
	...
c0d0859c:	00000001 00000004                       ........

c0d085a4 <ux_menu_elements>:
c0d085a4:	00008003 00800000 00000020 00000001     ........ .......
c0d085b4:	00000000 00ffffff 00000000 00000000     ................
	...
c0d085dc:	00038105 0007000e 00000004 00000000     ................
c0d085ec:	00ffffff 00000000 000b0000 00000000     ................
	...
c0d08614:	00768205 0007000e 00000004 00000000     ..v.............
c0d08624:	00ffffff 00000000 000c0000 00000000     ................
	...
c0d0864c:	000e4107 00640003 0000000c 00000000     .A....d.........
c0d0865c:	00ffffff 00000000 0000800a 00000000     ................
	...
c0d08684:	000e4207 00640023 0000000c 00000000     .B..#.d.........
c0d08694:	00ffffff 00000000 0000800a 00000000     ................
	...
c0d086bc:	000e1005 00000009 00000000 00000000     ................
c0d086cc:	00ffffff 00000000 00000000 00000000     ................
	...
c0d086f4:	000e2007 00640013 0000000c 00000000     . ....d.........
c0d08704:	00ffffff 00000000 00008008 00000000     ................
	...
c0d0872c:	000e2107 0064000c 0000000c 00000000     .!....d.........
c0d0873c:	00ffffff 00000000 00008008 00000000     ................
	...
c0d08764:	000e2207 0064001a 0000000c 00000000     ."....d.........
c0d08774:	00ffffff 00000000 00008008 00000000     ................
	...

c0d0879c <UX_MENU_END_ENTRY>:
	...

c0d087b8 <g_pcHex>:
c0d087b8:	33323130 37363534 62613938 66656463     0123456789abcdef

c0d087c8 <g_pcHex_cap>:
c0d087c8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
c0d087d8:	4f525245 006f0052                                ERROR.

c0d087de <SW_INTERNAL>:
c0d087de:	0190006f                                         o.

c0d087e0 <SW_BUSY>:
c0d087e0:	00670190                                         ..

c0d087e2 <SW_WRONG_LENGTH>:
c0d087e2:	806a0067                                         g.

c0d087e4 <SW_BAD_KEY_HANDLE>:
c0d087e4:	3255806a                                         j.

c0d087e6 <U2F_VERSION>:
c0d087e6:	5f463255 00903256                       U2F_V2..

c0d087ee <INFO>:
c0d087ee:	00900901                                ....

c0d087f2 <SW_UNKNOWN_CLASS>:
c0d087f2:	006d006e                                         n.

c0d087f4 <SW_UNKNOWN_INSTRUCTION>:
c0d087f4:	ffff006d                                         m.

c0d087f6 <BROADCAST_CHANNEL>:
c0d087f6:	ffffffff                                ....

c0d087fa <FORBIDDEN_CHANNEL>:
c0d087fa:	00000000 21090000                                ......

c0d08800 <USBD_HID_Desc_fido>:
c0d08800:	01112109 22220121 00000000              .!..!.""....

c0d0880c <USBD_HID_Desc>:
c0d0880c:	01112109 22220100 f1d00600                       .!...."".

c0d08815 <HID_ReportDesc_fido>:
c0d08815:	09f1d006 0901a101 26001503 087500ff     ...........&..u.
c0d08825:	08814095 00150409 7500ff26 91409508     .@......&..u..@.
c0d08835:	a006c008                                         ..

c0d08837 <HID_ReportDesc>:
c0d08837:	09ffa006 0901a101 26001503 087500ff     ...........&..u.
c0d08847:	08814095 00150409 7500ff26 91409508     .@......&..u..@.
c0d08857:	0000c008 d074e100                                .....

c0d0885c <HID_Desc>:
c0d0885c:	c0d074e1 c0d074f1 c0d07501 c0d07511     .t...t...u...u..
c0d0886c:	c0d07521 c0d07531 c0d07541 00000000     !u..1u..Au......

c0d0887c <USBD_HID>:
c0d0887c:	c0d07363 c0d07395 c0d072cb 00000000     cs...s...r......
	...
c0d08894:	c0d07489 00000000 00000000 00000000     .t..............
c0d088a4:	c0d075cd c0d075cd c0d075cd c0d075dd     .u...u...u...u..

c0d088b4 <USBD_U2F>:
c0d088b4:	c0d07363 c0d07395 c0d072cb 00000000     cs...s...r......
c0d088c4:	00000000 c0d07445 c0d0745d 00000000     ....Et..]t......
	...
c0d088dc:	c0d075cd c0d075cd c0d075cd c0d075dd     .u...u...u...u..

c0d088ec <USBD_DeviceDesc>:
c0d088ec:	02000112 40000000 00012c97 02010200     .......@.,......
c0d088fc:	03040103                                         ..

c0d088fe <USBD_LangIDDesc>:
c0d088fe:	04090304                                ....

c0d08902 <USBD_MANUFACTURER_STRING>:
c0d08902:	004c030e 00640065 00650067 030e0072              ..L.e.d.g.e.r.

c0d08910 <USBD_PRODUCT_FS_STRING>:
c0d08910:	004e030e 006e0061 0020006f 030a0053              ..N.a.n.o. .S.

c0d0891e <USB_SERIAL_STRING>:
c0d0891e:	0030030a 00300030 02090031                       ..0.0.0.1.

c0d08928 <USBD_CfgDesc>:
c0d08928:	00490209 c0020102 00040932 00030200     ..I.....2.......
c0d08938:	21090200 01000111 07002222 40038205     ...!...."".....@
c0d08948:	05070100 00400302 01040901 01030200     ......@.........
c0d08958:	21090201 01210111 07002222 40038105     ...!..!."".....@
c0d08968:	05070100 00400301 00000001              ......@.....

c0d08974 <USBD_DeviceQualifierDesc>:
c0d08974:	0200060a 40000000 00000001              .......@....

c0d08980 <N_btchip_real>:
	...
